
MqttSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08013c1c  08013c1c  00023c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141b8  080141b8  000303a0  2**0
                  CONTENTS
  4 .ARM          00000008  080141b8  080141b8  000241b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141c0  080141c0  000303a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141c0  080141c0  000241c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141c4  080141c4  000241c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  20000000  080141c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001012c  200003a0  08014568  000303a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200104cc  08014568  000304cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000465c0  00000000  00000000  000303d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000081c0  00000000  00000000  00076990  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003338  00000000  00000000  0007eb50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002fd8  00000000  00000000  00081e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003881c  00000000  00000000  00084e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f3cc  00000000  00000000  000bd67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001376b2  00000000  00000000  000eca48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002240fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e590  00000000  00000000  00224178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003a0 	.word	0x200003a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013c04 	.word	0x08013c04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003a4 	.word	0x200003a4
 80001ec:	08013c04 	.word	0x08013c04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ESP_timeoutBegin>:
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength);

/*
 * @brief INTERNAL Timeout setup.
 */
static void ESP_timeoutBegin(void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	// Get entry time.
	//ESP_t0 = HAL_GetTick();
	ESP_t0 = xTaskGetTickCount();
 80005a4:	f00f fe36 	bl	8010214 <xTaskGetTickCount>
 80005a8:	4602      	mov	r2, r0
 80005aa:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <ESP_timeoutBegin+0x14>)
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003bc 	.word	0x200003bc

080005b8 <ESP_timeoutIsExpired>:
/*
 * @brief INTERNAL Timeout checker.
 * @param interval_ms Interval time in ms.
 * @return True if timeout expired.
 */
static bool ESP_timeoutIsExpired(const uint16_t interval_ms) {
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	// Check if the given interval is in the past.
	//return (interval_ms < (HAL_GetTick() - ESP_t0));
	return (interval_ms < (xTaskGetTickCount() - ESP_t0));
 80005c2:	88fc      	ldrh	r4, [r7, #6]
 80005c4:	f00f fe26 	bl	8010214 <xTaskGetTickCount>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <ESP_timeoutIsExpired+0x2c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	429c      	cmp	r4, r3
 80005d2:	bf34      	ite	cc
 80005d4:	2301      	movcc	r3, #1
 80005d6:	2300      	movcs	r3, #0
 80005d8:	b2db      	uxtb	r3, r3

}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200003bc 	.word	0x200003bc

080005e8 <ESP_Delay>:
/*
 * @brief Creates non-blocking delay.
 * @param delay_ms Delay time in ms.
 * @return SUCCESS, INPROGRESS.
 */
ESP8266_StatusTypeDef ESP_Delay(const uint16_t delay_ms){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	// Function entry.
	if(!ESP82_inProgress){
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <ESP_Delay+0x58>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <ESP_Delay+0x1c>
		// Start timeout.
		ESP_timeoutBegin();
 8000600:	f7ff ffce 	bl	80005a0 <ESP_timeoutBegin>
	}

	ESP82_inProgress = !ESP_timeoutIsExpired(delay_ms);
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffd6 	bl	80005b8 <ESP_timeoutIsExpired>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <ESP_Delay+0x58>)
 8000626:	701a      	strb	r2, [r3, #0]

	if(ESP82_inProgress)
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <ESP_Delay+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <ESP_Delay+0x4c>
		return ESP8266_BUSY;
 8000630:	2302      	movs	r3, #2
 8000632:	e000      	b.n	8000636 <ESP_Delay+0x4e>
	else
		return ESP8266_OK;
 8000634:	2300      	movs	r3, #0

}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200003c0 	.word	0x200003c0

08000644 <ESP_ConnectWifi>:
 * @param resetToDefault If true, reset the module to default settings before connecting.
 * @param ssid AP name.
 * @param pass AP password.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_ConnectWifi(const bool resetToDefault, const char * ssid, const char * pass) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	73fb      	strb	r3, [r7, #15]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 8000652:	4b49      	ldr	r3, [pc, #292]	; (8000778 <ESP_ConnectWifi+0x134>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <ESP_ConnectWifi+0x1c>
 800065a:	4b48      	ldr	r3, [pc, #288]	; (800077c <ESP_ConnectWifi+0x138>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e000      	b.n	8000662 <ESP_ConnectWifi+0x1e>
 8000660:	2300      	movs	r3, #0
 8000662:	4a46      	ldr	r2, [pc, #280]	; (800077c <ESP_ConnectWifi+0x138>)
 8000664:	7013      	strb	r3, [r2, #0]
 8000666:	4b45      	ldr	r3, [pc, #276]	; (800077c <ESP_ConnectWifi+0x138>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d87c      	bhi.n	8000768 <ESP_ConnectWifi+0x124>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <ESP_ConnectWifi+0x30>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	0800068d 	.word	0x0800068d
 8000678:	080006ab 	.word	0x080006ab
 800067c:	080006d7 	.word	0x080006d7
 8000680:	08000701 	.word	0x08000701
 8000684:	08000727 	.word	0x08000727
 8000688:	08000753 	.word	0x08000753
	case ESP82_State0:
			// Wait for startup phase to finish.
			if(ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART))) {
 800068c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000690:	f7ff ffaa 	bl	80005e8 <ESP_Delay>
 8000694:	4603      	mov	r3, r0
 8000696:	75fb      	strb	r3, [r7, #23]
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <ESP_ConnectWifi+0x62>
				// To the next state.
				internalState = ESP82_State1;
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <ESP_ConnectWifi+0x138>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	e001      	b.n	80006aa <ESP_ConnectWifi+0x66>
			} else {
				// INPROGRESS or SUCCESS if no reset is requested.
				return result;
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	e061      	b.n	800076e <ESP_ConnectWifi+0x12a>
			}
	//nobreak;
	case ESP82_State1:
		// AT+RESTORE (if requested).
		if(!resetToDefault || (ESP8266_OK == (result = runAtCmd((uint8_t*)"AT\r\n", 4, (uint8_t*) AT_OK_STRING)))) {
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d109      	bne.n	80006ca <ESP_ConnectWifi+0x86>
 80006b6:	4a32      	ldr	r2, [pc, #200]	; (8000780 <ESP_ConnectWifi+0x13c>)
 80006b8:	2104      	movs	r1, #4
 80006ba:	4832      	ldr	r0, [pc, #200]	; (8000784 <ESP_ConnectWifi+0x140>)
 80006bc:	f000 f946 	bl	800094c <runAtCmd>
 80006c0:	4603      	mov	r3, r0
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d103      	bne.n	80006d2 <ESP_ConnectWifi+0x8e>
			// To the next state.
			internalState = ESP82_State2;
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <ESP_ConnectWifi+0x138>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e001      	b.n	80006d6 <ESP_ConnectWifi+0x92>
		} else {
			// Exit on ERROR or INPROGRESS.
			return result;
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	e04b      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State2:
		// If resetted, wait for restart to finish.
		if(!resetToDefault || (ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART)))){
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	f083 0301 	eor.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d108      	bne.n	80006f4 <ESP_ConnectWifi+0xb0>
 80006e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e6:	f7ff ff7f 	bl	80005e8 <ESP_Delay>
 80006ea:	4603      	mov	r3, r0
 80006ec:	75fb      	strb	r3, [r7, #23]
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <ESP_ConnectWifi+0xb8>
				// To the next state.
				internalState = ESP82_State3;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <ESP_ConnectWifi+0x138>)
 80006f6:	2203      	movs	r2, #3
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e001      	b.n	8000700 <ESP_ConnectWifi+0xbc>
		}else{
			// INPROGRESS or SUCCESS if no reset is requested.
			return result;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	e036      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State3:
		// AT+CWMODE (client mode)
		if((ESP8266_OK == (result = runAtCmd((uint8_t*)"AT+CWMODE=1\r\n", 13, (uint8_t*) AT_OK_STRING))) && (ssid != NULL)){
 8000700:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <ESP_ConnectWifi+0x13c>)
 8000702:	210d      	movs	r1, #13
 8000704:	4820      	ldr	r0, [pc, #128]	; (8000788 <ESP_ConnectWifi+0x144>)
 8000706:	f000 f921 	bl	800094c <runAtCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	75fb      	strb	r3, [r7, #23]
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d106      	bne.n	8000722 <ESP_ConnectWifi+0xde>
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <ESP_ConnectWifi+0xde>
			// To the next state.
			internalState = ESP82_State4;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <ESP_ConnectWifi+0x138>)
 800071c:	2204      	movs	r2, #4
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e001      	b.n	8000726 <ESP_ConnectWifi+0xe2>
		} else{
			// Exit on ERROR, INPROGRESS or SUCCESS (if no SSID is provided).
			return result;
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	e023      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		// nobreak;
	case ESP82_State4:
		// Size check.
		if ((strlen(ssid) + strlen(pass)) > (ESP_BUFFERSIZE_CMD - 17)) {
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f7ff fd62 	bl	80001f0 <strlen>
 800072c:	4604      	mov	r4, r0
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff fd5e 	bl	80001f0 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	4423      	add	r3, r4
 8000738:	2b6f      	cmp	r3, #111	; 0x6f
 800073a:	d901      	bls.n	8000740 <ESP_ConnectWifi+0xfc>
			return false;
 800073c:	2300      	movs	r3, #0
 800073e:	e016      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		// AT+CWJAP prepare.
		sprintf((char *)ESP82_cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pass);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4911      	ldr	r1, [pc, #68]	; (800078c <ESP_ConnectWifi+0x148>)
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <ESP_ConnectWifi+0x14c>)
 8000748:	f012 fc28 	bl	8012f9c <siprintf>

		// To the next state.
		internalState = ESP82_State5;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <ESP_ConnectWifi+0x138>)
 800074e:	2205      	movs	r2, #5
 8000750:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State5:
		// AT+CWJAP
		return runAtCmd(ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <ESP_ConnectWifi+0x14c>)
 8000754:	f7ff fd4c 	bl	80001f0 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <ESP_ConnectWifi+0x13c>)
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <ESP_ConnectWifi+0x14c>)
 8000760:	f000 f8f4 	bl	800094c <runAtCmd>
 8000764:	4603      	mov	r3, r0
 8000766:	e002      	b.n	800076e <ESP_ConnectWifi+0x12a>

		//nobreak;
	default:
		// To the first state.
		internalState = ESP82_State0;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ESP_ConnectWifi+0x138>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	}
}
 800076e:	4618      	mov	r0, r3
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	200003c0 	.word	0x200003c0
 800077c:	20000444 	.word	0x20000444
 8000780:	08013c34 	.word	0x08013c34
 8000784:	08013c48 	.word	0x08013c48
 8000788:	08013c50 	.word	0x08013c50
 800078c:	08013c60 	.word	0x08013c60
 8000790:	200003c4 	.word	0x200003c4

08000794 <ESP_IsConnectedWifi>:

/*
 * @brief Connection test.
 * @return SUCCESS, INPROGRESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_IsConnectedWifi(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	return runAtCmd((uint8_t*)"AT+CIPSTATUS\r\n", 14, (uint8_t*) AT_OK_STRING);
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <ESP_IsConnectedWifi+0x14>)
 800079a:	210e      	movs	r1, #14
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <ESP_IsConnectedWifi+0x18>)
 800079e:	f000 f8d5 	bl	800094c <runAtCmd>
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	08013c34 	.word	0x08013c34
 80007ac:	08013c78 	.word	0x08013c78

080007b0 <ESP_StartTCP>:
 * @param port Remote port.
 * @param keepalive Keep-alive time between 0 to 7200 seconds.
 * @param ssl Starts SSL connection.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_StartTCP(const char * host, const uint16_t port, const uint16_t keepalive, const bool ssl) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4603      	mov	r3, r0
 80007c0:	817b      	strh	r3, [r7, #10]
 80007c2:	460b      	mov	r3, r1
 80007c4:	813b      	strh	r3, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	71fb      	strb	r3, [r7, #7]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <ESP_StartTCP+0xc8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <ESP_StartTCP+0x28>
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <ESP_StartTCP+0xcc>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	e000      	b.n	80007da <ESP_StartTCP+0x2a>
 80007d8:	2300      	movs	r3, #0
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <ESP_StartTCP+0xcc>)
 80007dc:	7013      	strb	r3, [r2, #0]
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <ESP_StartTCP+0xcc>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d021      	beq.n	800082a <ESP_StartTCP+0x7a>
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d037      	beq.n	800085a <ESP_StartTCP+0xaa>
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d140      	bne.n	8000870 <ESP_StartTCP+0xc0>
	case ESP82_State0:
		// Size check.
		if(strlen(host) > (ESP_BUFFERSIZE_CMD - 34)){
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f7ff fcfe 	bl	80001f0 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b5e      	cmp	r3, #94	; 0x5e
 80007f8:	d901      	bls.n	80007fe <ESP_StartTCP+0x4e>
			return false;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e038      	b.n	8000870 <ESP_StartTCP+0xc0>
		}

		// Keepalive check.
		if(keepalive > 7200){
 80007fe:	893b      	ldrh	r3, [r7, #8]
 8000800:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000804:	d901      	bls.n	800080a <ESP_StartTCP+0x5a>
			return false;
 8000806:	2300      	movs	r3, #0
 8000808:	e032      	b.n	8000870 <ESP_StartTCP+0xc0>
		}

		// prepare AT+CIPSTART
		//sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i,%i\r\n", (ssl ? "SSL" : "TCP"), host, port, keepalive);
		sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i\r\n", (ssl ? "SSL" : "TCP"), host, port);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <ESP_StartTCP+0x64>
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <ESP_StartTCP+0xd0>)
 8000812:	e000      	b.n	8000816 <ESP_StartTCP+0x66>
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <ESP_StartTCP+0xd4>)
 8000816:	897b      	ldrh	r3, [r7, #10]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	491a      	ldr	r1, [pc, #104]	; (8000888 <ESP_StartTCP+0xd8>)
 800081e:	481b      	ldr	r0, [pc, #108]	; (800088c <ESP_StartTCP+0xdc>)
 8000820:	f012 fbbc 	bl	8012f9c <siprintf>


		// To the next state.
		internalState = ESP82_State1;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <ESP_StartTCP+0xcc>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State1:
		// AT+CIPSSLSIZE (or skip)
		if(!ssl || (ESP8266_OK == (result = runAtCmd((uint8_t*)ESP_SSLSIZE_str, 20, (uint8_t*) AT_OK_STRING)))){
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10b      	bne.n	800084e <ESP_StartTCP+0x9e>
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <ESP_StartTCP+0xe0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <ESP_StartTCP+0xe4>)
 800083c:	2114      	movs	r1, #20
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f884 	bl	800094c <runAtCmd>
 8000844:	4603      	mov	r3, r0
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <ESP_StartTCP+0xa6>
			// To the next state.
			internalState = ESP82_State2;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <ESP_StartTCP+0xcc>)
 8000850:	2202      	movs	r2, #2
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e001      	b.n	800085a <ESP_StartTCP+0xaa>
		}else{
			// Exit on ERROR or INPROGRESS.
			return result;
 8000856:	7dfb      	ldrb	r3, [r7, #23]
 8000858:	e00a      	b.n	8000870 <ESP_StartTCP+0xc0>
		}
		//nobreak;
	case ESP82_State2:
		// AT+CIPSTART
		return runAtCmd((uint8_t*)ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <ESP_StartTCP+0xdc>)
 800085c:	f7ff fcc8 	bl	80001f0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <ESP_StartTCP+0xe4>)
 8000864:	4619      	mov	r1, r3
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <ESP_StartTCP+0xdc>)
 8000868:	f000 f870 	bl	800094c <runAtCmd>
 800086c:	4603      	mov	r3, r0
 800086e:	e7ff      	b.n	8000870 <ESP_StartTCP+0xc0>
	}
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200003c0 	.word	0x200003c0
 800087c:	20000445 	.word	0x20000445
 8000880:	08013c88 	.word	0x08013c88
 8000884:	08013c8c 	.word	0x08013c8c
 8000888:	08013c90 	.word	0x08013c90
 800088c:	200003c4 	.word	0x200003c4
 8000890:	20000000 	.word	0x20000000
 8000894:	08013c34 	.word	0x08013c34

08000898 <ESP_SendData>:
 * @brief  Send data over the wifi connection.
 * @param  Buffer: the buffer to send
 * @param  Length: the Buffer's data size.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
ESP8266_StatusTypeDef ESP_SendData(uint8_t* Buffer, uint32_t Length) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Ret = ESP8266_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73fb      	strb	r3, [r7, #15]

	if (Buffer != NULL) {
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d02f      	beq.n	800090c <ESP_SendData+0x74>
		//uint32_t tickStart;
		TickType_t tickStart;

		/* Construct the CIPSEND command */
		memset(ESP82_cmdBuffer, '\0', ESP_BUFFERSIZE_CMD);
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	2100      	movs	r1, #0
 80008b0:	4819      	ldr	r0, [pc, #100]	; (8000918 <ESP_SendData+0x80>)
 80008b2:	f011 ff6e 	bl	8012792 <memset>
		sprintf((char *) ESP82_cmdBuffer, "AT+CIPSEND=%lu%c%c", Length  , '\r', '\n');
 80008b6:	230a      	movs	r3, #10
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	230d      	movs	r3, #13
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4917      	ldr	r1, [pc, #92]	; (800091c <ESP_SendData+0x84>)
 80008c0:	4815      	ldr	r0, [pc, #84]	; (8000918 <ESP_SendData+0x80>)
 80008c2:	f012 fb6b 	bl	8012f9c <siprintf>

		/* The CIPSEND command doesn't have a return command
		 until the data is actually sent. Thus we check here whether
		 we got the '>' prompt or not. */
		Ret = runAtCmd(ESP82_cmdBuffer, strlen((char *) ESP82_cmdBuffer),
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <ESP_SendData+0x80>)
 80008c8:	f7ff fc92 	bl	80001f0 <strlen>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <ESP_SendData+0x88>)
 80008d0:	4619      	mov	r1, r3
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <ESP_SendData+0x80>)
 80008d4:	f000 f83a 	bl	800094c <runAtCmd>
 80008d8:	4603      	mov	r3, r0
 80008da:	73fb      	strb	r3, [r7, #15]
				(uint8_t*) AT_SEND_PROMPT_STRING);

		/* Return Error */
		if (Ret != ESP8266_OK) {
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <ESP_SendData+0x4e>
			return ESP8266_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e013      	b.n	800090e <ESP_SendData+0x76>
		}

		/* Wait before sending data. */
		//tickStart = HAL_GetTick();
		tickStart = xTaskGetTickCount();
 80008e6:	f00f fc95 	bl	8010214 <xTaskGetTickCount>
 80008ea:	60b8      	str	r0, [r7, #8]
		//while (HAL_GetTick() - tickStart < 500)
		while (xTaskGetTickCount() - tickStart < 1000)
 80008ec:	bf00      	nop
 80008ee:	f00f fc91 	bl	8010214 <xTaskGetTickCount>
 80008f2:	4602      	mov	r2, r0
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008fc:	d3f7      	bcc.n	80008ee <ESP_SendData+0x56>
		{
		}

		/* Send the data */
		Ret = runAtCmd(Buffer, Length, (uint8_t*) AT_SEND_OK_STRING);//AT_IPD_STRING);//
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <ESP_SendData+0x8c>)
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f822 	bl	800094c <runAtCmd>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
	}

	return Ret;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200003c4 	.word	0x200003c4
 800091c:	08013cac 	.word	0x08013cac
 8000920:	08013cc0 	.word	0x08013cc0
 8000924:	08013cc8 	.word	0x08013cc8

08000928 <ESP_ReceiveData>:
 * @param Length data buffer length.
 * @param RetLength data length received.
 * @return SUCCESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_ReceiveData(uint8_t* Buffer, uint32_t Length,
		uint32_t* RetLength) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
	ESP8266_StatusTypeDef Ret;

	/* Receive the data from the host */
	Ret = getData(Buffer, Length, RetLength);
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f000 f8af 	bl	8000a9c <getData>
 800093e:	4603      	mov	r3, r0
 8000940:	75fb      	strb	r3, [r7, #23]

	return Ret;
 8000942:	7dfb      	ldrb	r3, [r7, #23]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <runAtCmd>:
 * @param  Length the maximum data size to receive.
 * @param  Token the expected output if command runs successfully
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef runAtCmd(uint8_t* cmd, uint32_t Length,
		const uint8_t* Token) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
	uint32_t idx = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
	uint8_t RxChar;
	uint8_t status_io = 0;//0 is ok
 800095c:	2300      	movs	r3, #0
 800095e:	74fb      	strb	r3, [r7, #19]

	/* Reset the Rx buffer to make sure no previous data exist */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8000960:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000964:	2100      	movs	r1, #0
 8000966:	4823      	ldr	r0, [pc, #140]	; (80009f4 <runAtCmd+0xa8>)
 8000968:	f011 ff13 	bl	8012792 <memset>

	/* Send the command */
	if (HAL_UART_F_Send((char*)cmd, Length) < 0) {
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f003 f848 	bl	8003a08 <HAL_UART_F_Send>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	da01      	bge.n	8000982 <runAtCmd+0x36>
		return ESP8266_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e033      	b.n	80009ea <runAtCmd+0x9e>
		printf((char*) cmd, Length);*/

	/* Wait for reception */
	while (1) {
		/* Wait to recieve data */
		if (ESP_Receive(&RxChar, 1) != 0) {
 8000982:	f107 0312 	add.w	r3, r7, #18
 8000986:	2101      	movs	r1, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f837 	bl	80009fc <ESP_Receive>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00b      	beq.n	80009ac <runAtCmd+0x60>
			RxBuffer[idx++] = RxChar;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	617a      	str	r2, [r7, #20]
 800099a:	7cb9      	ldrb	r1, [r7, #18]
 800099c:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <runAtCmd+0xa8>)
 800099e:	54d1      	strb	r1, [r2, r3]
			status_io = 1;
			break;
		}

		/* Check that max buffer size has not been reached */
		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d106      	bne.n	80009b8 <runAtCmd+0x6c>
 80009aa:	e002      	b.n	80009b2 <runAtCmd+0x66>
			status_io = 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	74fb      	strb	r3, [r7, #19]
			break;
 80009b0:	e015      	b.n	80009de <runAtCmd+0x92>
			status_io = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	74fb      	strb	r3, [r7, #19]
			break;
 80009b6:	e012      	b.n	80009de <runAtCmd+0x92>
		}

		/* Extract the Token */
		if (strstr((char *) RxBuffer, (char *) Token) != NULL) {
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <runAtCmd+0xa8>)
 80009bc:	f012 fb23 	bl	8013006 <strstr>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <runAtCmd+0x80>
			status_io = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	74fb      	strb	r3, [r7, #19]
			break;
 80009ca:	e008      	b.n	80009de <runAtCmd+0x92>
			//return ESP8266_OK;
		}

		/* Check if the message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 80009cc:	490a      	ldr	r1, [pc, #40]	; (80009f8 <runAtCmd+0xac>)
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <runAtCmd+0xa8>)
 80009d0:	f012 fb19 	bl	8013006 <strstr>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0d3      	beq.n	8000982 <runAtCmd+0x36>
			status_io = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	74fb      	strb	r3, [r7, #19]
			break;
			//return ESP8266_ERROR;
		}
	}

	if(status_io == 1)
 80009de:	7cfb      	ldrb	r3, [r7, #19]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d101      	bne.n	80009e8 <runAtCmd+0x9c>
		return ESP8266_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <runAtCmd+0x9e>
	return ESP8266_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000d760 	.word	0x2000d760
 80009f8:	08013cd4 	.word	0x08013cd4

080009fc <ESP_Receive>:


static int32_t ESP_Receive(uint8_t *Buffer, uint32_t Length) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
	uint32_t ReadData = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
	/* Loop until data received */
	while (Length--) {
 8000a0a:	e03a      	b.n	8000a82 <ESP_Receive+0x86>
		//uint32_t tickStart = HAL_GetTick();
		TickType_t tickStart = xTaskGetTickCount();
 8000a0c:	f00f fc02 	bl	8010214 <xTaskGetTickCount>
 8000a10:	60b8      	str	r0, [r7, #8]
		do {
			if (WiFiRxBuffer.head != WiFiRxBuffer.tail) {
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <ESP_Receive+0x9c>)
 8000a14:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	; 0x802
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <ESP_Receive+0x9c>)
 8000a1a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d026      	beq.n	8000a70 <ESP_Receive+0x74>
				/* serial data available, so return data to user */
#if DEBUG == 1
				//taskENTER_CRITICAL();
				printf((char * ) &WiFiRxBuffer.data[WiFiRxBuffer.head],1);
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <ESP_Receive+0x9c>)
 8000a24:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <ESP_Receive+0x9c>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f012 fa27 	bl	8012e84 <iprintf>
				//taskEXIT_CRITICAL();
#endif

				*Buffer++ = WiFiRxBuffer.data[WiFiRxBuffer.head++];
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <ESP_Receive+0x9c>)
 8000a38:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	b291      	uxth	r1, r2
 8000a40:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <ESP_Receive+0x9c>)
 8000a42:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
 8000a46:	4619      	mov	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <ESP_Receive+0x9c>)
 8000a50:	5c52      	ldrb	r2, [r2, r1]
 8000a52:	701a      	strb	r2, [r3, #0]

				ReadData++;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]

				/* check for ring buffer wrap */
				if (WiFiRxBuffer.head >= ESP_BUFFERSIZE_CIRCULAR) {
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <ESP_Receive+0x9c>)
 8000a5c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a64:	d30d      	bcc.n	8000a82 <ESP_Receive+0x86>
					/* Ring buffer wrap, so reset head pointer to start of buffer */
					WiFiRxBuffer.head = 0;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <ESP_Receive+0x9c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
				}
				break;
 8000a6e:	e008      	b.n	8000a82 <ESP_Receive+0x86>
			}
		} while ((xTaskGetTickCount() - tickStart) < ESP_DEFAULT_TIME_OUT);
 8000a70:	f00f fbd0 	bl	8010214 <xTaskGetTickCount>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d9c7      	bls.n	8000a12 <ESP_Receive+0x16>
	while (Length--) {
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	1e5a      	subs	r2, r3, #1
 8000a86:	603a      	str	r2, [r7, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1bf      	bne.n	8000a0c <ESP_Receive+0x10>
		//} while ((HAL_GetTick() - tickStart) < ESP_DEFAULT_TIME_OUT);
	}
	return ReadData;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000dd3c 	.word	0x2000dd3c

08000a9c <getData>:
 * @param  Length the maximum data size to receive.
 * @param  RetLength Length of received data
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length,
		uint32_t* RetLength) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	uint8_t RxChar;
	uint32_t idx = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
	uint8_t LengthString[4];
	uint32_t LengthValue;
	uint8_t i = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	75fb      	strb	r3, [r7, #23]
	ESP8266_Boolean newChunk = ESP8266_FALSE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	75bb      	strb	r3, [r7, #22]

	/* Reset the reception data length */
	*RetLength = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]

	/* Reset the reception buffer */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8000aba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4845      	ldr	r0, [pc, #276]	; (8000bd8 <getData+0x13c>)
 8000ac2:	f011 fe66 	bl	8012792 <memset>
	 - Receive data until getting the "+IPD," token, a new chunk is marked.
	 - Extract the 'chunk_size' then read the next 'chunk_size' bytes as actual data
	 - Mark end of the chunk.
	 - Repeat steps above until no more data is available. */
	while (1) {
		if (ESP_Receive(&RxChar, 1) != 0) {
 8000ac6:	f107 0315 	add.w	r3, r7, #21
 8000aca:	2101      	movs	r1, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff95 	bl	80009fc <ESP_Receive>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d028      	beq.n	8000b2a <getData+0x8e>
			/* The data chunk starts with +IPD,<chunk length>: */

			if (newChunk == ESP8266_TRUE) {
 8000ad8:	7dbb      	ldrb	r3, [r7, #22]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d119      	bne.n	8000b12 <getData+0x76>
				/* Read the next lendthValue bytes as part from the actual data. */
				if (LengthValue--) {
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	61ba      	str	r2, [r7, #24]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00a      	beq.n	8000afe <getData+0x62>
					*Buffer++ = RxChar;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60fa      	str	r2, [r7, #12]
 8000aee:	7d7a      	ldrb	r2, [r7, #21]
 8000af0:	701a      	strb	r2, [r3, #0]
					(*RetLength)++;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e009      	b.n	8000b12 <getData+0x76>
				} else {
					/* Clear the buffer as the new chunk has ended. */
					newChunk = ESP8266_FALSE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	75bb      	strb	r3, [r7, #22]
					memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8000b02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b06:	2100      	movs	r1, #0
 8000b08:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <getData+0x13c>)
 8000b0a:	f011 fe42 	bl	8012792 <memset>
					idx = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
				}
			}
			RxBuffer[idx++] = RxChar;
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	61fa      	str	r2, [r7, #28]
 8000b18:	7d79      	ldrb	r1, [r7, #21]
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <getData+0x13c>)
 8000b1c:	54d1      	strb	r1, [r2, r3]
			} else {
				break;
			}
		}

		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d110      	bne.n	8000b4a <getData+0xae>
 8000b28:	e007      	b.n	8000b3a <getData+0x9e>
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 8000b2a:	7dbb      	ldrb	r3, [r7, #22]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d14e      	bne.n	8000bce <getData+0x132>
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d04b      	beq.n	8000bce <getData+0x132>
				return ESP8266_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e04a      	b.n	8000bd0 <getData+0x134>
			/* In case of Buffer overflow, return error */
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 8000b3a:	7dbb      	ldrb	r3, [r7, #22]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d146      	bne.n	8000bce <getData+0x132>
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d043      	beq.n	8000bce <getData+0x132>
				return ESP8266_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e042      	b.n	8000bd0 <getData+0x134>
				break;
			}
		}

		/* When a new chunk is met, extact its size */
		if ((strstr((char *) RxBuffer, AT_IPD_STRING) != NULL)
 8000b4a:	4924      	ldr	r1, [pc, #144]	; (8000bdc <getData+0x140>)
 8000b4c:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <getData+0x13c>)
 8000b4e:	f012 fa5a 	bl	8013006 <strstr>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d026      	beq.n	8000ba6 <getData+0x10a>
				&& (newChunk == ESP8266_FALSE)) {
 8000b58:	7dbb      	ldrb	r3, [r7, #22]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d123      	bne.n	8000ba6 <getData+0x10a>
			i = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	75fb      	strb	r3, [r7, #23]
			memset(LengthString, '\0', 4);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	2204      	movs	r2, #4
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f011 fe11 	bl	8012792 <memset>
			do {
				ESP_Receive(&RxChar, 1);
 8000b70:	f107 0315 	add.w	r3, r7, #21
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff40 	bl	80009fc <ESP_Receive>
				LengthString[i++] = RxChar;
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	75fa      	strb	r2, [r7, #23]
 8000b82:	7d7a      	ldrb	r2, [r7, #21]
 8000b84:	f107 0120 	add.w	r1, r7, #32
 8000b88:	440b      	add	r3, r1
 8000b8a:	f803 2c10 	strb.w	r2, [r3, #-16]
			} while (RxChar != ':');
 8000b8e:	7d7b      	ldrb	r3, [r7, #21]
 8000b90:	2b3a      	cmp	r3, #58	; 0x3a
 8000b92:	d1ed      	bne.n	8000b70 <getData+0xd4>

			/* Get the buffer length */
			LengthValue = atoi((char *) LengthString);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f011 fdaf 	bl	80126fc <atoi>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	61bb      	str	r3, [r7, #24]

			newChunk = ESP8266_TRUE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	75bb      	strb	r3, [r7, #22]
		}

		/* Check if message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <getData+0x144>)
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <getData+0x13c>)
 8000baa:	f012 fa2c 	bl	8013006 <strstr>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <getData+0x11c>
			return ESP8266_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e00b      	b.n	8000bd0 <getData+0x134>
		}

		/* Check for the chunk end */
		if (strstr((char *) RxBuffer, AT_IPD_OK_STRING) != NULL) {
 8000bb8:	490a      	ldr	r1, [pc, #40]	; (8000be4 <getData+0x148>)
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <getData+0x13c>)
 8000bbc:	f012 fa23 	bl	8013006 <strstr>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f43f af7f 	beq.w	8000ac6 <getData+0x2a>
			newChunk = ESP8266_FALSE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75bb      	strb	r3, [r7, #22]
		if (ESP_Receive(&RxChar, 1) != 0) {
 8000bcc:	e77b      	b.n	8000ac6 <getData+0x2a>
		}
	}

	return ESP8266_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000d760 	.word	0x2000d760
 8000bdc:	08013cdc 	.word	0x08013cdc
 8000be0:	08013cd4 	.word	0x08013cd4
 8000be4:	08013ce4 	.word	0x08013ce4

08000be8 <MQTTSerialize_connectLength>:
int MQTTSerialize_connectLength(MQTTPacket_connectData* options, MQTTProperties* connectProperties,
  MQTTProperties* willProperties)
#else
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
#endif
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7a1b      	ldrb	r3, [r3, #8]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d102      	bne.n	8000c02 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e005      	b.n	8000c0e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion >= 4)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7a1b      	ldrb	r3, [r3, #8]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d901      	bls.n	8000c0e <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	330c      	adds	r3, #12
 8000c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c16:	f000 fa29 	bl	800106c <MQTTstrlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7edb      	ldrb	r3, [r3, #27]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d013      	beq.n	8000c54 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3324      	adds	r3, #36	; 0x24
 8000c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c34:	f000 fa1a 	bl	800106c <MQTTstrlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	1c9c      	adds	r4, r3, #2
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3330      	adds	r3, #48	; 0x30
 8000c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c44:	f000 fa12 	bl	800106c <MQTTstrlen>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4423      	add	r3, r4
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d103      	bne.n	8000c64 <MQTTSerialize_connectLength+0x7c>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00a      	beq.n	8000c7a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3340      	adds	r3, #64	; 0x40
 8000c68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c6c:	f000 f9fe 	bl	800106c <MQTTstrlen>
 8000c70:	4603      	mov	r3, r0
 8000c72:	3302      	adds	r3, #2
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <MQTTSerialize_connectLength+0xa2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00a      	beq.n	8000ca0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	334c      	adds	r3, #76	; 0x4c
 8000c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c92:	f000 f9eb 	bl	800106c <MQTTstrlen>
 8000c96:	4603      	mov	r3, r0
 8000c98:	3302      	adds	r3, #2
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
		  len += MQTTProperties_len(willProperties);
	}
#endif

	FUNC_EXIT_RC(len);
	return len;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}
	...

08000cac <MQTTSerialize_connect>:
int MQTTV5Serialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options,
  MQTTProperties* connectProperties, MQTTProperties* willProperties)
#else
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
#endif
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
	FUNC_ENTRY;
	#if defined(MQTTV5)
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options,
		         connectProperties, willProperties)) > buflen)
	#else
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff8a 	bl	8000be8 <MQTTSerialize_connectLength>
 8000cd4:	6238      	str	r0, [r7, #32]
 8000cd6:	6a38      	ldr	r0, [r7, #32]
 8000cd8:	f000 f92e 	bl	8000f38 <MQTTPacket_len>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	da03      	bge.n	8000cec <MQTTSerialize_connect+0x40>
	#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000ce4:	f06f 0301 	mvn.w	r3, #1
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000cea:	e0ca      	b.n	8000e82 <MQTTSerialize_connect+0x1d6>
	}

	header.byte = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000cf0:	7e3b      	ldrb	r3, [r7, #24]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f362 1307 	bfi	r3, r2, #4, #4
 8000cf8:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000cfa:	7e3a      	ldrb	r2, [r7, #24]
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f927 	bl	8000f56 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	6a39      	ldr	r1, [r7, #32]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f8c1 	bl	8000e94 <MQTTPacket_encode>
 8000d12:	4602      	mov	r2, r0
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	4413      	add	r3, r2
 8000d18:	61fb      	str	r3, [r7, #28]

  if (options->MQTTVersion == 5 || options->MQTTVersion == 4)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7a1b      	ldrb	r3, [r3, #8]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d003      	beq.n	8000d2a <MQTTSerialize_connect+0x7e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7a1b      	ldrb	r3, [r3, #8]
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d106      	bne.n	8000d38 <MQTTSerialize_connect+0x8c>
		writeCString(&ptr, "MQTT");
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4957      	ldr	r1, [pc, #348]	; (8000e8c <MQTTSerialize_connect+0x1e0>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f94e 	bl	8000fd2 <writeCString>
 8000d36:	e00a      	b.n	8000d4e <MQTTSerialize_connect+0xa2>
	else if (options->MQTTVersion == 3)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7a1b      	ldrb	r3, [r3, #8]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	f040 809f 	bne.w	8000e80 <MQTTSerialize_connect+0x1d4>
		writeCString(&ptr, "MQIsdp");
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4952      	ldr	r1, [pc, #328]	; (8000e90 <MQTTSerialize_connect+0x1e4>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f942 	bl	8000fd2 <writeCString>
	else
	  goto exit;
	writeChar(&ptr, (char)options->MQTTVersion);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7a1a      	ldrb	r2, [r3, #8]
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 f8fc 	bl	8000f56 <writeChar>

	flags.all = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7e9b      	ldrb	r3, [r3, #26]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	7d3b      	ldrb	r3, [r7, #20]
 8000d6e:	f362 0341 	bfi	r3, r2, #1, #1
 8000d72:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7edb      	ldrb	r3, [r3, #27]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bf14      	ite	ne
 8000d7c:	2301      	movne	r3, #1
 8000d7e:	2300      	moveq	r3, #0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	7d3b      	ldrb	r3, [r7, #20]
 8000d84:	f362 0382 	bfi	r3, r2, #2, #1
 8000d88:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000d8a:	7d3b      	ldrb	r3, [r7, #20]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d013      	beq.n	8000dbe <MQTTSerialize_connect+0x112>
	{
		flags.bits.willQoS = options->will.qos;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	7d3b      	ldrb	r3, [r7, #20]
 8000da4:	f362 03c4 	bfi	r3, r2, #3, #2
 8000da8:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	7d3b      	ldrb	r3, [r7, #20]
 8000db8:	f362 1345 	bfi	r3, r2, #5, #1
 8000dbc:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d103      	bne.n	8000dce <MQTTSerialize_connect+0x122>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <MQTTSerialize_connect+0x12a>
		flags.bits.username = 1;
 8000dce:	7d3b      	ldrb	r3, [r7, #20]
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <MQTTSerialize_connect+0x13a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <MQTTSerialize_connect+0x142>
		flags.bits.password = 1;
 8000de6:	7d3b      	ldrb	r3, [r7, #20]
 8000de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dec:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000dee:	7d3a      	ldrb	r2, [r7, #20]
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f8ad 	bl	8000f56 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	8b1b      	ldrh	r3, [r3, #24]
 8000e00:	461a      	mov	r2, r3
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f8b9 	bl	8000f80 <writeInt>
#if defined(MQTTV5)
	if (options->MQTTVersion == 5)
	  MQTTProperties_write(&ptr, connectProperties);
#endif
	writeMQTTString(&ptr, options->clientID);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f107 001c 	add.w	r0, r7, #28
 8000e14:	330c      	adds	r3, #12
 8000e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e18:	f000 f8fa 	bl	8001010 <writeMQTTString>
	if (options->willFlag)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7edb      	ldrb	r3, [r3, #27]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00d      	beq.n	8000e40 <MQTTSerialize_connect+0x194>
#if defined(MQTTV5)
		/* write will properties */
		if (options->MQTTVersion == 5 && willProperties)
		  MQTTProperties_write(&ptr, willProperties);
#endif
		writeMQTTString(&ptr, options->will.topicName);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f107 001c 	add.w	r0, r7, #28
 8000e2a:	3324      	adds	r3, #36	; 0x24
 8000e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e2e:	f000 f8ef 	bl	8001010 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f107 001c 	add.w	r0, r7, #28
 8000e38:	3330      	adds	r3, #48	; 0x30
 8000e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e3c:	f000 f8e8 	bl	8001010 <writeMQTTString>
	}
	if (flags.bits.username)
 8000e40:	7d3b      	ldrb	r3, [r7, #20]
 8000e42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <MQTTSerialize_connect+0x1ae>
		writeMQTTString(&ptr, options->username);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f107 001c 	add.w	r0, r7, #28
 8000e52:	3340      	adds	r3, #64	; 0x40
 8000e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e56:	f000 f8db 	bl	8001010 <writeMQTTString>
	if (flags.bits.password)
 8000e5a:	7d3b      	ldrb	r3, [r7, #20]
 8000e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <MQTTSerialize_connect+0x1c8>
		writeMQTTString(&ptr, options->password);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f107 001c 	add.w	r0, r7, #28
 8000e6c:	334c      	adds	r3, #76	; 0x4c
 8000e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e70:	f000 f8ce 	bl	8001010 <writeMQTTString>

	rc = ptr - buf;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7e:	e000      	b.n	8000e82 <MQTTSerialize_connect+0x1d6>
	  goto exit;
 8000e80:	bf00      	nop

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08013cec 	.word	0x08013cec
 8000e90:	08013cf4 	.word	0x08013cf4

08000e94 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	425a      	negs	r2, r3
 8000ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000eae:	bf58      	it	pl
 8000eb0:	4253      	negpl	r3, r2
 8000eb2:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	da00      	bge.n	8000ebc <MQTTPacket_encode+0x28>
 8000eba:	337f      	adds	r3, #127	; 0x7f
 8000ebc:	11db      	asrs	r3, r3, #7
 8000ebe:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	dd03      	ble.n	8000ece <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000ec6:	7afb      	ldrb	r3, [r7, #11]
 8000ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ecc:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	60fa      	str	r2, [r7, #12]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	7afa      	ldrb	r2, [r7, #11]
 8000edc:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dcde      	bgt.n	8000ea2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <MQTTPacket_VBIlen>:
	return len;
}


int MQTTPacket_VBIlen(int rem_len)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	int rc = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]

	if (rem_len < 128)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b7f      	cmp	r3, #127	; 0x7f
 8000f02:	dc02      	bgt.n	8000f0a <MQTTPacket_VBIlen+0x18>
		rc = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e00f      	b.n	8000f2a <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 16384)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f10:	da02      	bge.n	8000f18 <MQTTPacket_VBIlen+0x26>
		rc = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e008      	b.n	8000f2a <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 2097152)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000f1e:	da02      	bge.n	8000f26 <MQTTPacket_VBIlen+0x34>
		rc = 3;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e001      	b.n	8000f2a <MQTTPacket_VBIlen+0x38>
	else
		rc = 4;
 8000f26:	2304      	movs	r3, #4
 8000f28:	60fb      	str	r3, [r7, #12]
  return rc;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* header byte + remaining length */
	return rem_len + 1  + MQTTPacket_VBIlen(rem_len);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1c5c      	adds	r4, r3, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ffd4 	bl	8000ef2 <MQTTPacket_VBIlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4423      	add	r3, r4
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}

08000f56 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da00      	bge.n	8000f92 <writeInt+0x12>
 8000f90:	33ff      	adds	r3, #255	; 0xff
 8000f92:	121b      	asrs	r3, r3, #8
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	425a      	negs	r2, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	bf58      	it	pl
 8000fb2:	4253      	negpl	r3, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f7ff f907 	bl	80001f0 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffc9 	bl	8000f80 <writeInt>
	memcpy(*pptr, string, len);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f011 fbc0 	bl	801277c <memcpy>
	*pptr += len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	441a      	add	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	4638      	mov	r0, r7
 800101a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd12      	ble.n	800104a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff ffa9 	bl	8000f80 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	f011 fba0 	bl	801277c <memcpy>
		*pptr += mqttstring.lenstring.len;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	441a      	add	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001048:	e00c      	b.n	8001064 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff ffbc 	bl	8000fd2 <writeCString>
}
 800105a:	e003      	b.n	8001064 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800105c:	2100      	movs	r1, #0
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff ff8e 	bl	8000f80 <writeInt>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f8b3 	bl	80001f0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e001      	b.n	8001094 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	617b      	str	r3, [r7, #20]
	return rc;
 8001094:	697b      	ldr	r3, [r7, #20]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <MQTTSerialize_publishLength>:
#if defined(MQTTV5)
int MQTTV5Serialize_publishLength(int qos, MQTTString topicName, int payloadlen, MQTTProperties* properties)
#else
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
#endif
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	4638      	mov	r0, r7
 80010a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80010b0:	463b      	mov	r3, r7
 80010b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010b6:	f7ff ffd9 	bl	800106c <MQTTstrlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	1c9a      	adds	r2, r3, #2
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	4413      	add	r3, r2
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4413      	add	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dd02      	ble.n	80010d4 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3302      	adds	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 80010d4:	697b      	ldr	r3, [r7, #20]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <MQTTSerialize_publish>:
		MQTTString topicName, MQTTProperties* properties, unsigned char* payload, int payloadlen)
#else
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
#endif
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b08a      	sub	sp, #40	; 0x28
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4613      	mov	r3, r2
 80010ec:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTV5Serialize_publishLength(qos, topicName, payloadlen, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80010fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f7ff ffc8 	bl	800109e <MQTTSerialize_publishLength>
 800110e:	61b8      	str	r0, [r7, #24]
 8001110:	69b8      	ldr	r0, [r7, #24]
 8001112:	f7ff ff11 	bl	8000f38 <MQTTPacket_len>
 8001116:	4602      	mov	r2, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4293      	cmp	r3, r2
 800111c:	da03      	bge.n	8001126 <MQTTSerialize_publish+0x48>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800111e:	f06f 0301 	mvn.w	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001124:	e04d      	b.n	80011c2 <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 8001126:	7c3b      	ldrb	r3, [r7, #16]
 8001128:	2203      	movs	r2, #3
 800112a:	f362 1307 	bfi	r3, r2, #4, #4
 800112e:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	7c3b      	ldrb	r3, [r7, #16]
 800113a:	f362 03c3 	bfi	r3, r2, #3, #1
 800113e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	b2da      	uxtb	r2, r3
 8001148:	7c3b      	ldrb	r3, [r7, #16]
 800114a:	f362 0342 	bfi	r3, r2, #1, #2
 800114e:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001150:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7c3b      	ldrb	r3, [r7, #16]
 800115c:	f362 0300 	bfi	r3, r2, #0, #1
 8001160:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001162:	7c3a      	ldrb	r2, [r7, #16]
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fef3 	bl	8000f56 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe8d 	bl	8000e94 <MQTTPacket_encode>
 800117a:	4602      	mov	r2, r0
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4413      	add	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8001182:	f107 0014 	add.w	r0, r7, #20
 8001186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800118a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118c:	f7ff ff40 	bl	8001010 <writeMQTTString>

	if (qos > 0)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd06      	ble.n	80011a4 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8001196:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff feee 	bl	8000f80 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
		goto exit;
#endif

	memcpy(ptr, payload, payloadlen);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011aa:	4618      	mov	r0, r3
 80011ac:	f011 fae6 	bl	801277c <memcpy>
	ptr += payloadlen;
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011b4:	4413      	add	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80011c2:	69fb      	ldr	r3, [r7, #28]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <MQTTSerialize_subscribeLength>:
#if defined(MQTTV5)
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[], MQTTProperties* properties)
#else
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
#endif
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80011d6:	2302      	movs	r3, #2
 80011d8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e013      	b.n	8001208 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011f4:	f7ff ff3a 	bl	800106c <MQTTstrlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	3303      	adds	r3, #3
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbe7      	blt.n	80011e0 <MQTTSerialize_subscribeLength+0x14>
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 8001210:	68bb      	ldr	r3, [r7, #8]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <MQTTSerialize_subscribe>:
		MQTTProperties* properties, int count, MQTTString topicFilters[], int requestedQoSs[], struct subscribeOptions options[])
#else
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
#endif
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b08a      	sub	sp, #40	; 0x28
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	4611      	mov	r1, r2
 8001226:	461a      	mov	r2, r3
 8001228:	460b      	mov	r3, r1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	4613      	mov	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001244:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001248:	f7ff ffc0 	bl	80011cc <MQTTSerialize_subscribeLength>
 800124c:	61f8      	str	r0, [r7, #28]
 800124e:	69f8      	ldr	r0, [r7, #28]
 8001250:	f7ff fe72 	bl	8000f38 <MQTTPacket_len>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4293      	cmp	r3, r2
 800125a:	da03      	bge.n	8001264 <MQTTSerialize_subscribe+0x4a>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800125c:	f06f 0301 	mvn.w	r3, #1
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001262:	e053      	b.n	800130c <MQTTSerialize_subscribe+0xf2>
	}

	header.byte = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	743b      	strb	r3, [r7, #16]
	header.bits.type = SUBSCRIBE;
 8001268:	7c3b      	ldrb	r3, [r7, #16]
 800126a:	2208      	movs	r2, #8
 800126c:	f362 1307 	bfi	r3, r2, #4, #4
 8001270:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	7c3b      	ldrb	r3, [r7, #16]
 800127c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001280:	743b      	strb	r3, [r7, #16]
	header.bits.qos = 1;
 8001282:	7c3b      	ldrb	r3, [r7, #16]
 8001284:	2201      	movs	r2, #1
 8001286:	f362 0342 	bfi	r3, r2, #1, #2
 800128a:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800128c:	7c3a      	ldrb	r2, [r7, #16]
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe5e 	bl	8000f56 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	69f9      	ldr	r1, [r7, #28]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fdf8 	bl	8000e94 <MQTTPacket_encode>
 80012a4:	4602      	mov	r2, r0
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]

	writeInt(&ptr, packetid);
 80012ac:	88ba      	ldrh	r2, [r7, #4]
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe63 	bl	8000f80 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
	  goto exit;
#endif

	for (i = 0; i < count; ++i)
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
 80012be:	e01c      	b.n	80012fa <MQTTSerialize_subscribe+0xe0>
	{
		unsigned char opts = requestedQoSs[i];
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	76fb      	strb	r3, [r7, #27]
			opts |= (options[i].noLocal << 2); /* 1 bit */
			opts |= (options[i].retainAsPublished << 3); /* 1 bit */
			opts |= (options[i].retainHandling << 4); /* 2 bits */
		}
#endif
		writeMQTTString(&ptr, topicFilters[i]);
 80012cc:	6a3a      	ldr	r2, [r7, #32]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	461a      	mov	r2, r3
 80012d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012da:	4413      	add	r3, r2
 80012dc:	f107 0014 	add.w	r0, r7, #20
 80012e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e2:	f7ff fe95 	bl	8001010 <writeMQTTString>
		writeChar(&ptr, opts);
 80012e6:	7efa      	ldrb	r2, [r7, #27]
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe31 	bl	8000f56 <writeChar>
	for (i = 0; i < count; ++i)
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	3301      	adds	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	6a3a      	ldr	r2, [r7, #32]
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbde      	blt.n	80012c0 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800130e:	4618      	mov	r0, r3
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <vLedWrite>:
/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 * @param ledON If true, the LED is on, otherwise off.
 */
void vLedWrite(led_t led, GPIO_PinState ledON) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b06      	cmp	r3, #6
 800132c:	d905      	bls.n	800133a <vLedWrite+0x22>
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <vLedWrite+0xc0>)
 8001330:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <vLedWrite+0xc4>)
 8001332:	2117      	movs	r1, #23
 8001334:	482a      	ldr	r0, [pc, #168]	; (80013e0 <vLedWrite+0xc8>)
 8001336:	f011 f9c3 	bl	80126c0 <__assert_func>

	// Pick the LED.
	switch (led) {
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b06      	cmp	r3, #6
 800133e:	d847      	bhi.n	80013d0 <vLedWrite+0xb8>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <vLedWrite+0x30>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001365 	.word	0x08001365
 800134c:	08001375 	.word	0x08001375
 8001350:	08001385 	.word	0x08001385
 8001354:	08001395 	.word	0x08001395
 8001358:	080013a5 	.word	0x080013a5
 800135c:	080013b3 	.word	0x080013b3
 8001360:	080013c1 	.word	0x080013c1
		break;
	case LED_ORANGE:
		HAL_GPIO_WritePin(LEDO_Port, LEDO_Pin, ledON);
		break;*/
	case LED_1:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ledON);
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	461a      	mov	r2, r3
 8001368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136c:	481d      	ldr	r0, [pc, #116]	; (80013e4 <vLedWrite+0xcc>)
 800136e:	f003 ff8d 	bl	800528c <HAL_GPIO_WritePin>
			break;
 8001372:	e02d      	b.n	80013d0 <vLedWrite+0xb8>
	case LED_2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ledON);
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	461a      	mov	r2, r3
 8001378:	2120      	movs	r1, #32
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f003 ff85 	bl	800528c <HAL_GPIO_WritePin>
			break;
 8001382:	e025      	b.n	80013d0 <vLedWrite+0xb8>
	case LED_3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ledON);
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	461a      	mov	r2, r3
 8001388:	2101      	movs	r1, #1
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f003 ff7d 	bl	800528c <HAL_GPIO_WritePin>
		break;
 8001392:	e01d      	b.n	80013d0 <vLedWrite+0xb8>
	case LED_4:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ledON);
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	461a      	mov	r2, r3
 8001398:	2110      	movs	r1, #16
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f003 ff75 	bl	800528c <HAL_GPIO_WritePin>
		break;
 80013a2:	e015      	b.n	80013d0 <vLedWrite+0xb8>
	case LED_5:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ledON);
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	461a      	mov	r2, r3
 80013a8:	2104      	movs	r1, #4
 80013aa:	480e      	ldr	r0, [pc, #56]	; (80013e4 <vLedWrite+0xcc>)
 80013ac:	f003 ff6e 	bl	800528c <HAL_GPIO_WritePin>
		break;
 80013b0:	e00e      	b.n	80013d0 <vLedWrite+0xb8>
	case LED_6:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ledON);
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	461a      	mov	r2, r3
 80013b6:	2104      	movs	r1, #4
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <vLedWrite+0xd0>)
 80013ba:	f003 ff67 	bl	800528c <HAL_GPIO_WritePin>
		break;
 80013be:	e007      	b.n	80013d0 <vLedWrite+0xb8>
	case LED_7:
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ledON);
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <vLedWrite+0xcc>)
 80013ca:	f003 ff5f 	bl	800528c <HAL_GPIO_WritePin>
		break;
 80013ce:	bf00      	nop
	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08013cfc 	.word	0x08013cfc
 80013dc:	08013f4c 	.word	0x08013f4c
 80013e0:	08013d0c 	.word	0x08013d0c
 80013e4:	48000400 	.word	0x48000400
 80013e8:	48001c00 	.word	0x48001c00

080013ec <vLedToggle>:

/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 */
void vLedToggle(led_t led) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b06      	cmp	r3, #6
 80013fa:	d905      	bls.n	8001408 <vLedToggle+0x1c>
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <vLedToggle+0x9c>)
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <vLedToggle+0xa0>)
 8001400:	2147      	movs	r1, #71	; 0x47
 8001402:	4823      	ldr	r0, [pc, #140]	; (8001490 <vLedToggle+0xa4>)
 8001404:	f011 f95c 	bl	80126c0 <__assert_func>

	// Pick the LED.
	switch (led) {
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d838      	bhi.n	8001480 <vLedToggle+0x94>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <vLedToggle+0x28>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001431 	.word	0x08001431
 8001418:	0800143d 	.word	0x0800143d
 800141c:	08001449 	.word	0x08001449
 8001420:	08001455 	.word	0x08001455
 8001424:	08001461 	.word	0x08001461
 8001428:	0800146b 	.word	0x0800146b
 800142c:	08001475 	.word	0x08001475
		break;
	case LED_ORANGE:
		HAL_GPIO_TogglePin(LEDO_Port, LEDO_Pin);
		break;*/
	case LED_1:
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <vLedToggle+0xa8>)
 8001436:	f003 ff41 	bl	80052bc <HAL_GPIO_TogglePin>
		break;
 800143a:	e021      	b.n	8001480 <vLedToggle+0x94>
	case LED_2:
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800143c:	2120      	movs	r1, #32
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f003 ff3b 	bl	80052bc <HAL_GPIO_TogglePin>
		break;
 8001446:	e01b      	b.n	8001480 <vLedToggle+0x94>
	case LED_3:
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001448:	2101      	movs	r1, #1
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f003 ff35 	bl	80052bc <HAL_GPIO_TogglePin>
		break;
 8001452:	e015      	b.n	8001480 <vLedToggle+0x94>
	case LED_4:
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001454:	2110      	movs	r1, #16
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f003 ff2f 	bl	80052bc <HAL_GPIO_TogglePin>
		break;
 800145e:	e00f      	b.n	8001480 <vLedToggle+0x94>
	case LED_5:
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8001460:	2104      	movs	r1, #4
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <vLedToggle+0xa8>)
 8001464:	f003 ff2a 	bl	80052bc <HAL_GPIO_TogglePin>
		break;
 8001468:	e00a      	b.n	8001480 <vLedToggle+0x94>
	case LED_6:
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 800146a:	2104      	movs	r1, #4
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <vLedToggle+0xac>)
 800146e:	f003 ff25 	bl	80052bc <HAL_GPIO_TogglePin>
		break;
 8001472:	e005      	b.n	8001480 <vLedToggle+0x94>
	case LED_7:
		HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8001474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <vLedToggle+0xa8>)
 800147a:	f003 ff1f 	bl	80052bc <HAL_GPIO_TogglePin>
		break;
 800147e:	bf00      	nop
	}

}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	08013cfc 	.word	0x08013cfc
 800148c:	08013f58 	.word	0x08013f58
 8001490:	08013d0c 	.word	0x08013d0c
 8001494:	48000400 	.word	0x48000400
 8001498:	48001c00 	.word	0x48001c00

0800149c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00b      	beq.n	80014dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014c4:	e000      	b.n	80014c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f9      	beq.n	80014c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
	int i = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ffc7 	bl	800149c <ITM_SendChar>
	for (i = 0; i < len; i++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x16>
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152c:	f002 fabb 	bl	8003aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001530:	f000 f83c 	bl	80015ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001534:	f000 fcfa 	bl	8001f2c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001538:	f000 f8e6 	bl	8001708 <MX_ADC1_Init>
  MX_ADC3_Init();
 800153c:	f000 f95e 	bl	80017fc <MX_ADC3_Init>
  MX_DCMI_Init();
 8001540:	f000 f9c2 	bl	80018c8 <MX_DCMI_Init>
  MX_FMC_Init();
 8001544:	f000 fc44 	bl	8001dd0 <MX_FMC_Init>
  MX_I2C1_Init();
 8001548:	f000 f9f2 	bl	8001930 <MX_I2C1_Init>
  MX_I2C2_Init();
 800154c:	f000 fa30 	bl	80019b0 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001550:	f000 fa6e 	bl	8001a30 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001554:	f000 fa9a 	bl	8001a8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001558:	f000 fac8 	bl	8001aec <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800155c:	f000 faf6 	bl	8001b4c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001560:	f000 fb20 	bl	8001ba4 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001564:	f000 fbc6 	bl	8001cf4 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8001568:	f000 fbf4 	bl	8001d54 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800156c:	f00d f9fa 	bl	800e964 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001570:	4a09      	ldr	r2, [pc, #36]	; (8001598 <main+0x70>)
 8001572:	2100      	movs	r1, #0
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <main+0x74>)
 8001576:	f00d fa5f 	bl	800ea38 <osThreadNew>
 800157a:	4602      	mov	r2, r0
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <main+0x78>)
 800157e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initTasks();
 8001580:	f001 f8e8 	bl	8002754 <initTasks>


  printf("Iniciando\r\n");//simepre tiene que estar un primer printf para que funcione bien
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <main+0x7c>)
 8001586:	f011 fcf1 	bl	8012f6c <puts>
  printf("Espere...\r\n");
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <main+0x80>)
 800158c:	f011 fcee 	bl	8012f6c <puts>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001590:	f00d fa1c 	bl	800e9cc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001594:	e7fe      	b.n	8001594 <main+0x6c>
 8001596:	bf00      	nop
 8001598:	08013f64 	.word	0x08013f64
 800159c:	080022ed 	.word	0x080022ed
 80015a0:	2000e540 	.word	0x2000e540
 80015a4:	08013d2c 	.word	0x08013d2c
 80015a8:	08013d38 	.word	0x08013d38

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ba      	sub	sp, #232	; 0xe8
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b6:	2244      	movs	r2, #68	; 0x44
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f011 f8e9 	bl	8012792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	228c      	movs	r2, #140	; 0x8c
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f011 f8db 	bl	8012792 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80015dc:	f005 f84c 	bl	8006678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <SystemClock_Config+0x150>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	4a45      	ldr	r2, [pc, #276]	; (80016fc <SystemClock_Config+0x150>)
 80015e8:	f023 0318 	bic.w	r3, r3, #24
 80015ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015f0:	2314      	movs	r3, #20
 80015f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001608:	2360      	movs	r3, #96	; 0x60
 800160a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001614:	2301      	movs	r3, #1
 8001616:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001620:	2328      	movs	r3, #40	; 0x28
 8001622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800163c:	4618      	mov	r0, r3
 800163e:	f005 f97d 	bl	800693c <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001648:	f000 fe6c 	bl	8002324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800166a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800166e:	2104      	movs	r1, #4
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fd89 	bl	8007188 <HAL_RCC_ClockConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800167c:	f000 fe52 	bl	8002324 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <SystemClock_Config+0x154>)
 8001682:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001690:	2300      	movs	r3, #0
 8001692:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001694:	2300      	movs	r3, #0
 8001696:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001698:	2300      	movs	r3, #0
 800169a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800169c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016a8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80016aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ae:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016b8:	2318      	movs	r3, #24
 80016ba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <SystemClock_Config+0x158>)
 80016ca:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 ff90 	bl	80075f4 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x132>
  {
    Error_Handler();
 80016da:	f000 fe23 	bl	8002324 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e2:	f004 ffe7 	bl	80066b4 <HAL_PWREx_ControlVoltageScaling>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x144>
  {
    Error_Handler();
 80016ec:	f000 fe1a 	bl	8002324 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016f0:	f006 ff3e 	bl	8008570 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016f4:	bf00      	nop
 80016f6:	37e8      	adds	r7, #232	; 0xe8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	000868e3 	.word	0x000868e3
 8001704:	01110000 	.word	0x01110000

08001708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <MX_ADC1_Init+0xe8>)
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <MX_ADC1_Init+0xec>)
 800172e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_ADC1_Init+0xe8>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_ADC1_Init+0xe8>)
 800174a:	2204      	movs	r2, #4
 800174c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001750:	2200      	movs	r2, #0
 8001752:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001756:	2200      	movs	r2, #0
 8001758:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_ADC1_Init+0xe8>)
 800175c:	2201      	movs	r2, #1
 800175e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_ADC1_Init+0xe8>)
 800176a:	2201      	movs	r2, #1
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001776:	2200      	movs	r2, #0
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_ADC1_Init+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_ADC1_Init+0xe8>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <MX_ADC1_Init+0xe8>)
 8001792:	f002 fb73 	bl	8003e7c <HAL_ADC_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800179c:	f000 fdc2 	bl	8002324 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_ADC1_Init+0xe8>)
 80017ac:	f003 f864 	bl	8004878 <HAL_ADCEx_MultiModeConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017b6:	f000 fdb5 	bl	8002324 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_ADC1_Init+0xf0>)
 80017bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017be:	2306      	movs	r3, #6
 80017c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017c6:	237f      	movs	r3, #127	; 0x7f
 80017c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ca:	2304      	movs	r3, #4
 80017cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <MX_ADC1_Init+0xe8>)
 80017d8:	f002 fca8 	bl	800412c <HAL_ADC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80017e2:	f000 fd9f 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000e818 	.word	0x2000e818
 80017f4:	50040000 	.word	0x50040000
 80017f8:	10c00010 	.word	0x10c00010

080017fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001802:	463b      	mov	r3, r7
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001814:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <MX_ADC3_Init+0xc4>)
 8001816:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <MX_ADC3_Init+0xc0>)
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800182a:	4b24      	ldr	r3, [pc, #144]	; (80018bc <MX_ADC3_Init+0xc0>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001832:	2204      	movs	r2, #4
 8001834:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001838:	2200      	movs	r2, #0
 800183a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_ADC3_Init+0xc0>)
 800183e:	2200      	movs	r2, #0
 8001840:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001844:	2201      	movs	r2, #1
 8001846:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_ADC3_Init+0xc0>)
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001852:	2201      	movs	r2, #1
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001858:	2200      	movs	r2, #0
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_ADC3_Init+0xc0>)
 800185e:	2200      	movs	r2, #0
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_ADC3_Init+0xc0>)
 800186c:	2200      	movs	r2, #0
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_ADC3_Init+0xc0>)
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_ADC3_Init+0xc0>)
 800187a:	f002 faff 	bl	8003e7c <HAL_ADC_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8001884:	f000 fd4e 	bl	8002324 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_ADC3_Init+0xc8>)
 800188a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800188c:	2306      	movs	r3, #6
 800188e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001894:	237f      	movs	r3, #127	; 0x7f
 8001896:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001898:	2304      	movs	r3, #4
 800189a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_ADC3_Init+0xc0>)
 80018a6:	f002 fc41 	bl	800412c <HAL_ADC_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80018b0:	f000 fd38 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000e880 	.word	0x2000e880
 80018c0:	50040200 	.word	0x50040200
 80018c4:	36902000 	.word	0x36902000

080018c8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_DCMI_Init+0x60>)
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <MX_DCMI_Init+0x64>)
 80018d0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MX_DCMI_Init+0x60>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_DCMI_Init+0x60>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_DCMI_Init+0x60>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_DCMI_Init+0x60>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_DCMI_Init+0x60>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <MX_DCMI_Init+0x60>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_DCMI_Init+0x60>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <MX_DCMI_Init+0x60>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_DCMI_Init+0x60>)
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <MX_DCMI_Init+0x60>)
 800190a:	2200      	movs	r2, #0
 800190c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_DCMI_Init+0x60>)
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_DCMI_Init+0x60>)
 8001916:	f003 f96d 	bl	8004bf4 <HAL_DCMI_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001920:	f000 fd00 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000e8e8 	.word	0x2000e8e8
 800192c:	50050000 	.word	0x50050000

08001930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_I2C1_Init+0x74>)
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <MX_I2C1_Init+0x78>)
 8001938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_I2C1_Init+0x74>)
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <MX_I2C1_Init+0x7c>)
 800193e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_I2C1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <MX_I2C1_Init+0x74>)
 8001948:	2201      	movs	r2, #1
 800194a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_I2C1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_I2C1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800196a:	480e      	ldr	r0, [pc, #56]	; (80019a4 <MX_I2C1_Init+0x74>)
 800196c:	f003 fcbf 	bl	80052ee <HAL_I2C_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001976:	f000 fcd5 	bl	8002324 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4809      	ldr	r0, [pc, #36]	; (80019a4 <MX_I2C1_Init+0x74>)
 800197e:	f003 fd45 	bl	800540c <HAL_I2CEx_ConfigAnalogFilter>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001988:	f000 fccc 	bl	8002324 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_I2C1_Init+0x74>)
 8001990:	f003 fd87 	bl	80054a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800199a:	f000 fcc3 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000e5a8 	.word	0x2000e5a8
 80019a8:	40005400 	.word	0x40005400
 80019ac:	10909cec 	.word	0x10909cec

080019b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <MX_I2C2_Init+0x78>)
 80019b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <MX_I2C2_Init+0x7c>)
 80019be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ea:	480e      	ldr	r0, [pc, #56]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019ec:	f003 fc7f 	bl	80052ee <HAL_I2C_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019f6:	f000 fc95 	bl	8002324 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4809      	ldr	r0, [pc, #36]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019fe:	f003 fd05 	bl	800540c <HAL_I2CEx_ConfigAnalogFilter>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a08:	f000 fc8c 	bl	8002324 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_I2C2_Init+0x74>)
 8001a10:	f003 fd47 	bl	80054a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 fc83 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000e5f4 	.word	0x2000e5f4
 8001a28:	40005800 	.word	0x40005800
 8001a2c:	10909cec 	.word	0x10909cec

08001a30 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_LPUART1_UART_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_LPUART1_UART_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_LPUART1_UART_Init+0x50>)
 8001a6e:	f008 fae5 	bl	800a03c <HAL_UART_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 fc54 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000e714 	.word	0x2000e714
 8001a84:	40008000 	.word	0x40008000
 8001a88:	00033324 	.word	0x00033324

08001a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001a92:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <MX_USART1_UART_Init+0x5c>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ad0:	f008 fab4 	bl	800a03c <HAL_UART_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ada:	f000 fc23 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000e940 	.word	0x2000e940
 8001ae8:	40013800 	.word	0x40013800

08001aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <MX_USART2_UART_Init+0x5c>)
 8001af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b12:	220c      	movs	r2, #12
 8001b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART2_UART_Init+0x58>)
 8001b30:	f008 fa84 	bl	800a03c <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b3a:	f000 fbf3 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000ea94 	.word	0x2000ea94
 8001b48:	40004400 	.word	0x40004400

08001b4c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <MX_QUADSPI_Init+0x54>)
 8001b54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b58:	22ff      	movs	r2, #255	; 0xff
 8001b5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_QUADSPI_Init+0x50>)
 8001b88:	f004 fe0a 	bl	80067a0 <HAL_QSPI_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001b92:	f000 fbc7 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000eb14 	.word	0x2000eb14
 8001ba0:	a0001000 	.word	0xa0001000

08001ba4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001ba8:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001baa:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <MX_SAI1_Init+0x140>)
 8001bac:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bae:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001bb4:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001bba:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bc0:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bc6:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bcc:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bd2:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001be4:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001be6:	4a40      	ldr	r2, [pc, #256]	; (8001ce8 <MX_SAI1_Init+0x144>)
 8001be8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bea:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c04:	2208      	movs	r2, #8
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001c08:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001c38:	4829      	ldr	r0, [pc, #164]	; (8001ce0 <MX_SAI1_Init+0x13c>)
 8001c3a:	f006 ff75 	bl	8008b28 <HAL_SAI_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001c44:	f000 fb6e 	bl	8002324 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c4a:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <MX_SAI1_Init+0x14c>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c56:	2203      	movs	r2, #3
 8001c58:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c5c:	2240      	movs	r2, #64	; 0x40
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c98:	2208      	movs	r2, #8
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <MX_SAI1_Init+0x148>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_SAI1_Init+0x148>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <MX_SAI1_Init+0x148>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_SAI1_Init+0x148>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <MX_SAI1_Init+0x148>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_SAI1_Init+0x148>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_SAI1_Init+0x148>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_SAI1_Init+0x148>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <MX_SAI1_Init+0x148>)
 8001cce:	f006 ff2b 	bl	8008b28 <HAL_SAI_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001cd8:	f000 fb24 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000ea10 	.word	0x2000ea10
 8001ce4:	40015404 	.word	0x40015404
 8001ce8:	0002ee00 	.word	0x0002ee00
 8001cec:	2000e794 	.word	0x2000e794
 8001cf0:	40015424 	.word	0x40015424

08001cf4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <MX_SDMMC1_SD_Init+0x5c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001d22:	480a      	ldr	r0, [pc, #40]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d24:	f007 f8a4 	bl	8008e70 <HAL_SD_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001d2e:	f000 faf9 	bl	8002324 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_SDMMC1_SD_Init+0x58>)
 8001d38:	f007 fafc 	bl	8009334 <HAL_SD_ConfigWideBusOperation>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001d42:	f000 faef 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000e640 	.word	0x2000e640
 8001d50:	40012800 	.word	0x40012800

08001d54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <MX_SPI2_Init+0x78>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001da2:	2207      	movs	r2, #7
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001dae:	2208      	movs	r2, #8
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_SPI2_Init+0x74>)
 8001db4:	f007 fe10 	bl	80099d8 <HAL_SPI_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001dbe:	f000 fab1 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000e544 	.word	0x2000e544
 8001dcc:	40003800 	.word	0x40003800

08001dd0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2220      	movs	r2, #32
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f010 fcd8 	bl	8012792 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001de2:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <MX_FMC_Init+0x150>)
 8001de4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001de8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001dea:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <MX_FMC_Init+0x150>)
 8001dec:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <MX_FMC_Init+0x154>)
 8001dee:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <MX_FMC_Init+0x150>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <MX_FMC_Init+0x150>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001dfc:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <MX_FMC_Init+0x150>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e04:	2210      	movs	r2, #16
 8001e06:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001e08:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e0e:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001e14:	4b42      	ldr	r3, [pc, #264]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001e26:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e2c:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001e38:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001e4e:	230f      	movs	r3, #15
 8001e50:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001e52:	23ff      	movs	r3, #255	; 0xff
 8001e54:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001e56:	230f      	movs	r3, #15
 8001e58:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e5a:	2310      	movs	r3, #16
 8001e5c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e5e:	2311      	movs	r3, #17
 8001e60:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e66:	463b      	mov	r3, r7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482c      	ldr	r0, [pc, #176]	; (8001f20 <MX_FMC_Init+0x150>)
 8001e6e:	f007 fe3d 	bl	8009aec <HAL_SRAM_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8001e78:	f000 fa54 	bl	8002324 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <MX_FMC_Init+0x158>)
 8001e7e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e82:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <MX_FMC_Init+0x158>)
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <MX_FMC_Init+0x154>)
 8001e88:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001e8a:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <MX_FMC_Init+0x158>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <MX_FMC_Init+0x158>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <MX_FMC_Init+0x158>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <MX_FMC_Init+0x158>)
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_FMC_Init+0x158>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_FMC_Init+0x158>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_FMC_Init+0x158>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_FMC_Init+0x158>)
 8001eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_FMC_Init+0x158>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_FMC_Init+0x158>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_FMC_Init+0x158>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MX_FMC_Init+0x158>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_FMC_Init+0x158>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <MX_FMC_Init+0x158>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_FMC_Init+0x158>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001ee6:	230f      	movs	r3, #15
 8001ee8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001eea:	230f      	movs	r3, #15
 8001eec:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001eee:	23ff      	movs	r3, #255	; 0xff
 8001ef0:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001ef2:	230f      	movs	r3, #15
 8001ef4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001efa:	2311      	movs	r3, #17
 8001efc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001f02:	463b      	mov	r3, r7
 8001f04:	2200      	movs	r2, #0
 8001f06:	4619      	mov	r1, r3
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <MX_FMC_Init+0x158>)
 8001f0a:	f007 fdef 	bl	8009aec <HAL_SRAM_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001f14:	f000 fa06 	bl	8002324 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001f18:	bf00      	nop
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000e6c4 	.word	0x2000e6c4
 8001f24:	a0000104 	.word	0xa0000104
 8001f28:	2000e9c0 	.word	0x2000e9c0

08001f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f42:	4bb3      	ldr	r3, [pc, #716]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4ab2      	ldr	r2, [pc, #712]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4bb0      	ldr	r3, [pc, #704]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	623b      	str	r3, [r7, #32]
 8001f58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5a:	4bad      	ldr	r3, [pc, #692]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4aac      	ldr	r2, [pc, #688]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4baa      	ldr	r3, [pc, #680]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f72:	4ba7      	ldr	r3, [pc, #668]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4aa6      	ldr	r2, [pc, #664]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4ba4      	ldr	r3, [pc, #656]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	4ba1      	ldr	r3, [pc, #644]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4aa0      	ldr	r2, [pc, #640]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b9e      	ldr	r3, [pc, #632]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b9b      	ldr	r3, [pc, #620]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a9a      	ldr	r2, [pc, #616]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b98      	ldr	r3, [pc, #608]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fba:	4b95      	ldr	r3, [pc, #596]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a94      	ldr	r2, [pc, #592]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b92      	ldr	r3, [pc, #584]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001fd2:	f004 fbd5 	bl	8006780 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd6:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a8d      	ldr	r2, [pc, #564]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	4b88      	ldr	r3, [pc, #544]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	4a87      	ldr	r2, [pc, #540]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffa:	4b85      	ldr	r3, [pc, #532]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002006:	4b82      	ldr	r3, [pc, #520]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a81      	ldr	r2, [pc, #516]	; (8002210 <MX_GPIO_Init+0x2e4>)
 800200c:	f043 0320 	orr.w	r3, r3, #32
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <MX_GPIO_Init+0x2e4>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	2104      	movs	r1, #4
 8002022:	487c      	ldr	r0, [pc, #496]	; (8002214 <MX_GPIO_Init+0x2e8>)
 8002024:	f003 f932 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	2101      	movs	r1, #1
 800202c:	487a      	ldr	r0, [pc, #488]	; (8002218 <MX_GPIO_Init+0x2ec>)
 800202e:	f003 f92d 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2143      	movs	r1, #67	; 0x43
 8002036:	4877      	ldr	r0, [pc, #476]	; (8002214 <MX_GPIO_Init+0x2e8>)
 8002038:	f003 f928 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Audio_RST_Pin|LEDx_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	21c0      	movs	r1, #192	; 0xc0
 8002040:	4876      	ldr	r0, [pc, #472]	; (800221c <MX_GPIO_Init+0x2f0>)
 8002042:	f003 f923 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED4_Pin, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	2131      	movs	r1, #49	; 0x31
 800204a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204e:	f003 f91d 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED7_Pin, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	f241 0104 	movw	r1, #4100	; 0x1004
 8002058:	4871      	ldr	r0, [pc, #452]	; (8002220 <MX_GPIO_Init+0x2f4>)
 800205a:	f003 f917 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002064:	486e      	ldr	r0, [pc, #440]	; (8002220 <MX_GPIO_Init+0x2f4>)
 8002066:	f003 f911 	bl	800528c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 800206a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002074:	2302      	movs	r3, #2
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	4866      	ldr	r0, [pc, #408]	; (8002218 <MX_GPIO_Init+0x2ec>)
 8002080:	f002 fe80 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8002084:	2347      	movs	r3, #71	; 0x47
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002088:	2301      	movs	r3, #1
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	485e      	ldr	r0, [pc, #376]	; (8002214 <MX_GPIO_Init+0x2e8>)
 800209c:	f002 fe72 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80020a0:	2330      	movs	r3, #48	; 0x30
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020b0:	2305      	movs	r3, #5
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	4859      	ldr	r0, [pc, #356]	; (8002220 <MX_GPIO_Init+0x2f4>)
 80020bc:	f002 fe62 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 80020c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020d2:	2305      	movs	r3, #5
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e0:	f002 fe50 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80020e4:	2301      	movs	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	4847      	ldr	r0, [pc, #284]	; (8002218 <MX_GPIO_Init+0x2ec>)
 80020fc:	f002 fe42 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002100:	2340      	movs	r3, #64	; 0x40
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002110:	2303      	movs	r3, #3
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	4619      	mov	r1, r3
 800211a:	483f      	ldr	r0, [pc, #252]	; (8002218 <MX_GPIO_Init+0x2ec>)
 800211c:	f002 fe32 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8002120:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002132:	2303      	movs	r3, #3
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213a:	4619      	mov	r1, r3
 800213c:	4835      	ldr	r0, [pc, #212]	; (8002214 <MX_GPIO_Init+0x2e8>)
 800213e:	f002 fe21 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002154:	2302      	movs	r3, #2
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8002158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215c:	4619      	mov	r1, r3
 800215e:	4830      	ldr	r0, [pc, #192]	; (8002220 <MX_GPIO_Init+0x2f4>)
 8002160:	f002 fe10 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	4619      	mov	r1, r3
 8002176:	4827      	ldr	r0, [pc, #156]	; (8002214 <MX_GPIO_Init+0x2e8>)
 8002178:	f002 fe04 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_RST_Pin LEDx_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin|LEDx_Pin;
 800217c:	23c0      	movs	r3, #192	; 0xc0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002190:	4619      	mov	r1, r3
 8002192:	4822      	ldr	r0, [pc, #136]	; (800221c <MX_GPIO_Init+0x2f0>)
 8002194:	f002 fdf6 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8002198:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <MX_GPIO_Init+0x2f8>)
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	481e      	ldr	r0, [pc, #120]	; (8002228 <MX_GPIO_Init+0x2fc>)
 80021ae:	f002 fde9 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80021b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80021c4:	230e      	movs	r3, #14
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80021c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f002 fdd7 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin PC1 */
  GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80021d6:	2303      	movs	r3, #3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021da:	230b      	movs	r3, #11
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <MX_GPIO_Init+0x2f0>)
 80021ea:	f002 fdcb 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 80021ee:	2304      	movs	r3, #4
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80021fe:	2306      	movs	r3, #6
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002206:	4619      	mov	r1, r3
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <MX_GPIO_Init+0x2f0>)
 800220a:	f002 fdbb 	bl	8004d84 <HAL_GPIO_Init>
 800220e:	e00d      	b.n	800222c <MX_GPIO_Init+0x300>
 8002210:	40021000 	.word	0x40021000
 8002214:	48001c00 	.word	0x48001c00
 8002218:	48002000 	.word	0x48002000
 800221c:	48000800 	.word	0x48000800
 8002220:	48000400 	.word	0x48000400
 8002224:	10110000 	.word	0x10110000
 8002228:	48001800 	.word	0x48001800

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800222c:	2320      	movs	r3, #32
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <MX_GPIO_Init+0x3b0>)
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	4828      	ldr	r0, [pc, #160]	; (80022e0 <MX_GPIO_Init+0x3b4>)
 8002240:	f002 fda0 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED4_Pin;
 8002244:	2331      	movs	r3, #49	; 0x31
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225e:	f002 fd91 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8002262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800226c:	2302      	movs	r3, #2
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	481b      	ldr	r0, [pc, #108]	; (80022e4 <MX_GPIO_Init+0x3b8>)
 8002278:	f002 fd84 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 800227c:	2302      	movs	r3, #2
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002280:	230b      	movs	r3, #11
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002292:	f002 fd77 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED7_Pin;
 8002296:	f241 0304 	movw	r3, #4100	; 0x1004
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	480e      	ldr	r0, [pc, #56]	; (80022e8 <MX_GPIO_Init+0x3bc>)
 80022b0:	f002 fd68 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80022b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80022ba:	2311      	movs	r3, #17
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ca:	4619      	mov	r1, r3
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <MX_GPIO_Init+0x3bc>)
 80022ce:	f002 fd59 	bl	8004d84 <HAL_GPIO_Init>

}
 80022d2:	bf00      	nop
 80022d4:	3738      	adds	r7, #56	; 0x38
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	10110000 	.word	0x10110000
 80022e0:	48000800 	.word	0x48000800
 80022e4:	48001400 	.word	0x48001400
 80022e8:	48000400 	.word	0x48000400

080022ec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80022f4:	f00f fbea 	bl	8011acc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1 / portTICK_PERIOD_MS);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f00c fc43 	bl	800eb84 <osDelay>
 80022fe:	e7fb      	b.n	80022f8 <StartDefaultTask+0xc>

08002300 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002312:	f001 fbe1 	bl	8003ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40001000 	.word	0x40001000

08002324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <mqtt_Connect>:
static unsigned char buffer[128];
//int32_t transport_socket;
static int strpos(char *hay, char *needle, int offset);
static int32_t findIntData(char topic[], uint8_t *data, uint32_t lenght);

ESP8266_StatusTypeDef mqtt_Connect(void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b09a      	sub	sp, #104	; 0x68
 8002338:	af00      	add	r7, sp, #0
	//unsigned char buffer[128];
	//MQTTTransport transporter;
	//int32_t result;
	int32_t length;

	ESP8266_StatusTypeDef Status = ESP8266_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	int32_t internalState = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	663b      	str	r3, [r7, #96]	; 0x60
	int32_t trial = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	65fb      	str	r3, [r7, #92]	; 0x5c
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 8002348:	4a20      	ldr	r2, [pc, #128]	; (80023cc <mqtt_Connect+0x98>)
 800234a:	463b      	mov	r3, r7
 800234c:	4611      	mov	r1, r2
 800234e:	2258      	movs	r2, #88	; 0x58
 8002350:	4618      	mov	r0, r3
 8002352:	f010 fa13 	bl	801277c <memcpy>

	while (trial < TRIAL_CONNECTION_TIME) {
 8002356:	e02f      	b.n	80023b8 <mqtt_Connect+0x84>
		switch (internalState) {
 8002358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800235a:	2b01      	cmp	r3, #1
 800235c:	d02c      	beq.n	80023b8 <mqtt_Connect+0x84>
 800235e:	2b02      	cmp	r3, #2
 8002360:	d024      	beq.n	80023ac <mqtt_Connect+0x78>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d000      	beq.n	8002368 <mqtt_Connect+0x34>
 8002366:	e027      	b.n	80023b8 <mqtt_Connect+0x84>
			//transporter.state = 0;

			// Populate the connect struct.


			connectData.MQTTVersion = 3; //4
 8002368:	2303      	movs	r3, #3
 800236a:	723b      	strb	r3, [r7, #8]
			connectData.clientID.cstring = "fede";
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <mqtt_Connect+0x9c>)
 800236e:	60fb      	str	r3, [r7, #12]
			connectData.keepAliveInterval = CONNECTION_KEEPALIVE_S * 2;
 8002370:	2378      	movs	r3, #120	; 0x78
 8002372:	833b      	strh	r3, [r7, #24]
			//connectData.willFlag = 1;
			//connectData.will.qos = 2;
			length = MQTTSerialize_connect(buffer, sizeof(buffer),
 8002374:	463b      	mov	r3, r7
 8002376:	461a      	mov	r2, r3
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	4816      	ldr	r0, [pc, #88]	; (80023d4 <mqtt_Connect+0xa0>)
 800237c:	f7fe fc96 	bl	8000cac <MQTTSerialize_connect>
 8002380:	65b8      	str	r0, [r7, #88]	; 0x58
					&connectData);

			// Send CONNECT to the mqtt broker.

			Status = ESP_SendData(buffer, length);
 8002382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002384:	4619      	mov	r1, r3
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <mqtt_Connect+0xa0>)
 8002388:	f7fe fa86 	bl	8000898 <ESP_SendData>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			//if ((result = transport_sendPacketBuffer(transport_socket, buffer,length)) == length) {
			if (Status == ESP8266_OK) {
 8002392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <mqtt_Connect+0x6c>
				//Status = ESP8266_OK;
				internalState = 2;			//internalState++;
 800239a:	2302      	movs	r3, #2
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
 800239e:	e00b      	b.n	80023b8 <mqtt_Connect+0x84>
			} else {
				//Status = ESP8266_ERROR;
				internalState = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	663b      	str	r3, [r7, #96]	; 0x60
				trial++;
 80023a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a6:	3301      	adds	r3, #1
 80023a8:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			break;
 80023aa:	e005      	b.n	80023b8 <mqtt_Connect+0x84>
					break;
				}
			}*/
			break;
		case 2:
			Status = ESP8266_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			trial = TRIAL_CONNECTION_TIME;
 80023b2:	2305      	movs	r3, #5
 80023b4:	65fb      	str	r3, [r7, #92]	; 0x5c
			break;
 80023b6:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 80023b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	ddcc      	ble.n	8002358 <mqtt_Connect+0x24>
		}
	}

	return Status;
 80023be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3768      	adds	r7, #104	; 0x68
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	08013d4c 	.word	0x08013d4c
 80023d0:	08013d44 	.word	0x08013d44
 80023d4:	20000448 	.word	0x20000448

080023d8 <mqtt_Publisher>:

ESP8266_StatusTypeDef mqtt_Publisher(char *topic, uint8_t data) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b095      	sub	sp, #84	; 0x54
 80023dc:	af08      	add	r7, sp, #32
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
	//int32_t result;
	int32_t length;
	//uint32_t tickStart;// = HAL_GetTick();


	ESP8266_StatusTypeDef Status = ESP8266_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Populate the publish message.
	MQTTString topicString = MQTTString_initializer;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
	topicString.cstring = topic;//"test/rgb";
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	61bb      	str	r3, [r7, #24]
	unsigned char payload[16];
	int qos = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
			topicString, payload,
			(length = sprintf((char *)payload, "%d%c%c", (int) data , '\r', '\n')));
 80023fe:	78fa      	ldrb	r2, [r7, #3]
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
 8002400:	f107 0008 	add.w	r0, r7, #8
 8002404:	230a      	movs	r3, #10
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	230d      	movs	r3, #13
 800240a:	4914      	ldr	r1, [pc, #80]	; (800245c <mqtt_Publisher+0x84>)
 800240c:	f010 fdc6 	bl	8012f9c <siprintf>
 8002410:	6278      	str	r0, [r7, #36]	; 0x24
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	9306      	str	r3, [sp, #24]
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	9305      	str	r3, [sp, #20]
 800241c:	ac02      	add	r4, sp, #8
 800241e:	f107 0318 	add.w	r3, r7, #24
 8002422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800242a:	2300      	movs	r3, #0
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	2200      	movs	r2, #0
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	4809      	ldr	r0, [pc, #36]	; (8002460 <mqtt_Publisher+0x88>)
 800243a:	f7fe fe50 	bl	80010de <MQTTSerialize_publish>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24

	// Send PUBLISH to the mqtt broker.

	Status = ESP_SendData(buffer, length);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	4619      	mov	r1, r3
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <mqtt_Publisher+0x88>)
 8002446:	f7fe fa27 	bl	8000898 <ESP_SendData>
 800244a:	4603      	mov	r3, r0
 800244c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} else {
		// Start over.
		Status = ESP8266_ERROR;
	}*/

	return Status;
 8002450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002454:	4618      	mov	r0, r3
 8002456:	3734      	adds	r7, #52	; 0x34
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}
 800245c:	08013da4 	.word	0x08013da4
 8002460:	20000448 	.word	0x20000448

08002464 <mqtt_SubscriberPacket>:

	}
	return Status;
}

ESP8266_StatusTypeDef mqtt_SubscriberPacket(char *topic) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af04      	add	r7, sp, #16
 800246a:	6078      	str	r0, [r7, #4]
	int length;

		ESP8266_StatusTypeDef Status = ESP8266_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	77fb      	strb	r3, [r7, #31]

		// Populate the subscribe message.
		MQTTString topicFilters[1] = { MQTTString_initializer };
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
		topicFilters[0].cstring = topic;//"test/rgb";
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60fb      	str	r3, [r7, #12]
		int requestedQoSs[1] = { 0 };
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
		length = MQTTSerialize_subscribe(buffer, sizeof(buffer), 0, 1, 1,
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2301      	movs	r3, #1
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2301      	movs	r3, #1
 8002496:	2200      	movs	r2, #0
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	4808      	ldr	r0, [pc, #32]	; (80024bc <mqtt_SubscriberPacket+0x58>)
 800249c:	f7fe febd 	bl	800121a <MQTTSerialize_subscribe>
 80024a0:	61b8      	str	r0, [r7, #24]
				topicFilters, requestedQoSs);

		// Send SUBSCRIBE to the mqtt broker.
		Status = ESP_SendData(buffer, length);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <mqtt_SubscriberPacket+0x58>)
 80024a8:	f7fe f9f6 	bl	8000898 <ESP_SendData>
 80024ac:	4603      	mov	r3, r0
 80024ae:	77fb      	strb	r3, [r7, #31]
		return Status;
 80024b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000448 	.word	0x20000448

080024c0 <mqtt_SubscriberReceive>:

	return Status;
}*/


ESP8266_StatusTypeDef mqtt_SubscriberReceive(char topic[], int32_t* pData) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0a4      	sub	sp, #144	; 0x90
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint32_t RetLength;
	uint8_t dato[MQTT_BUFFERSIZE];

	//alocate memory for the receiving buffer
	//dato = (uint8_t*) malloc(MQTT_BUFFERSIZE * sizeof(uint8_t));
	memset(dato, '\0', MQTT_BUFFERSIZE);
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f010 f95a 	bl	8012792 <memset>
	ESP_ReceiveData(dato, MQTT_BUFFERSIZE, &RetLength);
 80024de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fa1d 	bl	8000928 <ESP_ReceiveData>
	*(pData) = findIntData(topic, dato, RetLength);
 80024ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f85b 	bl	80025b4 <findIntData>
 80024fe:	4602      	mov	r2, r0
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	601a      	str	r2, [r3, #0]
	//free(dato);

	return Status;
 8002504:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8002508:	4618      	mov	r0, r3
 800250a:	3790      	adds	r7, #144	; 0x90
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <strpos>:





static int strpos(char *hay, char *needle, int offset) {
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	466b      	mov	r3, sp
 800251e:	461e      	mov	r6, r3
	char haystack[strlen(hay)];
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7fd fe65 	bl	80001f0 <strlen>
 8002526:	4603      	mov	r3, r0
 8002528:	3b01      	subs	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	4601      	mov	r1, r0
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	f04f 0400 	mov.w	r4, #0
 800253a:	00d4      	lsls	r4, r2, #3
 800253c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002540:	00cb      	lsls	r3, r1, #3
 8002542:	4601      	mov	r1, r0
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	f04f 0400 	mov.w	r4, #0
 8002550:	00d4      	lsls	r4, r2, #3
 8002552:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002556:	00cb      	lsls	r3, r1, #3
 8002558:	1dc3      	adds	r3, r0, #7
 800255a:	08db      	lsrs	r3, r3, #3
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	ebad 0d03 	sub.w	sp, sp, r3
 8002562:	466b      	mov	r3, sp
 8002564:	3300      	adds	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
	strncpy(haystack, hay + offset, strlen(hay) - offset);
 8002568:	69bc      	ldr	r4, [r7, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	18d5      	adds	r5, r2, r3
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7fd fe3d 	bl	80001f0 <strlen>
 8002576:	4602      	mov	r2, r0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4629      	mov	r1, r5
 8002580:	4620      	mov	r0, r4
 8002582:	f010 fd2b 	bl	8012fdc <strncpy>
	char *p = strstr(haystack, needle);
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f010 fd3b 	bl	8013006 <strstr>
 8002590:	6178      	str	r0, [r7, #20]
	if (p)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <strpos+0x94>
		return p - haystack + offset;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	1a9a      	subs	r2, r3, r2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	e001      	b.n	80025a8 <strpos+0x98>
	return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a8:	46b5      	mov	sp, r6
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025b4 <findIntData>:

static int32_t findIntData(char topic[], uint8_t *data, uint32_t lenght) {
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	b091      	sub	sp, #68	; 0x44
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	466b      	mov	r3, sp
 80025c2:	461d      	mov	r5, r3
	uint8_t newdata[lenght];
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4603      	mov	r3, r0
 80025c8:	3b01      	subs	r3, #1
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
 80025cc:	4601      	mov	r1, r0
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	f04f 0400 	mov.w	r4, #0
 80025da:	00d4      	lsls	r4, r2, #3
 80025dc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80025e0:	00cb      	lsls	r3, r1, #3
 80025e2:	4601      	mov	r1, r0
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	00d4      	lsls	r4, r2, #3
 80025f2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80025f6:	00cb      	lsls	r3, r1, #3
 80025f8:	1dc3      	adds	r3, r0, #7
 80025fa:	08db      	lsrs	r3, r3, #3
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	ebad 0d03 	sub.w	sp, sp, r3
 8002602:	466b      	mov	r3, sp
 8002604:	3300      	adds	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t i = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t j = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t data_begin;
	int32_t data_end;

	/* remove \0 */
	memset((char*) newdata, '\0', lenght);
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f010 f8bb 	bl	8012792 <memset>
	for (i = 0; i < lenght; i++) {
 800261c:	2300      	movs	r3, #0
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
 8002620:	e011      	b.n	8002646 <findIntData+0x92>
		if (*(data + i) != '\0') {
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <findIntData+0x8c>
			newdata[j++] = *(data + i);
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	441a      	add	r2, r3
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	1c59      	adds	r1, r3, #1
 8002638:	63b9      	str	r1, [r7, #56]	; 0x38
 800263a:	7811      	ldrb	r1, [r2, #0]
 800263c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < lenght; i++) {
 8002640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002642:	3301      	adds	r3, #1
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d3e9      	bcc.n	8002622 <findIntData+0x6e>
		}
	}
	data_begin = strpos((char*)newdata, (char*)topic, 0);	//get index where string topic begins
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2200      	movs	r2, #0
 8002652:	68f9      	ldr	r1, [r7, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5b 	bl	8002510 <strpos>
 800265a:	62b8      	str	r0, [r7, #40]	; 0x28
	data_end = strpos((char*)newdata, (char*)END_STRING_R_N, 0);		//get index where \r\n ends
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	2200      	movs	r2, #0
 8002660:	493a      	ldr	r1, [pc, #232]	; (800274c <findIntData+0x198>)
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff54 	bl	8002510 <strpos>
 8002668:	63f8      	str	r0, [r7, #60]	; 0x3c

	if(data_end == -1){
 800266a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002670:	d106      	bne.n	8002680 <findIntData+0xcc>
		data_end = strpos((char*)newdata, (char*)END_STRING_N, 0);		//get index where \n ends
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	2200      	movs	r2, #0
 8002676:	4936      	ldr	r1, [pc, #216]	; (8002750 <findIntData+0x19c>)
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff49 	bl	8002510 <strpos>
 800267e:	63f8      	str	r0, [r7, #60]	; 0x3c
	}


	if (data_begin != -1 && data_end != -1) {
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002686:	d05a      	beq.n	800273e <findIntData+0x18a>
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268e:	d056      	beq.n	800273e <findIntData+0x18a>
 8002690:	466b      	mov	r3, sp
 8002692:	461e      	mov	r6, r3
		i = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
		int value = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t index_start = data_begin + strlen(topic);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7fd fda7 	bl	80001f0 <strlen>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	4413      	add	r3, r2
 80026a8:	623b      	str	r3, [r7, #32]
		int32_t st_lenght = data_end - index_start + 1; //sume uno porque el atoi me convertia mal si el st tenia un solo valor, es por eso que inicializo el primer elemtento del arreglo con el '0'
 80026aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
		uint8_t st[st_lenght];
 80026b4:	69f8      	ldr	r0, [r7, #28]
 80026b6:	1e43      	subs	r3, r0, #1
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	4603      	mov	r3, r0
 80026bc:	4619      	mov	r1, r3
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	f04f 0400 	mov.w	r4, #0
 80026ca:	00d4      	lsls	r4, r2, #3
 80026cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80026d0:	00cb      	lsls	r3, r1, #3
 80026d2:	4603      	mov	r3, r0
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	f04f 0400 	mov.w	r4, #0
 80026e2:	00d4      	lsls	r4, r2, #3
 80026e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80026e8:	00cb      	lsls	r3, r1, #3
 80026ea:	4603      	mov	r3, r0
 80026ec:	3307      	adds	r3, #7
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	ebad 0d03 	sub.w	sp, sp, r3
 80026f6:	466b      	mov	r3, sp
 80026f8:	3300      	adds	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
		st[0] = '0';//inicializado en cero el primer elemento para que el atoi convierta los numero como el 1, 2 ....9 bien sino los convertia 10, 20 ..... 90
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2230      	movs	r2, #48	; 0x30
 8002700:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < st_lenght; i++) {
 8002702:	2301      	movs	r3, #1
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
 8002706:	e00e      	b.n	8002726 <findIntData+0x172>
			st[i] = *(newdata + index_start + i - 1);
 8002708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270a:	6a39      	ldr	r1, [r7, #32]
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	440b      	add	r3, r1
 8002710:	3b01      	subs	r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	7819      	ldrb	r1, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271a:	4413      	add	r3, r2
 800271c:	460a      	mov	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < st_lenght; i++) {
 8002720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002722:	3301      	adds	r3, #1
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800272a:	429a      	cmp	r2, r3
 800272c:	d3ec      	bcc.n	8002708 <findIntData+0x154>
		}

		value = atoi((char*) st);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4618      	mov	r0, r3
 8002732:	f00f ffe3 	bl	80126fc <atoi>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

		return value;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	46b5      	mov	sp, r6
 800273c:	e001      	b.n	8002742 <findIntData+0x18e>

	}
	return -1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002742:	46ad      	mov	sp, r5

}
 8002744:	4618      	mov	r0, r3
 8002746:	3744      	adds	r7, #68	; 0x44
 8002748:	46bd      	mov	sp, r7
 800274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274c:	08013f88 	.word	0x08013f88
 8002750:	08013f8c 	.word	0x08013f8c

08002754 <initTasks>:
void ledTask(void *argument);
void pubTask(void *argument);
void subTask(void *argument);
void analizeTask(void *argument);

void initTasks(void) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af02      	add	r7, sp, #8

	HAL_UART_F_Init();
 800275a:	f001 f939 	bl	80039d0 <HAL_UART_F_Init>

	/* Led initialize */
	int i;
	uint8_t flag_error_mem = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	72fb      	strb	r3, [r7, #11]
	for(i = 0; i < LED_COUNT; i++){
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	e008      	b.n	800277a <initTasks+0x26>
		vLedWrite(i, GPIO_PIN_RESET);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fdd2 	bl	8001318 <vLedWrite>
	for(i = 0; i < LED_COUNT; i++){
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b06      	cmp	r3, #6
 800277e:	ddf3      	ble.n	8002768 <initTasks+0x14>
	}

	xSemaphoreMutexUart = xSemaphoreCreateMutex();
 8002780:	2001      	movs	r0, #1
 8002782:	f00c fc6c 	bl	800f05e <xQueueCreateMutex>
 8002786:	4602      	mov	r2, r0
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <initTasks+0x174>)
 800278a:	601a      	str	r2, [r3, #0]
	xSemaphorePub = xSemaphoreCreateBinary();
 800278c:	2203      	movs	r2, #3
 800278e:	2100      	movs	r1, #0
 8002790:	2001      	movs	r0, #1
 8002792:	f00c fbe8 	bl	800ef66 <xQueueGenericCreate>
 8002796:	4602      	mov	r2, r0
 8002798:	4b4c      	ldr	r3, [pc, #304]	; (80028cc <initTasks+0x178>)
 800279a:	601a      	str	r2, [r3, #0]
	xSemaphoreSub = xSemaphoreCreateBinary();
 800279c:	2203      	movs	r2, #3
 800279e:	2100      	movs	r1, #0
 80027a0:	2001      	movs	r0, #1
 80027a2:	f00c fbe0 	bl	800ef66 <xQueueGenericCreate>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <initTasks+0x17c>)
 80027aa:	601a      	str	r2, [r3, #0]
	xQueueDataRx = xQueueCreate(2, sizeof(int32_t));
 80027ac:	2200      	movs	r2, #0
 80027ae:	2104      	movs	r1, #4
 80027b0:	2002      	movs	r0, #2
 80027b2:	f00c fbd8 	bl	800ef66 <xQueueGenericCreate>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <initTasks+0x180>)
 80027ba:	601a      	str	r2, [r3, #0]

	if (xSemaphorePub != NULL && xSemaphoreSub != NULL
 80027bc:	4b43      	ldr	r3, [pc, #268]	; (80028cc <initTasks+0x178>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d06f      	beq.n	80028a4 <initTasks+0x150>
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <initTasks+0x17c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06b      	beq.n	80028a4 <initTasks+0x150>
			&& xSemaphoreMutexUart != NULL && xQueueDataRx != NULL) {
 80027cc:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <initTasks+0x174>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d067      	beq.n	80028a4 <initTasks+0x150>
 80027d4:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <initTasks+0x180>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d063      	beq.n	80028a4 <initTasks+0x150>
		BaseType_t res = xTaskCreate(wifiConnectTask, "wifi", STACK_SIZE, 0,
 80027dc:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <initTasks+0x184>)
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2320      	movs	r3, #32
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2300      	movs	r3, #0
 80027e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ea:	493c      	ldr	r1, [pc, #240]	; (80028dc <initTasks+0x188>)
 80027ec:	483c      	ldr	r0, [pc, #240]	; (80028e0 <initTasks+0x18c>)
 80027ee:	f00d f99f 	bl	800fb30 <xTaskCreate>
 80027f2:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, &wifiTask);
		if (res != pdPASS) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d004      	beq.n	8002804 <initTasks+0xb0>
			printf("error creacion de tarea wifi\r\n");
 80027fa:	483a      	ldr	r0, [pc, #232]	; (80028e4 <initTasks+0x190>)
 80027fc:	f010 fbb6 	bl	8012f6c <puts>
			flag_error_mem = 1;
 8002800:	2301      	movs	r3, #1
 8002802:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(ledTask, "led", 128, 0,
 8002804:	2300      	movs	r3, #0
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	2320      	movs	r3, #32
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <initTasks+0x194>)
 8002812:	4836      	ldr	r0, [pc, #216]	; (80028ec <initTasks+0x198>)
 8002814:	f00d f98c 	bl	800fb30 <xTaskCreate>
 8002818:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, 0);
		if (res != pdPASS) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d004      	beq.n	800282a <initTasks+0xd6>
			printf("error creacion de tarea led\r\n");
 8002820:	4833      	ldr	r0, [pc, #204]	; (80028f0 <initTasks+0x19c>)
 8002822:	f010 fba3 	bl	8012f6c <puts>
			flag_error_mem = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(pubTask, "publish", STACK_SIZE, 0,
 800282a:	2300      	movs	r3, #0
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2320      	movs	r3, #32
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2300      	movs	r3, #0
 8002834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002838:	492e      	ldr	r1, [pc, #184]	; (80028f4 <initTasks+0x1a0>)
 800283a:	482f      	ldr	r0, [pc, #188]	; (80028f8 <initTasks+0x1a4>)
 800283c:	f00d f978 	bl	800fb30 <xTaskCreate>
 8002840:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, 0);
		if (res != pdPASS) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d004      	beq.n	8002852 <initTasks+0xfe>
			printf("error creacion de tarea pub\r\n");
 8002848:	482c      	ldr	r0, [pc, #176]	; (80028fc <initTasks+0x1a8>)
 800284a:	f010 fb8f 	bl	8012f6c <puts>
			flag_error_mem = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(subTask, "subscribe", STACK_SIZE, 0,
 8002852:	2300      	movs	r3, #0
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2320      	movs	r3, #32
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002860:	4927      	ldr	r1, [pc, #156]	; (8002900 <initTasks+0x1ac>)
 8002862:	4828      	ldr	r0, [pc, #160]	; (8002904 <initTasks+0x1b0>)
 8002864:	f00d f964 	bl	800fb30 <xTaskCreate>
 8002868:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, 0);
		if (res != pdPASS) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d004      	beq.n	800287a <initTasks+0x126>
			printf("error creacion de tarea sub\r\n");
 8002870:	4825      	ldr	r0, [pc, #148]	; (8002908 <initTasks+0x1b4>)
 8002872:	f010 fb7b 	bl	8012f6c <puts>
			flag_error_mem = 1;
 8002876:	2301      	movs	r3, #1
 8002878:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(analizeTask, "analize data", 256, 0,
 800287a:	2300      	movs	r3, #0
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	2320      	movs	r3, #32
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002888:	4920      	ldr	r1, [pc, #128]	; (800290c <initTasks+0x1b8>)
 800288a:	4821      	ldr	r0, [pc, #132]	; (8002910 <initTasks+0x1bc>)
 800288c:	f00d f950 	bl	800fb30 <xTaskCreate>
 8002890:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, 0);
		if (res != pdPASS) {
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d00b      	beq.n	80028b0 <initTasks+0x15c>
			printf("error creacion de tarea analize\r\n");
 8002898:	481e      	ldr	r0, [pc, #120]	; (8002914 <initTasks+0x1c0>)
 800289a:	f010 fb67 	bl	8012f6c <puts>
			flag_error_mem = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	72fb      	strb	r3, [r7, #11]
			&& xSemaphoreMutexUart != NULL && xQueueDataRx != NULL) {
 80028a2:	e005      	b.n	80028b0 <initTasks+0x15c>

		}
	} else {
		printf("error creacion de semaforo\r\n");
 80028a4:	481c      	ldr	r0, [pc, #112]	; (8002918 <initTasks+0x1c4>)
 80028a6:	f010 fb61 	bl	8012f6c <puts>
		flag_error_mem = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	72fb      	strb	r3, [r7, #11]
 80028ae:	e000      	b.n	80028b2 <initTasks+0x15e>
			&& xSemaphoreMutexUart != NULL && xQueueDataRx != NULL) {
 80028b0:	bf00      	nop
	}

	if(flag_error_mem == 1)
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d103      	bne.n	80028c0 <initTasks+0x16c>
		vLedWrite(LED_4, GPIO_PIN_SET);
 80028b8:	2101      	movs	r1, #1
 80028ba:	2003      	movs	r0, #3
 80028bc:	f7fe fd2c 	bl	8001318 <vLedWrite>

}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000eb68 	.word	0x2000eb68
 80028cc:	2000eb70 	.word	0x2000eb70
 80028d0:	2000eb74 	.word	0x2000eb74
 80028d4:	2000eb60 	.word	0x2000eb60
 80028d8:	2000eb6c 	.word	0x2000eb6c
 80028dc:	08013db8 	.word	0x08013db8
 80028e0:	0800291d 	.word	0x0800291d
 80028e4:	08013dc0 	.word	0x08013dc0
 80028e8:	08013de0 	.word	0x08013de0
 80028ec:	08002af5 	.word	0x08002af5
 80028f0:	08013de4 	.word	0x08013de4
 80028f4:	08013e04 	.word	0x08013e04
 80028f8:	08002b19 	.word	0x08002b19
 80028fc:	08013e0c 	.word	0x08013e0c
 8002900:	08013e2c 	.word	0x08013e2c
 8002904:	08002ba1 	.word	0x08002ba1
 8002908:	08013e38 	.word	0x08013e38
 800290c:	08013e58 	.word	0x08013e58
 8002910:	08002c19 	.word	0x08002c19
 8002914:	08013e68 	.word	0x08013e68
 8002918:	08013e8c 	.word	0x08013e8c

0800291c <wifiConnectTask>:

void wifiConnectTask(void *argument) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	//uint8_t info[60] = "Conectando a wifi, Espere por favor.. \r\n";
	ESP8266_StatusTypeDef Status;
	//ESP8266_ConnectionInfoTypeDef connection_info;
	//esp_state state_esp = INIT;
	//esp8266_broker_setup(&connection_info);
	int internalState = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
	TickType_t t = xTaskGetTickCount();
 8002928:	f00d fc74 	bl	8010214 <xTaskGetTickCount>
 800292c:	4603      	mov	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]
	printf("Conectando a wifi, Espere por favor.. \r\n");
 8002930:	4866      	ldr	r0, [pc, #408]	; (8002acc <wifiConnectTask+0x1b0>)
 8002932:	f010 fb1b 	bl	8012f6c <puts>
	for (;;) {
		switch (internalState) {
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b06      	cmp	r3, #6
 800293a:	f200 80c2 	bhi.w	8002ac2 <wifiConnectTask+0x1a6>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <wifiConnectTask+0x28>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002961 	.word	0x08002961
 8002948:	0800299f 	.word	0x0800299f
 800294c:	080029d1 	.word	0x080029d1
 8002950:	080029ff 	.word	0x080029ff
 8002954:	08002a45 	.word	0x08002a45
 8002958:	08002a73 	.word	0x08002a73
 800295c:	08002aa5 	.word	0x08002aa5
		case 0:
			// Turn the LED off.
			vLedWrite(LED_2, GPIO_PIN_RESET);
 8002960:	2100      	movs	r1, #0
 8002962:	2001      	movs	r0, #1
 8002964:	f7fe fcd8 	bl	8001318 <vLedWrite>
			// Connect to wifi (restore to default first).
			Status = ESP_ConnectWifi(true, WIFI_AP_SSID, WIFI_AP_PASS);
 8002968:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <wifiConnectTask+0x1b4>)
 800296a:	495a      	ldr	r1, [pc, #360]	; (8002ad4 <wifiConnectTask+0x1b8>)
 800296c:	2001      	movs	r0, #1
 800296e:	f7fd fe69 	bl	8000644 <ESP_ConnectWifi>
 8002972:	4603      	mov	r3, r0
 8002974:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <wifiConnectTask+0x70>
				// To the next state.
				internalState++;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8002982:	2100      	movs	r1, #0
 8002984:	2002      	movs	r0, #2
 8002986:	f7fe fcc7 	bl	8001318 <vLedWrite>
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}

			break;
 800298a:	e091      	b.n	8002ab0 <wifiConnectTask+0x194>
				if (Status == ESP8266_ERROR)
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 808e 	bne.w	8002ab0 <wifiConnectTask+0x194>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8002994:	2101      	movs	r1, #1
 8002996:	2002      	movs	r0, #2
 8002998:	f7fe fcbe 	bl	8001318 <vLedWrite>
			break;
 800299c:	e088      	b.n	8002ab0 <wifiConnectTask+0x194>
		case 1:
			// Wait 1sec.
			Status = ESP_Delay(1000);
 800299e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a2:	f7fd fe21 	bl	80005e8 <ESP_Delay>
 80029a6:	4603      	mov	r3, r0
 80029a8:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <wifiConnectTask+0xa4>
				// To the next state.
				internalState++;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3301      	adds	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 80029b6:	2100      	movs	r1, #0
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7fe fcad 	bl	8001318 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 80029be:	e079      	b.n	8002ab4 <wifiConnectTask+0x198>
				if (Status == ESP8266_ERROR)
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d176      	bne.n	8002ab4 <wifiConnectTask+0x198>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80029c6:	2101      	movs	r1, #1
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7fe fca5 	bl	8001318 <vLedWrite>
			break;
 80029ce:	e071      	b.n	8002ab4 <wifiConnectTask+0x198>
		case 2:
			// Check the wifi connection status.
			Status = ESP_IsConnectedWifi();
 80029d0:	f7fd fee0 	bl	8000794 <ESP_IsConnectedWifi>
 80029d4:	4603      	mov	r3, r0
 80029d6:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <wifiConnectTask+0xd2>
				// To the next state.
				internalState++;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3301      	adds	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 80029e4:	2100      	movs	r1, #0
 80029e6:	2002      	movs	r0, #2
 80029e8:	f7fe fc96 	bl	8001318 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 80029ec:	e064      	b.n	8002ab8 <wifiConnectTask+0x19c>
				if (Status == ESP8266_ERROR)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d161      	bne.n	8002ab8 <wifiConnectTask+0x19c>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80029f4:	2101      	movs	r1, #1
 80029f6:	2002      	movs	r0, #2
 80029f8:	f7fe fc8e 	bl	8001318 <vLedWrite>
			break;
 80029fc:	e05c      	b.n	8002ab8 <wifiConnectTask+0x19c>
		case 3:
			// Start TCP connection.
			Status = ESP_StartTCP(network_host, network_port, network_keepalive,
 80029fe:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <wifiConnectTask+0x1bc>)
 8002a00:	8819      	ldrh	r1, [r3, #0]
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <wifiConnectTask+0x1c0>)
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <wifiConnectTask+0x1c4>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4833      	ldr	r0, [pc, #204]	; (8002ae4 <wifiConnectTask+0x1c8>)
 8002a16:	f7fd fecb 	bl	80007b0 <ESP_StartTCP>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	74fb      	strb	r3, [r7, #19]
					network_ssl);
			if (Status == ESP8266_OK) {
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <wifiConnectTask+0x118>
				// To the next state.
				internalState++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f7fe fc73 	bl	8001318 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8002a32:	e043      	b.n	8002abc <wifiConnectTask+0x1a0>
				if (Status == ESP8266_ERROR)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d140      	bne.n	8002abc <wifiConnectTask+0x1a0>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f7fe fc6b 	bl	8001318 <vLedWrite>
			break;
 8002a42:	e03b      	b.n	8002abc <wifiConnectTask+0x1a0>
		case 4:
			// Send the mqtt data.
			//Status = ESP82_Send(address, bytes);
			Status = mqtt_Connect();
 8002a44:	f7ff fc76 	bl	8002334 <mqtt_Connect>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <wifiConnectTask+0x146>
				internalState++;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	f7fe fc5c 	bl	8001318 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8002a60:	e02e      	b.n	8002ac0 <wifiConnectTask+0x1a4>
				if (Status == ESP8266_ERROR)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d12b      	bne.n	8002ac0 <wifiConnectTask+0x1a4>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8002a68:	2101      	movs	r1, #1
 8002a6a:	2002      	movs	r0, #2
 8002a6c:	f7fe fc54 	bl	8001318 <vLedWrite>
			break;
 8002a70:	e026      	b.n	8002ac0 <wifiConnectTask+0x1a4>
		case 5:
			mqtt_SubscriberPacket(topic_sub);
 8002a72:	481d      	ldr	r0, [pc, #116]	; (8002ae8 <wifiConnectTask+0x1cc>)
 8002a74:	f7ff fcf6 	bl	8002464 <mqtt_SubscriberPacket>
			//Status = mqtt_SubscriberPacket();
			//Status = mqtt_Publisher();
			vTaskDelayUntil(&t, pdMS_TO_TICKS(5000));
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00d fa0b 	bl	800fe9c <vTaskDelayUntil>
			//Status = mqtt_Subscriber();
			//if (Status == ESP8266_OK) {
			vLedWrite(LED_2, GPIO_PIN_SET);
 8002a86:	2101      	movs	r1, #1
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f7fe fc45 	bl	8001318 <vLedWrite>
			xSemaphoreGive(xSemaphorePub);
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <wifiConnectTask+0x1d0>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	f00c fafa 	bl	800f090 <xQueueGenericSend>
			internalState++;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]

			//}
			break;
 8002aa2:	e00e      	b.n	8002ac2 <wifiConnectTask+0x1a6>
		case 6:
			vTaskDelete(wifiTask);
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <wifiConnectTask+0x1d4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00d f985 	bl	800fdb8 <vTaskDelete>
			break;
 8002aae:	e008      	b.n	8002ac2 <wifiConnectTask+0x1a6>
			break;
 8002ab0:	bf00      	nop
 8002ab2:	e006      	b.n	8002ac2 <wifiConnectTask+0x1a6>
			break;
 8002ab4:	bf00      	nop
 8002ab6:	e004      	b.n	8002ac2 <wifiConnectTask+0x1a6>
			break;
 8002ab8:	bf00      	nop
 8002aba:	e002      	b.n	8002ac2 <wifiConnectTask+0x1a6>
			break;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <wifiConnectTask+0x1a6>
			break;
 8002ac0:	bf00      	nop
		}

		osDelay(1 / portTICK_PERIOD_MS);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f00c f85e 	bl	800eb84 <osDelay>
		switch (internalState) {
 8002ac8:	e735      	b.n	8002936 <wifiConnectTask+0x1a>
 8002aca:	bf00      	nop
 8002acc:	08013ea8 	.word	0x08013ea8
 8002ad0:	08013ed0 	.word	0x08013ed0
 8002ad4:	08013ee0 	.word	0x08013ee0
 8002ad8:	20000024 	.word	0x20000024
 8002adc:	20000026 	.word	0x20000026
 8002ae0:	200004c8 	.word	0x200004c8
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	20000028 	.word	0x20000028
 8002aec:	2000eb70 	.word	0x2000eb70
 8002af0:	2000eb6c 	.word	0x2000eb6c

08002af4 <ledTask>:
	}
	vTaskDelete(wifiTask);
}

void ledTask(void *argument) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

	TickType_t t = xTaskGetTickCount();
 8002afc:	f00d fb8a 	bl	8010214 <xTaskGetTickCount>
 8002b00:	4603      	mov	r3, r0
 8002b02:	60fb      	str	r3, [r7, #12]
	for (;;) {
		vLedToggle(LED_1);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fe fc71 	bl	80013ec <vLedToggle>
		vTaskDelayUntil(&t, pdMS_TO_TICKS(100));
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	2164      	movs	r1, #100	; 0x64
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00d f9c3 	bl	800fe9c <vTaskDelayUntil>
		vLedToggle(LED_1);
 8002b16:	e7f5      	b.n	8002b04 <ledTask+0x10>

08002b18 <pubTask>:
	}
}

void pubTask(void *argument) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status;
	uint8_t data = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
	TickType_t t = xTaskGetTickCount();
 8002b24:	f00d fb76 	bl	8010214 <xTaskGetTickCount>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60bb      	str	r3, [r7, #8]
	xSemaphoreTake(xSemaphorePub, portMAX_DELAY);
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <pubTask+0x78>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b34:	4618      	mov	r0, r3
 8002b36:	f00c fd15 	bl	800f564 <xQueueSemaphoreTake>
	for (;;) {
		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8002b3a:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <pubTask+0x7c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002b42:	4618      	mov	r0, r3
 8002b44:	f00c fd0e 	bl	800f564 <xQueueSemaphoreTake>
		Status = mqtt_Publisher(topic_pub, data);
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4812      	ldr	r0, [pc, #72]	; (8002b98 <pubTask+0x80>)
 8002b4e:	f7ff fc43 	bl	80023d8 <mqtt_Publisher>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73bb      	strb	r3, [r7, #14]
		xSemaphoreGive(xSemaphoreMutexUart);
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <pubTask+0x7c>)
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f00c fa96 	bl	800f090 <xQueueGenericSend>
		if (Status == ESP8266_OK) {
 8002b64:	7bbb      	ldrb	r3, [r7, #14]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <pubTask+0x60>
			xSemaphoreGive(xSemaphoreSub);
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <pubTask+0x84>)
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	f00c fa8c 	bl	800f090 <xQueueGenericSend>
		}
		data++;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]

		vTaskDelayUntil(&t, pdMS_TO_TICKS(2500));
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002b86:	4618      	mov	r0, r3
 8002b88:	f00d f988 	bl	800fe9c <vTaskDelayUntil>
		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8002b8c:	e7d5      	b.n	8002b3a <pubTask+0x22>
 8002b8e:	bf00      	nop
 8002b90:	2000eb70 	.word	0x2000eb70
 8002b94:	2000eb68 	.word	0x2000eb68
 8002b98:	20000034 	.word	0x20000034
 8002b9c:	2000eb74 	.word	0x2000eb74

08002ba0 <subTask>:
	}
}

void subTask(void *argument) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status;
	xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <subTask+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00c fcd7 	bl	800f564 <xQueueSemaphoreTake>
	for (;;) {
		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <subTask+0x68>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f00c fcd0 	bl	800f564 <xQueueSemaphoreTake>
		Status = mqtt_SubscriberReceive(topic_sub, &data_rx);
 8002bc4:	4911      	ldr	r1, [pc, #68]	; (8002c0c <subTask+0x6c>)
 8002bc6:	4812      	ldr	r0, [pc, #72]	; (8002c10 <subTask+0x70>)
 8002bc8:	f7ff fc7a 	bl	80024c0 <mqtt_SubscriberReceive>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xSemaphoreMutexUart);
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <subTask+0x68>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	f00c fa59 	bl	800f090 <xQueueGenericSend>
		if (Status == ESP8266_OK) {
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <subTask+0x5c>
			if (data_rx != -1)
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <subTask+0x6c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bec:	d006      	beq.n	8002bfc <subTask+0x5c>
				xQueueSend(xQueueDataRx, &data_rx, 100);
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <subTask+0x74>)
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2264      	movs	r2, #100	; 0x64
 8002bf6:	4905      	ldr	r1, [pc, #20]	; (8002c0c <subTask+0x6c>)
 8002bf8:	f00c fa4a 	bl	800f090 <xQueueGenericSend>
			//xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
		}
		vTaskDelay(1 / portTICK_PERIOD_MS);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f00d f9c7 	bl	800ff90 <vTaskDelay>
		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8002c02:	e7d8      	b.n	8002bb6 <subTask+0x16>
 8002c04:	2000eb74 	.word	0x2000eb74
 8002c08:	2000eb68 	.word	0x2000eb68
 8002c0c:	2000eb64 	.word	0x2000eb64
 8002c10:	20000028 	.word	0x20000028
 8002c14:	2000eb60 	.word	0x2000eb60

08002c18 <analizeTask>:
	}
}

void analizeTask(void *argument) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	int32_t dataQueueRx;
	for (;;) {
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <analizeTask+0x44>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f107 010c 	add.w	r1, r7, #12
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00c fbbd 	bl	800f3ac <xQueueReceive>
		if (dataQueueRx > 100) {
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b64      	cmp	r3, #100	; 0x64
 8002c36:	dd0d      	ble.n	8002c54 <analizeTask+0x3c>
			if (dataQueueRx % 2 == 0) {
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <analizeTask+0x34>
				vLedWrite(LED_2, GPIO_PIN_SET);
 8002c42:	2101      	movs	r1, #1
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7fe fb67 	bl	8001318 <vLedWrite>
 8002c4a:	e003      	b.n	8002c54 <analizeTask+0x3c>
			} else {
				vLedWrite(LED_2, GPIO_PIN_RESET);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7fe fb62 	bl	8001318 <vLedWrite>
			}
		}
		vTaskDelay(1 / portTICK_PERIOD_MS);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f00d f99b 	bl	800ff90 <vTaskDelay>
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 8002c5a:	e7e1      	b.n	8002c20 <analizeTask+0x8>
 8002c5c:	2000eb60 	.word	0x2000eb60

08002c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_MspInit+0x4c>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_MspInit+0x4c>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6613      	str	r3, [r2, #96]	; 0x60
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_MspInit+0x4c>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_MspInit+0x4c>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_MspInit+0x4c>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6593      	str	r3, [r2, #88]	; 0x58
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_MspInit+0x4c>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	210f      	movs	r1, #15
 8002c9a:	f06f 0001 	mvn.w	r0, #1
 8002c9e:	f001 ff71 	bl	8004b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <HAL_ADC_MspInit+0xec>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12d      	bne.n	8002d2e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002cd2:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_ADC_MspInit+0xf0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <HAL_ADC_MspInit+0xf0>)
 8002cda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_ADC_MspInit+0xf0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10b      	bne.n	8002cfc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	4a2e      	ldr	r2, [pc, #184]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfc:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d08:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8002d14:	2318      	movs	r3, #24
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d18:	230b      	movs	r3, #11
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4619      	mov	r1, r3
 8002d26:	4820      	ldr	r0, [pc, #128]	; (8002da8 <HAL_ADC_MspInit+0xf8>)
 8002d28:	f002 f82c 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d2c:	e032      	b.n	8002d94 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_ADC_MspInit+0xfc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d12d      	bne.n	8002d94 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_ADC_MspInit+0xf0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_ADC_MspInit+0xf0>)
 8002d40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_ADC_MspInit+0xf0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10b      	bne.n	8002d62 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d68:	f043 0320 	orr.w	r3, r3, #32
 8002d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_ADC_MspInit+0xf4>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8002d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d80:	230b      	movs	r3, #11
 8002d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 031c 	add.w	r3, r7, #28
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <HAL_ADC_MspInit+0x100>)
 8002d90:	f001 fff8 	bl	8004d84 <HAL_GPIO_Init>
}
 8002d94:	bf00      	nop
 8002d96:	3730      	adds	r7, #48	; 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	50040000 	.word	0x50040000
 8002da0:	200004cc 	.word	0x200004cc
 8002da4:	40021000 	.word	0x40021000
 8002da8:	48000800 	.word	0x48000800
 8002dac:	50040200 	.word	0x50040200
 8002db0:	48001400 	.word	0x48001400

08002db4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a33      	ldr	r2, [pc, #204]	; (8002ea0 <HAL_DCMI_MspInit+0xec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d160      	bne.n	8002e98 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	4a2c      	ldr	r2, [pc, #176]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002e24:	f043 0310 	orr.w	r3, r3, #16
 8002e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_DCMI_MspInit+0xf0>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 8002e36:	f645 7320 	movw	r3, #24352	; 0x5f20
 8002e3a:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002e48:	230a      	movs	r3, #10
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4619      	mov	r1, r3
 8002e52:	4815      	ldr	r0, [pc, #84]	; (8002ea8 <HAL_DCMI_MspInit+0xf4>)
 8002e54:	f001 ff96 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8002e58:	23b0      	movs	r3, #176	; 0xb0
 8002e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002e68:	230a      	movs	r3, #10
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e6c:	f107 031c 	add.w	r3, r7, #28
 8002e70:	4619      	mov	r1, r3
 8002e72:	480e      	ldr	r0, [pc, #56]	; (8002eac <HAL_DCMI_MspInit+0xf8>)
 8002e74:	f001 ff86 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002e88:	230a      	movs	r3, #10
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	4619      	mov	r1, r3
 8002e92:	4807      	ldr	r0, [pc, #28]	; (8002eb0 <HAL_DCMI_MspInit+0xfc>)
 8002e94:	f001 ff76 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002e98:	bf00      	nop
 8002e9a:	3730      	adds	r7, #48	; 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	50050000 	.word	0x50050000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	48001c00 	.word	0x48001c00
 8002eac:	48002000 	.word	0x48002000
 8002eb0:	48001000 	.word	0x48001000

08002eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3d      	ldr	r2, [pc, #244]	; (8002fc8 <HAL_I2C_MspInit+0x114>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d129      	bne.n	8002f2a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eda:	4a3c      	ldr	r2, [pc, #240]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002eee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef4:	2312      	movs	r3, #18
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f00:	2304      	movs	r3, #4
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4831      	ldr	r0, [pc, #196]	; (8002fd0 <HAL_I2C_MspInit+0x11c>)
 8002f0c:	f001 ff3a 	bl	8004d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f28:	e049      	b.n	8002fbe <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <HAL_I2C_MspInit+0x120>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d144      	bne.n	8002fbe <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f52:	f043 0302 	orr.w	r3, r3, #2
 8002f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8002f64:	2310      	movs	r3, #16
 8002f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f68:	2312      	movs	r3, #18
 8002f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f70:	2303      	movs	r3, #3
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f74:	2304      	movs	r3, #4
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4816      	ldr	r0, [pc, #88]	; (8002fd8 <HAL_I2C_MspInit+0x124>)
 8002f80:	f001 ff00 	bl	8004d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8002f84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f8a:	2312      	movs	r3, #18
 8002f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f96:	2304      	movs	r3, #4
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	f107 031c 	add.w	r3, r7, #28
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <HAL_I2C_MspInit+0x11c>)
 8002fa2:	f001 feef 	bl	8004d84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_I2C_MspInit+0x118>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
}
 8002fbe:	bf00      	nop
 8002fc0:	3730      	adds	r7, #48	; 0x30
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40005400 	.word	0x40005400
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	40005800 	.word	0x40005800
 8002fd8:	48001c00 	.word	0x48001c00

08002fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b090      	sub	sp, #64	; 0x40
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a68      	ldr	r2, [pc, #416]	; (800319c <HAL_UART_MspInit+0x1c0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d12b      	bne.n	8003056 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ffe:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	4a67      	ldr	r2, [pc, #412]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	65d3      	str	r3, [r2, #92]	; 0x5c
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003016:	4b62      	ldr	r3, [pc, #392]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	4a61      	ldr	r2, [pc, #388]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800301c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 800302e:	f003 fba7 	bl	8006780 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003032:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003044:	2308      	movs	r3, #8
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800304c:	4619      	mov	r1, r3
 800304e:	4855      	ldr	r0, [pc, #340]	; (80031a4 <HAL_UART_MspInit+0x1c8>)
 8003050:	f001 fe98 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003054:	e09e      	b.n	8003194 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <HAL_UART_MspInit+0x1cc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d14f      	bne.n	8003100 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003060:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	4a4e      	ldr	r2, [pc, #312]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306a:	6613      	str	r3, [r2, #96]	; 0x60
 800306c:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800306e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307c:	4a48      	ldr	r2, [pc, #288]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003084:	4b46      	ldr	r3, [pc, #280]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003090:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	4a42      	ldr	r2, [pc, #264]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309c:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80030a8:	f003 fb6a 	bl	8006780 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030bc:	2307      	movs	r3, #7
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80030c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030c4:	4619      	mov	r1, r3
 80030c6:	4839      	ldr	r0, [pc, #228]	; (80031ac <HAL_UART_MspInit+0x1d0>)
 80030c8:	f001 fe5c 	bl	8004d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80030cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030da:	2303      	movs	r3, #3
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030de:	2307      	movs	r3, #7
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e6:	4619      	mov	r1, r3
 80030e8:	482e      	ldr	r0, [pc, #184]	; (80031a4 <HAL_UART_MspInit+0x1c8>)
 80030ea:	f001 fe4b 	bl	8004d84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2105      	movs	r1, #5
 80030f2:	2025      	movs	r0, #37	; 0x25
 80030f4:	f001 fd46 	bl	8004b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030f8:	2025      	movs	r0, #37	; 0x25
 80030fa:	f001 fd5f 	bl	8004bbc <HAL_NVIC_EnableIRQ>
}
 80030fe:	e049      	b.n	8003194 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <HAL_UART_MspInit+0x1d4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d144      	bne.n	8003194 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003128:	f043 0308 	orr.w	r3, r3, #8
 800312c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_UART_MspInit+0x1c4>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8003152:	2340      	movs	r3, #64	; 0x40
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315e:	2303      	movs	r3, #3
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003162:	2307      	movs	r3, #7
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800316a:	4619      	mov	r1, r3
 800316c:	4811      	ldr	r0, [pc, #68]	; (80031b4 <HAL_UART_MspInit+0x1d8>)
 800316e:	f001 fe09 	bl	8004d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8003172:	2304      	movs	r3, #4
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317e:	2303      	movs	r3, #3
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003182:	2307      	movs	r3, #7
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8003186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800318a:	4619      	mov	r1, r3
 800318c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003190:	f001 fdf8 	bl	8004d84 <HAL_GPIO_Init>
}
 8003194:	bf00      	nop
 8003196:	3740      	adds	r7, #64	; 0x40
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40008000 	.word	0x40008000
 80031a0:	40021000 	.word	0x40021000
 80031a4:	48001800 	.word	0x48001800
 80031a8:	40013800 	.word	0x40013800
 80031ac:	48000400 	.word	0x48000400
 80031b0:	40004400 	.word	0x40004400
 80031b4:	48000c00 	.word	0x48000c00

080031b8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_UART_MspDeInit+0x8c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10b      	bne.n	80031e2 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <HAL_UART_MspDeInit+0x90>)
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_UART_MspDeInit+0x90>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	65d3      	str	r3, [r2, #92]	; 0x5c
  
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOG, ARD_D0_Pin|ARD_D1_Pin);
 80031d6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80031da:	481c      	ldr	r0, [pc, #112]	; (800324c <HAL_UART_MspDeInit+0x94>)
 80031dc:	f001 ff64 	bl	80050a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80031e0:	e02b      	b.n	800323a <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_UART_MspDeInit+0x98>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d112      	bne.n	8003212 <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART1_CLK_DISABLE();
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_UART_MspDeInit+0x90>)
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_UART_MspDeInit+0x90>)
 80031f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f6:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(USART1_TX_GPIO_Port, USART1_TX_Pin);
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	4816      	ldr	r0, [pc, #88]	; (8003254 <HAL_UART_MspDeInit+0x9c>)
 80031fc:	f001 ff54 	bl	80050a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin);
 8003200:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003204:	4811      	ldr	r0, [pc, #68]	; (800324c <HAL_UART_MspDeInit+0x94>)
 8003206:	f001 ff4f 	bl	80050a8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800320a:	2025      	movs	r0, #37	; 0x25
 800320c:	f001 fce4 	bl	8004bd8 <HAL_NVIC_DisableIRQ>
}
 8003210:	e013      	b.n	800323a <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a10      	ldr	r2, [pc, #64]	; (8003258 <HAL_UART_MspDeInit+0xa0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d10e      	bne.n	800323a <HAL_UART_MspDeInit+0x82>
    __HAL_RCC_USART2_CLK_DISABLE();
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_UART_MspDeInit+0x90>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_UART_MspDeInit+0x90>)
 8003222:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003226:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(USART2_RX_GPIO_Port, USART2_RX_Pin);
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	480c      	ldr	r0, [pc, #48]	; (800325c <HAL_UART_MspDeInit+0xa4>)
 800322c:	f001 ff3c 	bl	80050a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(USART2_TX_GPIO_Port, USART2_TX_Pin);
 8003230:	2104      	movs	r1, #4
 8003232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003236:	f001 ff37 	bl	80050a8 <HAL_GPIO_DeInit>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40008000 	.word	0x40008000
 8003248:	40021000 	.word	0x40021000
 800324c:	48001800 	.word	0x48001800
 8003250:	40013800 	.word	0x40013800
 8003254:	48000400 	.word	0x48000400
 8003258:	40004400 	.word	0x40004400
 800325c:	48000c00 	.word	0x48000c00

08003260 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a26      	ldr	r2, [pc, #152]	; (8003318 <HAL_QSPI_MspInit+0xb8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d145      	bne.n	800330e <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	4a25      	ldr	r2, [pc, #148]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6513      	str	r3, [r2, #80]	; 0x50
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 8003290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_QSPI_MspInit+0xbc>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80032ca:	f640 0303 	movw	r3, #2051	; 0x803
 80032ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032dc:	230a      	movs	r3, #10
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4619      	mov	r1, r3
 80032e6:	480e      	ldr	r0, [pc, #56]	; (8003320 <HAL_QSPI_MspInit+0xc0>)
 80032e8:	f001 fd4c 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80032ec:	23c8      	movs	r3, #200	; 0xc8
 80032ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032fc:	230a      	movs	r3, #10
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330a:	f001 fd3b 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800330e:	bf00      	nop
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	a0001000 	.word	0xa0001000
 800331c:	40021000 	.word	0x40021000
 8003320:	48000400 	.word	0x48000400

08003324 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a25      	ldr	r2, [pc, #148]	; (80033d8 <HAL_SD_MspInit+0xb4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d144      	bne.n	80033d0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_SD_MspInit+0xb8>)
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	4a24      	ldr	r2, [pc, #144]	; (80033dc <HAL_SD_MspInit+0xb8>)
 800334c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003350:	6613      	str	r3, [r2, #96]	; 0x60
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_SD_MspInit+0xb8>)
 8003354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800335e:	4b1f      	ldr	r3, [pc, #124]	; (80033dc <HAL_SD_MspInit+0xb8>)
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_SD_MspInit+0xb8>)
 8003364:	f043 0308 	orr.w	r3, r3, #8
 8003368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <HAL_SD_MspInit+0xb8>)
 800336c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_SD_MspInit+0xb8>)
 8003378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337a:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_SD_MspInit+0xb8>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_SD_MspInit+0xb8>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800338e:	2304      	movs	r3, #4
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	2303      	movs	r3, #3
 800339c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800339e:	230c      	movs	r3, #12
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	4619      	mov	r1, r3
 80033a8:	480d      	ldr	r0, [pc, #52]	; (80033e0 <HAL_SD_MspInit+0xbc>)
 80033aa:	f001 fceb 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 80033ae:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80033b2:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80033c0:	230c      	movs	r3, #12
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	4619      	mov	r1, r3
 80033ca:	4806      	ldr	r0, [pc, #24]	; (80033e4 <HAL_SD_MspInit+0xc0>)
 80033cc:	f001 fcda 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80033d0:	bf00      	nop
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40012800 	.word	0x40012800
 80033dc:	40021000 	.word	0x40021000
 80033e0:	48000c00 	.word	0x48000c00
 80033e4:	48000800 	.word	0x48000800

080033e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a25      	ldr	r2, [pc, #148]	; (800349c <HAL_SPI_MspInit+0xb4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d144      	bne.n	8003494 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	4a24      	ldr	r2, [pc, #144]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 8003410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003414:	6593      	str	r3, [r2, #88]	; 0x58
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003422:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_SPI_MspInit+0xb8>)
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8003452:	2306      	movs	r3, #6
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003462:	2305      	movs	r3, #5
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <HAL_SPI_MspInit+0xbc>)
 800346e:	f001 fc89 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003484:	2305      	movs	r3, #5
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	4619      	mov	r1, r3
 800348e:	4806      	ldr	r0, [pc, #24]	; (80034a8 <HAL_SPI_MspInit+0xc0>)
 8003490:	f001 fc78 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003494:	bf00      	nop
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40003800 	.word	0x40003800
 80034a0:	40021000 	.word	0x40021000
 80034a4:	48002000 	.word	0x48002000
 80034a8:	48000400 	.word	0x48000400

080034ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_FMC_MspInit+0xc4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d14f      	bne.n	8003568 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_FMC_MspInit+0xc4>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <HAL_FMC_MspInit+0xc8>)
 80034d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d2:	4a28      	ldr	r2, [pc, #160]	; (8003574 <HAL_FMC_MspInit+0xc8>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6513      	str	r3, [r2, #80]	; 0x50
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <HAL_FMC_MspInit+0xc8>)
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 80034e6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80034ea:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034f8:	230c      	movs	r3, #12
 80034fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	481d      	ldr	r0, [pc, #116]	; (8003578 <HAL_FMC_MspInit+0xcc>)
 8003502:	f001 fc3f 	bl	8004d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 8003506:	f240 233f 	movw	r3, #575	; 0x23f
 800350a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003518:	230c      	movs	r3, #12
 800351a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4816      	ldr	r0, [pc, #88]	; (800357c <HAL_FMC_MspInit+0xd0>)
 8003522:	f001 fc2f 	bl	8004d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 8003526:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800352a:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003538:	230c      	movs	r3, #12
 800353a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	4619      	mov	r1, r3
 8003540:	480f      	ldr	r0, [pc, #60]	; (8003580 <HAL_FMC_MspInit+0xd4>)
 8003542:	f001 fc1f 	bl	8004d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 8003546:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800354a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003558:	230c      	movs	r3, #12
 800355a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4808      	ldr	r0, [pc, #32]	; (8003584 <HAL_FMC_MspInit+0xd8>)
 8003562:	f001 fc0f 	bl	8004d84 <HAL_GPIO_Init>
 8003566:	e000      	b.n	800356a <HAL_FMC_MspInit+0xbe>
    return;
 8003568:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200004d0 	.word	0x200004d0
 8003574:	40021000 	.word	0x40021000
 8003578:	48001000 	.word	0x48001000
 800357c:	48001800 	.word	0x48001800
 8003580:	48000c00 	.word	0x48000c00
 8003584:	48001400 	.word	0x48001400

08003588 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003590:	f7ff ff8c 	bl	80034ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a33      	ldr	r2, [pc, #204]	; (8003678 <HAL_SAI_MspInit+0xdc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d135      	bne.n	800361a <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80035ae:	4b33      	ldr	r3, [pc, #204]	; (800367c <HAL_SAI_MspInit+0xe0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80035b6:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_SAI_MspInit+0xe4>)
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_SAI_MspInit+0xe4>)
 80035bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035c0:	6613      	str	r3, [r2, #96]	; 0x60
 80035c2:	4b2f      	ldr	r3, [pc, #188]	; (8003680 <HAL_SAI_MspInit+0xe4>)
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_SAI_MspInit+0xe0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4a29      	ldr	r2, [pc, #164]	; (800367c <HAL_SAI_MspInit+0xe0>)
 80035d6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80035d8:	2354      	movs	r3, #84	; 0x54
 80035da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	2302      	movs	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035e8:	230d      	movs	r3, #13
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4619      	mov	r1, r3
 80035f2:	4824      	ldr	r0, [pc, #144]	; (8003684 <HAL_SAI_MspInit+0xe8>)
 80035f4:	f001 fbc6 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800360a:	230d      	movs	r3, #13
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	481c      	ldr	r0, [pc, #112]	; (8003688 <HAL_SAI_MspInit+0xec>)
 8003616:	f001 fbb5 	bl	8004d84 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_SAI_MspInit+0xf0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d124      	bne.n	800366e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <HAL_SAI_MspInit+0xe0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <HAL_SAI_MspInit+0xe4>)
 800362e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_SAI_MspInit+0xe4>)
 8003632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003636:	6613      	str	r3, [r2, #96]	; 0x60
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_SAI_MspInit+0xe4>)
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <HAL_SAI_MspInit+0xe0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <HAL_SAI_MspInit+0xe0>)
 800364c:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800364e:	2308      	movs	r3, #8
 8003650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
 8003654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800365e:	230d      	movs	r3, #13
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8003662:	f107 0314 	add.w	r3, r7, #20
 8003666:	4619      	mov	r1, r3
 8003668:	4806      	ldr	r0, [pc, #24]	; (8003684 <HAL_SAI_MspInit+0xe8>)
 800366a:	f001 fb8b 	bl	8004d84 <HAL_GPIO_Init>

    }
}
 800366e:	bf00      	nop
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40015404 	.word	0x40015404
 800367c:	200004d4 	.word	0x200004d4
 8003680:	40021000 	.word	0x40021000
 8003684:	48001000 	.word	0x48001000
 8003688:	48000400 	.word	0x48000400
 800368c:	40015424 	.word	0x40015424

08003690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	2036      	movs	r0, #54	; 0x36
 80036a6:	f001 fa6d 	bl	8004b84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80036aa:	2036      	movs	r0, #54	; 0x36
 80036ac:	f001 fa86 	bl	8004bbc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_InitTick+0x9c>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_InitTick+0x9c>)
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	6593      	str	r3, [r2, #88]	; 0x58
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_InitTick+0x9c>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036c8:	f107 0210 	add.w	r2, r7, #16
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f003 fefc 	bl	80074d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036d8:	f003 fece 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 80036dc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	4a13      	ldr	r2, [pc, #76]	; (8003730 <HAL_InitTick+0xa0>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0c9b      	lsrs	r3, r3, #18
 80036e8:	3b01      	subs	r3, #1
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_InitTick+0xa4>)
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_InitTick+0xa8>)
 80036f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_InitTick+0xa4>)
 80036f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <HAL_InitTick+0xa4>)
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_InitTick+0xa4>)
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_InitTick+0xa4>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800370c:	4809      	ldr	r0, [pc, #36]	; (8003734 <HAL_InitTick+0xa4>)
 800370e:	f006 fa35 	bl	8009b7c <HAL_TIM_Base_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003718:	4806      	ldr	r0, [pc, #24]	; (8003734 <HAL_InitTick+0xa4>)
 800371a:	f006 fa65 	bl	8009be8 <HAL_TIM_Base_Start_IT>
 800371e:	4603      	mov	r3, r0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3730      	adds	r7, #48	; 0x30
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	431bde83 	.word	0x431bde83
 8003734:	2000eb78 	.word	0x2000eb78
 8003738:	40001000 	.word	0x40001000

0800373c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	vLedWrite(LED_5, GPIO_PIN_SET);
 800374e:	2101      	movs	r1, #1
 8003750:	2004      	movs	r0, #4
 8003752:	f7fd fde1 	bl	8001318 <vLedWrite>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003756:	e7fe      	b.n	8003756 <HardFault_Handler+0xc>

08003758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800375c:	e7fe      	b.n	800375c <MemManage_Handler+0x4>

0800375e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003762:	e7fe      	b.n	8003762 <BusFault_Handler+0x4>

08003764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <UsageFault_Handler+0x4>

0800376a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <USART1_IRQHandler+0x10>)
 800377e:	f006 fddf 	bl	800a340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	2000e940 	.word	0x2000e940

0800378c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <TIM6_DAC_IRQHandler+0x10>)
 8003792:	f006 fa53 	bl	8009c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000eb78 	.word	0x2000eb78

080037a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <OTG_FS_IRQHandler+0x10>)
 80037a6:	f002 f81b 	bl	80057e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200100c0 	.word	0x200100c0

080037b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
	return 1;
 80037b8:	2301      	movs	r3, #1
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <_kill>:

int _kill(int pid, int sig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ce:	f00e ff99 	bl	8012704 <__errno>
 80037d2:	4602      	mov	r2, r0
 80037d4:	2316      	movs	r3, #22
 80037d6:	6013      	str	r3, [r2, #0]
	return -1;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_exit>:

void _exit (int status)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ffe7 	bl	80037c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037f6:	e7fe      	b.n	80037f6 <_exit+0x12>

080037f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e00a      	b.n	8003820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800380a:	f3af 8000 	nop.w
 800380e:	4601      	mov	r1, r0
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	60ba      	str	r2, [r7, #8]
 8003816:	b2ca      	uxtb	r2, r1
 8003818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	dbf0      	blt.n	800380a <_read+0x12>
	}

return len;
 8003828:	687b      	ldr	r3, [r7, #4]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
	return -1;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800385a:	605a      	str	r2, [r3, #4]
	return 0;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_isatty>:

int _isatty(int file)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
	return 1;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
	return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <_sbrk+0x50>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <_sbrk+0x16>
		heap_end = &end;
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <_sbrk+0x50>)
 80038ae:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <_sbrk+0x54>)
 80038b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <_sbrk+0x50>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <_sbrk+0x50>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	466a      	mov	r2, sp
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d907      	bls.n	80038d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80038c6:	f00e ff1d 	bl	8012704 <__errno>
 80038ca:	4602      	mov	r2, r0
 80038cc:	230c      	movs	r3, #12
 80038ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d4:	e006      	b.n	80038e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <_sbrk+0x50>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	4a03      	ldr	r2, [pc, #12]	; (80038ec <_sbrk+0x50>)
 80038e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200004d8 	.word	0x200004d8
 80038f0:	200104d0 	.word	0x200104d0

080038f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <SystemInit+0x64>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	4a16      	ldr	r2, [pc, #88]	; (8003958 <SystemInit+0x64>)
 8003900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <SystemInit+0x68>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <SystemInit+0x68>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <SystemInit+0x68>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <SystemInit+0x68>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a0f      	ldr	r2, [pc, #60]	; (800395c <SystemInit+0x68>)
 8003920:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003924:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003928:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <SystemInit+0x68>)
 800392c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003930:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <SystemInit+0x68>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <SystemInit+0x68>)
 8003938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <SystemInit+0x68>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <SystemInit+0x64>)
 8003946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800394a:	609a      	str	r2, [r3, #8]
#endif
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_UART_RxCpltCallback>:
/**
 * @brief  Rx Callback when new data is received on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	// Set transmission flag: transfer complete
	//BaseType_t xHigherPriorityTaskWoken;
	if (huart->Instance == USART1) {
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <HAL_UART_RxCpltCallback+0x54>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d11c      	bne.n	80039ac <HAL_UART_RxCpltCallback+0x4c>

		if (++WiFiRxBuffer.tail >= ESP_BUFFERSIZE_CIRCULAR) {
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_UART_RxCpltCallback+0x58>)
 8003974:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8003978:	3301      	adds	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <HAL_UART_RxCpltCallback+0x58>)
 800397e:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_UART_RxCpltCallback+0x58>)
 8003984:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8003988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398c:	d303      	bcc.n	8003996 <HAL_UART_RxCpltCallback+0x36>
			WiFiRxBuffer.tail = 0;
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_UART_RxCpltCallback+0x58>)
 8003990:	2200      	movs	r2, #0
 8003992:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		}
		// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(huart, (uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_UART_RxCpltCallback+0x58>)
 8003998:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800399c:	461a      	mov	r2, r3
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_UART_RxCpltCallback+0x58>)
 80039a0:	4413      	add	r3, r2
 80039a2:	2201      	movs	r2, #1
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f006 fc28 	bl	800a1fc <HAL_UART_Receive_IT>
	}
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40013800 	.word	0x40013800
 80039b8:	2000dd3c 	.word	0x2000dd3c

080039bc <HAL_UART_ErrorCallback>:
/**
 * @brief  Function called when error happens on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	WIFI_Handler();
 80039c4:	f000 f83a 	bl	8003a3c <WIFI_Handler>
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_F_Init>:

void HAL_UART_F_Init(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0

	WiFiRxBuffer.head = 0;
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_UART_F_Init+0x30>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	WiFiRxBuffer.tail = 0;
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <HAL_UART_F_Init+0x30>)
 80039de:	2200      	movs	r2, #0
 80039e0:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

	HAL_UART_Receive_IT(&huart1,
			(uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_UART_F_Init+0x30>)
 80039e6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80039ea:	461a      	mov	r2, r3
	HAL_UART_Receive_IT(&huart1,
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_UART_F_Init+0x30>)
 80039ee:	4413      	add	r3, r2
 80039f0:	2201      	movs	r2, #1
 80039f2:	4619      	mov	r1, r3
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <HAL_UART_F_Init+0x34>)
 80039f6:	f006 fc01 	bl	800a1fc <HAL_UART_Receive_IT>

}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000dd3c 	.word	0x2000dd3c
 8003a04:	2000e940 	.word	0x2000e940

08003a08 <HAL_UART_F_Send>:
void HAL_UART_F_DeInit(void) {
	/* Reset USART configuration to default */
	HAL_UART_DeInit(&huart1);
}

int8_t HAL_UART_F_Send(const char* Buffer, const uint8_t Length) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
	/* It is using a blocking call to ensure that the AT commands were correctly sent. */
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) Buffer, Length) != HAL_OK){//, ESP_DEFAULT_TIME_OUT
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4806      	ldr	r0, [pc, #24]	; (8003a38 <HAL_UART_F_Send+0x30>)
 8003a1e:	f006 fb91 	bl	800a144 <HAL_UART_Transmit_IT>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_UART_F_Send+0x26>
	//if (HAL_UART_Transmit(&huart1, (uint8_t*) Buffer, Length, ESP_DEFAULT_TIME_OUT) != HAL_OK){
		return -1;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a2c:	e000      	b.n	8003a30 <HAL_UART_F_Send+0x28>
	}
	return 0;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	2000e940 	.word	0x2000e940

08003a3c <WIFI_Handler>:
/**
 * @brief  Handler to deinialize the ESP8266 UART interface in case of errors.
 * @param  None
 * @retval None.
 */
static void WIFI_Handler(void) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <WIFI_Handler+0x14>)
 8003a42:	f006 fb49 	bl	800a0d8 <HAL_UART_DeInit>
	vLedWrite(LED_5, GPIO_PIN_SET);
 8003a46:	2101      	movs	r1, #1
 8003a48:	2004      	movs	r0, #4
 8003a4a:	f7fd fc65 	bl	8001318 <vLedWrite>
	while (1) {
 8003a4e:	e7fe      	b.n	8003a4e <WIFI_Handler+0x12>
 8003a50:	2000e940 	.word	0x2000e940

08003a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a5a:	e003      	b.n	8003a64 <LoopCopyDataInit>

08003a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a62:	3104      	adds	r1, #4

08003a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a64:	480b      	ldr	r0, [pc, #44]	; (8003a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a6c:	d3f6      	bcc.n	8003a5c <CopyDataInit>
	ldr	r2, =_sbss
 8003a6e:	4a0b      	ldr	r2, [pc, #44]	; (8003a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a70:	e002      	b.n	8003a78 <LoopFillZerobss>

08003a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a74:	f842 3b04 	str.w	r3, [r2], #4

08003a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8003a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a7c:	d3f9      	bcc.n	8003a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a7e:	f7ff ff39 	bl	80038f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a82:	f00e fe57 	bl	8012734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a86:	f7fd fd4f 	bl	8001528 <main>

08003a8a <LoopForever>:

LoopForever:
    b LoopForever
 8003a8a:	e7fe      	b.n	8003a8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a8c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8003a90:	080141c8 	.word	0x080141c8
	ldr	r0, =_sdata
 8003a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a98:	200003a0 	.word	0x200003a0
	ldr	r2, =_sbss
 8003a9c:	200003a0 	.word	0x200003a0
	ldr	r3, = _ebss
 8003aa0:	200104cc 	.word	0x200104cc

08003aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003aa4:	e7fe      	b.n	8003aa4 <ADC1_2_IRQHandler>

08003aa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab0:	2003      	movs	r0, #3
 8003ab2:	f001 f85c 	bl	8004b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7ff fdea 	bl	8003690 <HAL_InitTick>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	71fb      	strb	r3, [r7, #7]
 8003ac6:	e001      	b.n	8003acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ac8:	f7ff f8ca 	bl	8002c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003acc:	79fb      	ldrb	r3, [r7, #7]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_IncTick+0x1c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_IncTick+0x20>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_IncTick+0x1c>)
 8003ae8:	6013      	str	r3, [r2, #0]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	2000ebb8 	.word	0x2000ebb8
 8003af8:	20000048 	.word	0x20000048

08003afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return uwTick;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_GetTick+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	2000ebb8 	.word	0x2000ebb8

08003b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff ffee 	bl	8003afc <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2c:	d004      	beq.n	8003b38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_Delay+0x40>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b38:	bf00      	nop
 8003b3a:	f7ff ffdf 	bl	8003afc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d8f7      	bhi.n	8003b3a <HAL_Delay+0x26>
  {
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000048 	.word	0x20000048

08003b58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	609a      	str	r2, [r3, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bc0:	b490      	push	{r4, r7}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3360      	adds	r3, #96	; 0x60
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <LL_ADC_SetOffset+0x40>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc90      	pop	{r4, r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	03fff000 	.word	0x03fff000

08003c04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c04:	b490      	push	{r4, r7}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3360      	adds	r3, #96	; 0x60
 8003c12:	461a      	mov	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc90      	pop	{r4, r7}
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c2c:	b490      	push	{r4, r7}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3360      	adds	r3, #96	; 0x60
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc90      	pop	{r4, r7}
 8003c5a:	4770      	bx	lr

08003c5c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	615a      	str	r2, [r3, #20]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c82:	b490      	push	{r4, r7}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3330      	adds	r3, #48	; 0x30
 8003c92:	461a      	mov	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	4413      	add	r3, r2
 8003ca0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	211f      	movs	r1, #31
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	f003 011f 	and.w	r1, r3, #31
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc90      	pop	{r4, r7}
 8003cd2:	4770      	bx	lr

08003cd4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cd4:	b490      	push	{r4, r7}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3314      	adds	r3, #20
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	0e5b      	lsrs	r3, r3, #25
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	4413      	add	r3, r2
 8003cf2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2107      	movs	r1, #7
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	401a      	ands	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	0d1b      	lsrs	r3, r3, #20
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	4313      	orrs	r3, r2
 8003d18:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc90      	pop	{r4, r7}
 8003d22:	4770      	bx	lr

08003d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0318 	and.w	r3, r3, #24
 8003d46:	4908      	ldr	r1, [pc, #32]	; (8003d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d48:	40d9      	lsrs	r1, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	0007ffff 	.word	0x0007ffff

08003d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6093      	str	r3, [r2, #8]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d101      	bne.n	8003daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df4:	d101      	bne.n	8003dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <LL_ADC_IsEnabled+0x18>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <LL_ADC_IsEnabled+0x1a>
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d101      	bne.n	8003e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d101      	bne.n	8003e6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e137      	b.n	8004106 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fe ff03 	bl	8002cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff67 	bl	8003d90 <LL_ADC_IsDeepPowerDownEnabled>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff4d 	bl	8003d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff82 	bl	8003de0 <LL_ADC_IsInternalRegulatorEnabled>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d113      	bne.n	8003f0a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff66 	bl	8003db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003eec:	4b88      	ldr	r3, [pc, #544]	; (8004110 <HAL_ADC_Init+0x294>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	4a88      	ldr	r2, [pc, #544]	; (8004114 <HAL_ADC_Init+0x298>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003efc:	e002      	b.n	8003f04 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f9      	bne.n	8003efe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff66 	bl	8003de0 <LL_ADC_IsInternalRegulatorEnabled>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10d      	bne.n	8003f36 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff77 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 8003f40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 80d2 	bne.w	80040f4 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 80ce 	bne.w	80040f4 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f60:	f043 0202 	orr.w	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff4b 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d115      	bne.n	8003fa4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f78:	4867      	ldr	r0, [pc, #412]	; (8004118 <HAL_ADC_Init+0x29c>)
 8003f7a:	f7ff ff45 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4866      	ldr	r0, [pc, #408]	; (800411c <HAL_ADC_Init+0x2a0>)
 8003f82:	f7ff ff41 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f86:	4603      	mov	r3, r0
 8003f88:	431c      	orrs	r4, r3
 8003f8a:	4865      	ldr	r0, [pc, #404]	; (8004120 <HAL_ADC_Init+0x2a4>)
 8003f8c:	f7ff ff3c 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4323      	orrs	r3, r4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4861      	ldr	r0, [pc, #388]	; (8004124 <HAL_ADC_Init+0x2a8>)
 8003fa0:	f7ff fdda 	bl	8003b58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7e5b      	ldrb	r3, [r3, #25]
 8003fa8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003fb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003fba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d106      	bne.n	8003fe0 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	045b      	lsls	r3, r3, #17
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	4b49      	ldr	r3, [pc, #292]	; (8004128 <HAL_ADC_Init+0x2ac>)
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	430b      	orrs	r3, r1
 800400e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff0a 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 800401a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff17 	bl	8003e54 <LL_ADC_INJ_IsConversionOngoing>
 8004026:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d140      	bne.n	80040b0 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d13d      	bne.n	80040b0 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7e1b      	ldrb	r3, [r3, #24]
 800403c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800403e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004046:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004056:	f023 0306 	bic.w	r3, r3, #6
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	69b9      	ldr	r1, [r7, #24]
 8004060:	430b      	orrs	r3, r1
 8004062:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800406a:	2b01      	cmp	r3, #1
 800406c:	d118      	bne.n	80040a0 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800408a:	4311      	orrs	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004090:	430a      	orrs	r2, r1
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	e007      	b.n	80040b0 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10c      	bne.n	80040d2 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f023 010f 	bic.w	r1, r3, #15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	1e5a      	subs	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
 80040d0:	e007      	b.n	80040e2 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 020f 	bic.w	r2, r2, #15
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	f043 0201 	orr.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	; 0x58
 80040f2:	e007      	b.n	8004104 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004104:	7ffb      	ldrb	r3, [r7, #31]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd90      	pop	{r4, r7, pc}
 800410e:	bf00      	nop
 8004110:	20000040 	.word	0x20000040
 8004114:	053e2d63 	.word	0x053e2d63
 8004118:	50040000 	.word	0x50040000
 800411c:	50040100 	.word	0x50040100
 8004120:	50040200 	.word	0x50040200
 8004124:	50040300 	.word	0x50040300
 8004128:	fff0c007 	.word	0xfff0c007

0800412c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b0a6      	sub	sp, #152	; 0x98
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_ADC_ConfigChannel+0x22>
 800414a:	2302      	movs	r3, #2
 800414c:	e364      	b.n	8004818 <HAL_ADC_ConfigChannel+0x6ec>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fe67 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 8345 	bne.w	80047f2 <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b05      	cmp	r3, #5
 800416e:	d824      	bhi.n	80041ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	3b02      	subs	r3, #2
 8004176:	2b03      	cmp	r3, #3
 8004178:	d81b      	bhi.n	80041b2 <HAL_ADC_ConfigChannel+0x86>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_ADC_ConfigChannel+0x54>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004191 	.word	0x08004191
 8004184:	08004199 	.word	0x08004199
 8004188:	080041a1 	.word	0x080041a1
 800418c:	080041a9 	.word	0x080041a9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	220c      	movs	r2, #12
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	e011      	b.n	80041bc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2212      	movs	r2, #18
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e00d      	b.n	80041bc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2218      	movs	r2, #24
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	e009      	b.n	80041bc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e004      	b.n	80041bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2206      	movs	r2, #6
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	e000      	b.n	80041bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80041ba:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f7ff fd5a 	bl	8003c82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fe2b 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 80041d8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fe37 	bl	8003e54 <LL_ADC_INJ_IsConversionOngoing>
 80041e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 8163 	bne.w	80044ba <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 815e 	bne.w	80044ba <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004206:	d10f      	bne.n	8004228 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	4619      	mov	r1, r3
 8004214:	f7ff fd5e 	bl	8003cd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fd1b 	bl	8003c5c <LL_ADC_SetSamplingTimeCommonConfig>
 8004226:	e00e      	b.n	8004246 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	461a      	mov	r2, r3
 8004236:	f7ff fd4d 	bl	8003cd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fd0b 	bl	8003c5c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	08db      	lsrs	r3, r3, #3
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d00a      	beq.n	800427e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6919      	ldr	r1, [r3, #16]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004278:	f7ff fca2 	bl	8003bc0 <LL_ADC_SetOffset>
 800427c:	e11d      	b.n	80044ba <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fcbd 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x17e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fcb2 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	0e9b      	lsrs	r3, r3, #26
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	e012      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x1a4>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fca7 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x1bc>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0e9b      	lsrs	r3, r3, #26
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	e00a      	b.n	80042fe <HAL_ADC_ConfigChannel+0x1d2>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80042f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	429a      	cmp	r2, r3
 8004300:	d106      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fc8e 	bl	8003c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fc74 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 800431c:	4603      	mov	r3, r0
 800431e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <HAL_ADC_ConfigChannel+0x210>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fc69 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 8004332:	4603      	mov	r3, r0
 8004334:	0e9b      	lsrs	r3, r3, #26
 8004336:	f003 021f 	and.w	r2, r3, #31
 800433a:	e010      	b.n	800435e <HAL_ADC_ConfigChannel+0x232>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fc5e 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x24a>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0e9b      	lsrs	r3, r3, #26
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	e00a      	b.n	800438c <HAL_ADC_ConfigChannel+0x260>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	429a      	cmp	r2, r3
 800438e:	d106      	bne.n	800439e <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2200      	movs	r2, #0
 8004396:	2101      	movs	r1, #1
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fc47 	bl	8003c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fc2d 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x29e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fc22 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 80043c0:	4603      	mov	r3, r0
 80043c2:	0e9b      	lsrs	r3, r3, #26
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	e010      	b.n	80043ec <HAL_ADC_ConfigChannel+0x2c0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2102      	movs	r1, #2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fc17 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 80043d6:	4603      	mov	r3, r0
 80043d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80043e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x2d8>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0e9b      	lsrs	r3, r3, #26
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	e00a      	b.n	800441a <HAL_ADC_ConfigChannel+0x2ee>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004414:	fab3 f383 	clz	r3, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	429a      	cmp	r2, r3
 800441c:	d106      	bne.n	800442c <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fc00 	bl	8003c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2103      	movs	r1, #3
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fbe6 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 8004438:	4603      	mov	r3, r0
 800443a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x32c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2103      	movs	r1, #3
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fbdb 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	0e9b      	lsrs	r3, r3, #26
 8004452:	f003 021f 	and.w	r2, r3, #31
 8004456:	e010      	b.n	800447a <HAL_ADC_ConfigChannel+0x34e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2103      	movs	r1, #3
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fbd0 	bl	8003c04 <LL_ADC_GetOffsetChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x366>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	0e9b      	lsrs	r3, r3, #26
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	e00a      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x37c>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80044a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d106      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2200      	movs	r2, #0
 80044b2:	2103      	movs	r1, #3
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fbb9 	bl	8003c2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fca2 	bl	8003e08 <LL_ADC_IsEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 810c 	bne.w	80046e4 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	461a      	mov	r2, r3
 80044da:	f7ff fc23 	bl	8003d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4aae      	ldr	r2, [pc, #696]	; (800479c <HAL_ADC_ConfigChannel+0x670>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	f040 80fd 	bne.w	80046e4 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x3e6>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0e9b      	lsrs	r3, r3, #26
 8004500:	3301      	adds	r3, #1
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2b09      	cmp	r3, #9
 8004508:	bf94      	ite	ls
 800450a:	2301      	movls	r3, #1
 800450c:	2300      	movhi	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	e012      	b.n	8004538 <HAL_ADC_ConfigChannel+0x40c>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800451a:	fa93 f3a3 	rbit	r3, r3
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	3301      	adds	r3, #1
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2b09      	cmp	r3, #9
 8004530:	bf94      	ite	ls
 8004532:	2301      	movls	r3, #1
 8004534:	2300      	movhi	r3, #0
 8004536:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004538:	2b00      	cmp	r3, #0
 800453a:	d064      	beq.n	8004606 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x42c>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	3301      	adds	r3, #1
 8004550:	069b      	lsls	r3, r3, #26
 8004552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004556:	e00e      	b.n	8004576 <HAL_ADC_ConfigChannel+0x44a>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	3301      	adds	r3, #1
 8004570:	069b      	lsls	r3, r3, #26
 8004572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x46a>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	0e9b      	lsrs	r3, r3, #26
 8004588:	3301      	adds	r3, #1
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	e010      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x48c>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3301      	adds	r3, #1
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2101      	movs	r1, #1
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	ea42 0103 	orr.w	r1, r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <HAL_ADC_ConfigChannel+0x4b2>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0e9b      	lsrs	r3, r3, #26
 80045ce:	3301      	adds	r3, #1
 80045d0:	f003 021f 	and.w	r2, r3, #31
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	051b      	lsls	r3, r3, #20
 80045dc:	e011      	b.n	8004602 <HAL_ADC_ConfigChannel+0x4d6>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	f003 021f 	and.w	r2, r3, #31
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004602:	430b      	orrs	r3, r1
 8004604:	e069      	b.n	80046da <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x4f6>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	0e9b      	lsrs	r3, r3, #26
 8004618:	3301      	adds	r3, #1
 800461a:	069b      	lsls	r3, r3, #26
 800461c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004620:	e00e      	b.n	8004640 <HAL_ADC_ConfigChannel+0x514>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	61fb      	str	r3, [r7, #28]
  return result;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3301      	adds	r3, #1
 800463a:	069b      	lsls	r3, r3, #26
 800463c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x534>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0e9b      	lsrs	r3, r3, #26
 8004652:	3301      	adds	r3, #1
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	e010      	b.n	8004682 <HAL_ADC_ConfigChannel+0x556>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	617b      	str	r3, [r7, #20]
  return result;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	ea42 0103 	orr.w	r1, r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10d      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x582>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	0e9b      	lsrs	r3, r3, #26
 8004698:	3301      	adds	r3, #1
 800469a:	f003 021f 	and.w	r2, r3, #31
 800469e:	4613      	mov	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4413      	add	r3, r2
 80046a4:	3b1e      	subs	r3, #30
 80046a6:	051b      	lsls	r3, r3, #20
 80046a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ac:	e014      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x5ac>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	60fb      	str	r3, [r7, #12]
  return result;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 021f 	and.w	r2, r3, #31
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	3b1e      	subs	r3, #30
 80046d2:	051b      	lsls	r3, r3, #20
 80046d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d8:	430b      	orrs	r3, r1
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	6892      	ldr	r2, [r2, #8]
 80046de:	4619      	mov	r1, r3
 80046e0:	f7ff faf8 	bl	8003cd4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_ADC_ConfigChannel+0x674>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 808d 	beq.w	800480c <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f2:	482c      	ldr	r0, [pc, #176]	; (80047a4 <HAL_ADC_ConfigChannel+0x678>)
 80046f4:	f7ff fa56 	bl	8003ba4 <LL_ADC_GetCommonPathInternalCh>
 80046f8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <HAL_ADC_ConfigChannel+0x67c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d12b      	bne.n	800475e <HAL_ADC_ConfigChannel+0x632>
 8004706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d125      	bne.n	800475e <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a25      	ldr	r2, [pc, #148]	; (80047ac <HAL_ADC_ConfigChannel+0x680>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_ADC_ConfigChannel+0x5fa>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <HAL_ADC_ConfigChannel+0x684>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d16f      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800472a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800472e:	4619      	mov	r1, r3
 8004730:	481c      	ldr	r0, [pc, #112]	; (80047a4 <HAL_ADC_ConfigChannel+0x678>)
 8004732:	f7ff fa24 	bl	8003b7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004736:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_ADC_ConfigChannel+0x688>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <HAL_ADC_ConfigChannel+0x68c>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	099a      	lsrs	r2, r3, #6
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800474e:	e002      	b.n	8004756 <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3b01      	subs	r3, #1
 8004754:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f9      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800475c:	e053      	b.n	8004806 <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a16      	ldr	r2, [pc, #88]	; (80047bc <HAL_ADC_ConfigChannel+0x690>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d12b      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x694>
 8004768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800476c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d125      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <HAL_ADC_ConfigChannel+0x680>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_ADC_ConfigChannel+0x65c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a0b      	ldr	r2, [pc, #44]	; (80047b0 <HAL_ADC_ConfigChannel+0x684>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d140      	bne.n	800480a <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800478c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004790:	4619      	mov	r1, r3
 8004792:	4804      	ldr	r0, [pc, #16]	; (80047a4 <HAL_ADC_ConfigChannel+0x678>)
 8004794:	f7ff f9f3 	bl	8003b7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004798:	e037      	b.n	800480a <HAL_ADC_ConfigChannel+0x6de>
 800479a:	bf00      	nop
 800479c:	407f0000 	.word	0x407f0000
 80047a0:	80080000 	.word	0x80080000
 80047a4:	50040300 	.word	0x50040300
 80047a8:	c7520000 	.word	0xc7520000
 80047ac:	50040000 	.word	0x50040000
 80047b0:	50040200 	.word	0x50040200
 80047b4:	20000040 	.word	0x20000040
 80047b8:	053e2d63 	.word	0x053e2d63
 80047bc:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a16      	ldr	r2, [pc, #88]	; (8004820 <HAL_ADC_ConfigChannel+0x6f4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d120      	bne.n	800480c <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11a      	bne.n	800480c <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <HAL_ADC_ConfigChannel+0x6f8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d115      	bne.n	800480c <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047e8:	4619      	mov	r1, r3
 80047ea:	480f      	ldr	r0, [pc, #60]	; (8004828 <HAL_ADC_ConfigChannel+0x6fc>)
 80047ec:	f7ff f9c7 	bl	8003b7e <LL_ADC_SetCommonPathInternalCh>
 80047f0:	e00c      	b.n	800480c <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8004804:	e002      	b.n	800480c <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004806:	bf00      	nop
 8004808:	e000      	b.n	800480c <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800480a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004814:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8004818:	4618      	mov	r0, r3
 800481a:	3798      	adds	r7, #152	; 0x98
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	80000001 	.word	0x80000001
 8004824:	50040000 	.word	0x50040000
 8004828:	50040300 	.word	0x50040300

0800482c <LL_ADC_IsEnabled>:
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <LL_ADC_IsEnabled+0x18>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <LL_ADC_IsEnabled+0x1a>
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_ADC_REG_IsConversionOngoing>:
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d101      	bne.n	800486a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b0a1      	sub	sp, #132	; 0x84
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004892:	2302      	movs	r3, #2
 8004894:	e08f      	b.n	80049b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a47      	ldr	r2, [pc, #284]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d102      	bne.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e001      	b.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10b      	bne.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e072      	b.n	80049b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ffbd 	bl	8004852 <LL_ADC_REG_IsConversionOngoing>
 80048d8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff ffb7 	bl	8004852 <LL_ADC_REG_IsConversionOngoing>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d154      	bne.n	8004994 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d151      	bne.n	8004994 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80048f2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d02c      	beq.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800490e:	035b      	lsls	r3, r3, #13
 8004910:	430b      	orrs	r3, r1
 8004912:	431a      	orrs	r2, r3
 8004914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004916:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004918:	4829      	ldr	r0, [pc, #164]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800491a:	f7ff ff87 	bl	800482c <LL_ADC_IsEnabled>
 800491e:	4604      	mov	r4, r0
 8004920:	4828      	ldr	r0, [pc, #160]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004922:	f7ff ff83 	bl	800482c <LL_ADC_IsEnabled>
 8004926:	4603      	mov	r3, r0
 8004928:	431c      	orrs	r4, r3
 800492a:	4828      	ldr	r0, [pc, #160]	; (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800492c:	f7ff ff7e 	bl	800482c <LL_ADC_IsEnabled>
 8004930:	4603      	mov	r3, r0
 8004932:	4323      	orrs	r3, r4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d137      	bne.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004940:	f023 030f 	bic.w	r3, r3, #15
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	6811      	ldr	r1, [r2, #0]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	6892      	ldr	r2, [r2, #8]
 800494c:	430a      	orrs	r2, r1
 800494e:	431a      	orrs	r2, r3
 8004950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004952:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004954:	e028      	b.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800495e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004960:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004962:	4817      	ldr	r0, [pc, #92]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004964:	f7ff ff62 	bl	800482c <LL_ADC_IsEnabled>
 8004968:	4604      	mov	r4, r0
 800496a:	4816      	ldr	r0, [pc, #88]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800496c:	f7ff ff5e 	bl	800482c <LL_ADC_IsEnabled>
 8004970:	4603      	mov	r3, r0
 8004972:	431c      	orrs	r4, r3
 8004974:	4815      	ldr	r0, [pc, #84]	; (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004976:	f7ff ff59 	bl	800482c <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	4323      	orrs	r3, r4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d112      	bne.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800498a:	f023 030f 	bic.w	r3, r3, #15
 800498e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004990:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004992:	e009      	b.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80049a6:	e000      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80049b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3784      	adds	r7, #132	; 0x84
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd90      	pop	{r4, r7, pc}
 80049be:	bf00      	nop
 80049c0:	50040000 	.word	0x50040000
 80049c4:	50040100 	.word	0x50040100
 80049c8:	50040300 	.word	0x50040300
 80049cc:	50040200 	.word	0x50040200

080049d0 <__NVIC_SetPriorityGrouping>:
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049e0:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <__NVIC_SetPriorityGrouping+0x44>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049ec:	4013      	ands	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a02:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <__NVIC_SetPriorityGrouping+0x44>)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	60d3      	str	r3, [r2, #12]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <__NVIC_GetPriorityGrouping>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <__NVIC_GetPriorityGrouping+0x18>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	f003 0307 	and.w	r3, r3, #7
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <__NVIC_EnableIRQ>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	db0b      	blt.n	8004a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	f003 021f 	and.w	r2, r3, #31
 8004a4c:	4907      	ldr	r1, [pc, #28]	; (8004a6c <__NVIC_EnableIRQ+0x38>)
 8004a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	2001      	movs	r0, #1
 8004a56:	fa00 f202 	lsl.w	r2, r0, r2
 8004a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000e100 	.word	0xe000e100

08004a70 <__NVIC_DisableIRQ>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	db10      	blt.n	8004aa4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	f003 021f 	and.w	r2, r3, #31
 8004a88:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <__NVIC_DisableIRQ+0x40>)
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2001      	movs	r0, #1
 8004a92:	fa00 f202 	lsl.w	r2, r0, r2
 8004a96:	3320      	adds	r3, #32
 8004a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004aa0:	f3bf 8f6f 	isb	sy
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000e100 	.word	0xe000e100

08004ab4 <__NVIC_SetPriority>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	6039      	str	r1, [r7, #0]
 8004abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	db0a      	blt.n	8004ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	490c      	ldr	r1, [pc, #48]	; (8004b00 <__NVIC_SetPriority+0x4c>)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	0112      	lsls	r2, r2, #4
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004adc:	e00a      	b.n	8004af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4908      	ldr	r1, [pc, #32]	; (8004b04 <__NVIC_SetPriority+0x50>)
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	3b04      	subs	r3, #4
 8004aec:	0112      	lsls	r2, r2, #4
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	440b      	add	r3, r1
 8004af2:	761a      	strb	r2, [r3, #24]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000e100 	.word	0xe000e100
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <NVIC_EncodePriority>:
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	; 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f1c3 0307 	rsb	r3, r3, #7
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	bf28      	it	cs
 8004b26:	2304      	movcs	r3, #4
 8004b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d902      	bls.n	8004b38 <NVIC_EncodePriority+0x30>
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3b03      	subs	r3, #3
 8004b36:	e000      	b.n	8004b3a <NVIC_EncodePriority+0x32>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	43d9      	mvns	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	4313      	orrs	r3, r2
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3724      	adds	r7, #36	; 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ff2a 	bl	80049d0 <__NVIC_SetPriorityGrouping>
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b96:	f7ff ff3f 	bl	8004a18 <__NVIC_GetPriorityGrouping>
 8004b9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	6978      	ldr	r0, [r7, #20]
 8004ba2:	f7ff ffb1 	bl	8004b08 <NVIC_EncodePriority>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff80 	bl	8004ab4 <__NVIC_SetPriority>
}
 8004bb4:	bf00      	nop
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff32 	bl	8004a34 <__NVIC_EnableIRQ>
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff42 	bl	8004a70 <__NVIC_DisableIRQ>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e075      	b.n	8004cf2 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fe f8ca 	bl	8002db4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c36:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b2a      	ldr	r3, [pc, #168]	; (8004cfc <HAL_DCMI_Init+0x108>)
 8004c52:	400b      	ands	r3, r1
 8004c54:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6819      	ldr	r1, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004c6a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004c76:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004c82:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004c8e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004c9a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d112      	bne.n	8004cd2 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7f1b      	ldrb	r3, [r3, #28]
 8004cb0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7f5b      	ldrb	r3, [r3, #29]
 8004cb6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004cb8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7f9b      	ldrb	r3, [r3, #30]
 8004cbe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004cc0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	7fdb      	ldrb	r3, [r3, #31]
 8004cc8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004cce:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004cd0:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 021f 	orr.w	r2, r2, #31
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	ffe0f007 	.word	0xffe0f007

08004d00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d005      	beq.n	8004d24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
 8004d22:	e029      	b.n	8004d78 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 020e 	bic.w	r2, r2, #14
 8004d32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	f003 021c 	and.w	r2, r3, #28
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f202 	lsl.w	r2, r1, r2
 8004d56:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
    }
  }
  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d92:	e166      	b.n	8005062 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8158 	beq.w	800505c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d00b      	beq.n	8004dcc <HAL_GPIO_Init+0x48>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d007      	beq.n	8004dcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dc0:	2b11      	cmp	r3, #17
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b12      	cmp	r3, #18
 8004dca:	d130      	bne.n	8004e2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e02:	2201      	movs	r2, #1
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 0201 	and.w	r2, r3, #1
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_Init+0xea>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b12      	cmp	r3, #18
 8004e6c:	d123      	bne.n	8004eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	08da      	lsrs	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	08da      	lsrs	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3208      	adds	r2, #8
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80b2 	beq.w	800505c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef8:	4b61      	ldr	r3, [pc, #388]	; (8005080 <HAL_GPIO_Init+0x2fc>)
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	4a60      	ldr	r2, [pc, #384]	; (8005080 <HAL_GPIO_Init+0x2fc>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6613      	str	r3, [r2, #96]	; 0x60
 8004f04:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <HAL_GPIO_Init+0x2fc>)
 8004f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f10:	4a5c      	ldr	r2, [pc, #368]	; (8005084 <HAL_GPIO_Init+0x300>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	220f      	movs	r2, #15
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f3a:	d02b      	beq.n	8004f94 <HAL_GPIO_Init+0x210>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a52      	ldr	r2, [pc, #328]	; (8005088 <HAL_GPIO_Init+0x304>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d025      	beq.n	8004f90 <HAL_GPIO_Init+0x20c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a51      	ldr	r2, [pc, #324]	; (800508c <HAL_GPIO_Init+0x308>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01f      	beq.n	8004f8c <HAL_GPIO_Init+0x208>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a50      	ldr	r2, [pc, #320]	; (8005090 <HAL_GPIO_Init+0x30c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d019      	beq.n	8004f88 <HAL_GPIO_Init+0x204>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a4f      	ldr	r2, [pc, #316]	; (8005094 <HAL_GPIO_Init+0x310>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_GPIO_Init+0x200>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a4e      	ldr	r2, [pc, #312]	; (8005098 <HAL_GPIO_Init+0x314>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00d      	beq.n	8004f80 <HAL_GPIO_Init+0x1fc>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a4d      	ldr	r2, [pc, #308]	; (800509c <HAL_GPIO_Init+0x318>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <HAL_GPIO_Init+0x1f8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a4c      	ldr	r2, [pc, #304]	; (80050a0 <HAL_GPIO_Init+0x31c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d101      	bne.n	8004f78 <HAL_GPIO_Init+0x1f4>
 8004f74:	2307      	movs	r3, #7
 8004f76:	e00e      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	e00c      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f7c:	2306      	movs	r3, #6
 8004f7e:	e00a      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f80:	2305      	movs	r3, #5
 8004f82:	e008      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f84:	2304      	movs	r3, #4
 8004f86:	e006      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e004      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e002      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_GPIO_Init+0x212>
 8004f94:	2300      	movs	r3, #0
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	f002 0203 	and.w	r2, r2, #3
 8004f9c:	0092      	lsls	r2, r2, #2
 8004f9e:	4093      	lsls	r3, r2
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fa6:	4937      	ldr	r1, [pc, #220]	; (8005084 <HAL_GPIO_Init+0x300>)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	3302      	adds	r3, #2
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_GPIO_Init+0x320>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fd8:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <HAL_GPIO_Init+0x320>)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_GPIO_Init+0x320>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4013      	ands	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005002:	4a28      	ldr	r2, [pc, #160]	; (80050a4 <HAL_GPIO_Init+0x320>)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005008:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_GPIO_Init+0x320>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	43db      	mvns	r3, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4013      	ands	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_GPIO_Init+0x320>)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <HAL_GPIO_Init+0x320>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	43db      	mvns	r3, r3
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4013      	ands	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_GPIO_Init+0x320>)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3301      	adds	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	f47f ae91 	bne.w	8004d94 <HAL_GPIO_Init+0x10>
  }
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000
 8005084:	40010000 	.word	0x40010000
 8005088:	48000400 	.word	0x48000400
 800508c:	48000800 	.word	0x48000800
 8005090:	48000c00 	.word	0x48000c00
 8005094:	48001000 	.word	0x48001000
 8005098:	48001400 	.word	0x48001400
 800509c:	48001800 	.word	0x48001800
 80050a0:	48001c00 	.word	0x48001c00
 80050a4:	40010400 	.word	0x40010400

080050a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80050b6:	e0c9      	b.n	800524c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80050b8:	2201      	movs	r2, #1
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80bc 	beq.w	8005246 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80050ce:	4a66      	ldr	r2, [pc, #408]	; (8005268 <HAL_GPIO_DeInit+0x1c0>)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	3302      	adds	r3, #2
 80050d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050da:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	220f      	movs	r2, #15
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050f6:	d02b      	beq.n	8005150 <HAL_GPIO_DeInit+0xa8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a5c      	ldr	r2, [pc, #368]	; (800526c <HAL_GPIO_DeInit+0x1c4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d025      	beq.n	800514c <HAL_GPIO_DeInit+0xa4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a5b      	ldr	r2, [pc, #364]	; (8005270 <HAL_GPIO_DeInit+0x1c8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d01f      	beq.n	8005148 <HAL_GPIO_DeInit+0xa0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a5a      	ldr	r2, [pc, #360]	; (8005274 <HAL_GPIO_DeInit+0x1cc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d019      	beq.n	8005144 <HAL_GPIO_DeInit+0x9c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a59      	ldr	r2, [pc, #356]	; (8005278 <HAL_GPIO_DeInit+0x1d0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <HAL_GPIO_DeInit+0x98>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a58      	ldr	r2, [pc, #352]	; (800527c <HAL_GPIO_DeInit+0x1d4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00d      	beq.n	800513c <HAL_GPIO_DeInit+0x94>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a57      	ldr	r2, [pc, #348]	; (8005280 <HAL_GPIO_DeInit+0x1d8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <HAL_GPIO_DeInit+0x90>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a56      	ldr	r2, [pc, #344]	; (8005284 <HAL_GPIO_DeInit+0x1dc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_GPIO_DeInit+0x8c>
 8005130:	2307      	movs	r3, #7
 8005132:	e00e      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 8005134:	2308      	movs	r3, #8
 8005136:	e00c      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 8005138:	2306      	movs	r3, #6
 800513a:	e00a      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 800513c:	2305      	movs	r3, #5
 800513e:	e008      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 8005140:	2304      	movs	r3, #4
 8005142:	e006      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 8005144:	2303      	movs	r3, #3
 8005146:	e004      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 8005148:	2302      	movs	r3, #2
 800514a:	e002      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <HAL_GPIO_DeInit+0xaa>
 8005150:	2300      	movs	r3, #0
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	f002 0203 	and.w	r2, r2, #3
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	4093      	lsls	r3, r2
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	429a      	cmp	r2, r3
 8005160:	d132      	bne.n	80051c8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005162:	4b49      	ldr	r3, [pc, #292]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	4947      	ldr	r1, [pc, #284]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 800516c:	4013      	ands	r3, r2
 800516e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005170:	4b45      	ldr	r3, [pc, #276]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	43db      	mvns	r3, r3
 8005178:	4943      	ldr	r1, [pc, #268]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 800517a:	4013      	ands	r3, r2
 800517c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800517e:	4b42      	ldr	r3, [pc, #264]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	4940      	ldr	r1, [pc, #256]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 8005188:	4013      	ands	r3, r2
 800518a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800518c:	4b3e      	ldr	r3, [pc, #248]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	493c      	ldr	r1, [pc, #240]	; (8005288 <HAL_GPIO_DeInit+0x1e0>)
 8005196:	4013      	ands	r3, r2
 8005198:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <HAL_GPIO_DeInit+0x1c0>)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	3302      	adds	r3, #2
 80051b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	43da      	mvns	r2, r3
 80051ba:	482b      	ldr	r0, [pc, #172]	; (8005268 <HAL_GPIO_DeInit+0x1c0>)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	089b      	lsrs	r3, r3, #2
 80051c0:	400a      	ands	r2, r1
 80051c2:	3302      	adds	r3, #2
 80051c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	2103      	movs	r1, #3
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	08da      	lsrs	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3208      	adds	r2, #8
 80051e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	220f      	movs	r2, #15
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43db      	mvns	r3, r3
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	08d2      	lsrs	r2, r2, #3
 80051fc:	4019      	ands	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3208      	adds	r2, #8
 8005202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	2103      	movs	r1, #3
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	2101      	movs	r1, #1
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	fa01 f303 	lsl.w	r3, r1, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	401a      	ands	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2103      	movs	r1, #3
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	401a      	ands	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	3301      	adds	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	f47f af2f 	bne.w	80050b8 <HAL_GPIO_DeInit+0x10>
  }
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	48000400 	.word	0x48000400
 8005270:	48000800 	.word	0x48000800
 8005274:	48000c00 	.word	0x48000c00
 8005278:	48001000 	.word	0x48001000
 800527c:	48001400 	.word	0x48001400
 8005280:	48001800 	.word	0x48001800
 8005284:	48001c00 	.word	0x48001c00
 8005288:	40010400 	.word	0x40010400

0800528c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	807b      	strh	r3, [r7, #2]
 8005298:	4613      	mov	r3, r2
 800529a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800529c:	787b      	ldrb	r3, [r7, #1]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052a8:	e002      	b.n	80052b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80052da:	e002      	b.n	80052e2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052dc:	887a      	ldrh	r2, [r7, #2]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	619a      	str	r2, [r3, #24]
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e081      	b.n	8005404 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fd fdcd 	bl	8002eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2224      	movs	r2, #36	; 0x24
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800533e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800534e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d107      	bne.n	8005368 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005364:	609a      	str	r2, [r3, #8]
 8005366:	e006      	b.n	8005376 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005374:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d104      	bne.n	8005388 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005386:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	ea42 0103 	orr.w	r1, r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	021a      	lsls	r2, r3, #8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69d9      	ldr	r1, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b20      	cmp	r3, #32
 8005420:	d138      	bne.n	8005494 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800542c:	2302      	movs	r3, #2
 800542e:	e032      	b.n	8005496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2224      	movs	r2, #36	; 0x24
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800545e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d139      	bne.n	800552c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e033      	b.n	800552e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2224      	movs	r2, #36	; 0x24
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800552c:	2302      	movs	r3, #2
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800553a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553c:	b08f      	sub	sp, #60	; 0x3c
 800553e:	af0a      	add	r7, sp, #40	; 0x28
 8005540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e116      	b.n	800577a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f00c fc8e 	bl	8011e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2203      	movs	r2, #3
 8005570:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f006 fd19 	bl	800bfc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	687e      	ldr	r6, [r7, #4]
 8005598:	466d      	mov	r5, sp
 800559a:	f106 0410 	add.w	r4, r6, #16
 800559e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80055ae:	1d33      	adds	r3, r6, #4
 80055b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b2:	6838      	ldr	r0, [r7, #0]
 80055b4:	f006 fc06 	bl	800bdc4 <USB_CoreInit>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e0d7      	b.n	800577a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f006 fd07 	bl	800bfe4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e04a      	b.n	8005672 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	333d      	adds	r3, #61	; 0x3d
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	333c      	adds	r3, #60	; 0x3c
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005604:	7bfa      	ldrb	r2, [r7, #15]
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	b298      	uxth	r0, r3
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	3342      	adds	r3, #66	; 0x42
 8005618:	4602      	mov	r2, r0
 800561a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800561c:	7bfa      	ldrb	r2, [r7, #15]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	333f      	adds	r3, #63	; 0x3f
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	3344      	adds	r3, #68	; 0x44
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	3348      	adds	r3, #72	; 0x48
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005658:	7bfa      	ldrb	r2, [r7, #15]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3350      	adds	r3, #80	; 0x50
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	3301      	adds	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	d3af      	bcc.n	80055dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	e044      	b.n	800570c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005698:	7bfa      	ldrb	r2, [r7, #15]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056ae:	7bfa      	ldrb	r2, [r7, #15]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	3301      	adds	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d3b5      	bcc.n	8005682 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	687e      	ldr	r6, [r7, #4]
 800571e:	466d      	mov	r5, sp
 8005720:	f106 0410 	add.w	r4, r6, #16
 8005724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800572a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800572c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005730:	e885 0003 	stmia.w	r5, {r0, r1}
 8005734:	1d33      	adds	r3, r6, #4
 8005736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005738:	6838      	ldr	r0, [r7, #0]
 800573a:	f006 fc7d 	bl	800c038 <USB_DevInit>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e014      	b.n	800577a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b01      	cmp	r3, #1
 8005766:	d102      	bne.n	800576e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 ff61 	bl	8006630 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f007 fbf6 	bl	800cf64 <USB_DevDisconnect>

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005782 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_PCD_Start+0x1c>
 800579a:	2302      	movs	r3, #2
 800579c:	e01c      	b.n	80057d8 <HAL_PCD_Start+0x56>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d105      	bne.n	80057ba <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f007 fbb8 	bl	800cf34 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f006 fbe9 	bl	800bfa0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b08d      	sub	sp, #52	; 0x34
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f007 fc5f 	bl	800d0ba <USB_GetMode>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f040 838f 	bne.w	8005f22 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f007 fbc3 	bl	800cf94 <USB_ReadInterrupts>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8385 	beq.w	8005f20 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f007 fbba 	bl	800cf94 <USB_ReadInterrupts>
 8005820:	4603      	mov	r3, r0
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d107      	bne.n	800583a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f002 0202 	and.w	r2, r2, #2
 8005838:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f007 fba8 	bl	800cf94 <USB_ReadInterrupts>
 8005844:	4603      	mov	r3, r0
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d161      	bne.n	8005912 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0210 	bic.w	r2, r2, #16
 800585c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f003 020f 	and.w	r2, r3, #15
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	4413      	add	r3, r2
 800587a:	3304      	adds	r3, #4
 800587c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	0c5b      	lsrs	r3, r3, #17
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	2b02      	cmp	r3, #2
 8005888:	d124      	bne.n	80058d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d035      	beq.n	8005902 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	6a38      	ldr	r0, [r7, #32]
 80058aa:	f007 fa20 	bl	800ccee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058ba:	441a      	add	r2, r3
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058cc:	441a      	add	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	619a      	str	r2, [r3, #24]
 80058d2:	e016      	b.n	8005902 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	0c5b      	lsrs	r3, r3, #17
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2b06      	cmp	r3, #6
 80058de:	d110      	bne.n	8005902 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058e6:	2208      	movs	r2, #8
 80058e8:	4619      	mov	r1, r3
 80058ea:	6a38      	ldr	r0, [r7, #32]
 80058ec:	f007 f9ff 	bl	800ccee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058fc:	441a      	add	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0210 	orr.w	r2, r2, #16
 8005910:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f007 fb3c 	bl	800cf94 <USB_ReadInterrupts>
 800591c:	4603      	mov	r3, r0
 800591e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005922:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005926:	d16e      	bne.n	8005a06 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f007 fb42 	bl	800cfba <USB_ReadDevAllOutEpInterrupt>
 8005936:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005938:	e062      	b.n	8005a00 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d057      	beq.n	80059f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f007 fb67 	bl	800d022 <USB_ReadDevOutEPInterrupt>
 8005954:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00c      	beq.n	800597a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	2301      	movs	r3, #1
 8005970:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fd81 	bl	800647c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00c      	beq.n	800599e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	461a      	mov	r2, r3
 8005992:	2308      	movs	r3, #8
 8005994:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fdbd 	bl	8006518 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	461a      	mov	r2, r3
 80059b6:	2310      	movs	r3, #16
 80059b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	461a      	mov	r2, r3
 80059d2:	2320      	movs	r3, #32
 80059d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	461a      	mov	r2, r3
 80059ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	3301      	adds	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d199      	bne.n	800593a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f007 fac2 	bl	800cf94 <USB_ReadInterrupts>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a1a:	f040 8087 	bne.w	8005b2c <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f007 fae3 	bl	800cfee <USB_ReadDevAllInEpInterrupt>
 8005a28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a2e:	e07a      	b.n	8005b26 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d06f      	beq.n	8005b1a <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f007 fb0a 	bl	800d05e <USB_ReadDevInEPInterrupt>
 8005a4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d020      	beq.n	8005a98 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a76:	4013      	ands	r3, r2
 8005a78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a86:	461a      	mov	r2, r3
 8005a88:	2301      	movs	r3, #1
 8005a8a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f00c fa8b 	bl	8011fae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aca:	461a      	mov	r2, r3
 8005acc:	2310      	movs	r3, #16
 8005ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	461a      	mov	r2, r3
 8005b04:	2302      	movs	r3, #2
 8005b06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fc29 	bl	800636c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d181      	bne.n	8005a30 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f007 fa2f 	bl	800cf94 <USB_ReadInterrupts>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b40:	d122      	bne.n	8005b88 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d108      	bne.n	8005b72 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b68:	2100      	movs	r1, #0
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f00c fd3c 	bl	80125e8 <HAL_PCDEx_LPM_Callback>
 8005b70:	e002      	b.n	8005b78 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f00c fa88 	bl	8012088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f007 fa01 	bl	800cf94 <USB_ReadInterrupts>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9c:	d112      	bne.n	8005bc4 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d102      	bne.n	8005bb4 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f00c fa44 	bl	801203c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bc2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f007 f9e3 	bl	800cf94 <USB_ReadInterrupts>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd8:	d121      	bne.n	8005c1e <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005be8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d111      	bne.n	8005c18 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	089b      	lsrs	r3, r3, #2
 8005c04:	f003 020f 	and.w	r2, r3, #15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f00c fce9 	bl	80125e8 <HAL_PCDEx_LPM_Callback>
 8005c16:	e002      	b.n	8005c1e <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f00c fa0f 	bl	801203c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f007 f9b6 	bl	800cf94 <USB_ReadInterrupts>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	f040 80c5 	bne.w	8005dc0 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2110      	movs	r1, #16
 8005c50:	4618      	mov	r0, r3
 8005c52:	f006 fb3d 	bl	800c2d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5a:	e056      	b.n	8005d0a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c8e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005caa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cc2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d02:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	3301      	adds	r3, #1
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d3a3      	bcc.n	8005c5c <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d22:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d016      	beq.n	8005d5e <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d40:	f043 030b 	orr.w	r3, r3, #11
 8005d44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d56:	f043 030b 	orr.w	r3, r3, #11
 8005d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8005d5c:	e015      	b.n	8005d8a <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d70:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d74:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d84:	f043 030b 	orr.w	r3, r3, #11
 8005d88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f007 f9b6 	bl	800d11c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695a      	ldr	r2, [r3, #20]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f007 f8e5 	bl	800cf94 <USB_ReadInterrupts>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd4:	d124      	bne.n	8005e20 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f007 f97b 	bl	800d0d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f006 fad4 	bl	800c392 <USB_GetDevSpeed>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681c      	ldr	r4, [r3, #0]
 8005df6:	f001 fb33 	bl	8007460 <HAL_RCC_GetHCLKFreq>
 8005dfa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	4620      	mov	r0, r4
 8005e06:	f006 f82f 	bl	800be68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f00c f8f7 	bl	8011ffe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695a      	ldr	r2, [r3, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f007 f8b5 	bl	800cf94 <USB_ReadInterrupts>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d10a      	bne.n	8005e4a <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f00c f8d4 	bl	8011fe2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f002 0208 	and.w	r2, r2, #8
 8005e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f007 f8a0 	bl	800cf94 <USB_ReadInterrupts>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5e:	d10f      	bne.n	8005e80 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f00c f946 	bl	80120fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f007 f885 	bl	800cf94 <USB_ReadInterrupts>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e94:	d10f      	bne.n	8005eb6 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f00c f919 	bl	80120d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f007 f86a 	bl	800cf94 <USB_ReadInterrupts>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eca:	d10a      	bne.n	8005ee2 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f00c f927 	bl	8012120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695a      	ldr	r2, [r3, #20]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f007 f854 	bl	800cf94 <USB_ReadInterrupts>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d115      	bne.n	8005f22 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f00c f917 	bl	801213c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6859      	ldr	r1, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	e000      	b.n	8005f22 <HAL_PCD_IRQHandler+0x742>
      return;
 8005f20:	bf00      	nop
    }
  }
}
 8005f22:	3734      	adds	r7, #52	; 0x34
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd90      	pop	{r4, r7, pc}

08005f28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_PCD_SetAddress+0x1a>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e013      	b.n	8005f6a <HAL_PCD_SetAddress+0x42>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f006 ffc4 	bl	800cee8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	4608      	mov	r0, r1
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4603      	mov	r3, r0
 8005f82:	70fb      	strb	r3, [r7, #3]
 8005f84:	460b      	mov	r3, r1
 8005f86:	803b      	strh	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	da0f      	bge.n	8005fb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	f003 020f 	and.w	r2, r3, #15
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	3338      	adds	r3, #56	; 0x38
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	3304      	adds	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	705a      	strb	r2, [r3, #1]
 8005fb6:	e00f      	b.n	8005fd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	4413      	add	r3, r2
 8005fce:	3304      	adds	r3, #4
 8005fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005fe4:	883a      	ldrh	r2, [r7, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	78ba      	ldrb	r2, [r7, #2]
 8005fee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006002:	78bb      	ldrb	r3, [r7, #2]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d102      	bne.n	800600e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_PCD_EP_Open+0xaa>
 8006018:	2302      	movs	r3, #2
 800601a:	e00e      	b.n	800603a <HAL_PCD_EP_Open+0xc8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68f9      	ldr	r1, [r7, #12]
 800602a:	4618      	mov	r0, r3
 800602c:	f006 f9d0 	bl	800c3d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006038:	7afb      	ldrb	r3, [r7, #11]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800604e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006052:	2b00      	cmp	r3, #0
 8006054:	da0f      	bge.n	8006076 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	f003 020f 	and.w	r2, r3, #15
 800605c:	4613      	mov	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	3338      	adds	r3, #56	; 0x38
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	3304      	adds	r3, #4
 800606c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	705a      	strb	r2, [r3, #1]
 8006074:	e00f      	b.n	8006096 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	3304      	adds	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_PCD_EP_Close+0x6e>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e00e      	b.n	80060ce <HAL_PCD_EP_Close+0x8c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	4618      	mov	r0, r3
 80060c0:	f006 fa0e 	bl	800c4e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b086      	sub	sp, #24
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	460b      	mov	r3, r1
 80060e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	f003 020f 	and.w	r2, r3, #15
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2200      	movs	r2, #0
 8006110:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2200      	movs	r2, #0
 8006116:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006118:	7afb      	ldrb	r3, [r7, #11]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	b2da      	uxtb	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006124:	7afb      	ldrb	r3, [r7, #11]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	4618      	mov	r0, r3
 8006136:	f006 fc8b 	bl	800ca50 <USB_EP0StartXfer>
 800613a:	e005      	b.n	8006148 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6979      	ldr	r1, [r7, #20]
 8006142:	4618      	mov	r0, r3
 8006144:	f006 faa8 	bl	800c698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	f003 020f 	and.w	r2, r3, #15
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006174:	681b      	ldr	r3, [r3, #0]
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	460b      	mov	r3, r1
 8006190:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006192:	7afb      	ldrb	r3, [r7, #11]
 8006194:	f003 020f 	and.w	r2, r3, #15
 8006198:	4613      	mov	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	3338      	adds	r3, #56	; 0x38
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	3304      	adds	r3, #4
 80061a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2201      	movs	r2, #1
 80061c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6979      	ldr	r1, [r7, #20]
 80061de:	4618      	mov	r0, r3
 80061e0:	f006 fc36 	bl	800ca50 <USB_EP0StartXfer>
 80061e4:	e005      	b.n	80061f2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f006 fa53 	bl	800c698 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	f003 020f 	and.w	r2, r3, #15
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d901      	bls.n	800621a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e04e      	b.n	80062b8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800621a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621e:	2b00      	cmp	r3, #0
 8006220:	da0f      	bge.n	8006242 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	3338      	adds	r3, #56	; 0x38
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	3304      	adds	r3, #4
 8006238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	705a      	strb	r2, [r3, #1]
 8006240:	e00d      	b.n	800625e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006242:	78fa      	ldrb	r2, [r7, #3]
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	3304      	adds	r3, #4
 8006256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	b2da      	uxtb	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_PCD_EP_SetStall+0x82>
 800627a:	2302      	movs	r3, #2
 800627c:	e01c      	b.n	80062b8 <HAL_PCD_EP_SetStall+0xbc>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68f9      	ldr	r1, [r7, #12]
 800628c:	4618      	mov	r0, r3
 800628e:	f006 fd57 	bl	800cd40 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	2b00      	cmp	r3, #0
 800629a:	d108      	bne.n	80062ae <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f006 ff37 	bl	800d11c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	f003 020f 	and.w	r2, r3, #15
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d901      	bls.n	80062de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e042      	b.n	8006364 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da0f      	bge.n	8006306 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	f003 020f 	and.w	r2, r3, #15
 80062ec:	4613      	mov	r3, r2
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	3338      	adds	r3, #56	; 0x38
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	3304      	adds	r3, #4
 80062fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	705a      	strb	r2, [r3, #1]
 8006304:	e00f      	b.n	8006326 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	f003 020f 	and.w	r2, r3, #15
 800630c:	4613      	mov	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	3304      	adds	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_PCD_EP_ClrStall+0x86>
 8006342:	2302      	movs	r3, #2
 8006344:	e00e      	b.n	8006364 <HAL_PCD_EP_ClrStall+0xa4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68f9      	ldr	r1, [r7, #12]
 8006354:	4618      	mov	r0, r3
 8006356:	f006 fd61 	bl	800ce1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	4613      	mov	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	3338      	adds	r3, #56	; 0x38
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	4413      	add	r3, r2
 8006390:	3304      	adds	r3, #4
 8006392:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	429a      	cmp	r2, r3
 800639e:	d901      	bls.n	80063a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e067      	b.n	8006474 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d902      	bls.n	80063c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3303      	adds	r3, #3
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063c8:	e026      	b.n	8006418 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d902      	bls.n	80063e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3303      	adds	r3, #3
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68d9      	ldr	r1, [r3, #12]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	6978      	ldr	r0, [r7, #20]
 80063fc:	f006 fc46 	bl	800cc8c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	441a      	add	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	441a      	add	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	b29b      	uxth	r3, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	429a      	cmp	r2, r3
 800642c:	d809      	bhi.n	8006442 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006436:	429a      	cmp	r2, r3
 8006438:	d203      	bcs.n	8006442 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1c3      	bne.n	80063ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	429a      	cmp	r2, r3
 800644c:	d811      	bhi.n	8006472 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	2201      	movs	r2, #1
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	43db      	mvns	r3, r3
 8006468:	6939      	ldr	r1, [r7, #16]
 800646a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800646e:	4013      	ands	r3, r2
 8006470:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	333c      	adds	r3, #60	; 0x3c
 8006494:	3304      	adds	r3, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4a19      	ldr	r2, [pc, #100]	; (8006514 <PCD_EP_OutXfrComplete_int+0x98>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d124      	bne.n	80064fc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c8:	461a      	mov	r2, r3
 80064ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ce:	6093      	str	r3, [r2, #8]
 80064d0:	e01a      	b.n	8006508 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	461a      	mov	r2, r3
 80064ea:	2320      	movs	r3, #32
 80064ec:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f00b fd3f 	bl	8011f78 <HAL_PCD_DataOutStageCallback>
 80064fa:	e005      	b.n	8006508 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f00b fd38 	bl	8011f78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	4f54310a 	.word	0x4f54310a

08006518 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	333c      	adds	r3, #60	; 0x3c
 8006530:	3304      	adds	r3, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a0c      	ldr	r2, [pc, #48]	; (800657c <PCD_EP_OutSetupPacket_int+0x64>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d90e      	bls.n	800656c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	461a      	mov	r2, r3
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f00b fcf1 	bl	8011f54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	4f54300a 	.word	0x4f54300a

08006580 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
 800658c:	4613      	mov	r3, r2
 800658e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d107      	bne.n	80065ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800659e:	883b      	ldrh	r3, [r7, #0]
 80065a0:	0419      	lsls	r1, r3, #16
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
 80065ac:	e028      	b.n	8006600 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4413      	add	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	e00d      	b.n	80065de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	3340      	adds	r3, #64	; 0x40
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	4413      	add	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	3301      	adds	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
 80065de:	7bfa      	ldrb	r2, [r7, #15]
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d3ec      	bcc.n	80065c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065e8:	883b      	ldrh	r3, [r7, #0]
 80065ea:	0418      	lsls	r0, r3, #16
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4302      	orrs	r2, r0
 80065f8:	3340      	adds	r3, #64	; 0x40
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	460b      	mov	r3, r1
 8006618:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	887a      	ldrh	r2, [r7, #2]
 8006620:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006662:	f043 0303 	orr.w	r3, r3, #3
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a04      	ldr	r2, [pc, #16]	; (8006694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006686:	6013      	str	r3, [r2, #0]
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40007000 	.word	0x40007000

08006698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40007000 	.word	0x40007000

080066b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c2:	d130      	bne.n	8006726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80066c4:	4b23      	ldr	r3, [pc, #140]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d0:	d038      	beq.n	8006744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066d2:	4b20      	ldr	r3, [pc, #128]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066e2:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2232      	movs	r2, #50	; 0x32
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
 80066ec:	4a1b      	ldr	r2, [pc, #108]	; (800675c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80066ee:	fba2 2303 	umull	r2, r3, r2, r3
 80066f2:	0c9b      	lsrs	r3, r3, #18
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066f8:	e002      	b.n	8006700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006700:	4b14      	ldr	r3, [pc, #80]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670c:	d102      	bne.n	8006714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f2      	bne.n	80066fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006714:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006720:	d110      	bne.n	8006744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e00f      	b.n	8006746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800672e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006732:	d007      	beq.n	8006744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006734:	4b07      	ldr	r3, [pc, #28]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800673c:	4a05      	ldr	r2, [pc, #20]	; (8006754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800673e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40007000 	.word	0x40007000
 8006758:	20000040 	.word	0x20000040
 800675c:	431bde83 	.word	0x431bde83

08006760 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <HAL_PWREx_EnableVddUSB+0x1c>)
 800676a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800676e:	6053      	str	r3, [r2, #4]
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40007000 	.word	0x40007000

08006780 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <HAL_PWREx_EnableVddIO2+0x1c>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4a04      	ldr	r2, [pc, #16]	; (800679c <HAL_PWREx_EnableVddIO2+0x1c>)
 800678a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800678e:	6053      	str	r3, [r2, #4]
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40007000 	.word	0x40007000

080067a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80067a8:	f7fd f9a8 	bl	8003afc <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e075      	b.n	80068a4 <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_QSPI_Init+0x28>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e06d      	b.n	80068a4 <HAL_QSPI_Init+0x104>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7fc fd3b 	bl	8003260 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80067ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f85e 	bl	80068b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	3b01      	subs	r3, #1
 8006804:	021a      	lsls	r2, r3, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	2120      	movs	r1, #32
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f856 	bl	80068cc <QSPI_WaitFlagStateUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d137      	bne.n	800689a <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6852      	ldr	r2, [r2, #4]
 800683c:	0611      	lsls	r1, r2, #24
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68d2      	ldr	r2, [r2, #12]
 8006842:	4311      	orrs	r1, r2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	69d2      	ldr	r2, [r2, #28]
 8006848:	4311      	orrs	r1, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6a12      	ldr	r2, [r2, #32]
 800684e:	4311      	orrs	r1, r2
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	430b      	orrs	r3, r1
 8006856:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <HAL_QSPI_Init+0x10c>)
 8006860:	4013      	ands	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6912      	ldr	r2, [r2, #16]
 8006866:	0411      	lsls	r1, r2, #16
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6952      	ldr	r2, [r2, #20]
 800686c:	4311      	orrs	r1, r2
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6992      	ldr	r2, [r2, #24]
 8006872:	4311      	orrs	r1, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	430b      	orrs	r3, r1
 800687a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80068a2:	7afb      	ldrb	r3, [r7, #11]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	ffe0f8fe 	.word	0xffe0f8fe

080068b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	649a      	str	r2, [r3, #72]	; 0x48
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80068dc:	e01a      	b.n	8006914 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e4:	d016      	beq.n	8006914 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e6:	f7fd f909 	bl	8003afc <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d302      	bcc.n	80068fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2204      	movs	r2, #4
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e00e      	b.n	8006932 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf14      	ite	ne
 8006922:	2301      	movne	r3, #1
 8006924:	2300      	moveq	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	429a      	cmp	r2, r3
 800692e:	d1d6      	bne.n	80068de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f000 bc16 	b.w	800717c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006950:	4ba0      	ldr	r3, [pc, #640]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 030c 	and.w	r3, r3, #12
 8006958:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800695a:	4b9e      	ldr	r3, [pc, #632]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80e4 	beq.w	8006b3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <HAL_RCC_OscConfig+0x4c>
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b0c      	cmp	r3, #12
 800697c:	f040 808b 	bne.w	8006a96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b01      	cmp	r3, #1
 8006984:	f040 8087 	bne.w	8006a96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006988:	4b92      	ldr	r3, [pc, #584]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_OscConfig+0x64>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e3ed      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1a      	ldr	r2, [r3, #32]
 80069a4:	4b8b      	ldr	r3, [pc, #556]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_RCC_OscConfig+0x7e>
 80069b0:	4b88      	ldr	r3, [pc, #544]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069b8:	e005      	b.n	80069c6 <HAL_RCC_OscConfig+0x8a>
 80069ba:	4b86      	ldr	r3, [pc, #536]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d223      	bcs.n	8006a12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fdb0 	bl	8007534 <RCC_SetFlashLatencyFromMSIRange>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e3ce      	b.n	800717c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069de:	4b7d      	ldr	r3, [pc, #500]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7c      	ldr	r2, [pc, #496]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069e4:	f043 0308 	orr.w	r3, r3, #8
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	4b7a      	ldr	r3, [pc, #488]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	4977      	ldr	r1, [pc, #476]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069fc:	4b75      	ldr	r3, [pc, #468]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	4972      	ldr	r1, [pc, #456]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	604b      	str	r3, [r1, #4]
 8006a10:	e025      	b.n	8006a5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a12:	4b70      	ldr	r3, [pc, #448]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a6f      	ldr	r2, [pc, #444]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a18:	f043 0308 	orr.w	r3, r3, #8
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4b6d      	ldr	r3, [pc, #436]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	496a      	ldr	r1, [pc, #424]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a30:	4b68      	ldr	r3, [pc, #416]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	4965      	ldr	r1, [pc, #404]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fd70 	bl	8007534 <RCC_SetFlashLatencyFromMSIRange>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e38e      	b.n	800717c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a5e:	f000 fc75 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8006a62:	4601      	mov	r1, r0
 8006a64:	4b5b      	ldr	r3, [pc, #364]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	091b      	lsrs	r3, r3, #4
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	4a5a      	ldr	r2, [pc, #360]	; (8006bd8 <HAL_RCC_OscConfig+0x29c>)
 8006a70:	5cd3      	ldrb	r3, [r2, r3]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	fa21 f303 	lsr.w	r3, r1, r3
 8006a7a:	4a58      	ldr	r2, [pc, #352]	; (8006bdc <HAL_RCC_OscConfig+0x2a0>)
 8006a7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006a7e:	4b58      	ldr	r3, [pc, #352]	; (8006be0 <HAL_RCC_OscConfig+0x2a4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fc fe04 	bl	8003690 <HAL_InitTick>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d052      	beq.n	8006b38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	e372      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d032      	beq.n	8006b04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006a9e:	4b4d      	ldr	r3, [pc, #308]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a4c      	ldr	r2, [pc, #304]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006aa4:	f043 0301 	orr.w	r3, r3, #1
 8006aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006aaa:	f7fd f827 	bl	8003afc <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ab2:	f7fd f823 	bl	8003afc <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e35b      	b.n	800717c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ac4:	4b43      	ldr	r3, [pc, #268]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f0      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ad0:	4b40      	ldr	r3, [pc, #256]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a3f      	ldr	r2, [pc, #252]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006ad6:	f043 0308 	orr.w	r3, r3, #8
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	4b3d      	ldr	r3, [pc, #244]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	493a      	ldr	r1, [pc, #232]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006aee:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	4935      	ldr	r1, [pc, #212]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	604b      	str	r3, [r1, #4]
 8006b02:	e01a      	b.n	8006b3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b04:	4b33      	ldr	r3, [pc, #204]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a32      	ldr	r2, [pc, #200]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b10:	f7fc fff4 	bl	8003afc <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b18:	f7fc fff0 	bl	8003afc <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e328      	b.n	800717c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b2a:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x1dc>
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d073      	beq.n	8006c2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_OscConfig+0x21c>
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b0c      	cmp	r3, #12
 8006b50:	d10e      	bne.n	8006b70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d10b      	bne.n	8006b70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	4b1e      	ldr	r3, [pc, #120]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d063      	beq.n	8006c2c <HAL_RCC_OscConfig+0x2f0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d15f      	bne.n	8006c2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e305      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d106      	bne.n	8006b88 <HAL_RCC_OscConfig+0x24c>
 8006b7a:	4b16      	ldr	r3, [pc, #88]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a15      	ldr	r2, [pc, #84]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e01d      	b.n	8006bc4 <HAL_RCC_OscConfig+0x288>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b90:	d10c      	bne.n	8006bac <HAL_RCC_OscConfig+0x270>
 8006b92:	4b10      	ldr	r3, [pc, #64]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a0f      	ldr	r2, [pc, #60]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e00b      	b.n	8006bc4 <HAL_RCC_OscConfig+0x288>
 8006bac:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <HAL_RCC_OscConfig+0x298>)
 8006bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01b      	beq.n	8006c04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bcc:	f7fc ff96 	bl	8003afc <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bd2:	e010      	b.n	8006bf6 <HAL_RCC_OscConfig+0x2ba>
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	08013f90 	.word	0x08013f90
 8006bdc:	20000040 	.word	0x20000040
 8006be0:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fc ff8a 	bl	8003afc <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	; 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e2c2      	b.n	800717c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bf6:	4baf      	ldr	r3, [pc, #700]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f0      	beq.n	8006be4 <HAL_RCC_OscConfig+0x2a8>
 8006c02:	e014      	b.n	8006c2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fc ff7a 	bl	8003afc <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c0c:	f7fc ff76 	bl	8003afc <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b64      	cmp	r3, #100	; 0x64
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e2ae      	b.n	800717c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c1e:	4ba5      	ldr	r3, [pc, #660]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f0      	bne.n	8006c0c <HAL_RCC_OscConfig+0x2d0>
 8006c2a:	e000      	b.n	8006c2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d060      	beq.n	8006cfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d005      	beq.n	8006c4c <HAL_RCC_OscConfig+0x310>
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b0c      	cmp	r3, #12
 8006c44:	d119      	bne.n	8006c7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d116      	bne.n	8006c7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c4c:	4b99      	ldr	r3, [pc, #612]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_RCC_OscConfig+0x328>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e28b      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c64:	4b93      	ldr	r3, [pc, #588]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	061b      	lsls	r3, r3, #24
 8006c72:	4990      	ldr	r1, [pc, #576]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c78:	e040      	b.n	8006cfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d023      	beq.n	8006cca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c82:	4b8c      	ldr	r3, [pc, #560]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a8b      	ldr	r2, [pc, #556]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8e:	f7fc ff35 	bl	8003afc <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c96:	f7fc ff31 	bl	8003afc <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e269      	b.n	800717c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ca8:	4b82      	ldr	r3, [pc, #520]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb4:	4b7f      	ldr	r3, [pc, #508]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	061b      	lsls	r3, r3, #24
 8006cc2:	497c      	ldr	r1, [pc, #496]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	e018      	b.n	8006cfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cca:	4b7a      	ldr	r3, [pc, #488]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a79      	ldr	r2, [pc, #484]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd6:	f7fc ff11 	bl	8003afc <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cde:	f7fc ff0d 	bl	8003afc <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e245      	b.n	800717c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cf0:	4b70      	ldr	r3, [pc, #448]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f0      	bne.n	8006cde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d03c      	beq.n	8006d82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01c      	beq.n	8006d4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d10:	4b68      	ldr	r3, [pc, #416]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d16:	4a67      	ldr	r2, [pc, #412]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7fc feec 	bl	8003afc <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d28:	f7fc fee8 	bl	8003afc <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e220      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d3a:	4b5e      	ldr	r3, [pc, #376]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0ef      	beq.n	8006d28 <HAL_RCC_OscConfig+0x3ec>
 8006d48:	e01b      	b.n	8006d82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d4a:	4b5a      	ldr	r3, [pc, #360]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d50:	4a58      	ldr	r2, [pc, #352]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5a:	f7fc fecf 	bl	8003afc <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d62:	f7fc fecb 	bl	8003afc <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e203      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d74:	4b4f      	ldr	r3, [pc, #316]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1ef      	bne.n	8006d62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80a6 	beq.w	8006edc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d90:	2300      	movs	r3, #0
 8006d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006d94:	4b47      	ldr	r3, [pc, #284]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10d      	bne.n	8006dbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006da0:	4b44      	ldr	r3, [pc, #272]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	4a43      	ldr	r2, [pc, #268]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006daa:	6593      	str	r3, [r2, #88]	; 0x58
 8006dac:	4b41      	ldr	r3, [pc, #260]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006db8:	2301      	movs	r3, #1
 8006dba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dbc:	4b3e      	ldr	r3, [pc, #248]	; (8006eb8 <HAL_RCC_OscConfig+0x57c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d118      	bne.n	8006dfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dc8:	4b3b      	ldr	r3, [pc, #236]	; (8006eb8 <HAL_RCC_OscConfig+0x57c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a3a      	ldr	r2, [pc, #232]	; (8006eb8 <HAL_RCC_OscConfig+0x57c>)
 8006dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dd4:	f7fc fe92 	bl	8003afc <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ddc:	f7fc fe8e 	bl	8003afc <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e1c6      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dee:	4b32      	ldr	r3, [pc, #200]	; (8006eb8 <HAL_RCC_OscConfig+0x57c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f0      	beq.n	8006ddc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d108      	bne.n	8006e14 <HAL_RCC_OscConfig+0x4d8>
 8006e02:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e08:	4a2a      	ldr	r2, [pc, #168]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e12:	e024      	b.n	8006e5e <HAL_RCC_OscConfig+0x522>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d110      	bne.n	8006e3e <HAL_RCC_OscConfig+0x502>
 8006e1c:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e24:	f043 0304 	orr.w	r3, r3, #4
 8006e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e2c:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e3c:	e00f      	b.n	8006e5e <HAL_RCC_OscConfig+0x522>
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e44:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e46:	f023 0301 	bic.w	r3, r3, #1
 8006e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e4e:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e54:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d016      	beq.n	8006e94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e66:	f7fc fe49 	bl	8003afc <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e6c:	e00a      	b.n	8006e84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6e:	f7fc fe45 	bl	8003afc <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e17b      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e84:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <HAL_RCC_OscConfig+0x578>)
 8006e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0ed      	beq.n	8006e6e <HAL_RCC_OscConfig+0x532>
 8006e92:	e01a      	b.n	8006eca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e94:	f7fc fe32 	bl	8003afc <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e9a:	e00f      	b.n	8006ebc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e9c:	f7fc fe2e 	bl	8003afc <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d906      	bls.n	8006ebc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e164      	b.n	800717c <HAL_RCC_OscConfig+0x840>
 8006eb2:	bf00      	nop
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ebc:	4ba8      	ldr	r3, [pc, #672]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e8      	bne.n	8006e9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eca:	7ffb      	ldrb	r3, [r7, #31]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d105      	bne.n	8006edc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed0:	4ba3      	ldr	r3, [pc, #652]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	4aa2      	ldr	r2, [pc, #648]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d03c      	beq.n	8006f62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01c      	beq.n	8006f2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ef0:	4b9b      	ldr	r3, [pc, #620]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ef6:	4a9a      	ldr	r2, [pc, #616]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fc fdfc 	bl	8003afc <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f08:	f7fc fdf8 	bl	8003afc <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e130      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f1a:	4b91      	ldr	r3, [pc, #580]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0ef      	beq.n	8006f08 <HAL_RCC_OscConfig+0x5cc>
 8006f28:	e01b      	b.n	8006f62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f2a:	4b8d      	ldr	r3, [pc, #564]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f30:	4a8b      	ldr	r2, [pc, #556]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3a:	f7fc fddf 	bl	8003afc <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f42:	f7fc fddb 	bl	8003afc <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e113      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f54:	4b82      	ldr	r3, [pc, #520]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1ef      	bne.n	8006f42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8107 	beq.w	800717a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	f040 80cb 	bne.w	800710c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006f76:	4b7a      	ldr	r3, [pc, #488]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f003 0203 	and.w	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d12c      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	3b01      	subs	r3, #1
 8006f96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d123      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d11b      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d113      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d109      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d06d      	beq.n	80070c0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	d068      	beq.n	80070bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006fea:	4b5d      	ldr	r3, [pc, #372]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ff6:	4b5a      	ldr	r3, [pc, #360]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e0ba      	b.n	800717c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007006:	4b56      	ldr	r3, [pc, #344]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a55      	ldr	r2, [pc, #340]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800700c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007010:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007012:	f7fc fd73 	bl	8003afc <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800701a:	f7fc fd6f 	bl	8003afc <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e0a7      	b.n	800717c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800702c:	4b4c      	ldr	r3, [pc, #304]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f0      	bne.n	800701a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007038:	4b49      	ldr	r3, [pc, #292]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	4b49      	ldr	r3, [pc, #292]	; (8007164 <HAL_RCC_OscConfig+0x828>)
 800703e:	4013      	ands	r3, r2
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007048:	3a01      	subs	r2, #1
 800704a:	0112      	lsls	r2, r2, #4
 800704c:	4311      	orrs	r1, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007052:	0212      	lsls	r2, r2, #8
 8007054:	4311      	orrs	r1, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800705a:	0852      	lsrs	r2, r2, #1
 800705c:	3a01      	subs	r2, #1
 800705e:	0552      	lsls	r2, r2, #21
 8007060:	4311      	orrs	r1, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007066:	0852      	lsrs	r2, r2, #1
 8007068:	3a01      	subs	r2, #1
 800706a:	0652      	lsls	r2, r2, #25
 800706c:	4311      	orrs	r1, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007072:	06d2      	lsls	r2, r2, #27
 8007074:	430a      	orrs	r2, r1
 8007076:	493a      	ldr	r1, [pc, #232]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007078:	4313      	orrs	r3, r2
 800707a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800707c:	4b38      	ldr	r3, [pc, #224]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a37      	ldr	r2, [pc, #220]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007086:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007088:	4b35      	ldr	r3, [pc, #212]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	4a34      	ldr	r2, [pc, #208]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800708e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007092:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007094:	f7fc fd32 	bl	8003afc <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800709c:	f7fc fd2e 	bl	8003afc <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e066      	b.n	800717c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070ae:	4b2c      	ldr	r3, [pc, #176]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070ba:	e05e      	b.n	800717a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e05d      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070c0:	4b27      	ldr	r3, [pc, #156]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d156      	bne.n	800717a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80070cc:	4b24      	ldr	r3, [pc, #144]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a23      	ldr	r2, [pc, #140]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 80070d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070d8:	4b21      	ldr	r3, [pc, #132]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4a20      	ldr	r2, [pc, #128]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 80070de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070e4:	f7fc fd0a 	bl	8003afc <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ec:	f7fc fd06 	bl	8003afc <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e03e      	b.n	800717c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070fe:	4b18      	ldr	r3, [pc, #96]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0x7b0>
 800710a:	e036      	b.n	800717a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	2b0c      	cmp	r3, #12
 8007110:	d031      	beq.n	8007176 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007112:	4b13      	ldr	r3, [pc, #76]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a12      	ldr	r2, [pc, #72]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800711c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	4a0c      	ldr	r2, [pc, #48]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007130:	f023 0303 	bic.w	r3, r3, #3
 8007134:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	4a09      	ldr	r2, [pc, #36]	; (8007160 <HAL_RCC_OscConfig+0x824>)
 800713c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007144:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007146:	f7fc fcd9 	bl	8003afc <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800714c:	e00c      	b.n	8007168 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800714e:	f7fc fcd5 	bl	8003afc <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d905      	bls.n	8007168 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e00d      	b.n	800717c <HAL_RCC_OscConfig+0x840>
 8007160:	40021000 	.word	0x40021000
 8007164:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <HAL_RCC_OscConfig+0x848>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1ec      	bne.n	800714e <HAL_RCC_OscConfig+0x812>
 8007174:	e001      	b.n	800717a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40021000 	.word	0x40021000

08007188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e0c8      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800719c:	4b66      	ldr	r3, [pc, #408]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d910      	bls.n	80071cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071aa:	4b63      	ldr	r3, [pc, #396]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f023 0207 	bic.w	r2, r3, #7
 80071b2:	4961      	ldr	r1, [pc, #388]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	4b5f      	ldr	r3, [pc, #380]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d001      	beq.n	80071cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0b0      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d04c      	beq.n	8007272 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d107      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071e0:	4b56      	ldr	r3, [pc, #344]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d121      	bne.n	8007230 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e09e      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d107      	bne.n	8007208 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071f8:	4b50      	ldr	r3, [pc, #320]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d115      	bne.n	8007230 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e092      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d107      	bne.n	8007220 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007210:	4b4a      	ldr	r3, [pc, #296]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d109      	bne.n	8007230 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e086      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007220:	4b46      	ldr	r3, [pc, #280]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e07e      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007230:	4b42      	ldr	r3, [pc, #264]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f023 0203 	bic.w	r2, r3, #3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	493f      	ldr	r1, [pc, #252]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 800723e:	4313      	orrs	r3, r2
 8007240:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007242:	f7fc fc5b 	bl	8003afc <HAL_GetTick>
 8007246:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007248:	e00a      	b.n	8007260 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800724a:	f7fc fc57 	bl	8003afc <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f241 3288 	movw	r2, #5000	; 0x1388
 8007258:	4293      	cmp	r3, r2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e066      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007260:	4b36      	ldr	r3, [pc, #216]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f003 020c 	and.w	r2, r3, #12
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	429a      	cmp	r2, r3
 8007270:	d1eb      	bne.n	800724a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800727e:	4b2f      	ldr	r3, [pc, #188]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	492c      	ldr	r1, [pc, #176]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 800728c:	4313      	orrs	r3, r2
 800728e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007290:	4b29      	ldr	r3, [pc, #164]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d210      	bcs.n	80072c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729e:	4b26      	ldr	r3, [pc, #152]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 0207 	bic.w	r2, r3, #7
 80072a6:	4924      	ldr	r1, [pc, #144]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ae:	4b22      	ldr	r3, [pc, #136]	; (8007338 <HAL_RCC_ClockConfig+0x1b0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d001      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e036      	b.n	800732e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	4918      	ldr	r1, [pc, #96]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d009      	beq.n	80072fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	4910      	ldr	r1, [pc, #64]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072fe:	f000 f825 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8007302:	4601      	mov	r1, r0
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <HAL_RCC_ClockConfig+0x1b4>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	091b      	lsrs	r3, r3, #4
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	4a0c      	ldr	r2, [pc, #48]	; (8007340 <HAL_RCC_ClockConfig+0x1b8>)
 8007310:	5cd3      	ldrb	r3, [r2, r3]
 8007312:	f003 031f 	and.w	r3, r3, #31
 8007316:	fa21 f303 	lsr.w	r3, r1, r3
 800731a:	4a0a      	ldr	r2, [pc, #40]	; (8007344 <HAL_RCC_ClockConfig+0x1bc>)
 800731c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800731e:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <HAL_RCC_ClockConfig+0x1c0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f7fc f9b4 	bl	8003690 <HAL_InitTick>
 8007328:	4603      	mov	r3, r0
 800732a:	72fb      	strb	r3, [r7, #11]

  return status;
 800732c:	7afb      	ldrb	r3, [r7, #11]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	40022000 	.word	0x40022000
 800733c:	40021000 	.word	0x40021000
 8007340:	08013f90 	.word	0x08013f90
 8007344:	20000040 	.word	0x20000040
 8007348:	20000044 	.word	0x20000044

0800734c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800734c:	b480      	push	{r7}
 800734e:	b089      	sub	sp, #36	; 0x24
 8007350:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800735a:	4b3d      	ldr	r3, [pc, #244]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 030c 	and.w	r3, r3, #12
 8007362:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007364:	4b3a      	ldr	r3, [pc, #232]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <HAL_RCC_GetSysClockFreq+0x34>
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b0c      	cmp	r3, #12
 8007378:	d121      	bne.n	80073be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d11e      	bne.n	80073be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007380:	4b33      	ldr	r3, [pc, #204]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800738c:	4b30      	ldr	r3, [pc, #192]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 800738e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	e005      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800739c:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	091b      	lsrs	r3, r3, #4
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80073a8:	4a2a      	ldr	r2, [pc, #168]	; (8007454 <HAL_RCC_GetSysClockFreq+0x108>)
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10d      	bne.n	80073d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80073bc:	e00a      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d102      	bne.n	80073ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <HAL_RCC_GetSysClockFreq+0x10c>)
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	e004      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d101      	bne.n	80073d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80073d0:	4b22      	ldr	r3, [pc, #136]	; (800745c <HAL_RCC_GetSysClockFreq+0x110>)
 80073d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b0c      	cmp	r3, #12
 80073d8:	d133      	bne.n	8007442 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073da:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d002      	beq.n	80073f0 <HAL_RCC_GetSysClockFreq+0xa4>
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d003      	beq.n	80073f6 <HAL_RCC_GetSysClockFreq+0xaa>
 80073ee:	e005      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80073f0:	4b19      	ldr	r3, [pc, #100]	; (8007458 <HAL_RCC_GetSysClockFreq+0x10c>)
 80073f2:	617b      	str	r3, [r7, #20]
      break;
 80073f4:	e005      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80073f6:	4b19      	ldr	r3, [pc, #100]	; (800745c <HAL_RCC_GetSysClockFreq+0x110>)
 80073f8:	617b      	str	r3, [r7, #20]
      break;
 80073fa:	e002      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	617b      	str	r3, [r7, #20]
      break;
 8007400:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007402:	4b13      	ldr	r3, [pc, #76]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	3301      	adds	r3, #1
 800740e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007410:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	0a1b      	lsrs	r3, r3, #8
 8007416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	fb02 f203 	mul.w	r2, r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	fbb2 f3f3 	udiv	r3, r2, r3
 8007426:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007428:	4b09      	ldr	r3, [pc, #36]	; (8007450 <HAL_RCC_GetSysClockFreq+0x104>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	0e5b      	lsrs	r3, r3, #25
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	3301      	adds	r3, #1
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007442:	69bb      	ldr	r3, [r7, #24]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3724      	adds	r7, #36	; 0x24
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40021000 	.word	0x40021000
 8007454:	08013fa8 	.word	0x08013fa8
 8007458:	00f42400 	.word	0x00f42400
 800745c:	007a1200 	.word	0x007a1200

08007460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007464:	4b03      	ldr	r3, [pc, #12]	; (8007474 <HAL_RCC_GetHCLKFreq+0x14>)
 8007466:	681b      	ldr	r3, [r3, #0]
}
 8007468:	4618      	mov	r0, r3
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000040 	.word	0x20000040

08007478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800747c:	f7ff fff0 	bl	8007460 <HAL_RCC_GetHCLKFreq>
 8007480:	4601      	mov	r1, r0
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	4a04      	ldr	r2, [pc, #16]	; (80074a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800748e:	5cd3      	ldrb	r3, [r2, r3]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40021000 	.word	0x40021000
 80074a0:	08013fa0 	.word	0x08013fa0

080074a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80074a8:	f7ff ffda 	bl	8007460 <HAL_RCC_GetHCLKFreq>
 80074ac:	4601      	mov	r1, r0
 80074ae:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	0adb      	lsrs	r3, r3, #11
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	4a04      	ldr	r2, [pc, #16]	; (80074cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	08013fa0 	.word	0x08013fa0

080074d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	220f      	movs	r2, #15
 80074de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80074e0:	4b12      	ldr	r3, [pc, #72]	; (800752c <HAL_RCC_GetClockConfig+0x5c>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f003 0203 	and.w	r2, r3, #3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80074ec:	4b0f      	ldr	r3, [pc, #60]	; (800752c <HAL_RCC_GetClockConfig+0x5c>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <HAL_RCC_GetClockConfig+0x5c>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007504:	4b09      	ldr	r3, [pc, #36]	; (800752c <HAL_RCC_GetClockConfig+0x5c>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	08db      	lsrs	r3, r3, #3
 800750a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <HAL_RCC_GetClockConfig+0x60>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0207 	and.w	r2, r3, #7
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40021000 	.word	0x40021000
 8007530:	40022000 	.word	0x40022000

08007534 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007540:	4b2a      	ldr	r3, [pc, #168]	; (80075ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800754c:	f7ff f8a4 	bl	8006698 <HAL_PWREx_GetVoltageRange>
 8007550:	6178      	str	r0, [r7, #20]
 8007552:	e014      	b.n	800757e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007554:	4b25      	ldr	r3, [pc, #148]	; (80075ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007558:	4a24      	ldr	r2, [pc, #144]	; (80075ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800755a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800755e:	6593      	str	r3, [r2, #88]	; 0x58
 8007560:	4b22      	ldr	r3, [pc, #136]	; (80075ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800756c:	f7ff f894 	bl	8006698 <HAL_PWREx_GetVoltageRange>
 8007570:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007572:	4b1e      	ldr	r3, [pc, #120]	; (80075ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007576:	4a1d      	ldr	r2, [pc, #116]	; (80075ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800757c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007584:	d10b      	bne.n	800759e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b80      	cmp	r3, #128	; 0x80
 800758a:	d919      	bls.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2ba0      	cmp	r3, #160	; 0xa0
 8007590:	d902      	bls.n	8007598 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007592:	2302      	movs	r3, #2
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	e013      	b.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007598:	2301      	movs	r3, #1
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	e010      	b.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b80      	cmp	r3, #128	; 0x80
 80075a2:	d902      	bls.n	80075aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80075a4:	2303      	movs	r3, #3
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	e00a      	b.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b80      	cmp	r3, #128	; 0x80
 80075ae:	d102      	bne.n	80075b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075b0:	2302      	movs	r3, #2
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	e004      	b.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b70      	cmp	r3, #112	; 0x70
 80075ba:	d101      	bne.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075bc:	2301      	movs	r3, #1
 80075be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f023 0207 	bic.w	r2, r3, #7
 80075c8:	4909      	ldr	r1, [pc, #36]	; (80075f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d001      	beq.n	80075e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40021000 	.word	0x40021000
 80075f0:	40022000 	.word	0x40022000

080075f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075fc:	2300      	movs	r3, #0
 80075fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007600:	2300      	movs	r3, #0
 8007602:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760c:	2b00      	cmp	r3, #0
 800760e:	d03f      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007618:	d01c      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800761a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800761e:	d802      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007624:	e01f      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007626:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800762a:	d003      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800762c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007630:	d01c      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007632:	e018      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007634:	4b85      	ldr	r3, [pc, #532]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4a84      	ldr	r2, [pc, #528]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800763a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007640:	e015      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ffa1 	bl	8008590 <RCCEx_PLLSAI1_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007652:	e00c      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3320      	adds	r3, #32
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f001 f888 	bl	8008770 <RCCEx_PLLSAI2_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007664:	e003      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	74fb      	strb	r3, [r7, #19]
      break;
 800766a:	e000      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800766c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800766e:	7cfb      	ldrb	r3, [r7, #19]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007674:	4b75      	ldr	r3, [pc, #468]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007682:	4972      	ldr	r1, [pc, #456]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800768a:	e001      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	7cfb      	ldrb	r3, [r7, #19]
 800768e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d03f      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076a4:	d01c      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80076a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076aa:	d802      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xda>
 80076b0:	e01f      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80076b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076b6:	d003      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80076b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076bc:	d01c      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80076be:	e018      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80076c0:	4b62      	ldr	r3, [pc, #392]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4a61      	ldr	r2, [pc, #388]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80076cc:	e015      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3304      	adds	r3, #4
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 ff5b 	bl	8008590 <RCCEx_PLLSAI1_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80076de:	e00c      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3320      	adds	r3, #32
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 f842 	bl	8008770 <RCCEx_PLLSAI2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80076f0:	e003      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	74fb      	strb	r3, [r7, #19]
      break;
 80076f6:	e000      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80076f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076fa:	7cfb      	ldrb	r3, [r7, #19]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10b      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007700:	4b52      	ldr	r3, [pc, #328]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770e:	494f      	ldr	r1, [pc, #316]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007716:	e001      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007718:	7cfb      	ldrb	r3, [r7, #19]
 800771a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80a0 	beq.w	800786a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800772a:	2300      	movs	r3, #0
 800772c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800772e:	4b47      	ldr	r3, [pc, #284]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007744:	4b41      	ldr	r3, [pc, #260]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007748:	4a40      	ldr	r2, [pc, #256]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800774a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774e:	6593      	str	r3, [r2, #88]	; 0x58
 8007750:	4b3e      	ldr	r3, [pc, #248]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800775c:	2301      	movs	r3, #1
 800775e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007760:	4b3b      	ldr	r3, [pc, #236]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a3a      	ldr	r2, [pc, #232]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800776a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800776c:	f7fc f9c6 	bl	8003afc <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007772:	e009      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007774:	f7fc f9c2 	bl	8003afc <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d902      	bls.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	74fb      	strb	r3, [r7, #19]
        break;
 8007786:	e005      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007788:	4b31      	ldr	r3, [pc, #196]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0ef      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8007794:	7cfb      	ldrb	r3, [r7, #19]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d15c      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800779a:	4b2c      	ldr	r3, [pc, #176]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01f      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d019      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077b8:	4b24      	ldr	r3, [pc, #144]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077c4:	4b21      	ldr	r3, [pc, #132]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ca:	4a20      	ldr	r2, [pc, #128]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077d4:	4b1d      	ldr	r3, [pc, #116]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077da:	4a1c      	ldr	r2, [pc, #112]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077e4:	4a19      	ldr	r2, [pc, #100]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d016      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f6:	f7fc f981 	bl	8003afc <HAL_GetTick>
 80077fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077fc:	e00b      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077fe:	f7fc f97d 	bl	8003afc <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	f241 3288 	movw	r2, #5000	; 0x1388
 800780c:	4293      	cmp	r3, r2
 800780e:	d902      	bls.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	74fb      	strb	r3, [r7, #19]
            break;
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0ec      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007824:	7cfb      	ldrb	r3, [r7, #19]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10c      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800782c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800783a:	4904      	ldr	r1, [pc, #16]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007842:	e009      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007844:	7cfb      	ldrb	r3, [r7, #19]
 8007846:	74bb      	strb	r3, [r7, #18]
 8007848:	e006      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800784a:	bf00      	nop
 800784c:	40021000 	.word	0x40021000
 8007850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007854:	7cfb      	ldrb	r3, [r7, #19]
 8007856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007858:	7c7b      	ldrb	r3, [r7, #17]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d105      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800785e:	4ba6      	ldr	r3, [pc, #664]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007862:	4aa5      	ldr	r2, [pc, #660]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007876:	4ba0      	ldr	r3, [pc, #640]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787c:	f023 0203 	bic.w	r2, r3, #3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	499c      	ldr	r1, [pc, #624]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007898:	4b97      	ldr	r3, [pc, #604]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800789a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789e:	f023 020c 	bic.w	r2, r3, #12
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	4994      	ldr	r1, [pc, #592]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078ba:	4b8f      	ldr	r3, [pc, #572]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	498b      	ldr	r1, [pc, #556]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078dc:	4b86      	ldr	r3, [pc, #536]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	4983      	ldr	r1, [pc, #524]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078fe:	4b7e      	ldr	r3, [pc, #504]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790c:	497a      	ldr	r1, [pc, #488]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800790e:	4313      	orrs	r3, r2
 8007910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007920:	4b75      	ldr	r3, [pc, #468]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792e:	4972      	ldr	r1, [pc, #456]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007930:	4313      	orrs	r3, r2
 8007932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007942:	4b6d      	ldr	r3, [pc, #436]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007948:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007950:	4969      	ldr	r1, [pc, #420]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007964:	4b64      	ldr	r3, [pc, #400]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007972:	4961      	ldr	r1, [pc, #388]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007974:	4313      	orrs	r3, r2
 8007976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007986:	4b5c      	ldr	r3, [pc, #368]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007994:	4958      	ldr	r1, [pc, #352]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007996:	4313      	orrs	r3, r2
 8007998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079a8:	4b53      	ldr	r3, [pc, #332]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b6:	4950      	ldr	r1, [pc, #320]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079ca:	4b4b      	ldr	r3, [pc, #300]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d8:	4947      	ldr	r1, [pc, #284]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079ec:	4b42      	ldr	r3, [pc, #264]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079f2:	f023 0203 	bic.w	r2, r3, #3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fa:	493f      	ldr	r1, [pc, #252]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d028      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a0e:	4b3a      	ldr	r3, [pc, #232]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1c:	4936      	ldr	r1, [pc, #216]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a2c:	d106      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a2e:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	4a31      	ldr	r2, [pc, #196]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a38:	60d3      	str	r3, [r2, #12]
 8007a3a:	e011      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a44:	d10c      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fd9f 	bl	8008590 <RCCEx_PLLSAI1_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007a56:	7cfb      	ldrb	r3, [r7, #19]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007a5c:	7cfb      	ldrb	r3, [r7, #19]
 8007a5e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d028      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a6c:	4b22      	ldr	r3, [pc, #136]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a7a:	491f      	ldr	r1, [pc, #124]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a8a:	d106      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a8c:	4b1a      	ldr	r3, [pc, #104]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a19      	ldr	r2, [pc, #100]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a96:	60d3      	str	r3, [r2, #12]
 8007a98:	e011      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aa2:	d10c      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fd70 	bl	8008590 <RCCEx_PLLSAI1_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ab4:	7cfb      	ldrb	r3, [r7, #19]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8007aba:	7cfb      	ldrb	r3, [r7, #19]
 8007abc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02a      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007aca:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ad8:	4907      	ldr	r1, [pc, #28]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae8:	d108      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aea:	4b03      	ldr	r3, [pc, #12]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	4a02      	ldr	r2, [pc, #8]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007af4:	60d3      	str	r3, [r2, #12]
 8007af6:	e013      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007af8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b04:	d10c      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fd3f 	bl	8008590 <RCCEx_PLLSAI1_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b16:	7cfb      	ldrb	r3, [r7, #19]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8007b1c:	7cfb      	ldrb	r3, [r7, #19]
 8007b1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d02f      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b2c:	4b2c      	ldr	r3, [pc, #176]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3a:	4929      	ldr	r1, [pc, #164]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b4a:	d10d      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	2102      	movs	r1, #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fd1c 	bl	8008590 <RCCEx_PLLSAI1_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b5c:	7cfb      	ldrb	r3, [r7, #19]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d014      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007b62:	7cfb      	ldrb	r3, [r7, #19]
 8007b64:	74bb      	strb	r3, [r7, #18]
 8007b66:	e011      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b70:	d10c      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3320      	adds	r3, #32
 8007b76:	2102      	movs	r1, #2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fdf9 	bl	8008770 <RCCEx_PLLSAI2_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b82:	7cfb      	ldrb	r3, [r7, #19]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007b88:	7cfb      	ldrb	r3, [r7, #19]
 8007b8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b98:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ba8:	490d      	ldr	r1, [pc, #52]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00b      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bbc:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bcc:	4904      	ldr	r1, [pc, #16]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40021000 	.word	0x40021000

08007be4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf6:	d137      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007bf8:	4ba9      	ldr	r3, [pc, #676]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0a:	d014      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c10:	d01e      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c16:	d001      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007c18:	f000 bca0 	b.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c1c:	4ba0      	ldr	r3, [pc, #640]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	f040 8493 	bne.w	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
        frequency = LSE_VALUE;
 8007c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c30:	61fb      	str	r3, [r7, #28]
      break;
 8007c32:	f000 bc8e 	b.w	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007c36:	4b9a      	ldr	r3, [pc, #616]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	f040 8488 	bne.w	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = LSI_VALUE;
 8007c46:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c4a:	61fb      	str	r3, [r7, #28]
      break;
 8007c4c:	f000 bc83 	b.w	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c50:	4b93      	ldr	r3, [pc, #588]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c5c:	f040 847d 	bne.w	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
        frequency = HSE_VALUE / 32U;
 8007c60:	4b90      	ldr	r3, [pc, #576]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007c62:	61fb      	str	r3, [r7, #28]
      break;
 8007c64:	f000 bc79 	b.w	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c68:	4b8d      	ldr	r3, [pc, #564]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d023      	beq.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d02e      	beq.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d139      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007c80:	4b87      	ldr	r3, [pc, #540]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d116      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007c8c:	4b84      	ldr	r3, [pc, #528]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0308 	and.w	r3, r3, #8
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8007c98:	4b81      	ldr	r3, [pc, #516]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	e005      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007ca4:	4b7e      	ldr	r3, [pc, #504]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	4a7d      	ldr	r2, [pc, #500]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007cb8:	e01f      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61bb      	str	r3, [r7, #24]
      break;
 8007cbe:	e01c      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cc0:	4b77      	ldr	r3, [pc, #476]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ccc:	d102      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8007cce:	4b77      	ldr	r3, [pc, #476]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007cd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007cd2:	e012      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61bb      	str	r3, [r7, #24]
      break;
 8007cd8:	e00f      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cda:	4b71      	ldr	r3, [pc, #452]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ce6:	d102      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8007ce8:	4b71      	ldr	r3, [pc, #452]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cea:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007cec:	e005      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61bb      	str	r3, [r7, #24]
      break;
 8007cf2:	e002      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61bb      	str	r3, [r7, #24]
      break;
 8007cf8:	bf00      	nop
    }

    switch(PeriphClk)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d00:	f000 8384 	beq.w	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d828      	bhi.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	f000 81fb 	beq.w	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d811      	bhi.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	f000 8144 	beq.w	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d804      	bhi.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	f000 8107 	beq.w	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007d24:	f000 bc1a 	b.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	f000 8184 	beq.w	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	f000 81b5 	beq.w	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
      break;
 8007d34:	f000 bc12 	b.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	f000 82dd 	beq.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007d3e:	2b40      	cmp	r3, #64	; 0x40
 8007d40:	d804      	bhi.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	f000 821e 	beq.w	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
      break;
 8007d48:	f000 bc08 	b.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d4c:	2b80      	cmp	r3, #128	; 0x80
 8007d4e:	f000 82f6 	beq.w	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8007d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d56:	f000 8315 	beq.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      break;
 8007d5a:	e3ff      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d60:	f000 8248 	beq.w	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8007d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d68:	d811      	bhi.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d6e:	d025      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d74:	d804      	bhi.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8007d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7a:	f000 838d 	beq.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
      break;
 8007d7e:	e3ed      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d021      	beq.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d8a:	d025      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
      break;
 8007d8c:	e3e6      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d92:	d021      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d98:	d808      	bhi.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8007d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9e:	f000 83bc 	beq.w	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8007da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da6:	f000 8296 	beq.w	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
      break;
 8007daa:	e3d7      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007dac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007db0:	d012      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db6:	f000 8308 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      break;
 8007dba:	e3cf      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007dbc:	69b9      	ldr	r1, [r7, #24]
 8007dbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007dc2:	f000 fdaf 	bl	8008924 <RCCEx_GetSAIxPeriphCLKFreq>
 8007dc6:	61f8      	str	r0, [r7, #28]
      break;
 8007dc8:	e3c8      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007dca:	69b9      	ldr	r1, [r7, #24]
 8007dcc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007dd0:	f000 fda8 	bl	8008924 <RCCEx_GetSAIxPeriphCLKFreq>
 8007dd4:	61f8      	str	r0, [r7, #28]
      break;
 8007dd6:	e3c1      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007dd8:	4b31      	ldr	r3, [pc, #196]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dde:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007de2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dea:	d063      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007df0:	d803      	bhi.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 808b 	beq.w	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
          break;
 8007df8:	e09a      	b.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        switch(srcclk)
 8007dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dfe:	d021      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007e00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e04:	d000      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          break;
 8007e06:	e093      	b.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	f040 8086 	bne.w	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8007e22:	4b1f      	ldr	r3, [pc, #124]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	091b      	lsrs	r3, r3, #4
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	e005      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007e2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e34:	0a1b      	lsrs	r3, r3, #8
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e40:	61fb      	str	r3, [r7, #28]
          break;
 8007e42:	e06e      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007e44:	4b16      	ldr	r3, [pc, #88]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e50:	d169      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007e52:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e5e:	d162      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007e60:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	0a1b      	lsrs	r3, r3, #8
 8007e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	fb02 f203 	mul.w	r2, r2, r3
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	3301      	adds	r3, #1
 8007e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e84:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007e86:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	0d5b      	lsrs	r3, r3, #21
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	3301      	adds	r3, #1
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	61fb      	str	r3, [r7, #28]
          break;
 8007e9c:	e043      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007e9e:	bf00      	nop
 8007ea0:	40021000 	.word	0x40021000
 8007ea4:	0003d090 	.word	0x0003d090
 8007ea8:	08013fa8 	.word	0x08013fa8
 8007eac:	00f42400 	.word	0x00f42400
 8007eb0:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007eb4:	4bb0      	ldr	r3, [pc, #704]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec0:	d133      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007ec2:	4bad      	ldr	r3, [pc, #692]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ece:	d12c      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007ed0:	4ba9      	ldr	r3, [pc, #676]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eda:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	fb02 f203 	mul.w	r2, r2, r3
 8007ee4:	4ba4      	ldr	r3, [pc, #656]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	091b      	lsrs	r3, r3, #4
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	3301      	adds	r3, #1
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007ef6:	4ba0      	ldr	r3, [pc, #640]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	0d5b      	lsrs	r3, r3, #21
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	3301      	adds	r3, #1
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0a:	61fb      	str	r3, [r7, #28]
          break;
 8007f0c:	e00d      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007f0e:	4b9a      	ldr	r3, [pc, #616]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d108      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
            frequency = HSI48_VALUE;
 8007f1c:	4b97      	ldr	r3, [pc, #604]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007f1e:	61fb      	str	r3, [r7, #28]
          break;
 8007f20:	e005      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          break;
 8007f22:	bf00      	nop
 8007f24:	e31a      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f26:	bf00      	nop
 8007f28:	e318      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f2a:	bf00      	nop
 8007f2c:	e316      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f2e:	bf00      	nop
        break;
 8007f30:	e314      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007f32:	4b91      	ldr	r3, [pc, #580]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d828      	bhi.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f65 	.word	0x08007f65
 8007f54:	08007f6d 	.word	0x08007f6d
 8007f58:	08007f81 	.word	0x08007f81
          frequency = HAL_RCC_GetPCLK2Freq();
 8007f5c:	f7ff faa2 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 8007f60:	61f8      	str	r0, [r7, #28]
          break;
 8007f62:	e01d      	b.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f64:	f7ff f9f2 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8007f68:	61f8      	str	r0, [r7, #28]
          break;
 8007f6a:	e019      	b.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f6c:	4b82      	ldr	r3, [pc, #520]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f78:	d10f      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = HSI_VALUE;
 8007f7a:	4b81      	ldr	r3, [pc, #516]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f7c:	61fb      	str	r3, [r7, #28]
          break;
 8007f7e:	e00c      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f80:	4b7d      	ldr	r3, [pc, #500]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d107      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            frequency = LSE_VALUE;
 8007f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f92:	61fb      	str	r3, [r7, #28]
          break;
 8007f94:	e003      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          break;
 8007f96:	bf00      	nop
 8007f98:	e2e0      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f9a:	bf00      	nop
 8007f9c:	e2de      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f9e:	bf00      	nop
        break;
 8007fa0:	e2dc      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007fa2:	4b75      	ldr	r3, [pc, #468]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa8:	f003 030c 	and.w	r3, r3, #12
 8007fac:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b0c      	cmp	r3, #12
 8007fb2:	d83a      	bhi.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007fb4:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 8007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	0800802b 	.word	0x0800802b
 8007fc4:	0800802b 	.word	0x0800802b
 8007fc8:	0800802b 	.word	0x0800802b
 8007fcc:	08007ff9 	.word	0x08007ff9
 8007fd0:	0800802b 	.word	0x0800802b
 8007fd4:	0800802b 	.word	0x0800802b
 8007fd8:	0800802b 	.word	0x0800802b
 8007fdc:	08008001 	.word	0x08008001
 8007fe0:	0800802b 	.word	0x0800802b
 8007fe4:	0800802b 	.word	0x0800802b
 8007fe8:	0800802b 	.word	0x0800802b
 8007fec:	08008015 	.word	0x08008015
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ff0:	f7ff fa42 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8007ff4:	61f8      	str	r0, [r7, #28]
          break;
 8007ff6:	e01d      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ff8:	f7ff f9a8 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8007ffc:	61f8      	str	r0, [r7, #28]
          break;
 8007ffe:	e019      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008000:	4b5d      	ldr	r3, [pc, #372]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800c:	d10f      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = HSI_VALUE;
 800800e:	4b5c      	ldr	r3, [pc, #368]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008010:	61fb      	str	r3, [r7, #28]
          break;
 8008012:	e00c      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008014:	4b58      	ldr	r3, [pc, #352]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b02      	cmp	r3, #2
 8008020:	d107      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008026:	61fb      	str	r3, [r7, #28]
          break;
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          break;
 800802a:	bf00      	nop
 800802c:	e296      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800802e:	bf00      	nop
 8008030:	e294      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008032:	bf00      	nop
        break;
 8008034:	e292      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008036:	4b50      	ldr	r3, [pc, #320]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008040:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	2b10      	cmp	r3, #16
 8008046:	d00d      	beq.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8008048:	2b10      	cmp	r3, #16
 800804a:	d802      	bhi.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          break;
 8008050:	e024      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
        switch(srcclk)
 8008052:	2b20      	cmp	r3, #32
 8008054:	d00a      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 8008056:	2b30      	cmp	r3, #48	; 0x30
 8008058:	d012      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          break;
 800805a:	e01f      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800805c:	f7ff fa0c 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8008060:	61f8      	str	r0, [r7, #28]
          break;
 8008062:	e01b      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetSysClockFreq();
 8008064:	f7ff f972 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8008068:	61f8      	str	r0, [r7, #28]
          break;
 800806a:	e017      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800806c:	4b42      	ldr	r3, [pc, #264]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008078:	d10d      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = HSI_VALUE;
 800807a:	4b41      	ldr	r3, [pc, #260]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800807c:	61fb      	str	r3, [r7, #28]
          break;
 800807e:	e00a      	b.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008080:	4b3d      	ldr	r3, [pc, #244]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b02      	cmp	r3, #2
 800808c:	d105      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
            frequency = LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	61fb      	str	r3, [r7, #28]
          break;
 8008094:	e001      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 8008096:	bf00      	nop
 8008098:	e260      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800809a:	bf00      	nop
        break;
 800809c:	e25e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800809e:	4b36      	ldr	r3, [pc, #216]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080a8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	d00d      	beq.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 80080b0:	2b40      	cmp	r3, #64	; 0x40
 80080b2:	d802      	bhi.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 80080b8:	e024      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        switch(srcclk)
 80080ba:	2b80      	cmp	r3, #128	; 0x80
 80080bc:	d00a      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 80080be:	2bc0      	cmp	r3, #192	; 0xc0
 80080c0:	d012      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          break;
 80080c2:	e01f      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080c4:	f7ff f9d8 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 80080c8:	61f8      	str	r0, [r7, #28]
          break;
 80080ca:	e01b      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80080cc:	f7ff f93e 	bl	800734c <HAL_RCC_GetSysClockFreq>
 80080d0:	61f8      	str	r0, [r7, #28]
          break;
 80080d2:	e017      	b.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080d4:	4b28      	ldr	r3, [pc, #160]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e0:	d10d      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80080e2:	4b27      	ldr	r3, [pc, #156]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80080e4:	61fb      	str	r3, [r7, #28]
          break;
 80080e6:	e00a      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080e8:	4b23      	ldr	r3, [pc, #140]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d105      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80080f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080fa:	61fb      	str	r3, [r7, #28]
          break;
 80080fc:	e001      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80080fe:	bf00      	nop
 8008100:	e22c      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008102:	bf00      	nop
        break;
 8008104:	e22a      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008106:	4b1c      	ldr	r3, [pc, #112]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008110:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008118:	d010      	beq.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800811a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811e:	d802      	bhi.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          break;
 8008124:	e026      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        switch(srcclk)
 8008126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800812a:	d00b      	beq.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 800812c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008130:	d012      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
          break;
 8008132:	e01f      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008134:	f7ff f9a0 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8008138:	61f8      	str	r0, [r7, #28]
          break;
 800813a:	e01b      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetSysClockFreq();
 800813c:	f7ff f906 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8008140:	61f8      	str	r0, [r7, #28]
          break;
 8008142:	e017      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008150:	d10d      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = HSI_VALUE;
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008154:	61fb      	str	r3, [r7, #28]
          break;
 8008156:	e00a      	b.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008158:	4b07      	ldr	r3, [pc, #28]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b02      	cmp	r3, #2
 8008164:	d105      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = LSE_VALUE;
 8008166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800816a:	61fb      	str	r3, [r7, #28]
          break;
 800816c:	e001      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          break;
 800816e:	bf00      	nop
 8008170:	e1f4      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008172:	bf00      	nop
        break;
 8008174:	e1f2      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8008176:	bf00      	nop
 8008178:	40021000 	.word	0x40021000
 800817c:	02dc6c00 	.word	0x02dc6c00
 8008180:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008184:	4bad      	ldr	r3, [pc, #692]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800818e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008196:	d010      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8008198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819c:	d802      	bhi.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          break;
 80081a2:	e026      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        switch(srcclk)
 80081a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a8:	d00b      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 80081aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081ae:	d012      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80081b0:	e01f      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081b2:	f7ff f961 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 80081b6:	61f8      	str	r0, [r7, #28]
          break;
 80081b8:	e01b      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetSysClockFreq();
 80081ba:	f7ff f8c7 	bl	800734c <HAL_RCC_GetSysClockFreq>
 80081be:	61f8      	str	r0, [r7, #28]
          break;
 80081c0:	e017      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081c2:	4b9e      	ldr	r3, [pc, #632]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ce:	d10d      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = HSI_VALUE;
 80081d0:	4b9b      	ldr	r3, [pc, #620]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80081d2:	61fb      	str	r3, [r7, #28]
          break;
 80081d4:	e00a      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081d6:	4b99      	ldr	r3, [pc, #612]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d105      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = LSE_VALUE;
 80081e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081e8:	61fb      	str	r3, [r7, #28]
          break;
 80081ea:	e001      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          break;
 80081ec:	bf00      	nop
 80081ee:	e1b5      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80081f0:	bf00      	nop
        break;
 80081f2:	e1b3      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80081f4:	4b91      	ldr	r3, [pc, #580]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80081f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081fe:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008206:	d036      	beq.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8008208:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800820c:	d003      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800820e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008212:	d004      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
          break;
 8008214:	e05e      	b.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008216:	f7ff f899 	bl	800734c <HAL_RCC_GetSysClockFreq>
 800821a:	61f8      	str	r0, [r7, #28]
          break;
 800821c:	e05a      	b.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800821e:	4b87      	ldr	r3, [pc, #540]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822a:	d150      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 800822c:	4b83      	ldr	r3, [pc, #524]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d04a      	beq.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008238:	4b80      	ldr	r3, [pc, #512]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	0a1b      	lsrs	r3, r3, #8
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	fb02 f203 	mul.w	r2, r2, r3
 800824c:	4b7b      	ldr	r3, [pc, #492]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	091b      	lsrs	r3, r3, #4
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	3301      	adds	r3, #1
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800825e:	4b77      	ldr	r3, [pc, #476]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	0e5b      	lsrs	r3, r3, #25
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	3301      	adds	r3, #1
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	61fb      	str	r3, [r7, #28]
          break;
 8008274:	e02b      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8008276:	4b71      	ldr	r3, [pc, #452]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008282:	d126      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8008284:	4b6d      	ldr	r3, [pc, #436]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d020      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008290:	4b6a      	ldr	r3, [pc, #424]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	fb02 f203 	mul.w	r2, r2, r3
 80082a4:	4b65      	ldr	r3, [pc, #404]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	091b      	lsrs	r3, r3, #4
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	3301      	adds	r3, #1
 80082b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80082b6:	4b61      	ldr	r3, [pc, #388]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	0e5b      	lsrs	r3, r3, #25
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	3301      	adds	r3, #1
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ca:	61fb      	str	r3, [r7, #28]
          break;
 80082cc:	e001      	b.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
          break;
 80082ce:	bf00      	nop
 80082d0:	e144      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80082d2:	bf00      	nop
        break;
 80082d4:	e142      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80082d6:	4b59      	ldr	r3, [pc, #356]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e0:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d103      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK2Freq();
 80082e8:	f7ff f8dc 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 80082ec:	61f8      	str	r0, [r7, #28]
        break;
 80082ee:	e135      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80082f0:	f7ff f82c 	bl	800734c <HAL_RCC_GetSysClockFreq>
 80082f4:	61f8      	str	r0, [r7, #28]
        break;
 80082f6:	e131      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80082f8:	4b50      	ldr	r3, [pc, #320]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008302:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830a:	d009      	beq.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800830c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008310:	d00a      	beq.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d000      	beq.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
          break;
 8008316:	e011      	b.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008318:	f7ff f8ae 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 800831c:	61f8      	str	r0, [r7, #28]
          break;
 800831e:	e00d      	b.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetSysClockFreq();
 8008320:	f7ff f814 	bl	800734c <HAL_RCC_GetSysClockFreq>
 8008324:	61f8      	str	r0, [r7, #28]
          break;
 8008326:	e009      	b.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008328:	4b44      	ldr	r3, [pc, #272]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008334:	d101      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
            frequency = HSI_VALUE;
 8008336:	4b42      	ldr	r3, [pc, #264]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008338:	61fb      	str	r3, [r7, #28]
          break;
 800833a:	bf00      	nop
        break;
 800833c:	e10e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800833e:	4b3f      	ldr	r3, [pc, #252]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008348:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008350:	d009      	beq.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008356:	d00a      	beq.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008358:	2b00      	cmp	r3, #0
 800835a:	d000      	beq.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 800835c:	e011      	b.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800835e:	f7ff f88b 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8008362:	61f8      	str	r0, [r7, #28]
          break;
 8008364:	e00d      	b.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008366:	f7fe fff1 	bl	800734c <HAL_RCC_GetSysClockFreq>
 800836a:	61f8      	str	r0, [r7, #28]
          break;
 800836c:	e009      	b.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800836e:	4b33      	ldr	r3, [pc, #204]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837a:	d101      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
            frequency = HSI_VALUE;
 800837c:	4b30      	ldr	r3, [pc, #192]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800837e:	61fb      	str	r3, [r7, #28]
          break;
 8008380:	bf00      	nop
        break;
 8008382:	e0eb      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008384:	4b2d      	ldr	r3, [pc, #180]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800838e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008396:	d009      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8008398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800839c:	d00a      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d000      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          break;
 80083a2:	e011      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083a4:	f7ff f868 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 80083a8:	61f8      	str	r0, [r7, #28]
          break;
 80083aa:	e00d      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80083ac:	f7fe ffce 	bl	800734c <HAL_RCC_GetSysClockFreq>
 80083b0:	61f8      	str	r0, [r7, #28]
          break;
 80083b2:	e009      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083b4:	4b21      	ldr	r3, [pc, #132]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c0:	d101      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 80083c2:	4b1f      	ldr	r3, [pc, #124]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80083c4:	61fb      	str	r3, [r7, #28]
          break;
 80083c6:	bf00      	nop
        break;
 80083c8:	e0c8      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80083ca:	4b1c      	ldr	r3, [pc, #112]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80083cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083d0:	f003 0303 	and.w	r3, r3, #3
 80083d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d008      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d302      	bcc.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d008      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80083e4:	e011      	b.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083e6:	f7ff f847 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 80083ea:	61f8      	str	r0, [r7, #28]
          break;
 80083ec:	e00d      	b.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetSysClockFreq();
 80083ee:	f7fe ffad 	bl	800734c <HAL_RCC_GetSysClockFreq>
 80083f2:	61f8      	str	r0, [r7, #28]
          break;
 80083f4:	e009      	b.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083f6:	4b11      	ldr	r3, [pc, #68]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008402:	d101      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008406:	61fb      	str	r3, [r7, #28]
          break;
 8008408:	bf00      	nop
        break;
 800840a:	e0a7      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800840c:	4b0b      	ldr	r3, [pc, #44]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800840e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008412:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008416:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800841e:	d015      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008424:	d802      	bhi.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00c      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800842a:	e034      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
        switch(srcclk)
 800842c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008430:	d017      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8008432:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008436:	d01e      	beq.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 8008438:	e02d      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800843a:	bf00      	nop
 800843c:	40021000 	.word	0x40021000
 8008440:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 8008444:	f7ff f818 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8008448:	61f8      	str	r0, [r7, #28]
          break;
 800844a:	e024      	b.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800844c:	4b46      	ldr	r3, [pc, #280]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800844e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b02      	cmp	r3, #2
 8008458:	d118      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
              frequency = LSI_VALUE;
 800845a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800845e:	61fb      	str	r3, [r7, #28]
          break;
 8008460:	e014      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008462:	4b41      	ldr	r3, [pc, #260]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800846a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846e:	d10f      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
            frequency = HSI_VALUE;
 8008470:	4b3e      	ldr	r3, [pc, #248]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8008472:	61fb      	str	r3, [r7, #28]
          break;
 8008474:	e00c      	b.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008476:	4b3c      	ldr	r3, [pc, #240]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b02      	cmp	r3, #2
 8008482:	d107      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
            frequency = LSE_VALUE;
 8008484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008488:	61fb      	str	r3, [r7, #28]
          break;
 800848a:	e003      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
          break;
 800848c:	bf00      	nop
 800848e:	e065      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008490:	bf00      	nop
 8008492:	e063      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008494:	bf00      	nop
        break;
 8008496:	e061      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008498:	4b33      	ldr	r3, [pc, #204]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80084a2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084aa:	d010      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80084ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b0:	d802      	bhi.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 80084b6:	e02f      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        switch(srcclk)
 80084b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084bc:	d012      	beq.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 80084be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084c2:	d019      	beq.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 80084c4:	e028      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetPCLK1Freq();
 80084c6:	f7fe ffd7 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 80084ca:	61f8      	str	r0, [r7, #28]
          break;
 80084cc:	e024      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80084ce:	4b26      	ldr	r3, [pc, #152]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 80084d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d118      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
              frequency = LSI_VALUE;
 80084dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084e0:	61fb      	str	r3, [r7, #28]
          break;
 80084e2:	e014      	b.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084e4:	4b20      	ldr	r3, [pc, #128]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f0:	d10f      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
            frequency = HSI_VALUE;
 80084f2:	4b1e      	ldr	r3, [pc, #120]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 80084f4:	61fb      	str	r3, [r7, #28]
          break;
 80084f6:	e00c      	b.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084f8:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b02      	cmp	r3, #2
 8008504:	d107      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = LSE_VALUE;
 8008506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850a:	61fb      	str	r3, [r7, #28]
          break;
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800850e:	bf00      	nop
 8008510:	e024      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008512:	bf00      	nop
 8008514:	e022      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008516:	bf00      	nop
        break;
 8008518:	e020      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800851c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008524:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800852c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008530:	d004      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8008532:	e00d      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008534:	f7fe ffa0 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 8008538:	61f8      	str	r0, [r7, #28]
          break;
 800853a:	e009      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800853c:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008548:	d101      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            frequency = HSI_VALUE;
 800854a:	4b08      	ldr	r3, [pc, #32]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800854c:	61fb      	str	r3, [r7, #28]
          break;
 800854e:	bf00      	nop
        break;
 8008550:	e004      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8008552:	bf00      	nop
 8008554:	e002      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8008556:	bf00      	nop
 8008558:	e000      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800855a:	bf00      	nop
    }
  }

  return(frequency);
 800855c:	69fb      	ldr	r3, [r7, #28]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	40021000 	.word	0x40021000
 800856c:	00f42400 	.word	0x00f42400

08008570 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008574:	4b05      	ldr	r3, [pc, #20]	; (800858c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a04      	ldr	r2, [pc, #16]	; (800858c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800857a:	f043 0304 	orr.w	r3, r3, #4
 800857e:	6013      	str	r3, [r2, #0]
}
 8008580:	bf00      	nop
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40021000 	.word	0x40021000

08008590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800859e:	4b73      	ldr	r3, [pc, #460]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d018      	beq.n	80085dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80085aa:	4b70      	ldr	r3, [pc, #448]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f003 0203 	and.w	r2, r3, #3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d10d      	bne.n	80085d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
       ||
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80085c2:	4b6a      	ldr	r3, [pc, #424]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	091b      	lsrs	r3, r3, #4
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
       ||
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d044      	beq.n	8008660 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	73fb      	strb	r3, [r7, #15]
 80085da:	e041      	b.n	8008660 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d00c      	beq.n	80085fe <RCCEx_PLLSAI1_Config+0x6e>
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d013      	beq.n	8008610 <RCCEx_PLLSAI1_Config+0x80>
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d120      	bne.n	800862e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085ec:	4b5f      	ldr	r3, [pc, #380]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d11d      	bne.n	8008634 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085fc:	e01a      	b.n	8008634 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085fe:	4b5b      	ldr	r3, [pc, #364]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008606:	2b00      	cmp	r3, #0
 8008608:	d116      	bne.n	8008638 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800860e:	e013      	b.n	8008638 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008610:	4b56      	ldr	r3, [pc, #344]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10f      	bne.n	800863c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800861c:	4b53      	ldr	r3, [pc, #332]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d109      	bne.n	800863c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800862c:	e006      	b.n	800863c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]
      break;
 8008632:	e004      	b.n	800863e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800863c:	bf00      	nop
    }

    if(status == HAL_OK)
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10d      	bne.n	8008660 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008644:	4b49      	ldr	r3, [pc, #292]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6819      	ldr	r1, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	3b01      	subs	r3, #1
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	430b      	orrs	r3, r1
 800865a:	4944      	ldr	r1, [pc, #272]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 800865c:	4313      	orrs	r3, r2
 800865e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d17c      	bne.n	8008760 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008666:	4b41      	ldr	r3, [pc, #260]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a40      	ldr	r2, [pc, #256]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 800866c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008672:	f7fb fa43 	bl	8003afc <HAL_GetTick>
 8008676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008678:	e009      	b.n	800868e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800867a:	f7fb fa3f 	bl	8003afc <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d902      	bls.n	800868e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	73fb      	strb	r3, [r7, #15]
        break;
 800868c:	e005      	b.n	800869a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800868e:	4b37      	ldr	r3, [pc, #220]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1ef      	bne.n	800867a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d15f      	bne.n	8008760 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d110      	bne.n	80086c8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086a6:	4b31      	ldr	r3, [pc, #196]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80086ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6892      	ldr	r2, [r2, #8]
 80086b6:	0211      	lsls	r1, r2, #8
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	68d2      	ldr	r2, [r2, #12]
 80086bc:	06d2      	lsls	r2, r2, #27
 80086be:	430a      	orrs	r2, r1
 80086c0:	492a      	ldr	r1, [pc, #168]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	610b      	str	r3, [r1, #16]
 80086c6:	e027      	b.n	8008718 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d112      	bne.n	80086f4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086ce:	4b27      	ldr	r3, [pc, #156]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80086d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6892      	ldr	r2, [r2, #8]
 80086de:	0211      	lsls	r1, r2, #8
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6912      	ldr	r2, [r2, #16]
 80086e4:	0852      	lsrs	r2, r2, #1
 80086e6:	3a01      	subs	r2, #1
 80086e8:	0552      	lsls	r2, r2, #21
 80086ea:	430a      	orrs	r2, r1
 80086ec:	491f      	ldr	r1, [pc, #124]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	610b      	str	r3, [r1, #16]
 80086f2:	e011      	b.n	8008718 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086f4:	4b1d      	ldr	r3, [pc, #116]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80086fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6892      	ldr	r2, [r2, #8]
 8008704:	0211      	lsls	r1, r2, #8
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6952      	ldr	r2, [r2, #20]
 800870a:	0852      	lsrs	r2, r2, #1
 800870c:	3a01      	subs	r2, #1
 800870e:	0652      	lsls	r2, r2, #25
 8008710:	430a      	orrs	r2, r1
 8008712:	4916      	ldr	r1, [pc, #88]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008714:	4313      	orrs	r3, r2
 8008716:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008718:	4b14      	ldr	r3, [pc, #80]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a13      	ldr	r2, [pc, #76]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 800871e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008724:	f7fb f9ea 	bl	8003afc <HAL_GetTick>
 8008728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800872a:	e009      	b.n	8008740 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800872c:	f7fb f9e6 	bl	8003afc <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d902      	bls.n	8008740 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
          break;
 800873e:	e005      	b.n	800874c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0ef      	beq.n	800872c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008754:	691a      	ldr	r2, [r3, #16]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	4904      	ldr	r1, [pc, #16]	; (800876c <RCCEx_PLLSAI1_Config+0x1dc>)
 800875c:	4313      	orrs	r3, r2
 800875e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	40021000 	.word	0x40021000

08008770 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800877e:	4b68      	ldr	r3, [pc, #416]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d018      	beq.n	80087bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800878a:	4b65      	ldr	r3, [pc, #404]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f003 0203 	and.w	r2, r3, #3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d10d      	bne.n	80087b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
       ||
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80087a2:	4b5f      	ldr	r3, [pc, #380]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	091b      	lsrs	r3, r3, #4
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
       ||
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d044      	beq.n	8008840 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]
 80087ba:	e041      	b.n	8008840 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d00c      	beq.n	80087de <RCCEx_PLLSAI2_Config+0x6e>
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d013      	beq.n	80087f0 <RCCEx_PLLSAI2_Config+0x80>
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d120      	bne.n	800880e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087cc:	4b54      	ldr	r3, [pc, #336]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d11d      	bne.n	8008814 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087dc:	e01a      	b.n	8008814 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087de:	4b50      	ldr	r3, [pc, #320]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d116      	bne.n	8008818 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ee:	e013      	b.n	8008818 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087f0:	4b4b      	ldr	r3, [pc, #300]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10f      	bne.n	800881c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087fc:	4b48      	ldr	r3, [pc, #288]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d109      	bne.n	800881c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800880c:	e006      	b.n	800881c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	73fb      	strb	r3, [r7, #15]
      break;
 8008812:	e004      	b.n	800881e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008814:	bf00      	nop
 8008816:	e002      	b.n	800881e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800881c:	bf00      	nop
    }

    if(status == HAL_OK)
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10d      	bne.n	8008840 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008824:	4b3e      	ldr	r3, [pc, #248]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6819      	ldr	r1, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	3b01      	subs	r3, #1
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	430b      	orrs	r3, r1
 800883a:	4939      	ldr	r1, [pc, #228]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 800883c:	4313      	orrs	r3, r2
 800883e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d166      	bne.n	8008914 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008846:	4b36      	ldr	r3, [pc, #216]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a35      	ldr	r2, [pc, #212]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 800884c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008852:	f7fb f953 	bl	8003afc <HAL_GetTick>
 8008856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008858:	e009      	b.n	800886e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800885a:	f7fb f94f 	bl	8003afc <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d902      	bls.n	800886e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	73fb      	strb	r3, [r7, #15]
        break;
 800886c:	e005      	b.n	800887a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800886e:	4b2c      	ldr	r3, [pc, #176]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1ef      	bne.n	800885a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d149      	bne.n	8008914 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d110      	bne.n	80088a8 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008886:	4b26      	ldr	r3, [pc, #152]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800888e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6892      	ldr	r2, [r2, #8]
 8008896:	0211      	lsls	r1, r2, #8
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	68d2      	ldr	r2, [r2, #12]
 800889c:	06d2      	lsls	r2, r2, #27
 800889e:	430a      	orrs	r2, r1
 80088a0:	491f      	ldr	r1, [pc, #124]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	614b      	str	r3, [r1, #20]
 80088a6:	e011      	b.n	80088cc <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80088b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6892      	ldr	r2, [r2, #8]
 80088b8:	0211      	lsls	r1, r2, #8
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6912      	ldr	r2, [r2, #16]
 80088be:	0852      	lsrs	r2, r2, #1
 80088c0:	3a01      	subs	r2, #1
 80088c2:	0652      	lsls	r2, r2, #25
 80088c4:	430a      	orrs	r2, r1
 80088c6:	4916      	ldr	r1, [pc, #88]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80088cc:	4b14      	ldr	r3, [pc, #80]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a13      	ldr	r2, [pc, #76]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d8:	f7fb f910 	bl	8003afc <HAL_GetTick>
 80088dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80088de:	e009      	b.n	80088f4 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80088e0:	f7fb f90c 	bl	8003afc <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d902      	bls.n	80088f4 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	73fb      	strb	r3, [r7, #15]
          break;
 80088f2:	e005      	b.n	8008900 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0ef      	beq.n	80088e0 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008908:	695a      	ldr	r2, [r3, #20]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	4904      	ldr	r1, [pc, #16]	; (8008920 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008910:	4313      	orrs	r3, r2
 8008912:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008914:	7bfb      	ldrb	r3, [r7, #15]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	40021000 	.word	0x40021000

08008924 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008924:	b480      	push	{r7}
 8008926:	b089      	sub	sp, #36	; 0x24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008940:	d10c      	bne.n	800895c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008942:	4b77      	ldr	r3, [pc, #476]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008948:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800894c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008954:	d112      	bne.n	800897c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008956:	4b73      	ldr	r3, [pc, #460]	; (8008b24 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	e00f      	b.n	800897c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008962:	d10b      	bne.n	800897c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008964:	4b6e      	ldr	r3, [pc, #440]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800896e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008976:	d101      	bne.n	800897c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008978:	4b6a      	ldr	r3, [pc, #424]	; (8008b24 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800897a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 80c6 	bne.w	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800898e:	d003      	beq.n	8008998 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008996:	d13b      	bne.n	8008a10 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008998:	4b61      	ldr	r3, [pc, #388]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a4:	f040 80b3 	bne.w	8008b0e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 80089a8:	4b5d      	ldr	r3, [pc, #372]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 80ac 	beq.w	8008b0e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80089b6:	4b5a      	ldr	r3, [pc, #360]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	091b      	lsrs	r3, r3, #4
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	3301      	adds	r3, #1
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80089ca:	4b55      	ldr	r3, [pc, #340]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	0a1b      	lsrs	r3, r3, #8
 80089d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80089d6:	4b52      	ldr	r3, [pc, #328]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	0edb      	lsrs	r3, r3, #27
 80089dc:	f003 031f 	and.w	r3, r3, #31
 80089e0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80089e8:	4b4d      	ldr	r3, [pc, #308]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 80089f4:	2311      	movs	r3, #17
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e001      	b.n	80089fe <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 80089fa:	2307      	movs	r3, #7
 80089fc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	fb02 f203 	mul.w	r2, r2, r3
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008a0e:	e07e      	b.n	8008b0e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d139      	bne.n	8008a8a <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008a16:	4b42      	ldr	r3, [pc, #264]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a22:	d175      	bne.n	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8008a24:	4b3e      	ldr	r3, [pc, #248]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d06f      	beq.n	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a30:	4b3b      	ldr	r3, [pc, #236]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	091b      	lsrs	r3, r3, #4
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a42:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008a44:	4b36      	ldr	r3, [pc, #216]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	0a1b      	lsrs	r3, r3, #8
 8008a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008a50:	4b33      	ldr	r3, [pc, #204]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	0edb      	lsrs	r3, r3, #27
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008a62:	4b2f      	ldr	r3, [pc, #188]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8008a6e:	2311      	movs	r3, #17
 8008a70:	617b      	str	r3, [r7, #20]
 8008a72:	e001      	b.n	8008a78 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8008a74:	2307      	movs	r3, #7
 8008a76:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	fb02 f203 	mul.w	r2, r2, r3
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a86:	61fb      	str	r3, [r7, #28]
 8008a88:	e042      	b.n	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a90:	d003      	beq.n	8008a9a <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a98:	d13a      	bne.n	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008a9a:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa6:	d133      	bne.n	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d02d      	beq.n	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	091b      	lsrs	r3, r3, #4
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	3301      	adds	r3, #1
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008ac8:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	0a1b      	lsrs	r3, r3, #8
 8008ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008ad4:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	0edb      	lsrs	r3, r3, #27
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8008af2:	2311      	movs	r3, #17
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	e001      	b.n	8008afc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8008af8:	2307      	movs	r3, #7
 8008afa:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	fb02 f203 	mul.w	r2, r2, r3
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	e000      	b.n	8008b10 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008b0e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008b10:	69fb      	ldr	r3, [r7, #28]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3724      	adds	r7, #36	; 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40021000 	.word	0x40021000
 8008b24:	001fff68 	.word	0x001fff68

08008b28 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e153      	b.n	8008de2 <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7fa fd24 	bl	800359c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f957 	bl	8008e08 <SAI_Disable>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e13e      	b.n	8008de2 <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d007      	beq.n	8008b84 <HAL_SAI_Init+0x5c>
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d302      	bcc.n	8008b7e <HAL_SAI_Init+0x56>
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d006      	beq.n	8008b8a <HAL_SAI_Init+0x62>
 8008b7c:	e008      	b.n	8008b90 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
      break;
 8008b82:	e008      	b.n	8008b96 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008b84:	2310      	movs	r3, #16
 8008b86:	61fb      	str	r3, [r7, #28]
      break;
 8008b88:	e005      	b.n	8008b96 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008b8a:	2320      	movs	r3, #32
 8008b8c:	61fb      	str	r3, [r7, #28]
      break;
 8008b8e:	e002      	b.n	8008b96 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61fb      	str	r3, [r7, #28]
      break;
 8008b94:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d81d      	bhi.n	8008bda <HAL_SAI_Init+0xb2>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <HAL_SAI_Init+0x7c>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bbb 	.word	0x08008bbb
 8008bac:	08008bc3 	.word	0x08008bc3
 8008bb0:	08008bcb 	.word	0x08008bcb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	617b      	str	r3, [r7, #20]
      break;
 8008bb8:	e012      	b.n	8008be0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bbe:	617b      	str	r3, [r7, #20]
      break;
 8008bc0:	e00e      	b.n	8008be0 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bc6:	617b      	str	r3, [r7, #20]
      break;
 8008bc8:	e00a      	b.n	8008be0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bce:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f043 0301 	orr.w	r3, r3, #1
 8008bd6:	61fb      	str	r3, [r7, #28]
      break;
 8008bd8:	e002      	b.n	8008be0 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]
      break;
 8008bde:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a81      	ldr	r2, [pc, #516]	; (8008dec <HAL_SAI_Init+0x2c4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d004      	beq.n	8008bf4 <HAL_SAI_Init+0xcc>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a80      	ldr	r2, [pc, #512]	; (8008df0 <HAL_SAI_Init+0x2c8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d103      	bne.n	8008bfc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008bf4:	4a7f      	ldr	r2, [pc, #508]	; (8008df4 <HAL_SAI_Init+0x2cc>)
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	e002      	b.n	8008c02 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008bfc:	4a7e      	ldr	r2, [pc, #504]	; (8008df8 <HAL_SAI_Init+0x2d0>)
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d041      	beq.n	8008c8e <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a77      	ldr	r2, [pc, #476]	; (8008dec <HAL_SAI_Init+0x2c4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d004      	beq.n	8008c1e <HAL_SAI_Init+0xf6>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a75      	ldr	r2, [pc, #468]	; (8008df0 <HAL_SAI_Init+0x2c8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d105      	bne.n	8008c2a <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008c1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c22:	f7fe ffdf 	bl	8007be4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c26:	6138      	str	r0, [r7, #16]
 8008c28:	e004      	b.n	8008c34 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008c2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008c2e:	f7fe ffd9 	bl	8007be4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c32:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	025b      	lsls	r3, r3, #9
 8008c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4a6b      	ldr	r2, [pc, #428]	; (8008dfc <HAL_SAI_Init+0x2d4>)
 8008c50:	fba2 2303 	umull	r2, r3, r2, r3
 8008c54:	08da      	lsrs	r2, r3, #3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	4b67      	ldr	r3, [pc, #412]	; (8008dfc <HAL_SAI_Init+0x2d4>)
 8008c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c62:	08da      	lsrs	r2, r3, #3
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	1aca      	subs	r2, r1, r3
 8008c6e:	2a08      	cmp	r2, #8
 8008c70:	d904      	bls.n	8008c7c <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d104      	bne.n	8008c8e <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	085a      	lsrs	r2, r3, #1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_SAI_Init+0x176>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d109      	bne.n	8008cb2 <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d101      	bne.n	8008caa <HAL_SAI_Init+0x182>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e001      	b.n	8008cae <HAL_SAI_Init+0x186>
 8008caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cae:	61bb      	str	r3, [r7, #24]
 8008cb0:	e008      	b.n	8008cc4 <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d102      	bne.n	8008cc0 <HAL_SAI_Init+0x198>
 8008cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cbe:	e000      	b.n	8008cc2 <HAL_SAI_Init+0x19a>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6819      	ldr	r1, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	4b4c      	ldr	r3, [pc, #304]	; (8008e00 <HAL_SAI_Init+0x2d8>)
 8008cd0:	400b      	ands	r3, r1
 8008cd2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6819      	ldr	r1, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ce8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8008cfc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d08:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	051b      	lsls	r3, r3, #20
 8008d10:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6812      	ldr	r2, [r2, #0]
 8008d24:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008d28:	f023 030f 	bic.w	r3, r3, #15
 8008d2c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6859      	ldr	r1, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699a      	ldr	r2, [r3, #24]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6899      	ldr	r1, [r3, #8]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4b2b      	ldr	r3, [pc, #172]	; (8008e04 <HAL_SAI_Init+0x2dc>)
 8008d58:	400b      	ands	r3, r1
 8008d5a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6899      	ldr	r1, [r3, #8]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d6c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008d72:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008d78:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008d82:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68d9      	ldr	r1, [r3, #12]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008d9a:	400b      	ands	r3, r1
 8008d9c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68d9      	ldr	r1, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008db4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3720      	adds	r7, #32
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	40015404 	.word	0x40015404
 8008df0:	40015424 	.word	0x40015424
 8008df4:	40015400 	.word	0x40015400
 8008df8:	40015800 	.word	0x40015800
 8008dfc:	cccccccd 	.word	0xcccccccd
 8008e00:	ff05c010 	.word	0xff05c010
 8008e04:	fff88000 	.word	0xfff88000

08008e08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008e08:	b490      	push	{r4, r7}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008e10:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <SAI_Disable+0x60>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a15      	ldr	r2, [pc, #84]	; (8008e6c <SAI_Disable+0x64>)
 8008e16:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1a:	0b1b      	lsrs	r3, r3, #12
 8008e1c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e30:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008e32:	2c00      	cmp	r4, #0
 8008e34:	d10a      	bne.n	8008e4c <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4a:	e007      	b.n	8008e5c <SAI_Disable+0x54>
    }
    count--;
 8008e4c:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1ea      	bne.n	8008e32 <SAI_Disable+0x2a>

  return status;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc90      	pop	{r4, r7}
 8008e66:	4770      	bx	lr
 8008e68:	20000040 	.word	0x20000040
 8008e6c:	95cbec1b 	.word	0x95cbec1b

08008e70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e022      	b.n	8008ec8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7fa fa45 	bl	8003324 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f814 	bl	8008ed0 <HAL_SD_InitCard>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e00a      	b.n	8008ec8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ed0:	b5b0      	push	{r4, r5, r7, lr}
 8008ed2:	b08e      	sub	sp, #56	; 0x38
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008eec:	2376      	movs	r3, #118	; 0x76
 8008eee:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681d      	ldr	r5, [r3, #0]
 8008ef4:	466c      	mov	r4, sp
 8008ef6:	f107 0314 	add.w	r3, r7, #20
 8008efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f002 fad1 	bl	800b4b0 <SDMMC_Init>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e05f      	b.n	8008fe0 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f2e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f002 faf5 	bl	800b524 <SDMMC_PowerState_ON>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e049      	b.n	8008fe0 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f5a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fb4d 	bl	80095fc <SD_PowerON>
 8008f62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00b      	beq.n	8008f82 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e02e      	b.n	8008fe0 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa6c 	bl	8009460 <SD_InitCard>
 8008f88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e01b      	b.n	8008fe0 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f002 fb4a 	bl	800b64a <SDMMC_CmdBlockLength>
 8008fb6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00f      	beq.n	8008fde <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a09      	ldr	r2, [pc, #36]	; (8008fe8 <HAL_SD_InitCard+0x118>)
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3728      	adds	r7, #40	; 0x28
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8008fe8:	004005ff 	.word	0x004005ff

08008fec <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffa:	0f9b      	lsrs	r3, r3, #30
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009006:	0e9b      	lsrs	r3, r3, #26
 8009008:	b2db      	uxtb	r3, r3
 800900a:	f003 030f 	and.w	r3, r3, #15
 800900e:	b2da      	uxtb	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009018:	0e1b      	lsrs	r3, r3, #24
 800901a:	b2db      	uxtb	r3, r3
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	b2da      	uxtb	r2, r3
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902a:	0c1b      	lsrs	r3, r3, #16
 800902c:	b2da      	uxtb	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009036:	0a1b      	lsrs	r3, r3, #8
 8009038:	b2da      	uxtb	r2, r3
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009042:	b2da      	uxtb	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800904c:	0d1b      	lsrs	r3, r3, #20
 800904e:	b29a      	uxth	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009058:	0c1b      	lsrs	r3, r3, #16
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	b2da      	uxtb	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800906a:	0bdb      	lsrs	r3, r3, #15
 800906c:	b2db      	uxtb	r3, r3
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	b2da      	uxtb	r2, r3
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800907c:	0b9b      	lsrs	r3, r3, #14
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800908e:	0b5b      	lsrs	r3, r3, #13
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	b2da      	uxtb	r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090a0:	0b1b      	lsrs	r3, r3, #12
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2200      	movs	r2, #0
 80090b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d163      	bne.n	8009184 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c0:	009a      	lsls	r2, r3, #2
 80090c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090c6:	4013      	ands	r3, r2
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80090cc:	0f92      	lsrs	r2, r2, #30
 80090ce:	431a      	orrs	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d8:	0edb      	lsrs	r3, r3, #27
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ea:	0e1b      	lsrs	r3, r3, #24
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fc:	0d5b      	lsrs	r3, r3, #21
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 0307 	and.w	r3, r3, #7
 8009104:	b2da      	uxtb	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800910e:	0c9b      	lsrs	r3, r3, #18
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	b2da      	uxtb	r2, r3
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009120:	0bdb      	lsrs	r3, r3, #15
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 0307 	and.w	r3, r3, #7
 8009128:	b2da      	uxtb	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	7e1b      	ldrb	r3, [r3, #24]
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	3302      	adds	r3, #2
 8009144:	2201      	movs	r2, #1
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800914e:	fb02 f203 	mul.w	r2, r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	7a1b      	ldrb	r3, [r3, #8]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	2201      	movs	r2, #1
 8009162:	409a      	lsls	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009170:	0a52      	lsrs	r2, r2, #9
 8009172:	fb02 f203 	mul.w	r2, r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009180:	661a      	str	r2, [r3, #96]	; 0x60
 8009182:	e031      	b.n	80091e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009188:	2b01      	cmp	r3, #1
 800918a:	d11d      	bne.n	80091c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009190:	041b      	lsls	r3, r3, #16
 8009192:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800919a:	0c1b      	lsrs	r3, r3, #16
 800919c:	431a      	orrs	r2, r3
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	3301      	adds	r3, #1
 80091a8:	029a      	lsls	r2, r3, #10
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	661a      	str	r2, [r3, #96]	; 0x60
 80091c6:	e00f      	b.n	80091e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a58      	ldr	r2, [pc, #352]	; (8009330 <HAL_SD_GetCardCSD+0x344>)
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e09d      	b.n	8009324 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ec:	0b9b      	lsrs	r3, r3, #14
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091fe:	09db      	lsrs	r3, r3, #7
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009206:	b2da      	uxtb	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009210:	b2db      	uxtb	r3, r3
 8009212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009216:	b2da      	uxtb	r2, r3
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009220:	0fdb      	lsrs	r3, r3, #31
 8009222:	b2da      	uxtb	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922c:	0f5b      	lsrs	r3, r3, #29
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f003 0303 	and.w	r3, r3, #3
 8009234:	b2da      	uxtb	r2, r3
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	0e9b      	lsrs	r3, r3, #26
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f003 0307 	and.w	r3, r3, #7
 8009246:	b2da      	uxtb	r2, r3
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009250:	0d9b      	lsrs	r3, r3, #22
 8009252:	b2db      	uxtb	r3, r3
 8009254:	f003 030f 	and.w	r3, r3, #15
 8009258:	b2da      	uxtb	r2, r3
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009262:	0d5b      	lsrs	r3, r3, #21
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009292:	0bdb      	lsrs	r3, r3, #15
 8009294:	b2db      	uxtb	r3, r3
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	b2da      	uxtb	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a6:	0b9b      	lsrs	r3, r3, #14
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	0b5b      	lsrs	r3, r3, #13
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ce:	0b1b      	lsrs	r3, r3, #12
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e2:	0a9b      	lsrs	r3, r3, #10
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f6:	0a1b      	lsrs	r3, r3, #8
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	f003 0303 	and.w	r3, r3, #3
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	085b      	lsrs	r3, r3, #1
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009312:	b2da      	uxtb	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	004005ff 	.word	0x004005ff

08009334 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009334:	b5b0      	push	{r4, r5, r7, lr}
 8009336:	b08e      	sub	sp, #56	; 0x38
 8009338:	af04      	add	r7, sp, #16
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2203      	movs	r2, #3
 8009348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009350:	2b03      	cmp	r3, #3
 8009352:	d02e      	beq.n	80093b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935a:	d106      	bne.n	800936a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	; 0x38
 8009368:	e029      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009370:	d10a      	bne.n	8009388 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9d0 	bl	8009718 <SD_WideBus_Enable>
 8009378:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	639a      	str	r2, [r3, #56]	; 0x38
 8009386:	e01a      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa0d 	bl	80097ae <SD_WideBus_Disable>
 8009394:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
 80093a2:	e00c      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38
 80093b0:	e005      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d007      	beq.n	80093d6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a24      	ldr	r2, [pc, #144]	; (800945c <HAL_SD_ConfigWideBusOperation+0x128>)
 80093cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093d4:	e01f      	b.n	8009416 <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681d      	ldr	r5, [r3, #0]
 80093fc:	466c      	mov	r4, sp
 80093fe:	f107 0314 	add.w	r3, r7, #20
 8009402:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800940a:	f107 0308 	add.w	r3, r7, #8
 800940e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009410:	4628      	mov	r0, r5
 8009412:	f002 f84d 	bl	800b4b0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800941e:	4618      	mov	r0, r3
 8009420:	f002 f913 	bl	800b64a <SDMMC_CmdBlockLength>
 8009424:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00c      	beq.n	8009446 <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a0a      	ldr	r2, [pc, #40]	; (800945c <HAL_SD_ConfigWideBusOperation+0x128>)
 8009432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800944e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009452:	4618      	mov	r0, r3
 8009454:	3728      	adds	r7, #40	; 0x28
 8009456:	46bd      	mov	sp, r7
 8009458:	bdb0      	pop	{r4, r5, r7, pc}
 800945a:	bf00      	nop
 800945c:	004005ff 	.word	0x004005ff

08009460 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009460:	b5b0      	push	{r4, r5, r7, lr}
 8009462:	b094      	sub	sp, #80	; 0x50
 8009464:	af04      	add	r7, sp, #16
 8009466:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009468:	2301      	movs	r3, #1
 800946a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4618      	mov	r0, r3
 8009472:	f002 f866 	bl	800b542 <SDMMC_GetPowerState>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d102      	bne.n	8009482 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800947c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009480:	e0b7      	b.n	80095f2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009486:	2b03      	cmp	r3, #3
 8009488:	d02f      	beq.n	80094ea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4618      	mov	r0, r3
 8009490:	f002 f9e5 	bl	800b85e <SDMMC_CmdSendCID>
 8009494:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <SD_InitCard+0x40>
    {
      return errorstate;
 800949c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949e:	e0a8      	b.n	80095f2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f002 f890 	bl	800b5cc <SDMMC_GetResponse>
 80094ac:	4602      	mov	r2, r0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2104      	movs	r1, #4
 80094b8:	4618      	mov	r0, r3
 80094ba:	f002 f887 	bl	800b5cc <SDMMC_GetResponse>
 80094be:	4602      	mov	r2, r0
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2108      	movs	r1, #8
 80094ca:	4618      	mov	r0, r3
 80094cc:	f002 f87e 	bl	800b5cc <SDMMC_GetResponse>
 80094d0:	4602      	mov	r2, r0
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	210c      	movs	r1, #12
 80094dc:	4618      	mov	r0, r3
 80094de:	f002 f875 	bl	800b5cc <SDMMC_GetResponse>
 80094e2:	4602      	mov	r2, r0
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d00d      	beq.n	800950e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f107 020e 	add.w	r2, r7, #14
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f002 f9eb 	bl	800b8d8 <SDMMC_CmdSetRelAdd>
 8009502:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <SD_InitCard+0xae>
    {
      return errorstate;
 800950a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950c:	e071      	b.n	80095f2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009512:	2b03      	cmp	r3, #3
 8009514:	d036      	beq.n	8009584 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009516:	89fb      	ldrh	r3, [r7, #14]
 8009518:	461a      	mov	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f002 f9b5 	bl	800b89a <SDMMC_CmdSendCSD>
 8009530:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953a:	e05a      	b.n	80095f2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2100      	movs	r1, #0
 8009542:	4618      	mov	r0, r3
 8009544:	f002 f842 	bl	800b5cc <SDMMC_GetResponse>
 8009548:	4602      	mov	r2, r0
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2104      	movs	r1, #4
 8009554:	4618      	mov	r0, r3
 8009556:	f002 f839 	bl	800b5cc <SDMMC_GetResponse>
 800955a:	4602      	mov	r2, r0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2108      	movs	r1, #8
 8009566:	4618      	mov	r0, r3
 8009568:	f002 f830 	bl	800b5cc <SDMMC_GetResponse>
 800956c:	4602      	mov	r2, r0
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	210c      	movs	r1, #12
 8009578:	4618      	mov	r0, r3
 800957a:	f002 f827 	bl	800b5cc <SDMMC_GetResponse>
 800957e:	4602      	mov	r2, r0
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2104      	movs	r1, #4
 800958a:	4618      	mov	r0, r3
 800958c:	f002 f81e 	bl	800b5cc <SDMMC_GetResponse>
 8009590:	4603      	mov	r3, r0
 8009592:	0d1a      	lsrs	r2, r3, #20
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009598:	f107 0310 	add.w	r3, r7, #16
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7ff fd24 	bl	8008fec <HAL_SD_GetCardCSD>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095ae:	e020      	b.n	80095f2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6819      	ldr	r1, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b8:	041b      	lsls	r3, r3, #16
 80095ba:	f04f 0400 	mov.w	r4, #0
 80095be:	461a      	mov	r2, r3
 80095c0:	4623      	mov	r3, r4
 80095c2:	4608      	mov	r0, r1
 80095c4:	f002 f863 	bl	800b68e <SDMMC_CmdSelDesel>
 80095c8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <SD_InitCard+0x174>
  {
    return errorstate;
 80095d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d2:	e00e      	b.n	80095f2 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681d      	ldr	r5, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	466c      	mov	r4, sp
 80095dc:	f103 0210 	add.w	r2, r3, #16
 80095e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80095e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095e6:	3304      	adds	r3, #4
 80095e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095ea:	4628      	mov	r0, r5
 80095ec:	f001 ff60 	bl	800b4b0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3740      	adds	r7, #64	; 0x40
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080095fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	2300      	movs	r3, #0
 800960e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4618      	mov	r0, r3
 8009616:	f002 f85d 	bl	800b6d4 <SDMMC_CmdGoIdleState>
 800961a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	e072      	b.n	800970c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	f002 f870 	bl	800b710 <SDMMC_CmdOperCond>
 8009630:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00d      	beq.n	8009654 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4618      	mov	r0, r3
 8009644:	f002 f846 	bl	800b6d4 <SDMMC_CmdGoIdleState>
 8009648:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	e05b      	b.n	800970c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965e:	2b01      	cmp	r3, #1
 8009660:	d137      	bne.n	80096d2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f002 f870 	bl	800b74e <SDMMC_CmdAppCommand>
 800966e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d02d      	beq.n	80096d2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800967a:	e047      	b.n	800970c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f002 f863 	bl	800b74e <SDMMC_CmdAppCommand>
 8009688:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <SD_PowerON+0x98>
    {
      return errorstate;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	e03b      	b.n	800970c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	491e      	ldr	r1, [pc, #120]	; (8009714 <SD_PowerON+0x118>)
 800969a:	4618      	mov	r0, r3
 800969c:	f002 f879 	bl	800b792 <SDMMC_CmdAppOperCommand>
 80096a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096ac:	e02e      	b.n	800970c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 ff89 	bl	800b5cc <SDMMC_GetResponse>
 80096ba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	0fdb      	lsrs	r3, r3, #31
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <SD_PowerON+0xcc>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e000      	b.n	80096ca <SD_PowerON+0xce>
 80096c8:	2300      	movs	r3, #0
 80096ca:	613b      	str	r3, [r7, #16]

    count++;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80096d8:	4293      	cmp	r3, r2
 80096da:	d802      	bhi.n	80096e2 <SD_PowerON+0xe6>
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0cc      	beq.n	800967c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d902      	bls.n	80096f2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80096ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096f0:	e00c      	b.n	800970c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	645a      	str	r2, [r3, #68]	; 0x44
 8009702:	e002      	b.n	800970a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	c1100000 	.word	0xc1100000

08009718 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	2300      	movs	r3, #0
 8009726:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2100      	movs	r1, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f001 ff4c 	bl	800b5cc <SDMMC_GetResponse>
 8009734:	4603      	mov	r3, r0
 8009736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800973e:	d102      	bne.n	8009746 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009744:	e02f      	b.n	80097a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009746:	f107 030c 	add.w	r3, r7, #12
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f879 	bl	8009844 <SD_FindSCR>
 8009752:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	e023      	b.n	80097a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01c      	beq.n	80097a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009770:	041b      	lsls	r3, r3, #16
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f001 ffea 	bl	800b74e <SDMMC_CmdAppCommand>
 800977a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	e00f      	b.n	80097a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2102      	movs	r1, #2
 800978c:	4618      	mov	r0, r3
 800978e:	f002 f823 	bl	800b7d8 <SDMMC_CmdBusWidth>
 8009792:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	e003      	b.n	80097a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800979e:	2300      	movs	r3, #0
 80097a0:	e001      	b.n	80097a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b086      	sub	sp, #24
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	2300      	movs	r3, #0
 80097bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 ff01 	bl	800b5cc <SDMMC_GetResponse>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097d4:	d102      	bne.n	80097dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097da:	e02f      	b.n	800983c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097dc:	f107 030c 	add.w	r3, r7, #12
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f82e 	bl	8009844 <SD_FindSCR>
 80097e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	e023      	b.n	800983c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d01c      	beq.n	8009838 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009806:	041b      	lsls	r3, r3, #16
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f001 ff9f 	bl	800b74e <SDMMC_CmdAppCommand>
 8009810:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	e00f      	b.n	800983c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2100      	movs	r1, #0
 8009822:	4618      	mov	r0, r3
 8009824:	f001 ffd8 	bl	800b7d8 <SDMMC_CmdBusWidth>
 8009828:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	e003      	b.n	800983c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009834:	2300      	movs	r3, #0
 8009836:	e001      	b.n	800983c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009838:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b08f      	sub	sp, #60	; 0x3c
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800984e:	f7fa f955 	bl	8003afc <HAL_GetTick>
 8009852:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009858:	2300      	movs	r3, #0
 800985a:	60bb      	str	r3, [r7, #8]
 800985c:	2300      	movs	r3, #0
 800985e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2108      	movs	r1, #8
 800986a:	4618      	mov	r0, r3
 800986c:	f001 feed 	bl	800b64a <SDMMC_CmdBlockLength>
 8009870:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	e0a9      	b.n	80099d0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009884:	041b      	lsls	r3, r3, #16
 8009886:	4619      	mov	r1, r3
 8009888:	4610      	mov	r0, r2
 800988a:	f001 ff60 	bl	800b74e <SDMMC_CmdAppCommand>
 800988e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	e09a      	b.n	80099d0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800989a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800989e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80098a0:	2308      	movs	r3, #8
 80098a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80098a4:	2330      	movs	r3, #48	; 0x30
 80098a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098a8:	2302      	movs	r3, #2
 80098aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80098b0:	2301      	movs	r3, #1
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f107 0210 	add.w	r2, r7, #16
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 fe97 	bl	800b5f2 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f001 ffa7 	bl	800b81c <SDMMC_CmdSendSCR>
 80098ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d022      	beq.n	800991c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	e07a      	b.n	80099d0 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00e      	beq.n	8009906 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6819      	ldr	r1, [r3, #0]
 80098ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	f107 0208 	add.w	r2, r7, #8
 80098f4:	18d4      	adds	r4, r2, r3
 80098f6:	4608      	mov	r0, r1
 80098f8:	f001 fe07 	bl	800b50a <SDMMC_ReadFIFO>
 80098fc:	4603      	mov	r3, r0
 80098fe:	6023      	str	r3, [r4, #0]
      index++;
 8009900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009902:	3301      	adds	r3, #1
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009906:	f7fa f8f9 	bl	8003afc <HAL_GetTick>
 800990a:	4602      	mov	r2, r0
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009914:	d102      	bne.n	800991c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009916:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800991a:	e059      	b.n	80099d0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009922:	f240 432a 	movw	r3, #1066	; 0x42a
 8009926:	4013      	ands	r3, r2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0d6      	beq.n	80098da <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009932:	f003 0308 	and.w	r3, r3, #8
 8009936:	2b00      	cmp	r3, #0
 8009938:	d005      	beq.n	8009946 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2208      	movs	r2, #8
 8009940:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009942:	2308      	movs	r3, #8
 8009944:	e044      	b.n	80099d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2202      	movs	r2, #2
 800995a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800995c:	2302      	movs	r3, #2
 800995e:	e037      	b.n	80099d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009966:	f003 0320 	and.w	r3, r3, #32
 800996a:	2b00      	cmp	r3, #0
 800996c:	d005      	beq.n	800997a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2220      	movs	r2, #32
 8009974:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009976:	2320      	movs	r3, #32
 8009978:	e02a      	b.n	80099d0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009982:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	061a      	lsls	r2, r3, #24
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009990:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800999a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	0e1b      	lsrs	r3, r3, #24
 80099a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	601a      	str	r2, [r3, #0]
    scr++;
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	3304      	adds	r3, #4
 80099aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	061a      	lsls	r2, r3, #24
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	0a1b      	lsrs	r3, r3, #8
 80099be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	0e1b      	lsrs	r3, r3, #24
 80099c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	373c      	adds	r7, #60	; 0x3c
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd90      	pop	{r4, r7, pc}

080099d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e07c      	b.n	8009ae4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d106      	bne.n	8009a0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7f9 fcef 	bl	80033e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a2a:	d902      	bls.n	8009a32 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	e002      	b.n	8009a38 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009a40:	d007      	beq.n	8009a52 <HAL_SPI_Init+0x7a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a4a:	d002      	beq.n	8009a52 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10b      	bne.n	8009a72 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a62:	d903      	bls.n	8009a6c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	631a      	str	r2, [r3, #48]	; 0x30
 8009a6a:	e002      	b.n	8009a72 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	431a      	orrs	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	ea42 0103 	orr.w	r1, r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	0c1b      	lsrs	r3, r3, #16
 8009ab2:	f003 0204 	and.w	r2, r3, #4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	ea42 0103 	orr.w	r1, r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e038      	b.n	8009b74 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7f9 fd36 	bl	8003588 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3308      	adds	r3, #8
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f001 fbaa 	bl	800b280 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	461a      	mov	r2, r3
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	f001 fc32 	bl	800b3a0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6858      	ldr	r0, [r3, #4]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	f001 fc79 	bl	800b440 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	6892      	ldr	r2, [r2, #8]
 8009b56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	6892      	ldr	r2, [r2, #8]
 8009b62:	f041 0101 	orr.w	r1, r1, #1
 8009b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e01d      	b.n	8009bca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f815 	bl	8009bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f000 f986 	bl	8009ecc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
	...

08009be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <HAL_TIM_Base_Start_IT+0x50>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b06      	cmp	r3, #6
 8009c10:	d00b      	beq.n	8009c2a <HAL_TIM_Base_Start_IT+0x42>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c18:	d007      	beq.n	8009c2a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f042 0201 	orr.w	r2, r2, #1
 8009c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	00010007 	.word	0x00010007

08009c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d122      	bne.n	8009c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d11b      	bne.n	8009c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0202 	mvn.w	r2, #2
 8009c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f905 	bl	8009e8e <HAL_TIM_IC_CaptureCallback>
 8009c84:	e005      	b.n	8009c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f8f7 	bl	8009e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f908 	bl	8009ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f003 0304 	and.w	r3, r3, #4
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d122      	bne.n	8009cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d11b      	bne.n	8009cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f06f 0204 	mvn.w	r2, #4
 8009cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f8db 	bl	8009e8e <HAL_TIM_IC_CaptureCallback>
 8009cd8:	e005      	b.n	8009ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f8cd 	bl	8009e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f8de 	bl	8009ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d122      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d11b      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0208 	mvn.w	r2, #8
 8009d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2204      	movs	r2, #4
 8009d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f003 0303 	and.w	r3, r3, #3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f8b1 	bl	8009e8e <HAL_TIM_IC_CaptureCallback>
 8009d2c:	e005      	b.n	8009d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f8a3 	bl	8009e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f8b4 	bl	8009ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b10      	cmp	r3, #16
 8009d4c:	d122      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f003 0310 	and.w	r3, r3, #16
 8009d58:	2b10      	cmp	r3, #16
 8009d5a:	d11b      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f06f 0210 	mvn.w	r2, #16
 8009d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2208      	movs	r2, #8
 8009d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f887 	bl	8009e8e <HAL_TIM_IC_CaptureCallback>
 8009d80:	e005      	b.n	8009d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f879 	bl	8009e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f88a 	bl	8009ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d10e      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d107      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f06f 0201 	mvn.w	r2, #1
 8009db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f8 faa0 	bl	8002300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dca:	2b80      	cmp	r3, #128	; 0x80
 8009dcc:	d10e      	bne.n	8009dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d107      	bne.n	8009dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f914 	bl	800a014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dfa:	d10e      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e06:	2b80      	cmp	r3, #128	; 0x80
 8009e08:	d107      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f907 	bl	800a028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e24:	2b40      	cmp	r3, #64	; 0x40
 8009e26:	d10e      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e32:	2b40      	cmp	r3, #64	; 0x40
 8009e34:	d107      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f838 	bl	8009eb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d10e      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b20      	cmp	r3, #32
 8009e60:	d107      	bne.n	8009e72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f06f 0220 	mvn.w	r2, #32
 8009e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8c7 	bl	800a000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a40      	ldr	r2, [pc, #256]	; (8009fe0 <TIM_Base_SetConfig+0x114>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d013      	beq.n	8009f0c <TIM_Base_SetConfig+0x40>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eea:	d00f      	beq.n	8009f0c <TIM_Base_SetConfig+0x40>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a3d      	ldr	r2, [pc, #244]	; (8009fe4 <TIM_Base_SetConfig+0x118>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d00b      	beq.n	8009f0c <TIM_Base_SetConfig+0x40>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a3c      	ldr	r2, [pc, #240]	; (8009fe8 <TIM_Base_SetConfig+0x11c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d007      	beq.n	8009f0c <TIM_Base_SetConfig+0x40>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a3b      	ldr	r2, [pc, #236]	; (8009fec <TIM_Base_SetConfig+0x120>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d003      	beq.n	8009f0c <TIM_Base_SetConfig+0x40>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a3a      	ldr	r2, [pc, #232]	; (8009ff0 <TIM_Base_SetConfig+0x124>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d108      	bne.n	8009f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a2f      	ldr	r2, [pc, #188]	; (8009fe0 <TIM_Base_SetConfig+0x114>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d01f      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2c:	d01b      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a2c      	ldr	r2, [pc, #176]	; (8009fe4 <TIM_Base_SetConfig+0x118>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d017      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a2b      	ldr	r2, [pc, #172]	; (8009fe8 <TIM_Base_SetConfig+0x11c>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d013      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a2a      	ldr	r2, [pc, #168]	; (8009fec <TIM_Base_SetConfig+0x120>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00f      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a29      	ldr	r2, [pc, #164]	; (8009ff0 <TIM_Base_SetConfig+0x124>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00b      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a28      	ldr	r2, [pc, #160]	; (8009ff4 <TIM_Base_SetConfig+0x128>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d007      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a27      	ldr	r2, [pc, #156]	; (8009ff8 <TIM_Base_SetConfig+0x12c>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d003      	beq.n	8009f66 <TIM_Base_SetConfig+0x9a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a26      	ldr	r2, [pc, #152]	; (8009ffc <TIM_Base_SetConfig+0x130>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d108      	bne.n	8009f78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a10      	ldr	r2, [pc, #64]	; (8009fe0 <TIM_Base_SetConfig+0x114>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00f      	beq.n	8009fc4 <TIM_Base_SetConfig+0xf8>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a12      	ldr	r2, [pc, #72]	; (8009ff0 <TIM_Base_SetConfig+0x124>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d00b      	beq.n	8009fc4 <TIM_Base_SetConfig+0xf8>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a11      	ldr	r2, [pc, #68]	; (8009ff4 <TIM_Base_SetConfig+0x128>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d007      	beq.n	8009fc4 <TIM_Base_SetConfig+0xf8>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a10      	ldr	r2, [pc, #64]	; (8009ff8 <TIM_Base_SetConfig+0x12c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d003      	beq.n	8009fc4 <TIM_Base_SetConfig+0xf8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a0f      	ldr	r2, [pc, #60]	; (8009ffc <TIM_Base_SetConfig+0x130>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d103      	bne.n	8009fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	691a      	ldr	r2, [r3, #16]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	615a      	str	r2, [r3, #20]
}
 8009fd2:	bf00      	nop
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	40012c00 	.word	0x40012c00
 8009fe4:	40000400 	.word	0x40000400
 8009fe8:	40000800 	.word	0x40000800
 8009fec:	40000c00 	.word	0x40000c00
 8009ff0:	40013400 	.word	0x40013400
 8009ff4:	40014000 	.word	0x40014000
 8009ff8:	40014400 	.word	0x40014400
 8009ffc:	40014800 	.word	0x40014800

0800a000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e040      	b.n	800a0d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a052:	2b00      	cmp	r3, #0
 800a054:	d106      	bne.n	800a064 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7f8 ffbc 	bl	8002fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2224      	movs	r2, #36	; 0x24
 800a068:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 0201 	bic.w	r2, r2, #1
 800a078:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fab0 	bl	800a5e0 <UART_SetConfig>
 800a080:	4603      	mov	r3, r0
 800a082:	2b01      	cmp	r3, #1
 800a084:	d101      	bne.n	800a08a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e022      	b.n	800a0d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fe16 	bl	800acc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f042 0201 	orr.w	r2, r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fe9d 	bl	800ae08 <UART_CheckIdleState>
 800a0ce:	4603      	mov	r3, r0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e027      	b.n	800a13a <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2224      	movs	r2, #36	; 0x24
 800a0ee:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 0201 	bic.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2200      	movs	r2, #0
 800a10e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2200      	movs	r2, #0
 800a116:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7f9 f84d 	bl	80031b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a156:	2b20      	cmp	r3, #32
 800a158:	d144      	bne.n	800a1e4 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <HAL_UART_Transmit_IT+0x22>
 800a160:	88fb      	ldrh	r3, [r7, #6]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e03d      	b.n	800a1e6 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_UART_Transmit_IT+0x34>
 800a174:	2302      	movs	r3, #2
 800a176:	e036      	b.n	800a1e6 <HAL_UART_Transmit_IT+0xa2>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	88fa      	ldrh	r2, [r7, #6]
 800a18a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2221      	movs	r2, #33	; 0x21
 800a1a6:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b0:	d107      	bne.n	800a1c2 <HAL_UART_Transmit_IT+0x7e>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d103      	bne.n	800a1c2 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4a0d      	ldr	r2, [pc, #52]	; (800a1f4 <HAL_UART_Transmit_IT+0xb0>)
 800a1be:	665a      	str	r2, [r3, #100]	; 0x64
 800a1c0:	e002      	b.n	800a1c8 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4a0c      	ldr	r2, [pc, #48]	; (800a1f8 <HAL_UART_Transmit_IT+0xb4>)
 800a1c6:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1de:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e000      	b.n	800a1e6 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a1e4:	2302      	movs	r3, #2
  }
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	0800b069 	.word	0x0800b069
 800a1f8:	0800aff5 	.word	0x0800aff5

0800a1fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a20e:	2b20      	cmp	r3, #32
 800a210:	f040 808a 	bne.w	800a328 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <HAL_UART_Receive_IT+0x24>
 800a21a:	88fb      	ldrh	r3, [r7, #6]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e082      	b.n	800a32a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d101      	bne.n	800a232 <HAL_UART_Receive_IT+0x36>
 800a22e:	2302      	movs	r3, #2
 800a230:	e07b      	b.n	800a32a <HAL_UART_Receive_IT+0x12e>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	88fa      	ldrh	r2, [r7, #6]
 800a244:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	88fa      	ldrh	r2, [r7, #6]
 800a24c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a25e:	d10e      	bne.n	800a27e <HAL_UART_Receive_IT+0x82>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d105      	bne.n	800a274 <HAL_UART_Receive_IT+0x78>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a26e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a272:	e02d      	b.n	800a2d0 <HAL_UART_Receive_IT+0xd4>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	22ff      	movs	r2, #255	; 0xff
 800a278:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a27c:	e028      	b.n	800a2d0 <HAL_UART_Receive_IT+0xd4>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10d      	bne.n	800a2a2 <HAL_UART_Receive_IT+0xa6>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <HAL_UART_Receive_IT+0x9c>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	22ff      	movs	r2, #255	; 0xff
 800a292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a296:	e01b      	b.n	800a2d0 <HAL_UART_Receive_IT+0xd4>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	227f      	movs	r2, #127	; 0x7f
 800a29c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2a0:	e016      	b.n	800a2d0 <HAL_UART_Receive_IT+0xd4>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2aa:	d10d      	bne.n	800a2c8 <HAL_UART_Receive_IT+0xcc>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d104      	bne.n	800a2be <HAL_UART_Receive_IT+0xc2>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	227f      	movs	r2, #127	; 0x7f
 800a2b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2bc:	e008      	b.n	800a2d0 <HAL_UART_Receive_IT+0xd4>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	223f      	movs	r2, #63	; 0x3f
 800a2c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2c6:	e003      	b.n	800a2d0 <HAL_UART_Receive_IT+0xd4>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2222      	movs	r2, #34	; 0x22
 800a2da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f4:	d107      	bne.n	800a306 <HAL_UART_Receive_IT+0x10a>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d103      	bne.n	800a306 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4a0d      	ldr	r2, [pc, #52]	; (800a338 <HAL_UART_Receive_IT+0x13c>)
 800a302:	661a      	str	r2, [r3, #96]	; 0x60
 800a304:	e002      	b.n	800a30c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4a0c      	ldr	r2, [pc, #48]	; (800a33c <HAL_UART_Receive_IT+0x140>)
 800a30a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a322:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	e000      	b.n	800a32a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a328:	2302      	movs	r3, #2
  }
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	0800b1c1 	.word	0x0800b1c1
 800a33c:	0800b117 	.word	0x0800b117

0800a340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a360:	69fa      	ldr	r2, [r7, #28]
 800a362:	f640 030f 	movw	r3, #2063	; 0x80f
 800a366:	4013      	ands	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d113      	bne.n	800a398 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b00      	cmp	r3, #0
 800a382:	d009      	beq.n	800a398 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 8114 	beq.w	800a5b6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4798      	blx	r3
      }
      return;
 800a396:	e10e      	b.n	800a5b6 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80d6 	beq.w	800a54c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 80cb 	beq.w	800a54c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00e      	beq.n	800a3de <HAL_UART_IRQHandler+0x9e>
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d009      	beq.n	800a3de <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d6:	f043 0201 	orr.w	r2, r3, #1
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00e      	beq.n	800a406 <HAL_UART_IRQHandler+0xc6>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d009      	beq.n	800a406 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3fe:	f043 0204 	orr.w	r2, r3, #4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00e      	beq.n	800a42e <HAL_UART_IRQHandler+0xee>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2204      	movs	r2, #4
 800a420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a426:	f043 0202 	orr.w	r2, r3, #2
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	f003 0308 	and.w	r3, r3, #8
 800a434:	2b00      	cmp	r3, #0
 800a436:	d013      	beq.n	800a460 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	f003 0320 	and.w	r3, r3, #32
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d104      	bne.n	800a44c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d009      	beq.n	800a460 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2208      	movs	r2, #8
 800a452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a458:	f043 0208 	orr.w	r2, r3, #8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00f      	beq.n	800a48a <HAL_UART_IRQHandler+0x14a>
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00a      	beq.n	800a48a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a47c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a482:	f043 0220 	orr.w	r2, r3, #32
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 8093 	beq.w	800a5ba <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00c      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d007      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c8:	2b40      	cmp	r3, #64	; 0x40
 800a4ca:	d004      	beq.n	800a4d6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d031      	beq.n	800a53a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fd56 	bl	800af88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e6:	2b40      	cmp	r3, #64	; 0x40
 800a4e8:	d123      	bne.n	800a532 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d013      	beq.n	800a52a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a506:	4a30      	ldr	r2, [pc, #192]	; (800a5c8 <HAL_UART_IRQHandler+0x288>)
 800a508:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fa fbf6 	bl	8004d00 <HAL_DMA_Abort_IT>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d016      	beq.n	800a548 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a524:	4610      	mov	r0, r2
 800a526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a528:	e00e      	b.n	800a548 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7f9 fa46 	bl	80039bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a530:	e00a      	b.n	800a548 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7f9 fa42 	bl	80039bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a538:	e006      	b.n	800a548 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7f9 fa3e 	bl	80039bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a546:	e038      	b.n	800a5ba <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a548:	bf00      	nop
    return;
 800a54a:	e036      	b.n	800a5ba <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00d      	beq.n	800a572 <HAL_UART_IRQHandler+0x232>
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d008      	beq.n	800a572 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a568:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fe7d 	bl	800b26a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a570:	e026      	b.n	800a5c0 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00d      	beq.n	800a598 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d017      	beq.n	800a5be <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
    }
    return;
 800a596:	e012      	b.n	800a5be <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00e      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x280>
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d009      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fd99 	bl	800b0e4 <UART_EndTransmit_IT>
    return;
 800a5b2:	bf00      	nop
 800a5b4:	e004      	b.n	800a5c0 <HAL_UART_IRQHandler+0x280>
      return;
 800a5b6:	bf00      	nop
 800a5b8:	e002      	b.n	800a5c0 <HAL_UART_IRQHandler+0x280>
    return;
 800a5ba:	bf00      	nop
 800a5bc:	e000      	b.n	800a5c0 <HAL_UART_IRQHandler+0x280>
    return;
 800a5be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0800afc9 	.word	0x0800afc9

0800a5cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a5e4:	b08a      	sub	sp, #40	; 0x28
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	431a      	orrs	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	431a      	orrs	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	4bb8      	ldr	r3, [pc, #736]	; (800a8f8 <UART_SetConfig+0x318>)
 800a616:	4013      	ands	r3, r2
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6812      	ldr	r2, [r2, #0]
 800a61c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a61e:	430b      	orrs	r3, r1
 800a620:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4aae      	ldr	r2, [pc, #696]	; (800a8fc <UART_SetConfig+0x31c>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d004      	beq.n	800a652 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64e:	4313      	orrs	r3, r2
 800a650:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a662:	430a      	orrs	r2, r1
 800a664:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4aa5      	ldr	r2, [pc, #660]	; (800a900 <UART_SetConfig+0x320>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d126      	bne.n	800a6be <UART_SetConfig+0xde>
 800a670:	4ba4      	ldr	r3, [pc, #656]	; (800a904 <UART_SetConfig+0x324>)
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	f003 0303 	and.w	r3, r3, #3
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d81a      	bhi.n	800a6b4 <UART_SetConfig+0xd4>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <UART_SetConfig+0xa4>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a695 	.word	0x0800a695
 800a688:	0800a6a5 	.word	0x0800a6a5
 800a68c:	0800a69d 	.word	0x0800a69d
 800a690:	0800a6ad 	.word	0x0800a6ad
 800a694:	2301      	movs	r3, #1
 800a696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a69a:	e105      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a69c:	2302      	movs	r3, #2
 800a69e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6a2:	e101      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6aa:	e0fd      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6b2:	e0f9      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a6b4:	2310      	movs	r3, #16
 800a6b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6ba:	bf00      	nop
 800a6bc:	e0f4      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a91      	ldr	r2, [pc, #580]	; (800a908 <UART_SetConfig+0x328>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d138      	bne.n	800a73a <UART_SetConfig+0x15a>
 800a6c8:	4b8e      	ldr	r3, [pc, #568]	; (800a904 <UART_SetConfig+0x324>)
 800a6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ce:	f003 030c 	and.w	r3, r3, #12
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	d82c      	bhi.n	800a730 <UART_SetConfig+0x150>
 800a6d6:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <UART_SetConfig+0xfc>)
 800a6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6dc:	0800a711 	.word	0x0800a711
 800a6e0:	0800a731 	.word	0x0800a731
 800a6e4:	0800a731 	.word	0x0800a731
 800a6e8:	0800a731 	.word	0x0800a731
 800a6ec:	0800a721 	.word	0x0800a721
 800a6f0:	0800a731 	.word	0x0800a731
 800a6f4:	0800a731 	.word	0x0800a731
 800a6f8:	0800a731 	.word	0x0800a731
 800a6fc:	0800a719 	.word	0x0800a719
 800a700:	0800a731 	.word	0x0800a731
 800a704:	0800a731 	.word	0x0800a731
 800a708:	0800a731 	.word	0x0800a731
 800a70c:	0800a729 	.word	0x0800a729
 800a710:	2300      	movs	r3, #0
 800a712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a716:	e0c7      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a718:	2302      	movs	r3, #2
 800a71a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a71e:	e0c3      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a720:	2304      	movs	r3, #4
 800a722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a726:	e0bf      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a728:	2308      	movs	r3, #8
 800a72a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a72e:	e0bb      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a730:	2310      	movs	r3, #16
 800a732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a736:	bf00      	nop
 800a738:	e0b6      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a73      	ldr	r2, [pc, #460]	; (800a90c <UART_SetConfig+0x32c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d125      	bne.n	800a790 <UART_SetConfig+0x1b0>
 800a744:	4b6f      	ldr	r3, [pc, #444]	; (800a904 <UART_SetConfig+0x324>)
 800a746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a74e:	2b10      	cmp	r3, #16
 800a750:	d011      	beq.n	800a776 <UART_SetConfig+0x196>
 800a752:	2b10      	cmp	r3, #16
 800a754:	d802      	bhi.n	800a75c <UART_SetConfig+0x17c>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d005      	beq.n	800a766 <UART_SetConfig+0x186>
 800a75a:	e014      	b.n	800a786 <UART_SetConfig+0x1a6>
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	d006      	beq.n	800a76e <UART_SetConfig+0x18e>
 800a760:	2b30      	cmp	r3, #48	; 0x30
 800a762:	d00c      	beq.n	800a77e <UART_SetConfig+0x19e>
 800a764:	e00f      	b.n	800a786 <UART_SetConfig+0x1a6>
 800a766:	2300      	movs	r3, #0
 800a768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a76c:	e09c      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a76e:	2302      	movs	r3, #2
 800a770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a774:	e098      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a776:	2304      	movs	r3, #4
 800a778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a77c:	e094      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a77e:	2308      	movs	r3, #8
 800a780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a784:	e090      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a786:	2310      	movs	r3, #16
 800a788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a78c:	bf00      	nop
 800a78e:	e08b      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a5e      	ldr	r2, [pc, #376]	; (800a910 <UART_SetConfig+0x330>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d125      	bne.n	800a7e6 <UART_SetConfig+0x206>
 800a79a:	4b5a      	ldr	r3, [pc, #360]	; (800a904 <UART_SetConfig+0x324>)
 800a79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d011      	beq.n	800a7cc <UART_SetConfig+0x1ec>
 800a7a8:	2b40      	cmp	r3, #64	; 0x40
 800a7aa:	d802      	bhi.n	800a7b2 <UART_SetConfig+0x1d2>
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <UART_SetConfig+0x1dc>
 800a7b0:	e014      	b.n	800a7dc <UART_SetConfig+0x1fc>
 800a7b2:	2b80      	cmp	r3, #128	; 0x80
 800a7b4:	d006      	beq.n	800a7c4 <UART_SetConfig+0x1e4>
 800a7b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b8:	d00c      	beq.n	800a7d4 <UART_SetConfig+0x1f4>
 800a7ba:	e00f      	b.n	800a7dc <UART_SetConfig+0x1fc>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7c2:	e071      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7ca:	e06d      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7d2:	e069      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7da:	e065      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a7dc:	2310      	movs	r3, #16
 800a7de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7e2:	bf00      	nop
 800a7e4:	e060      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a4a      	ldr	r2, [pc, #296]	; (800a914 <UART_SetConfig+0x334>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d129      	bne.n	800a844 <UART_SetConfig+0x264>
 800a7f0:	4b44      	ldr	r3, [pc, #272]	; (800a904 <UART_SetConfig+0x324>)
 800a7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fe:	d014      	beq.n	800a82a <UART_SetConfig+0x24a>
 800a800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a804:	d802      	bhi.n	800a80c <UART_SetConfig+0x22c>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <UART_SetConfig+0x23a>
 800a80a:	e016      	b.n	800a83a <UART_SetConfig+0x25a>
 800a80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a810:	d007      	beq.n	800a822 <UART_SetConfig+0x242>
 800a812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a816:	d00c      	beq.n	800a832 <UART_SetConfig+0x252>
 800a818:	e00f      	b.n	800a83a <UART_SetConfig+0x25a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a820:	e042      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a822:	2302      	movs	r3, #2
 800a824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a828:	e03e      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a82a:	2304      	movs	r3, #4
 800a82c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a830:	e03a      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a832:	2308      	movs	r3, #8
 800a834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a838:	e036      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a83a:	2310      	movs	r3, #16
 800a83c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a840:	bf00      	nop
 800a842:	e031      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a2c      	ldr	r2, [pc, #176]	; (800a8fc <UART_SetConfig+0x31c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d129      	bne.n	800a8a2 <UART_SetConfig+0x2c2>
 800a84e:	4b2d      	ldr	r3, [pc, #180]	; (800a904 <UART_SetConfig+0x324>)
 800a850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a85c:	d014      	beq.n	800a888 <UART_SetConfig+0x2a8>
 800a85e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a862:	d802      	bhi.n	800a86a <UART_SetConfig+0x28a>
 800a864:	2b00      	cmp	r3, #0
 800a866:	d007      	beq.n	800a878 <UART_SetConfig+0x298>
 800a868:	e016      	b.n	800a898 <UART_SetConfig+0x2b8>
 800a86a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a86e:	d007      	beq.n	800a880 <UART_SetConfig+0x2a0>
 800a870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a874:	d00c      	beq.n	800a890 <UART_SetConfig+0x2b0>
 800a876:	e00f      	b.n	800a898 <UART_SetConfig+0x2b8>
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a87e:	e013      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a880:	2302      	movs	r3, #2
 800a882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a886:	e00f      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a888:	2304      	movs	r3, #4
 800a88a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a88e:	e00b      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a890:	2308      	movs	r3, #8
 800a892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a896:	e007      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a898:	2310      	movs	r3, #16
 800a89a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a89e:	bf00      	nop
 800a8a0:	e002      	b.n	800a8a8 <UART_SetConfig+0x2c8>
 800a8a2:	2310      	movs	r3, #16
 800a8a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a13      	ldr	r2, [pc, #76]	; (800a8fc <UART_SetConfig+0x31c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	f040 80fe 	bne.w	800aab0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d837      	bhi.n	800a92c <UART_SetConfig+0x34c>
 800a8bc:	a201      	add	r2, pc, #4	; (adr r2, 800a8c4 <UART_SetConfig+0x2e4>)
 800a8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c2:	bf00      	nop
 800a8c4:	0800a8e9 	.word	0x0800a8e9
 800a8c8:	0800a92d 	.word	0x0800a92d
 800a8cc:	0800a8f1 	.word	0x0800a8f1
 800a8d0:	0800a92d 	.word	0x0800a92d
 800a8d4:	0800a91d 	.word	0x0800a91d
 800a8d8:	0800a92d 	.word	0x0800a92d
 800a8dc:	0800a92d 	.word	0x0800a92d
 800a8e0:	0800a92d 	.word	0x0800a92d
 800a8e4:	0800a925 	.word	0x0800a925
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a8e8:	f7fc fdc6 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 800a8ec:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8ee:	e020      	b.n	800a932 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a8f0:	4b09      	ldr	r3, [pc, #36]	; (800a918 <UART_SetConfig+0x338>)
 800a8f2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8f4:	e01d      	b.n	800a932 <UART_SetConfig+0x352>
 800a8f6:	bf00      	nop
 800a8f8:	efff69f3 	.word	0xefff69f3
 800a8fc:	40008000 	.word	0x40008000
 800a900:	40013800 	.word	0x40013800
 800a904:	40021000 	.word	0x40021000
 800a908:	40004400 	.word	0x40004400
 800a90c:	40004800 	.word	0x40004800
 800a910:	40004c00 	.word	0x40004c00
 800a914:	40005000 	.word	0x40005000
 800a918:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a91c:	f7fc fd16 	bl	800734c <HAL_RCC_GetSysClockFreq>
 800a920:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a922:	e006      	b.n	800a932 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a928:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a92a:	e002      	b.n	800a932 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	76fb      	strb	r3, [r7, #27]
        break;
 800a930:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 81b9 	beq.w	800acac <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	4613      	mov	r3, r2
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	4413      	add	r3, r2
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	429a      	cmp	r2, r3
 800a948:	d305      	bcc.n	800a956 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	429a      	cmp	r2, r3
 800a954:	d902      	bls.n	800a95c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	76fb      	strb	r3, [r7, #27]
 800a95a:	e1a7      	b.n	800acac <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800a95c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a960:	2b08      	cmp	r3, #8
 800a962:	f200 8092 	bhi.w	800aa8a <UART_SetConfig+0x4aa>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <UART_SetConfig+0x38c>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a991 	.word	0x0800a991
 800a970:	0800aa8b 	.word	0x0800aa8b
 800a974:	0800a9df 	.word	0x0800a9df
 800a978:	0800aa8b 	.word	0x0800aa8b
 800a97c:	0800aa13 	.word	0x0800aa13
 800a980:	0800aa8b 	.word	0x0800aa8b
 800a984:	0800aa8b 	.word	0x0800aa8b
 800a988:	0800aa8b 	.word	0x0800aa8b
 800a98c:	0800aa61 	.word	0x0800aa61
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a990:	f7fc fd72 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 800a994:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	4619      	mov	r1, r3
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	f04f 0300 	mov.w	r3, #0
 800a9a2:	f04f 0400 	mov.w	r4, #0
 800a9a6:	0214      	lsls	r4, r2, #8
 800a9a8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a9ac:	020b      	lsls	r3, r1, #8
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	6852      	ldr	r2, [r2, #4]
 800a9b2:	0852      	lsrs	r2, r2, #1
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	eb13 0b01 	adds.w	fp, r3, r1
 800a9be:	eb44 0c02 	adc.w	ip, r4, r2
 800a9c2:	4658      	mov	r0, fp
 800a9c4:	4661      	mov	r1, ip
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f04f 0400 	mov.w	r4, #0
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4623      	mov	r3, r4
 800a9d2:	f7f5 fc65 	bl	80002a0 <__aeabi_uldivmod>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a9dc:	e058      	b.n	800aa90 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	085b      	lsrs	r3, r3, #1
 800a9e4:	f04f 0400 	mov.w	r4, #0
 800a9e8:	49ae      	ldr	r1, [pc, #696]	; (800aca4 <UART_SetConfig+0x6c4>)
 800a9ea:	f04f 0200 	mov.w	r2, #0
 800a9ee:	eb13 0b01 	adds.w	fp, r3, r1
 800a9f2:	eb44 0c02 	adc.w	ip, r4, r2
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	4661      	mov	r1, ip
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f04f 0400 	mov.w	r4, #0
 800aa02:	461a      	mov	r2, r3
 800aa04:	4623      	mov	r3, r4
 800aa06:	f7f5 fc4b 	bl	80002a0 <__aeabi_uldivmod>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aa10:	e03e      	b.n	800aa90 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800aa12:	f7fc fc9b 	bl	800734c <HAL_RCC_GetSysClockFreq>
 800aa16:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	f04f 0200 	mov.w	r2, #0
 800aa20:	f04f 0300 	mov.w	r3, #0
 800aa24:	f04f 0400 	mov.w	r4, #0
 800aa28:	0214      	lsls	r4, r2, #8
 800aa2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aa2e:	020b      	lsls	r3, r1, #8
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6852      	ldr	r2, [r2, #4]
 800aa34:	0852      	lsrs	r2, r2, #1
 800aa36:	4611      	mov	r1, r2
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	eb13 0b01 	adds.w	fp, r3, r1
 800aa40:	eb44 0c02 	adc.w	ip, r4, r2
 800aa44:	4658      	mov	r0, fp
 800aa46:	4661      	mov	r1, ip
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	f04f 0400 	mov.w	r4, #0
 800aa50:	461a      	mov	r2, r3
 800aa52:	4623      	mov	r3, r4
 800aa54:	f7f5 fc24 	bl	80002a0 <__aeabi_uldivmod>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aa5e:	e017      	b.n	800aa90 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	085b      	lsrs	r3, r3, #1
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800aa6e:	f144 0100 	adc.w	r1, r4, #0
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f04f 0400 	mov.w	r4, #0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	f7f5 fc0f 	bl	80002a0 <__aeabi_uldivmod>
 800aa82:	4603      	mov	r3, r0
 800aa84:	460c      	mov	r4, r1
 800aa86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aa88:	e002      	b.n	800aa90 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	76fb      	strb	r3, [r7, #27]
            break;
 800aa8e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa96:	d308      	bcc.n	800aaaa <UART_SetConfig+0x4ca>
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa9e:	d204      	bcs.n	800aaaa <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	69fa      	ldr	r2, [r7, #28]
 800aaa6:	60da      	str	r2, [r3, #12]
 800aaa8:	e100      	b.n	800acac <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	76fb      	strb	r3, [r7, #27]
 800aaae:	e0fd      	b.n	800acac <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aab8:	f040 8084 	bne.w	800abc4 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800aabc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d85f      	bhi.n	800ab84 <UART_SetConfig+0x5a4>
 800aac4:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <UART_SetConfig+0x4ec>)
 800aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaca:	bf00      	nop
 800aacc:	0800aaf1 	.word	0x0800aaf1
 800aad0:	0800ab11 	.word	0x0800ab11
 800aad4:	0800ab31 	.word	0x0800ab31
 800aad8:	0800ab85 	.word	0x0800ab85
 800aadc:	0800ab4d 	.word	0x0800ab4d
 800aae0:	0800ab85 	.word	0x0800ab85
 800aae4:	0800ab85 	.word	0x0800ab85
 800aae8:	0800ab85 	.word	0x0800ab85
 800aaec:	0800ab6d 	.word	0x0800ab6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf0:	f7fc fcc2 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 800aaf4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	005a      	lsls	r2, r3, #1
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	085b      	lsrs	r3, r3, #1
 800ab00:	441a      	add	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab0e:	e03c      	b.n	800ab8a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab10:	f7fc fcc8 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 800ab14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	005a      	lsls	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	085b      	lsrs	r3, r3, #1
 800ab20:	441a      	add	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab2e:	e02c      	b.n	800ab8a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	085b      	lsrs	r3, r3, #1
 800ab36:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800ab3a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6852      	ldr	r2, [r2, #4]
 800ab42:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab4a:	e01e      	b.n	800ab8a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab4c:	f7fc fbfe 	bl	800734c <HAL_RCC_GetSysClockFreq>
 800ab50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	005a      	lsls	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	085b      	lsrs	r3, r3, #1
 800ab5c:	441a      	add	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab6a:	e00e      	b.n	800ab8a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	085b      	lsrs	r3, r3, #1
 800ab72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab82:	e002      	b.n	800ab8a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	76fb      	strb	r3, [r7, #27]
        break;
 800ab88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	2b0f      	cmp	r3, #15
 800ab8e:	d916      	bls.n	800abbe <UART_SetConfig+0x5de>
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab96:	d212      	bcs.n	800abbe <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f023 030f 	bic.w	r3, r3, #15
 800aba0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	b29a      	uxth	r2, r3
 800abae:	89fb      	ldrh	r3, [r7, #14]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	89fa      	ldrh	r2, [r7, #14]
 800abba:	60da      	str	r2, [r3, #12]
 800abbc:	e076      	b.n	800acac <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	76fb      	strb	r3, [r7, #27]
 800abc2:	e073      	b.n	800acac <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800abc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abc8:	2b08      	cmp	r3, #8
 800abca:	d85c      	bhi.n	800ac86 <UART_SetConfig+0x6a6>
 800abcc:	a201      	add	r2, pc, #4	; (adr r2, 800abd4 <UART_SetConfig+0x5f4>)
 800abce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd2:	bf00      	nop
 800abd4:	0800abf9 	.word	0x0800abf9
 800abd8:	0800ac17 	.word	0x0800ac17
 800abdc:	0800ac35 	.word	0x0800ac35
 800abe0:	0800ac87 	.word	0x0800ac87
 800abe4:	0800ac51 	.word	0x0800ac51
 800abe8:	0800ac87 	.word	0x0800ac87
 800abec:	0800ac87 	.word	0x0800ac87
 800abf0:	0800ac87 	.word	0x0800ac87
 800abf4:	0800ac6f 	.word	0x0800ac6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf8:	f7fc fc3e 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 800abfc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	085a      	lsrs	r2, r3, #1
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	441a      	add	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac14:	e03a      	b.n	800ac8c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac16:	f7fc fc45 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 800ac1a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	085a      	lsrs	r2, r3, #1
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	441a      	add	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac32:	e02b      	b.n	800ac8c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	085b      	lsrs	r3, r3, #1
 800ac3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800ac3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6852      	ldr	r2, [r2, #4]
 800ac46:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac4e:	e01d      	b.n	800ac8c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac50:	f7fc fb7c 	bl	800734c <HAL_RCC_GetSysClockFreq>
 800ac54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	085a      	lsrs	r2, r3, #1
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	441a      	add	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac6c:	e00e      	b.n	800ac8c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac84:	e002      	b.n	800ac8c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	76fb      	strb	r3, [r7, #27]
        break;
 800ac8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2b0f      	cmp	r3, #15
 800ac90:	d90a      	bls.n	800aca8 <UART_SetConfig+0x6c8>
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac98:	d206      	bcs.n	800aca8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69fa      	ldr	r2, [r7, #28]
 800aca0:	60da      	str	r2, [r3, #12]
 800aca2:	e003      	b.n	800acac <UART_SetConfig+0x6cc>
 800aca4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800acb8:	7efb      	ldrb	r3, [r7, #27]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3728      	adds	r7, #40	; 0x28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800acc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00a      	beq.n	800acee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	f003 0308 	and.w	r3, r3, #8
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	f003 0310 	and.w	r3, r3, #16
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d01a      	beq.n	800adda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc2:	d10a      	bne.n	800adda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af02      	add	r7, sp, #8
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae16:	f7f8 fe71 	bl	8003afc <HAL_GetTick>
 800ae1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	d10e      	bne.n	800ae48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f82a 	bl	800ae92 <UART_WaitOnFlagUntilTimeout>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e020      	b.n	800ae8a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0304 	and.w	r3, r3, #4
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d10e      	bne.n	800ae74 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f814 	bl	800ae92 <UART_WaitOnFlagUntilTimeout>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e00a      	b.n	800ae8a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2220      	movs	r2, #32
 800ae78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	60f8      	str	r0, [r7, #12]
 800ae9a:	60b9      	str	r1, [r7, #8]
 800ae9c:	603b      	str	r3, [r7, #0]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aea2:	e05d      	b.n	800af60 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeaa:	d059      	beq.n	800af60 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeac:	f7f8 fe26 	bl	8003afc <HAL_GetTick>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d302      	bcc.n	800aec2 <UART_WaitOnFlagUntilTimeout+0x30>
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d11b      	bne.n	800aefa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aed0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0201 	bic.w	r2, r2, #1
 800aee0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2220      	movs	r2, #32
 800aee6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2220      	movs	r2, #32
 800aeec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e042      	b.n	800af80 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d02b      	beq.n	800af60 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af16:	d123      	bne.n	800af60 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af20:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af30:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689a      	ldr	r2, [r3, #8]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f022 0201 	bic.w	r2, r2, #1
 800af40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2220      	movs	r2, #32
 800af46:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2220      	movs	r2, #32
 800af4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2220      	movs	r2, #32
 800af52:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e00f      	b.n	800af80 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69da      	ldr	r2, [r3, #28]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	4013      	ands	r3, r2
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	bf0c      	ite	eq
 800af70:	2301      	moveq	r3, #1
 800af72:	2300      	movne	r3, #0
 800af74:	b2db      	uxtb	r3, r3
 800af76:	461a      	mov	r2, r3
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d092      	beq.n	800aea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af9e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689a      	ldr	r2, [r3, #8]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0201 	bic.w	r2, r2, #1
 800afae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	661a      	str	r2, [r3, #96]	; 0x60
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7f8 fce8 	bl	80039bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b000:	2b21      	cmp	r3, #33	; 0x21
 800b002:	d12b      	bne.n	800b05c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d110      	bne.n	800b032 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b01e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b02e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b030:	e014      	b.n	800b05c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b036:	781a      	ldrb	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	b292      	uxth	r2, r2
 800b03e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b050:	b29b      	uxth	r3, r3
 800b052:	3b01      	subs	r3, #1
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b074:	2b21      	cmp	r3, #33	; 0x21
 800b076:	d12f      	bne.n	800b0d8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b07e:	b29b      	uxth	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d110      	bne.n	800b0a6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b092:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0a2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b0a4:	e018      	b.n	800b0d8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	881a      	ldrh	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0b8:	b292      	uxth	r2, r2
 800b0ba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c0:	1c9a      	adds	r2, r3, #2
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b0d8:	bf00      	nop
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2220      	movs	r2, #32
 800b100:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff fa5f 	bl	800a5cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b124:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b12a:	2b22      	cmp	r3, #34	; 0x22
 800b12c:	d13a      	bne.n	800b1a4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b134:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b136:	89bb      	ldrh	r3, [r7, #12]
 800b138:	b2d9      	uxtb	r1, r3
 800b13a:	89fb      	ldrh	r3, [r7, #14]
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b142:	400a      	ands	r2, r1
 800b144:	b2d2      	uxtb	r2, r2
 800b146:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14c:	1c5a      	adds	r2, r3, #1
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b158:	b29b      	uxth	r3, r3
 800b15a:	3b01      	subs	r3, #1
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d123      	bne.n	800b1b8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b17e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	689a      	ldr	r2, [r3, #8]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f022 0201 	bic.w	r2, r2, #1
 800b18e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2220      	movs	r2, #32
 800b194:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7f8 fbdf 	bl	8003960 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1a2:	e009      	b.n	800b1b8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	8b1b      	ldrh	r3, [r3, #24]
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f042 0208 	orr.w	r2, r2, #8
 800b1b4:	b292      	uxth	r2, r2
 800b1b6:	831a      	strh	r2, [r3, #24]
}
 800b1b8:	bf00      	nop
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d4:	2b22      	cmp	r3, #34	; 0x22
 800b1d6:	d13a      	bne.n	800b24e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b1de:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b1e6:	89ba      	ldrh	r2, [r7, #12]
 800b1e8:	89fb      	ldrh	r3, [r7, #14]
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f6:	1c9a      	adds	r2, r3, #2
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b202:	b29b      	uxth	r3, r3
 800b204:	3b01      	subs	r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d123      	bne.n	800b262 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b228:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0201 	bic.w	r2, r2, #1
 800b238:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7f8 fb8a 	bl	8003960 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b24c:	e009      	b.n	800b262 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	8b1b      	ldrh	r3, [r3, #24]
 800b254:	b29a      	uxth	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0208 	orr.w	r2, r2, #8
 800b25e:	b292      	uxth	r2, r2
 800b260:	831a      	strh	r2, [r3, #24]
}
 800b262:	bf00      	nop
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b26a:	b480      	push	{r7}
 800b26c:	b083      	sub	sp, #12
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b272:	bf00      	nop
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
	...

0800b280 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	6812      	ldr	r2, [r2, #0]
 800b298:	f023 0101 	bic.w	r1, r3, #1
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	2b08      	cmp	r3, #8
 800b2a8:	d102      	bne.n	800b2b0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	617b      	str	r3, [r7, #20]
 800b2ae:	e001      	b.n	800b2b4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b2c0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b2c6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b2cc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b2d2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b2d8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b2de:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b2e4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b2ea:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b2f0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	4313      	orrs	r3, r2
 800b302:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	4313      	orrs	r3, r2
 800b316:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800b318:	4b20      	ldr	r3, [pc, #128]	; (800b39c <FMC_NORSRAM_Init+0x11c>)
 800b31a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b322:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b32a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b332:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	43db      	mvns	r3, r3
 800b342:	ea02 0103 	and.w	r1, r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	4319      	orrs	r1, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b35c:	d10c      	bne.n	800b378 <FMC_NORSRAM_Init+0xf8>
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d008      	beq.n	800b378 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b372:	431a      	orrs	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d006      	beq.n	800b38e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b388:	431a      	orrs	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	371c      	adds	r7, #28
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	0008fb7f 	.word	0x0008fb7f

0800b3a0 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	1c5a      	adds	r2, r3, #1
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	011b      	lsls	r3, r3, #4
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	041b      	lsls	r3, r3, #16
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	051b      	lsls	r3, r3, #20
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	3b02      	subs	r3, #2
 800b3e6:	061b      	lsls	r3, r3, #24
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	3201      	adds	r2, #1
 800b3f4:	4319      	orrs	r1, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b408:	d113      	bne.n	800b432 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b412:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	3b01      	subs	r3, #1
 800b41a:	051b      	lsls	r3, r3, #20
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	431a      	orrs	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	371c      	adds	r7, #28
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b454:	d11d      	bne.n	800b492 <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b45e:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b460:	4013      	ands	r3, r2
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	6811      	ldr	r1, [r2, #0]
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	6852      	ldr	r2, [r2, #4]
 800b46a:	0112      	lsls	r2, r2, #4
 800b46c:	4311      	orrs	r1, r2
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	6892      	ldr	r2, [r2, #8]
 800b472:	0212      	lsls	r2, r2, #8
 800b474:	4311      	orrs	r1, r2
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	69d2      	ldr	r2, [r2, #28]
 800b47a:	4311      	orrs	r1, r2
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	6912      	ldr	r2, [r2, #16]
 800b480:	0412      	lsls	r2, r2, #16
 800b482:	430a      	orrs	r2, r1
 800b484:	ea43 0102 	orr.w	r1, r3, r2
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b490:	e005      	b.n	800b49e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b49a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	cff00000 	.word	0xcff00000

0800b4b0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	b480      	push	{r7}
 800b4b4:	b085      	sub	sp, #20
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	f107 001c 	add.w	r0, r7, #28
 800b4be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b4ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800b4d2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b4d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b4da:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b4de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b4ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	b004      	add	sp, #16
 800b508:	4770      	bx	lr

0800b50a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2203      	movs	r2, #3
 800b530:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b532:	2002      	movs	r0, #2
 800b534:	f7f8 faee 	bl	8003b14 <HAL_Delay>

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0303 	and.w	r3, r3, #3
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b55e:	b480      	push	{r7}
 800b560:	b085      	sub	sp, #20
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b57c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b582:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b588:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b598:	f023 030f 	bic.w	r3, r3, #15
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	b2db      	uxtb	r3, r3
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3314      	adds	r3, #20
 800b5da:	461a      	mov	r2, r3
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	4413      	add	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b618:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b61e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b624:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	431a      	orrs	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0

}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b088      	sub	sp, #32
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b658:	2310      	movs	r3, #16
 800b65a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b65c:	2340      	movs	r3, #64	; 0x40
 800b65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b660:	2300      	movs	r3, #0
 800b662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b66a:	f107 0308 	add.w	r3, r7, #8
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff ff74 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b676:	f241 3288 	movw	r2, #5000	; 0x1388
 800b67a:	2110      	movs	r1, #16
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f975 	bl	800b96c <SDMMC_GetCmdResp1>
 800b682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b684:	69fb      	ldr	r3, [r7, #28]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b08a      	sub	sp, #40	; 0x28
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b69e:	2307      	movs	r3, #7
 800b6a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6a2:	2340      	movs	r3, #64	; 0x40
 800b6a4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ae:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b0:	f107 0310 	add.w	r3, r7, #16
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff ff51 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c0:	2107      	movs	r1, #7
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f000 f952 	bl	800b96c <SDMMC_GetCmdResp1>
 800b6c8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3728      	adds	r7, #40	; 0x28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6f2:	f107 0308 	add.w	r3, r7, #8
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff ff30 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f90c 	bl	800b91c <SDMMC_GetCmdError>
 800b704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b706:	69fb      	ldr	r3, [r7, #28]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b718:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b71e:	2308      	movs	r3, #8
 800b720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b722:	2340      	movs	r3, #64	; 0x40
 800b724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b72e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff ff11 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 faf5 	bl	800bd2c <SDMMC_GetCmdResp7>
 800b742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b744:	69fb      	ldr	r3, [r7, #28]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3720      	adds	r7, #32
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b088      	sub	sp, #32
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b75c:	2337      	movs	r3, #55	; 0x37
 800b75e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b760:	2340      	movs	r3, #64	; 0x40
 800b762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b764:	2300      	movs	r3, #0
 800b766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b76c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b76e:	f107 0308 	add.w	r3, r7, #8
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff fef2 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b77a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b77e:	2137      	movs	r1, #55	; 0x37
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f8f3 	bl	800b96c <SDMMC_GetCmdResp1>
 800b786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b788:	69fb      	ldr	r3, [r7, #28]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3720      	adds	r7, #32
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b088      	sub	sp, #32
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7a6:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b7a8:	2329      	movs	r3, #41	; 0x29
 800b7aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ac:	2340      	movs	r3, #64	; 0x40
 800b7ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ba:	f107 0308 	add.w	r3, r7, #8
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7ff fecc 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fa02 	bl	800bbd0 <SDMMC_GetCmdResp3>
 800b7cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ce:	69fb      	ldr	r3, [r7, #28]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7e6:	2306      	movs	r3, #6
 800b7e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ea:	2340      	movs	r3, #64	; 0x40
 800b7ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fead 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b804:	f241 3288 	movw	r2, #5000	; 0x1388
 800b808:	2106      	movs	r1, #6
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f8ae 	bl	800b96c <SDMMC_GetCmdResp1>
 800b810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b812:	69fb      	ldr	r3, [r7, #28]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3720      	adds	r7, #32
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b824:	2300      	movs	r3, #0
 800b826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b828:	2333      	movs	r3, #51	; 0x33
 800b82a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b82c:	2340      	movs	r3, #64	; 0x40
 800b82e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b83a:	f107 0308 	add.w	r3, r7, #8
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fe8c 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b846:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84a:	2133      	movs	r1, #51	; 0x33
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f88d 	bl	800b96c <SDMMC_GetCmdResp1>
 800b852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b854:	69fb      	ldr	r3, [r7, #28]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3720      	adds	r7, #32
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b088      	sub	sp, #32
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b866:	2300      	movs	r3, #0
 800b868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b86a:	2302      	movs	r3, #2
 800b86c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b86e:	23c0      	movs	r3, #192	; 0xc0
 800b870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b87a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b87c:	f107 0308 	add.w	r3, r7, #8
 800b880:	4619      	mov	r1, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7ff fe6b 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f95b 	bl	800bb44 <SDMMC_GetCmdResp2>
 800b88e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b890:	69fb      	ldr	r3, [r7, #28]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3720      	adds	r7, #32
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b088      	sub	sp, #32
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b8a8:	2309      	movs	r3, #9
 800b8aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8ac:	23c0      	movs	r3, #192	; 0xc0
 800b8ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ba:	f107 0308 	add.w	r3, r7, #8
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff fe4c 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f93c 	bl	800bb44 <SDMMC_GetCmdResp2>
 800b8cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ce:	69fb      	ldr	r3, [r7, #28]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3720      	adds	r7, #32
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ea:	2340      	movs	r3, #64	; 0x40
 800b8ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8f8:	f107 0308 	add.w	r3, r7, #8
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f7ff fe2d 	bl	800b55e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	2103      	movs	r1, #3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f99b 	bl	800bc44 <SDMMC_GetCmdResp6>
 800b90e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b910:	69fb      	ldr	r3, [r7, #28]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b91c:	b490      	push	{r4, r7}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b924:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <SDMMC_GetCmdError+0x48>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a0f      	ldr	r2, [pc, #60]	; (800b968 <SDMMC_GetCmdError+0x4c>)
 800b92a:	fba2 2303 	umull	r2, r3, r2, r3
 800b92e:	0a5b      	lsrs	r3, r3, #9
 800b930:	f241 3288 	movw	r2, #5000	; 0x1388
 800b934:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b938:	4623      	mov	r3, r4
 800b93a:	1e5c      	subs	r4, r3, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d102      	bne.n	800b946 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b944:	e009      	b.n	800b95a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0f2      	beq.n	800b938 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	22c5      	movs	r2, #197	; 0xc5
 800b956:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bc90      	pop	{r4, r7}
 800b962:	4770      	bx	lr
 800b964:	20000040 	.word	0x20000040
 800b968:	10624dd3 	.word	0x10624dd3

0800b96c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b96c:	b590      	push	{r4, r7, lr}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	460b      	mov	r3, r1
 800b976:	607a      	str	r2, [r7, #4]
 800b978:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b97a:	4b6f      	ldr	r3, [pc, #444]	; (800bb38 <SDMMC_GetCmdResp1+0x1cc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a6f      	ldr	r2, [pc, #444]	; (800bb3c <SDMMC_GetCmdResp1+0x1d0>)
 800b980:	fba2 2303 	umull	r2, r3, r2, r3
 800b984:	0a5b      	lsrs	r3, r3, #9
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b98c:	4623      	mov	r3, r4
 800b98e:	1e5c      	subs	r4, r3, #1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d102      	bne.n	800b99a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b998:	e0c9      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b99e:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0f0      	beq.n	800b98c <SDMMC_GetCmdResp1+0x20>
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1eb      	bne.n	800b98c <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b8:	f003 0304 	and.w	r3, r3, #4
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2204      	movs	r2, #4
 800b9c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9c6:	2304      	movs	r3, #4
 800b9c8:	e0b1      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d004      	beq.n	800b9e0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e0a6      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	22c5      	movs	r2, #197	; 0xc5
 800b9e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f7ff fde3 	bl	800b5b2 <SDMMC_GetCommandResponse>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d001      	beq.n	800b9fa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e099      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f7ff fde5 	bl	800b5cc <SDMMC_GetResponse>
 800ba02:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	4b4e      	ldr	r3, [pc, #312]	; (800bb40 <SDMMC_GetCmdResp1+0x1d4>)
 800ba08:	4013      	ands	r3, r2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d101      	bne.n	800ba12 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e08d      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	da02      	bge.n	800ba1e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba1c:	e087      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba28:	2340      	movs	r3, #64	; 0x40
 800ba2a:	e080      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba36:	2380      	movs	r3, #128	; 0x80
 800ba38:	e079      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba48:	e071      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba58:	e069      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba68:	e061      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba78:	e059      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba88:	e051      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba98:	e049      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800baa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800baa8:	e041      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bab8:	e039      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bac8:	e031      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bad8:	e029      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bae8:	e021      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800baf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800baf8:	e019      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bb08:	e011      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb18:	e009      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	f003 0308 	and.w	r3, r3, #8
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bb28:	e001      	b.n	800bb2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd90      	pop	{r4, r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20000040 	.word	0x20000040
 800bb3c:	10624dd3 	.word	0x10624dd3
 800bb40:	fdffe008 	.word	0xfdffe008

0800bb44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bb44:	b490      	push	{r4, r7}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb4c:	4b1e      	ldr	r3, [pc, #120]	; (800bbc8 <SDMMC_GetCmdResp2+0x84>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a1e      	ldr	r2, [pc, #120]	; (800bbcc <SDMMC_GetCmdResp2+0x88>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	0a5b      	lsrs	r3, r3, #9
 800bb58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb5c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bb60:	4623      	mov	r3, r4
 800bb62:	1e5c      	subs	r4, r3, #1
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d102      	bne.n	800bb6e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb6c:	e026      	b.n	800bbbc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb72:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0f0      	beq.n	800bb60 <SDMMC_GetCmdResp2+0x1c>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1eb      	bne.n	800bb60 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	f003 0304 	and.w	r3, r3, #4
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d004      	beq.n	800bb9e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2204      	movs	r2, #4
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	e00e      	b.n	800bbbc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d004      	beq.n	800bbb4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e003      	b.n	800bbbc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	22c5      	movs	r2, #197	; 0xc5
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bc90      	pop	{r4, r7}
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	20000040 	.word	0x20000040
 800bbcc:	10624dd3 	.word	0x10624dd3

0800bbd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bbd0:	b490      	push	{r4, r7}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbd8:	4b18      	ldr	r3, [pc, #96]	; (800bc3c <SDMMC_GetCmdResp3+0x6c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a18      	ldr	r2, [pc, #96]	; (800bc40 <SDMMC_GetCmdResp3+0x70>)
 800bbde:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe2:	0a5b      	lsrs	r3, r3, #9
 800bbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbe8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bbec:	4623      	mov	r3, r4
 800bbee:	1e5c      	subs	r4, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbf8:	e01b      	b.n	800bc32 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d0f0      	beq.n	800bbec <SDMMC_GetCmdResp3+0x1c>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1eb      	bne.n	800bbec <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc18:	f003 0304 	and.w	r3, r3, #4
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d004      	beq.n	800bc2a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2204      	movs	r2, #4
 800bc24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc26:	2304      	movs	r3, #4
 800bc28:	e003      	b.n	800bc32 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	22c5      	movs	r2, #197	; 0xc5
 800bc2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bc90      	pop	{r4, r7}
 800bc3a:	4770      	bx	lr
 800bc3c:	20000040 	.word	0x20000040
 800bc40:	10624dd3 	.word	0x10624dd3

0800bc44 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bc44:	b590      	push	{r4, r7, lr}
 800bc46:	b087      	sub	sp, #28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc52:	4b34      	ldr	r3, [pc, #208]	; (800bd24 <SDMMC_GetCmdResp6+0xe0>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a34      	ldr	r2, [pc, #208]	; (800bd28 <SDMMC_GetCmdResp6+0xe4>)
 800bc58:	fba2 2303 	umull	r2, r3, r2, r3
 800bc5c:	0a5b      	lsrs	r3, r3, #9
 800bc5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc62:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bc66:	4623      	mov	r3, r4
 800bc68:	1e5c      	subs	r4, r3, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc72:	e052      	b.n	800bd1a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc78:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d0f0      	beq.n	800bc66 <SDMMC_GetCmdResp6+0x22>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1eb      	bne.n	800bc66 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc92:	f003 0304 	and.w	r3, r3, #4
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d004      	beq.n	800bca4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2204      	movs	r2, #4
 800bc9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bca0:	2304      	movs	r3, #4
 800bca2:	e03a      	b.n	800bd1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d004      	beq.n	800bcba <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e02f      	b.n	800bd1a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7ff fc79 	bl	800b5b2 <SDMMC_GetCommandResponse>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	7afb      	ldrb	r3, [r7, #11]
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d001      	beq.n	800bcce <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e025      	b.n	800bd1a <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	22c5      	movs	r2, #197	; 0xc5
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f7ff fc78 	bl	800b5cc <SDMMC_GetResponse>
 800bcdc:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d106      	bne.n	800bcf6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	0c1b      	lsrs	r3, r3, #16
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e011      	b.n	800bd1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd04:	e009      	b.n	800bd1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd14:	e001      	b.n	800bd1a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	371c      	adds	r7, #28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd90      	pop	{r4, r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20000040 	.word	0x20000040
 800bd28:	10624dd3 	.word	0x10624dd3

0800bd2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bd2c:	b490      	push	{r4, r7}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd34:	4b21      	ldr	r3, [pc, #132]	; (800bdbc <SDMMC_GetCmdResp7+0x90>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a21      	ldr	r2, [pc, #132]	; (800bdc0 <SDMMC_GetCmdResp7+0x94>)
 800bd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3e:	0a5b      	lsrs	r3, r3, #9
 800bd40:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd44:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bd48:	4623      	mov	r3, r4
 800bd4a:	1e5c      	subs	r4, r3, #1
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd54:	e02c      	b.n	800bdb0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0f0      	beq.n	800bd48 <SDMMC_GetCmdResp7+0x1c>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1eb      	bne.n	800bd48 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d004      	beq.n	800bd86 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2204      	movs	r2, #4
 800bd80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd82:	2304      	movs	r3, #4
 800bd84:	e014      	b.n	800bdb0 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d004      	beq.n	800bd9c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e009      	b.n	800bdb0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2240      	movs	r2, #64	; 0x40
 800bdac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bdae:	2300      	movs	r3, #0

}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bc90      	pop	{r4, r7}
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	20000040 	.word	0x20000040
 800bdc0:	10624dd3 	.word	0x10624dd3

0800bdc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	f107 001c 	add.w	r0, r7, #28
 800bdd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d122      	bne.n	800be22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bdf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be06:	2b01      	cmp	r3, #1
 800be08:	d105      	bne.n	800be16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f001 f9c8 	bl	800d1ac <USB_CoreReset>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]
 800be20:	e01a      	b.n	800be58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f001 f9bc 	bl	800d1ac <USB_CoreReset>
 800be34:	4603      	mov	r3, r0
 800be36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d106      	bne.n	800be4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	639a      	str	r2, [r3, #56]	; 0x38
 800be4a:	e005      	b.n	800be58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be64:	b004      	add	sp, #16
 800be66:	4770      	bx	lr

0800be68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be68:	b480      	push	{r7}
 800be6a:	b087      	sub	sp, #28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	4613      	mov	r3, r2
 800be74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d165      	bne.n	800bf48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	4a3e      	ldr	r2, [pc, #248]	; (800bf78 <USB_SetTurnaroundTime+0x110>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d906      	bls.n	800be92 <USB_SetTurnaroundTime+0x2a>
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	4a3d      	ldr	r2, [pc, #244]	; (800bf7c <USB_SetTurnaroundTime+0x114>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d802      	bhi.n	800be92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be8c:	230f      	movs	r3, #15
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	e05c      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	4a39      	ldr	r2, [pc, #228]	; (800bf7c <USB_SetTurnaroundTime+0x114>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d906      	bls.n	800bea8 <USB_SetTurnaroundTime+0x40>
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	4a38      	ldr	r2, [pc, #224]	; (800bf80 <USB_SetTurnaroundTime+0x118>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d802      	bhi.n	800bea8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bea2:	230e      	movs	r3, #14
 800bea4:	617b      	str	r3, [r7, #20]
 800bea6:	e051      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	4a35      	ldr	r2, [pc, #212]	; (800bf80 <USB_SetTurnaroundTime+0x118>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d906      	bls.n	800bebe <USB_SetTurnaroundTime+0x56>
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4a34      	ldr	r2, [pc, #208]	; (800bf84 <USB_SetTurnaroundTime+0x11c>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d802      	bhi.n	800bebe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800beb8:	230d      	movs	r3, #13
 800beba:	617b      	str	r3, [r7, #20]
 800bebc:	e046      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	4a30      	ldr	r2, [pc, #192]	; (800bf84 <USB_SetTurnaroundTime+0x11c>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d906      	bls.n	800bed4 <USB_SetTurnaroundTime+0x6c>
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	4a2f      	ldr	r2, [pc, #188]	; (800bf88 <USB_SetTurnaroundTime+0x120>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d802      	bhi.n	800bed4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bece:	230c      	movs	r3, #12
 800bed0:	617b      	str	r3, [r7, #20]
 800bed2:	e03b      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	4a2c      	ldr	r2, [pc, #176]	; (800bf88 <USB_SetTurnaroundTime+0x120>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d906      	bls.n	800beea <USB_SetTurnaroundTime+0x82>
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	4a2b      	ldr	r2, [pc, #172]	; (800bf8c <USB_SetTurnaroundTime+0x124>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d802      	bhi.n	800beea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bee4:	230b      	movs	r3, #11
 800bee6:	617b      	str	r3, [r7, #20]
 800bee8:	e030      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	4a27      	ldr	r2, [pc, #156]	; (800bf8c <USB_SetTurnaroundTime+0x124>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d906      	bls.n	800bf00 <USB_SetTurnaroundTime+0x98>
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	4a26      	ldr	r2, [pc, #152]	; (800bf90 <USB_SetTurnaroundTime+0x128>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d802      	bhi.n	800bf00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800befa:	230a      	movs	r3, #10
 800befc:	617b      	str	r3, [r7, #20]
 800befe:	e025      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	4a23      	ldr	r2, [pc, #140]	; (800bf90 <USB_SetTurnaroundTime+0x128>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d906      	bls.n	800bf16 <USB_SetTurnaroundTime+0xae>
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	4a22      	ldr	r2, [pc, #136]	; (800bf94 <USB_SetTurnaroundTime+0x12c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d802      	bhi.n	800bf16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bf10:	2309      	movs	r3, #9
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	e01a      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	4a1e      	ldr	r2, [pc, #120]	; (800bf94 <USB_SetTurnaroundTime+0x12c>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d906      	bls.n	800bf2c <USB_SetTurnaroundTime+0xc4>
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	4a1d      	ldr	r2, [pc, #116]	; (800bf98 <USB_SetTurnaroundTime+0x130>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d802      	bhi.n	800bf2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf26:	2308      	movs	r3, #8
 800bf28:	617b      	str	r3, [r7, #20]
 800bf2a:	e00f      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	4a1a      	ldr	r2, [pc, #104]	; (800bf98 <USB_SetTurnaroundTime+0x130>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d906      	bls.n	800bf42 <USB_SetTurnaroundTime+0xda>
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	4a19      	ldr	r2, [pc, #100]	; (800bf9c <USB_SetTurnaroundTime+0x134>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d802      	bhi.n	800bf42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf3c:	2307      	movs	r3, #7
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	e004      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf42:	2306      	movs	r3, #6
 800bf44:	617b      	str	r3, [r7, #20]
 800bf46:	e001      	b.n	800bf4c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf48:	2309      	movs	r3, #9
 800bf4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68da      	ldr	r2, [r3, #12]
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	029b      	lsls	r3, r3, #10
 800bf60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf64:	431a      	orrs	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	371c      	adds	r7, #28
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	00d8acbf 	.word	0x00d8acbf
 800bf7c:	00e4e1bf 	.word	0x00e4e1bf
 800bf80:	00f423ff 	.word	0x00f423ff
 800bf84:	0106737f 	.word	0x0106737f
 800bf88:	011a499f 	.word	0x011a499f
 800bf8c:	01312cff 	.word	0x01312cff
 800bf90:	014ca43f 	.word	0x014ca43f
 800bf94:	016e35ff 	.word	0x016e35ff
 800bf98:	01a6ab1f 	.word	0x01a6ab1f
 800bf9c:	01e847ff 	.word	0x01e847ff

0800bfa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	f043 0201 	orr.w	r2, r3, #1
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f023 0201 	bic.w	r2, r3, #1
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d106      	bne.n	800c010 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60da      	str	r2, [r3, #12]
 800c00e:	e00b      	b.n	800c028 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c010:	78fb      	ldrb	r3, [r7, #3]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	60da      	str	r2, [r3, #12]
 800c022:	e001      	b.n	800c028 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	e003      	b.n	800c030 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c028:	2032      	movs	r0, #50	; 0x32
 800c02a:	f7f7 fd73 	bl	8003b14 <HAL_Delay>

  return HAL_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c038:	b084      	sub	sp, #16
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b086      	sub	sp, #24
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c052:	2300      	movs	r3, #0
 800c054:	613b      	str	r3, [r7, #16]
 800c056:	e009      	b.n	800c06c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	3340      	adds	r3, #64	; 0x40
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	2200      	movs	r2, #0
 800c064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	3301      	adds	r3, #1
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2b0e      	cmp	r3, #14
 800c070:	d9f2      	bls.n	800c058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c074:	2b00      	cmp	r3, #0
 800c076:	d11c      	bne.n	800c0b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c086:	f043 0302 	orr.w	r3, r3, #2
 800c08a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	e005      	b.n	800c0be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d8:	461a      	mov	r2, r3
 800c0da:	680b      	ldr	r3, [r1, #0]
 800c0dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0de:	2103      	movs	r1, #3
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f93d 	bl	800c360 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0e6:	2110      	movs	r1, #16
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f8f1 	bl	800c2d0 <USB_FlushTxFifo>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f90f 	bl	800c31c <USB_FlushRxFifo>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d001      	beq.n	800c108 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c10e:	461a      	mov	r2, r3
 800c110:	2300      	movs	r3, #0
 800c112:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11a:	461a      	mov	r2, r3
 800c11c:	2300      	movs	r3, #0
 800c11e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c126:	461a      	mov	r2, r3
 800c128:	2300      	movs	r3, #0
 800c12a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c12c:	2300      	movs	r3, #0
 800c12e:	613b      	str	r3, [r7, #16]
 800c130:	e043      	b.n	800c1ba <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	015a      	lsls	r2, r3, #5
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c148:	d118      	bne.n	800c17c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10a      	bne.n	800c166 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c15c:	461a      	mov	r2, r3
 800c15e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	e013      	b.n	800c18e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	015a      	lsls	r2, r3, #5
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	4413      	add	r3, r2
 800c16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c172:	461a      	mov	r2, r3
 800c174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c178:	6013      	str	r3, [r2, #0]
 800c17a:	e008      	b.n	800c18e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c188:	461a      	mov	r2, r3
 800c18a:	2300      	movs	r3, #0
 800c18c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c19a:	461a      	mov	r2, r3
 800c19c:	2300      	movs	r3, #0
 800c19e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	613b      	str	r3, [r7, #16]
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d3b7      	bcc.n	800c132 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	613b      	str	r3, [r7, #16]
 800c1c6:	e043      	b.n	800c250 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	015a      	lsls	r2, r3, #5
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1de:	d118      	bne.n	800c212 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10a      	bne.n	800c1fc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	e013      	b.n	800c224 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	015a      	lsls	r2, r3, #5
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4413      	add	r3, r2
 800c204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c208:	461a      	mov	r2, r3
 800c20a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	e008      	b.n	800c224 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	015a      	lsls	r2, r3, #5
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	4413      	add	r3, r2
 800c21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21e:	461a      	mov	r2, r3
 800c220:	2300      	movs	r3, #0
 800c222:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	015a      	lsls	r2, r3, #5
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c230:	461a      	mov	r2, r3
 800c232:	2300      	movs	r3, #0
 800c234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c242:	461a      	mov	r2, r3
 800c244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	3301      	adds	r3, #1
 800c24e:	613b      	str	r3, [r7, #16]
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	429a      	cmp	r2, r3
 800c256:	d3b7      	bcc.n	800c1c8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c26a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c278:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	f043 0210 	orr.w	r2, r3, #16
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	699a      	ldr	r2, [r3, #24]
 800c28a:	4b10      	ldr	r3, [pc, #64]	; (800c2cc <USB_DevInit+0x294>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d005      	beq.n	800c2a4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	f043 0208 	orr.w	r2, r3, #8
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d107      	bne.n	800c2ba <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2b2:	f043 0304 	orr.w	r3, r3, #4
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2c6:	b004      	add	sp, #16
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	803c3800 	.word	0x803c3800

0800c2d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	019b      	lsls	r3, r3, #6
 800c2e2:	f043 0220 	orr.w	r2, r3, #32
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4a09      	ldr	r2, [pc, #36]	; (800c318 <USB_FlushTxFifo+0x48>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d901      	bls.n	800c2fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e006      	b.n	800c30a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	f003 0320 	and.w	r3, r3, #32
 800c304:	2b20      	cmp	r3, #32
 800c306:	d0f0      	beq.n	800c2ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	00030d40 	.word	0x00030d40

0800c31c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2210      	movs	r2, #16
 800c32c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3301      	adds	r3, #1
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4a09      	ldr	r2, [pc, #36]	; (800c35c <USB_FlushRxFifo+0x40>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d901      	bls.n	800c340 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e006      	b.n	800c34e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	f003 0310 	and.w	r3, r3, #16
 800c348:	2b10      	cmp	r3, #16
 800c34a:	d0f0      	beq.n	800c32e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	00030d40 	.word	0x00030d40

0800c360 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	78fb      	ldrb	r3, [r7, #3]
 800c37a:	68f9      	ldr	r1, [r7, #12]
 800c37c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c380:	4313      	orrs	r3, r2
 800c382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c392:	b480      	push	{r7}
 800c394:	b087      	sub	sp, #28
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	f003 0306 	and.w	r3, r3, #6
 800c3aa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d002      	beq.n	800c3b8 <USB_GetDevSpeed+0x26>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b06      	cmp	r3, #6
 800c3b6:	d102      	bne.n	800c3be <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	75fb      	strb	r3, [r7, #23]
 800c3bc:	e001      	b.n	800c3c2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c3be:	230f      	movs	r3, #15
 800c3c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	371c      	adds	r7, #28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	785b      	ldrb	r3, [r3, #1]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d13a      	bne.n	800c462 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f2:	69da      	ldr	r2, [r3, #28]
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	f003 030f 	and.w	r3, r3, #15
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c402:	b29b      	uxth	r3, r3
 800c404:	68f9      	ldr	r1, [r7, #12]
 800c406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c40a:	4313      	orrs	r3, r2
 800c40c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	015a      	lsls	r2, r3, #5
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	4413      	add	r3, r2
 800c416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d155      	bne.n	800c4d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	78db      	ldrb	r3, [r3, #3]
 800c43e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c440:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	059b      	lsls	r3, r3, #22
 800c446:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c448:	4313      	orrs	r3, r2
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	0151      	lsls	r1, r2, #5
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	440a      	add	r2, r1
 800c452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c45a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	e036      	b.n	800c4d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c468:	69da      	ldr	r2, [r3, #28]
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	f003 030f 	and.w	r3, r3, #15
 800c472:	2101      	movs	r1, #1
 800c474:	fa01 f303 	lsl.w	r3, r1, r3
 800c478:	041b      	lsls	r3, r3, #16
 800c47a:	68f9      	ldr	r1, [r7, #12]
 800c47c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c480:	4313      	orrs	r3, r2
 800c482:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d11a      	bne.n	800c4d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	015a      	lsls	r2, r3, #5
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	78db      	ldrb	r3, [r3, #3]
 800c4b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4b6:	430b      	orrs	r3, r1
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	0151      	lsls	r1, r2, #5
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	440a      	add	r2, r1
 800c4c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
	...

0800c4e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	785b      	ldrb	r3, [r3, #1]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d161      	bne.n	800c5c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	015a      	lsls	r2, r3, #5
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	4413      	add	r3, r2
 800c504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c50e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c512:	d11f      	bne.n	800c554 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	015a      	lsls	r2, r3, #5
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	4413      	add	r3, r2
 800c51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	0151      	lsls	r1, r2, #5
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	440a      	add	r2, r1
 800c52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c52e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c532:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	015a      	lsls	r2, r3, #5
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	4413      	add	r3, r2
 800c53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	0151      	lsls	r1, r2, #5
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	440a      	add	r2, r1
 800c54a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c54e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c55a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	f003 030f 	and.w	r3, r3, #15
 800c564:	2101      	movs	r1, #1
 800c566:	fa01 f303 	lsl.w	r3, r1, r3
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	43db      	mvns	r3, r3
 800c56e:	68f9      	ldr	r1, [r7, #12]
 800c570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c574:	4013      	ands	r3, r2
 800c576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57e:	69da      	ldr	r2, [r3, #28]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	f003 030f 	and.w	r3, r3, #15
 800c588:	2101      	movs	r1, #1
 800c58a:	fa01 f303 	lsl.w	r3, r1, r3
 800c58e:	b29b      	uxth	r3, r3
 800c590:	43db      	mvns	r3, r3
 800c592:	68f9      	ldr	r1, [r7, #12]
 800c594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c598:	4013      	ands	r3, r2
 800c59a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	015a      	lsls	r2, r3, #5
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	0159      	lsls	r1, r3, #5
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	440b      	add	r3, r1
 800c5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	4b35      	ldr	r3, [pc, #212]	; (800c690 <USB_DeactivateEndpoint+0x1b0>)
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	600b      	str	r3, [r1, #0]
 800c5be:	e060      	b.n	800c682 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	015a      	lsls	r2, r3, #5
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5d6:	d11f      	bne.n	800c618 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	0151      	lsls	r1, r2, #5
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	440a      	add	r2, r1
 800c5ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	0151      	lsls	r1, r2, #5
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	440a      	add	r2, r1
 800c60e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c61e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	f003 030f 	and.w	r3, r3, #15
 800c628:	2101      	movs	r1, #1
 800c62a:	fa01 f303 	lsl.w	r3, r1, r3
 800c62e:	041b      	lsls	r3, r3, #16
 800c630:	43db      	mvns	r3, r3
 800c632:	68f9      	ldr	r1, [r7, #12]
 800c634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c638:	4013      	ands	r3, r2
 800c63a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c642:	69da      	ldr	r2, [r3, #28]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	f003 030f 	and.w	r3, r3, #15
 800c64c:	2101      	movs	r1, #1
 800c64e:	fa01 f303 	lsl.w	r3, r1, r3
 800c652:	041b      	lsls	r3, r3, #16
 800c654:	43db      	mvns	r3, r3
 800c656:	68f9      	ldr	r1, [r7, #12]
 800c658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c65c:	4013      	ands	r3, r2
 800c65e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	015a      	lsls	r2, r3, #5
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	4413      	add	r3, r2
 800c668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	0159      	lsls	r1, r3, #5
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	440b      	add	r3, r1
 800c676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c67a:	4619      	mov	r1, r3
 800c67c:	4b05      	ldr	r3, [pc, #20]	; (800c694 <USB_DeactivateEndpoint+0x1b4>)
 800c67e:	4013      	ands	r3, r2
 800c680:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr
 800c690:	ec337800 	.word	0xec337800
 800c694:	eff37800 	.word	0xeff37800

0800c698 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	785b      	ldrb	r3, [r3, #1]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	f040 810a 	bne.w	800c8ca <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d132      	bne.n	800c724 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	015a      	lsls	r2, r3, #5
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	693a      	ldr	r2, [r7, #16]
 800c6ce:	0151      	lsls	r1, r2, #5
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	440a      	add	r2, r1
 800c6d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	0151      	lsls	r1, r2, #5
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	440a      	add	r2, r1
 800c6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	015a      	lsls	r2, r3, #5
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	4413      	add	r3, r2
 800c70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	0151      	lsls	r1, r2, #5
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	440a      	add	r2, r1
 800c718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71c:	0cdb      	lsrs	r3, r3, #19
 800c71e:	04db      	lsls	r3, r3, #19
 800c720:	6113      	str	r3, [r2, #16]
 800c722:	e074      	b.n	800c80e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	0151      	lsls	r1, r2, #5
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	440a      	add	r2, r1
 800c73a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c73e:	0cdb      	lsrs	r3, r3, #19
 800c740:	04db      	lsls	r3, r3, #19
 800c742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	015a      	lsls	r2, r3, #5
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	0151      	lsls	r1, r2, #5
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	440a      	add	r2, r1
 800c75a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c75e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c762:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	015a      	lsls	r2, r3, #5
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	4413      	add	r3, r2
 800c770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c774:	691a      	ldr	r2, [r3, #16]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	6959      	ldr	r1, [r3, #20]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	440b      	add	r3, r1
 800c780:	1e59      	subs	r1, r3, #1
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	fbb1 f3f3 	udiv	r3, r1, r3
 800c78a:	04d9      	lsls	r1, r3, #19
 800c78c:	4baf      	ldr	r3, [pc, #700]	; (800ca4c <USB_EPStartXfer+0x3b4>)
 800c78e:	400b      	ands	r3, r1
 800c790:	6939      	ldr	r1, [r7, #16]
 800c792:	0148      	lsls	r0, r1, #5
 800c794:	6979      	ldr	r1, [r7, #20]
 800c796:	4401      	add	r1, r0
 800c798:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c79c:	4313      	orrs	r3, r2
 800c79e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	015a      	lsls	r2, r3, #5
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ac:	691a      	ldr	r2, [r3, #16]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7b6:	6939      	ldr	r1, [r7, #16]
 800c7b8:	0148      	lsls	r0, r1, #5
 800c7ba:	6979      	ldr	r1, [r7, #20]
 800c7bc:	4401      	add	r1, r0
 800c7be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	78db      	ldrb	r3, [r3, #3]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d11f      	bne.n	800c80e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	015a      	lsls	r2, r3, #5
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	0151      	lsls	r1, r2, #5
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	440a      	add	r2, r1
 800c7e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c7ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	0151      	lsls	r1, r2, #5
 800c800:	697a      	ldr	r2, [r7, #20]
 800c802:	440a      	add	r2, r1
 800c804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c80c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	015a      	lsls	r2, r3, #5
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	4413      	add	r3, r2
 800c816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	0151      	lsls	r1, r2, #5
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	440a      	add	r2, r1
 800c824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c828:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c82c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	78db      	ldrb	r3, [r3, #3]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d015      	beq.n	800c862 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 8100 	beq.w	800ca40 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 030f 	and.w	r3, r3, #15
 800c850:	2101      	movs	r1, #1
 800c852:	fa01 f303 	lsl.w	r3, r1, r3
 800c856:	6979      	ldr	r1, [r7, #20]
 800c858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c85c:	4313      	orrs	r3, r2
 800c85e:	634b      	str	r3, [r1, #52]	; 0x34
 800c860:	e0ee      	b.n	800ca40 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d110      	bne.n	800c894 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	0151      	lsls	r1, r2, #5
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	440a      	add	r2, r1
 800c888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c88c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	e00f      	b.n	800c8b4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	015a      	lsls	r2, r3, #5
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	4413      	add	r3, r2
 800c89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	693a      	ldr	r2, [r7, #16]
 800c8a4:	0151      	lsls	r1, r2, #5
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	440a      	add	r2, r1
 800c8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8b2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	68d9      	ldr	r1, [r3, #12]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	781a      	ldrb	r2, [r3, #0]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f9e2 	bl	800cc8c <USB_WritePacket>
 800c8c8:	e0ba      	b.n	800ca40 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	0151      	lsls	r1, r2, #5
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	440a      	add	r2, r1
 800c8e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8e4:	0cdb      	lsrs	r3, r3, #19
 800c8e6:	04db      	lsls	r3, r3, #19
 800c8e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	015a      	lsls	r2, r3, #5
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	0151      	lsls	r1, r2, #5
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	440a      	add	r2, r1
 800c900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c904:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c908:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c90c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d123      	bne.n	800c95e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c922:	691a      	ldr	r2, [r3, #16]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c92c:	6939      	ldr	r1, [r7, #16]
 800c92e:	0148      	lsls	r0, r1, #5
 800c930:	6979      	ldr	r1, [r7, #20]
 800c932:	4401      	add	r1, r0
 800c934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c938:	4313      	orrs	r3, r2
 800c93a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	0151      	lsls	r1, r2, #5
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	440a      	add	r2, r1
 800c952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c95a:	6113      	str	r3, [r2, #16]
 800c95c:	e033      	b.n	800c9c6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	695a      	ldr	r2, [r3, #20]
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	4413      	add	r3, r2
 800c968:	1e5a      	subs	r2, r3, #1
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c972:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	015a      	lsls	r2, r3, #5
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	4413      	add	r3, r2
 800c97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c980:	691a      	ldr	r2, [r3, #16]
 800c982:	89fb      	ldrh	r3, [r7, #14]
 800c984:	04d9      	lsls	r1, r3, #19
 800c986:	4b31      	ldr	r3, [pc, #196]	; (800ca4c <USB_EPStartXfer+0x3b4>)
 800c988:	400b      	ands	r3, r1
 800c98a:	6939      	ldr	r1, [r7, #16]
 800c98c:	0148      	lsls	r0, r1, #5
 800c98e:	6979      	ldr	r1, [r7, #20]
 800c990:	4401      	add	r1, r0
 800c992:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c996:	4313      	orrs	r3, r2
 800c998:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	015a      	lsls	r2, r3, #5
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a6:	691a      	ldr	r2, [r3, #16]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	89f9      	ldrh	r1, [r7, #14]
 800c9ae:	fb01 f303 	mul.w	r3, r1, r3
 800c9b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9b6:	6939      	ldr	r1, [r7, #16]
 800c9b8:	0148      	lsls	r0, r1, #5
 800c9ba:	6979      	ldr	r1, [r7, #20]
 800c9bc:	4401      	add	r1, r0
 800c9be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	78db      	ldrb	r3, [r3, #3]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d128      	bne.n	800ca20 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d110      	bne.n	800ca00 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	015a      	lsls	r2, r3, #5
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	0151      	lsls	r1, r2, #5
 800c9f0:	697a      	ldr	r2, [r7, #20]
 800c9f2:	440a      	add	r2, r1
 800c9f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	e00f      	b.n	800ca20 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	0151      	lsls	r1, r2, #5
 800ca12:	697a      	ldr	r2, [r7, #20]
 800ca14:	440a      	add	r2, r1
 800ca16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	0151      	lsls	r1, r2, #5
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	440a      	add	r2, r1
 800ca36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	1ff80000 	.word	0x1ff80000

0800ca50 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	785b      	ldrb	r3, [r3, #1]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	f040 80ab 	bne.w	800cbc4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d132      	bne.n	800cadc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	0151      	lsls	r1, r2, #5
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	440a      	add	r2, r1
 800ca8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	015a      	lsls	r2, r3, #5
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	4413      	add	r3, r2
 800caa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	0151      	lsls	r1, r2, #5
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	440a      	add	r2, r1
 800cab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	015a      	lsls	r2, r3, #5
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	4413      	add	r3, r2
 800cac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	0151      	lsls	r1, r2, #5
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	440a      	add	r2, r1
 800cad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cad4:	0cdb      	lsrs	r3, r3, #19
 800cad6:	04db      	lsls	r3, r3, #19
 800cad8:	6113      	str	r3, [r2, #16]
 800cada:	e04e      	b.n	800cb7a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	0151      	lsls	r1, r2, #5
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	440a      	add	r2, r1
 800caf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caf6:	0cdb      	lsrs	r3, r3, #19
 800caf8:	04db      	lsls	r3, r3, #19
 800cafa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4413      	add	r3, r2
 800cb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	0151      	lsls	r1, r2, #5
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	440a      	add	r2, r1
 800cb12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	695a      	ldr	r2, [r3, #20]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d903      	bls.n	800cb34 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	689a      	ldr	r2, [r3, #8]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	0151      	lsls	r1, r2, #5
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	440a      	add	r2, r1
 800cb4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	015a      	lsls	r2, r3, #5
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb60:	691a      	ldr	r2, [r3, #16]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	695b      	ldr	r3, [r3, #20]
 800cb66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	0148      	lsls	r0, r1, #5
 800cb6e:	68f9      	ldr	r1, [r7, #12]
 800cb70:	4401      	add	r1, r0
 800cb72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cb76:	4313      	orrs	r3, r2
 800cb78:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	015a      	lsls	r2, r3, #5
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	4413      	add	r3, r2
 800cb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	0151      	lsls	r1, r2, #5
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	440a      	add	r2, r1
 800cb90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb98:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d06d      	beq.n	800cc7e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	f003 030f 	and.w	r3, r3, #15
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	fa01 f303 	lsl.w	r3, r1, r3
 800cbb8:	68f9      	ldr	r1, [r7, #12]
 800cbba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	634b      	str	r3, [r1, #52]	; 0x34
 800cbc2:	e05c      	b.n	800cc7e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	0151      	lsls	r1, r2, #5
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	440a      	add	r2, r1
 800cbda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbde:	0cdb      	lsrs	r3, r3, #19
 800cbe0:	04db      	lsls	r3, r3, #19
 800cbe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	015a      	lsls	r2, r3, #5
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	4413      	add	r3, r2
 800cbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	0151      	lsls	r1, r2, #5
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	440a      	add	r2, r1
 800cbfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc06:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	689a      	ldr	r2, [r3, #8]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	015a      	lsls	r2, r3, #5
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4413      	add	r3, r2
 800cc20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	0151      	lsls	r1, r2, #5
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	440a      	add	r2, r1
 800cc2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	015a      	lsls	r2, r3, #5
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc44:	691a      	ldr	r2, [r3, #16]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc4e:	68b9      	ldr	r1, [r7, #8]
 800cc50:	0148      	lsls	r0, r1, #5
 800cc52:	68f9      	ldr	r1, [r7, #12]
 800cc54:	4401      	add	r1, r0
 800cc56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	015a      	lsls	r2, r3, #5
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	4413      	add	r3, r2
 800cc66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	0151      	lsls	r1, r2, #5
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	440a      	add	r2, r1
 800cc74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b089      	sub	sp, #36	; 0x24
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	4611      	mov	r1, r2
 800cc98:	461a      	mov	r2, r3
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	71fb      	strb	r3, [r7, #7]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ccaa:	88bb      	ldrh	r3, [r7, #4]
 800ccac:	3303      	adds	r3, #3
 800ccae:	089b      	lsrs	r3, r3, #2
 800ccb0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	61bb      	str	r3, [r7, #24]
 800ccb6:	e00f      	b.n	800ccd8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	031a      	lsls	r2, r3, #12
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6013      	str	r3, [r2, #0]
    pSrc++;
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	3304      	adds	r3, #4
 800ccd0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	69ba      	ldr	r2, [r7, #24]
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d3eb      	bcc.n	800ccb8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3724      	adds	r7, #36	; 0x24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b089      	sub	sp, #36	; 0x24
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	60b9      	str	r1, [r7, #8]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cd04:	88fb      	ldrh	r3, [r7, #6]
 800cd06:	3303      	adds	r3, #3
 800cd08:	089b      	lsrs	r3, r3, #2
 800cd0a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	61bb      	str	r3, [r7, #24]
 800cd10:	e00b      	b.n	800cd2a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	3304      	adds	r3, #4
 800cd22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	3301      	adds	r3, #1
 800cd28:	61bb      	str	r3, [r7, #24]
 800cd2a:	69ba      	ldr	r2, [r7, #24]
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d3ef      	bcc.n	800cd12 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cd32:	69fb      	ldr	r3, [r7, #28]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3724      	adds	r7, #36	; 0x24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	785b      	ldrb	r3, [r3, #1]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d12c      	bne.n	800cdb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	db12      	blt.n	800cd94 <USB_EPSetStall+0x54>
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00f      	beq.n	800cd94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	0151      	lsls	r1, r2, #5
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	440a      	add	r2, r1
 800cd8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	015a      	lsls	r2, r3, #5
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	0151      	lsls	r1, r2, #5
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	440a      	add	r2, r1
 800cdaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	e02b      	b.n	800ce0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	015a      	lsls	r2, r3, #5
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	db12      	blt.n	800cdee <USB_EPSetStall+0xae>
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00f      	beq.n	800cdee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	015a      	lsls	r2, r3, #5
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	0151      	lsls	r1, r2, #5
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	440a      	add	r2, r1
 800cde4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cde8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	015a      	lsls	r2, r3, #5
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	0151      	lsls	r1, r2, #5
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	440a      	add	r2, r1
 800ce04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	785b      	ldrb	r3, [r3, #1]
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d128      	bne.n	800ce8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	015a      	lsls	r2, r3, #5
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4413      	add	r3, r2
 800ce40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	0151      	lsls	r1, r2, #5
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	440a      	add	r2, r1
 800ce4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	78db      	ldrb	r3, [r3, #3]
 800ce5c:	2b03      	cmp	r3, #3
 800ce5e:	d003      	beq.n	800ce68 <USB_EPClearStall+0x4c>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	78db      	ldrb	r3, [r3, #3]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d138      	bne.n	800ceda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	015a      	lsls	r2, r3, #5
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	0151      	lsls	r1, r2, #5
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	440a      	add	r2, r1
 800ce7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce86:	6013      	str	r3, [r2, #0]
 800ce88:	e027      	b.n	800ceda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	015a      	lsls	r2, r3, #5
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	4413      	add	r3, r2
 800ce92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	0151      	lsls	r1, r2, #5
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	440a      	add	r2, r1
 800cea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cea8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	78db      	ldrb	r3, [r3, #3]
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d003      	beq.n	800ceba <USB_EPClearStall+0x9e>
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	78db      	ldrb	r3, [r3, #3]
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d10f      	bne.n	800ceda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	015a      	lsls	r2, r3, #5
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4413      	add	r3, r2
 800cec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	0151      	lsls	r1, r2, #5
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	440a      	add	r2, r1
 800ced0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ced4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ced8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	011b      	lsls	r3, r3, #4
 800cf18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf1c:	68f9      	ldr	r1, [r7, #12]
 800cf1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf22:	4313      	orrs	r3, r2
 800cf24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf4e:	f023 0302 	bic.w	r3, r3, #2
 800cf52:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cf54:	2003      	movs	r0, #3
 800cf56:	f7f6 fddd 	bl	8003b14 <HAL_Delay>

  return HAL_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf7e:	f043 0302 	orr.w	r3, r3, #2
 800cf82:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cf84:	2003      	movs	r0, #3
 800cf86:	f7f6 fdc5 	bl	8003b14 <HAL_Delay>

  return HAL_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	695b      	ldr	r3, [r3, #20]
 800cfa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cfac:	68fb      	ldr	r3, [r7, #12]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3714      	adds	r7, #20
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b085      	sub	sp, #20
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	4013      	ands	r3, r2
 800cfdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	0c1b      	lsrs	r3, r3, #16
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b085      	sub	sp, #20
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d00a:	69db      	ldr	r3, [r3, #28]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	4013      	ands	r3, r2
 800d010:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	b29b      	uxth	r3, r3
}
 800d016:	4618      	mov	r0, r3
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d022:	b480      	push	{r7}
 800d024:	b085      	sub	sp, #20
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	460b      	mov	r3, r1
 800d02c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d032:	78fb      	ldrb	r3, [r7, #3]
 800d034:	015a      	lsls	r2, r3, #5
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	4413      	add	r3, r2
 800d03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	4013      	ands	r3, r2
 800d04e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d050:	68bb      	ldr	r3, [r7, #8]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3714      	adds	r7, #20
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d05e:	b480      	push	{r7}
 800d060:	b087      	sub	sp, #28
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
 800d066:	460b      	mov	r3, r1
 800d068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d080:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d082:	78fb      	ldrb	r3, [r7, #3]
 800d084:	f003 030f 	and.w	r3, r3, #15
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	fa22 f303 	lsr.w	r3, r2, r3
 800d08e:	01db      	lsls	r3, r3, #7
 800d090:	b2db      	uxtb	r3, r3
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	4313      	orrs	r3, r2
 800d096:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d098:	78fb      	ldrb	r3, [r7, #3]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0ac:	68bb      	ldr	r3, [r7, #8]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	f003 0301 	and.w	r3, r3, #1
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d0d6:	b480      	push	{r7}
 800d0d8:	b085      	sub	sp, #20
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d0f4:	f023 0307 	bic.w	r3, r3, #7
 800d0f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d10c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	333c      	adds	r3, #60	; 0x3c
 800d12e:	3304      	adds	r3, #4
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	4a1c      	ldr	r2, [pc, #112]	; (800d1a8 <USB_EP0_OutStart+0x8c>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d90a      	bls.n	800d152 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d14c:	d101      	bne.n	800d152 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	e024      	b.n	800d19c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d158:	461a      	mov	r2, r3
 800d15a:	2300      	movs	r3, #0
 800d15c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d16c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d170:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d180:	f043 0318 	orr.w	r3, r3, #24
 800d184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d194:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d198:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	4f54300a 	.word	0x4f54300a

0800d1ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	4a13      	ldr	r2, [pc, #76]	; (800d210 <USB_CoreReset+0x64>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d901      	bls.n	800d1ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	e01b      	b.n	800d202 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	daf2      	bge.n	800d1b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	f043 0201 	orr.w	r2, r3, #1
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	60fb      	str	r3, [r7, #12]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	4a09      	ldr	r2, [pc, #36]	; (800d210 <USB_CoreReset+0x64>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d901      	bls.n	800d1f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	e006      	b.n	800d202 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d0f0      	beq.n	800d1e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3714      	adds	r7, #20
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	00030d40 	.word	0x00030d40

0800d214 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d220:	2300      	movs	r3, #0
 800d222:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	7c1b      	ldrb	r3, [r3, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d115      	bne.n	800d258 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d22c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d230:	2202      	movs	r2, #2
 800d232:	2181      	movs	r1, #129	; 0x81
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f005 f80d 	bl	8012254 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d240:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d244:	2202      	movs	r2, #2
 800d246:	2101      	movs	r1, #1
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f005 f803 	bl	8012254 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800d256:	e012      	b.n	800d27e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d258:	2340      	movs	r3, #64	; 0x40
 800d25a:	2202      	movs	r2, #2
 800d25c:	2181      	movs	r1, #129	; 0x81
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f004 fff8 	bl	8012254 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d26a:	2340      	movs	r3, #64	; 0x40
 800d26c:	2202      	movs	r2, #2
 800d26e:	2101      	movs	r1, #1
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f004 ffef 	bl	8012254 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2201      	movs	r2, #1
 800d27a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d27e:	2308      	movs	r3, #8
 800d280:	2203      	movs	r2, #3
 800d282:	2182      	movs	r1, #130	; 0x82
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f004 ffe5 	bl	8012254 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2201      	movs	r2, #1
 800d28e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d290:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d294:	f005 f9f6 	bl	8012684 <USBD_static_malloc>
 800d298:	4602      	mov	r2, r0
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	73fb      	strb	r3, [r7, #15]
 800d2ae:	e026      	b.n	800d2fe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	7c1b      	ldrb	r3, [r3, #16]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d109      	bne.n	800d2ee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2e4:	2101      	movs	r1, #1
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f005 f930 	bl	801254c <USBD_LL_PrepareReceive>
 800d2ec:	e007      	b.n	800d2fe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2f4:	2340      	movs	r3, #64	; 0x40
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f005 f927 	bl	801254c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d318:	2181      	movs	r1, #129	; 0x81
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f004 ffd8 	bl	80122d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d326:	2101      	movs	r1, #1
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f004 ffd1 	bl	80122d0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d336:	2182      	movs	r1, #130	; 0x82
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f004 ffc9 	bl	80122d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00e      	beq.n	800d36c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d35e:	4618      	mov	r0, r3
 800d360:	f005 f99e 	bl	80126a0 <USBD_static_free>
    pdev->pClassData = NULL;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b086      	sub	sp, #24
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d386:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d38c:	2300      	movs	r3, #0
 800d38e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d039      	beq.n	800d414 <USBD_CDC_Setup+0x9e>
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	d17c      	bne.n	800d49e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	88db      	ldrh	r3, [r3, #6]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d029      	beq.n	800d400 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	b25b      	sxtb	r3, r3
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	da11      	bge.n	800d3da <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d3c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	88d2      	ldrh	r2, [r2, #6]
 800d3c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d3ca:	6939      	ldr	r1, [r7, #16]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	88db      	ldrh	r3, [r3, #6]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f001 fa3a 	bl	800e84c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d3d8:	e068      	b.n	800d4ac <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	785a      	ldrb	r2, [r3, #1]
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	88db      	ldrh	r3, [r3, #6]
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d3f0:	6939      	ldr	r1, [r7, #16]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	88db      	ldrh	r3, [r3, #6]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f001 fa55 	bl	800e8a8 <USBD_CtlPrepareRx>
      break;
 800d3fe:	e055      	b.n	800d4ac <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	7850      	ldrb	r0, [r2, #1]
 800d40c:	2200      	movs	r2, #0
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	4798      	blx	r3
      break;
 800d412:	e04b      	b.n	800d4ac <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	785b      	ldrb	r3, [r3, #1]
 800d418:	2b0a      	cmp	r3, #10
 800d41a:	d017      	beq.n	800d44c <USBD_CDC_Setup+0xd6>
 800d41c:	2b0b      	cmp	r3, #11
 800d41e:	d029      	beq.n	800d474 <USBD_CDC_Setup+0xfe>
 800d420:	2b00      	cmp	r3, #0
 800d422:	d133      	bne.n	800d48c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	d107      	bne.n	800d43e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d42e:	f107 030c 	add.w	r3, r7, #12
 800d432:	2202      	movs	r2, #2
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f001 fa08 	bl	800e84c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d43c:	e02e      	b.n	800d49c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800d43e:	6839      	ldr	r1, [r7, #0]
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f001 f998 	bl	800e776 <USBD_CtlError>
            ret = USBD_FAIL;
 800d446:	2302      	movs	r3, #2
 800d448:	75fb      	strb	r3, [r7, #23]
          break;
 800d44a:	e027      	b.n	800d49c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d452:	2b03      	cmp	r3, #3
 800d454:	d107      	bne.n	800d466 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d456:	f107 030f 	add.w	r3, r7, #15
 800d45a:	2201      	movs	r2, #1
 800d45c:	4619      	mov	r1, r3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f001 f9f4 	bl	800e84c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d464:	e01a      	b.n	800d49c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f001 f984 	bl	800e776 <USBD_CtlError>
            ret = USBD_FAIL;
 800d46e:	2302      	movs	r3, #2
 800d470:	75fb      	strb	r3, [r7, #23]
          break;
 800d472:	e013      	b.n	800d49c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d00d      	beq.n	800d49a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f001 f978 	bl	800e776 <USBD_CtlError>
            ret = USBD_FAIL;
 800d486:	2302      	movs	r3, #2
 800d488:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d48a:	e006      	b.n	800d49a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f001 f971 	bl	800e776 <USBD_CtlError>
          ret = USBD_FAIL;
 800d494:	2302      	movs	r3, #2
 800d496:	75fb      	strb	r3, [r7, #23]
          break;
 800d498:	e000      	b.n	800d49c <USBD_CDC_Setup+0x126>
          break;
 800d49a:	bf00      	nop
      }
      break;
 800d49c:	e006      	b.n	800d4ac <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800d49e:	6839      	ldr	r1, [r7, #0]
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f001 f968 	bl	800e776 <USBD_CtlError>
      ret = USBD_FAIL;
 800d4a6:	2302      	movs	r3, #2
 800d4a8:	75fb      	strb	r3, [r7, #23]
      break;
 800d4aa:	bf00      	nop
  }

  return ret;
 800d4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b084      	sub	sp, #16
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4c8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4d0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d03a      	beq.n	800d552 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d4dc:	78fa      	ldrb	r2, [r7, #3]
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4413      	add	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	440b      	add	r3, r1
 800d4ea:	331c      	adds	r3, #28
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d029      	beq.n	800d546 <USBD_CDC_DataIn+0x90>
 800d4f2:	78fa      	ldrb	r2, [r7, #3]
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	440b      	add	r3, r1
 800d500:	331c      	adds	r3, #28
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	78f9      	ldrb	r1, [r7, #3]
 800d506:	68b8      	ldr	r0, [r7, #8]
 800d508:	460b      	mov	r3, r1
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	1a5b      	subs	r3, r3, r1
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4403      	add	r3, r0
 800d512:	3344      	adds	r3, #68	; 0x44
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	fbb2 f1f3 	udiv	r1, r2, r3
 800d51a:	fb03 f301 	mul.w	r3, r3, r1
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	2b00      	cmp	r3, #0
 800d522:	d110      	bne.n	800d546 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d524:	78fa      	ldrb	r2, [r7, #3]
 800d526:	6879      	ldr	r1, [r7, #4]
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	440b      	add	r3, r1
 800d532:	331c      	adds	r3, #28
 800d534:	2200      	movs	r2, #0
 800d536:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d538:	78f9      	ldrb	r1, [r7, #3]
 800d53a:	2300      	movs	r3, #0
 800d53c:	2200      	movs	r2, #0
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f004 ffca 	bl	80124d8 <USBD_LL_Transmit>
 800d544:	e003      	b.n	800d54e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	e000      	b.n	800d554 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d552:	2302      	movs	r3, #2
  }
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	460b      	mov	r3, r1
 800d566:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d56e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f005 f823 	bl	80125c0 <USBD_LL_GetRxDataSize>
 800d57a:	4602      	mov	r2, r0
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00d      	beq.n	800d5a8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	4798      	blx	r3

    return USBD_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e000      	b.n	800d5aa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d5a8:	2302      	movs	r3, #2
  }
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3710      	adds	r7, #16
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b084      	sub	sp, #16
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d015      	beq.n	800d5f8 <USBD_CDC_EP0_RxReady+0x46>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d5d2:	2bff      	cmp	r3, #255	; 0xff
 800d5d4:	d010      	beq.n	800d5f8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d5e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5ec:	b292      	uxth	r2, r2
 800d5ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	22ff      	movs	r2, #255	; 0xff
 800d5f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2243      	movs	r2, #67	; 0x43
 800d610:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d612:	4b03      	ldr	r3, [pc, #12]	; (800d620 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d614:	4618      	mov	r0, r3
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	200000d4 	.word	0x200000d4

0800d624 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2243      	movs	r2, #67	; 0x43
 800d630:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d632:	4b03      	ldr	r3, [pc, #12]	; (800d640 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d634:	4618      	mov	r0, r3
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	20000090 	.word	0x20000090

0800d644 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2243      	movs	r2, #67	; 0x43
 800d650:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d652:	4b03      	ldr	r3, [pc, #12]	; (800d660 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	20000118 	.word	0x20000118

0800d664 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	220a      	movs	r2, #10
 800d670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d672:	4b03      	ldr	r3, [pc, #12]	; (800d680 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d674:	4618      	mov	r0, r3
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	2000004c 	.word	0x2000004c

0800d684 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d68e:	2302      	movs	r3, #2
 800d690:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d005      	beq.n	800d6a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3714      	adds	r7, #20
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d6b2:	b480      	push	{r7}
 800d6b4:	b087      	sub	sp, #28
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	60f8      	str	r0, [r7, #12]
 800d6ba:	60b9      	str	r1, [r7, #8]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d6d0:	88fa      	ldrh	r2, [r7, #6]
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	371c      	adds	r7, #28
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b085      	sub	sp, #20
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	683a      	ldr	r2, [r7, #0]
 800d6fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d71c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d724:	2b00      	cmp	r3, #0
 800d726:	d017      	beq.n	800d758 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7c1b      	ldrb	r3, [r3, #16]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d109      	bne.n	800d744 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d73a:	2101      	movs	r1, #1
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f004 ff05 	bl	801254c <USBD_LL_PrepareReceive>
 800d742:	e007      	b.n	800d754 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d74a:	2340      	movs	r3, #64	; 0x40
 800d74c:	2101      	movs	r1, #1
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f004 fefc 	bl	801254c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	e000      	b.n	800d75a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d758:	2302      	movs	r3, #2
  }
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b084      	sub	sp, #16
 800d766:	af00      	add	r7, sp, #0
 800d768:	60f8      	str	r0, [r7, #12]
 800d76a:	60b9      	str	r1, [r7, #8]
 800d76c:	4613      	mov	r3, r2
 800d76e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d776:	2302      	movs	r3, #2
 800d778:	e01a      	b.n	800d7b0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2201      	movs	r2, #1
 800d79e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	79fa      	ldrb	r2, [r7, #7]
 800d7a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f004 fcd5 	bl	8012158 <USBD_LL_Init>

  return USBD_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d006      	beq.n	800d7da <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	73fb      	strb	r3, [r7, #15]
 800d7d8:	e001      	b.n	800d7de <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d7da:	2302      	movs	r3, #2
 800d7dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3714      	adds	r7, #20
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f004 fcfb 	bl	80121f0 <USBD_LL_Start>

  return USBD_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	370c      	adds	r7, #12
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	460b      	mov	r3, r1
 800d824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d826:	2302      	movs	r3, #2
 800d828:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00c      	beq.n	800d84e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	78fa      	ldrb	r2, [r7, #3]
 800d83e:	4611      	mov	r1, r2
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	4798      	blx	r3
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	78fa      	ldrb	r2, [r7, #3]
 800d86e:	4611      	mov	r1, r2
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	4798      	blx	r3

  return USBD_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b082      	sub	sp, #8
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	4618      	mov	r0, r3
 800d892:	f000 ff33 	bl	800e6fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d8b2:	f003 031f 	and.w	r3, r3, #31
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d00c      	beq.n	800d8d4 <USBD_LL_SetupStage+0x56>
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d302      	bcc.n	800d8c4 <USBD_LL_SetupStage+0x46>
 800d8be:	2b02      	cmp	r3, #2
 800d8c0:	d010      	beq.n	800d8e4 <USBD_LL_SetupStage+0x66>
 800d8c2:	e017      	b.n	800d8f4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 fa09 	bl	800dce4 <USBD_StdDevReq>
      break;
 800d8d2:	e01a      	b.n	800d90a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fa6b 	bl	800ddb8 <USBD_StdItfReq>
      break;
 800d8e2:	e012      	b.n	800d90a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 faa9 	bl	800de44 <USBD_StdEPReq>
      break;
 800d8f2:	e00a      	b.n	800d90a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d8fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f004 fd1a 	bl	801233c <USBD_LL_StallEP>
      break;
 800d908:	bf00      	nop
  }

  return USBD_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	460b      	mov	r3, r1
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d922:	7afb      	ldrb	r3, [r7, #11]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d14b      	bne.n	800d9c0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d92e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d936:	2b03      	cmp	r3, #3
 800d938:	d134      	bne.n	800d9a4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	68da      	ldr	r2, [r3, #12]
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	429a      	cmp	r2, r3
 800d944:	d919      	bls.n	800d97a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	68da      	ldr	r2, [r3, #12]
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	1ad2      	subs	r2, r2, r3
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d203      	bcs.n	800d968 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d964:	b29b      	uxth	r3, r3
 800d966:	e002      	b.n	800d96e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	461a      	mov	r2, r3
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f000 ffb6 	bl	800e8e4 <USBD_CtlContinueRx>
 800d978:	e038      	b.n	800d9ec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00a      	beq.n	800d99c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d98c:	2b03      	cmp	r3, #3
 800d98e:	d105      	bne.n	800d99c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 ffb3 	bl	800e908 <USBD_CtlSendStatus>
 800d9a2:	e023      	b.n	800d9ec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d9aa:	2b05      	cmp	r3, #5
 800d9ac:	d11e      	bne.n	800d9ec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f004 fcbf 	bl	801233c <USBD_LL_StallEP>
 800d9be:	e015      	b.n	800d9ec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00d      	beq.n	800d9e8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d9d2:	2b03      	cmp	r3, #3
 800d9d4:	d108      	bne.n	800d9e8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	7afa      	ldrb	r2, [r7, #11]
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	4798      	blx	r3
 800d9e6:	e001      	b.n	800d9ec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	e000      	b.n	800d9ee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b086      	sub	sp, #24
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	60f8      	str	r0, [r7, #12]
 800d9fe:	460b      	mov	r3, r1
 800da00:	607a      	str	r2, [r7, #4]
 800da02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800da04:	7afb      	ldrb	r3, [r7, #11]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d17f      	bne.n	800db0a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3314      	adds	r3, #20
 800da0e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da16:	2b02      	cmp	r3, #2
 800da18:	d15c      	bne.n	800dad4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	68da      	ldr	r2, [r3, #12]
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	429a      	cmp	r2, r3
 800da24:	d915      	bls.n	800da52 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	68da      	ldr	r2, [r3, #12]
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	1ad2      	subs	r2, r2, r3
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	461a      	mov	r2, r3
 800da3c:	6879      	ldr	r1, [r7, #4]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f000 ff20 	bl	800e884 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da44:	2300      	movs	r3, #0
 800da46:	2200      	movs	r2, #0
 800da48:	2100      	movs	r1, #0
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f004 fd7e 	bl	801254c <USBD_LL_PrepareReceive>
 800da50:	e04e      	b.n	800daf0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	6912      	ldr	r2, [r2, #16]
 800da5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da5e:	fb02 f201 	mul.w	r2, r2, r1
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	2b00      	cmp	r3, #0
 800da66:	d11c      	bne.n	800daa2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	689a      	ldr	r2, [r3, #8]
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800da70:	429a      	cmp	r2, r3
 800da72:	d316      	bcc.n	800daa2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	689a      	ldr	r2, [r3, #8]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da7e:	429a      	cmp	r2, r3
 800da80:	d20f      	bcs.n	800daa2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da82:	2200      	movs	r2, #0
 800da84:	2100      	movs	r1, #0
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f000 fefc 	bl	800e884 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da94:	2300      	movs	r3, #0
 800da96:	2200      	movs	r2, #0
 800da98:	2100      	movs	r1, #0
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f004 fd56 	bl	801254c <USBD_LL_PrepareReceive>
 800daa0:	e026      	b.n	800daf0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	d105      	bne.n	800dac4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800dac4:	2180      	movs	r1, #128	; 0x80
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f004 fc38 	bl	801233c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 ff2e 	bl	800e92e <USBD_CtlReceiveStatus>
 800dad2:	e00d      	b.n	800daf0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dada:	2b04      	cmp	r3, #4
 800dadc:	d004      	beq.n	800dae8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d103      	bne.n	800daf0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800dae8:	2180      	movs	r1, #128	; 0x80
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f004 fc26 	bl	801233c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d11d      	bne.n	800db36 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff fe82 	bl	800d804 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db08:	e015      	b.n	800db36 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00d      	beq.n	800db32 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800db1c:	2b03      	cmp	r3, #3
 800db1e:	d108      	bne.n	800db32 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	7afa      	ldrb	r2, [r7, #11]
 800db2a:	4611      	mov	r1, r2
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	4798      	blx	r3
 800db30:	e001      	b.n	800db36 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800db32:	2302      	movs	r3, #2
 800db34:	e000      	b.n	800db38 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3718      	adds	r7, #24
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db48:	2340      	movs	r3, #64	; 0x40
 800db4a:	2200      	movs	r2, #0
 800db4c:	2100      	movs	r1, #0
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f004 fb80 	bl	8012254 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2240      	movs	r2, #64	; 0x40
 800db60:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db64:	2340      	movs	r3, #64	; 0x40
 800db66:	2200      	movs	r2, #0
 800db68:	2180      	movs	r1, #128	; 0x80
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f004 fb72 	bl	8012254 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2240      	movs	r2, #64	; 0x40
 800db7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d009      	beq.n	800dbb8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	6852      	ldr	r2, [r2, #4]
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	4798      	blx	r3
  }

  return USBD_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dbc2:	b480      	push	{r7}
 800dbc4:	b083      	sub	sp, #12
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	460b      	mov	r3, r1
 800dbcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	78fa      	ldrb	r2, [r7, #3]
 800dbd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2204      	movs	r2, #4
 800dbfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc1a:	2b04      	cmp	r3, #4
 800dc1c:	d105      	bne.n	800dc2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc46:	2b03      	cmp	r3, #3
 800dc48:	d10b      	bne.n	800dc62 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d005      	beq.n	800dc62 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc5c:	69db      	ldr	r3, [r3, #28]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dc86:	b480      	push	{r7}
 800dc88:	b083      	sub	sp, #12
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	460b      	mov	r3, r1
 800dc90:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b082      	sub	sp, #8
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	6852      	ldr	r2, [r2, #4]
 800dcd2:	b2d2      	uxtb	r2, r2
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	4798      	blx	r3

  return USBD_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcfa:	2b20      	cmp	r3, #32
 800dcfc:	d004      	beq.n	800dd08 <USBD_StdDevReq+0x24>
 800dcfe:	2b40      	cmp	r3, #64	; 0x40
 800dd00:	d002      	beq.n	800dd08 <USBD_StdDevReq+0x24>
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d008      	beq.n	800dd18 <USBD_StdDevReq+0x34>
 800dd06:	e04c      	b.n	800dda2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	4798      	blx	r3
      break;
 800dd16:	e049      	b.n	800ddac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	785b      	ldrb	r3, [r3, #1]
 800dd1c:	2b09      	cmp	r3, #9
 800dd1e:	d83a      	bhi.n	800dd96 <USBD_StdDevReq+0xb2>
 800dd20:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <USBD_StdDevReq+0x44>)
 800dd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd26:	bf00      	nop
 800dd28:	0800dd79 	.word	0x0800dd79
 800dd2c:	0800dd8d 	.word	0x0800dd8d
 800dd30:	0800dd97 	.word	0x0800dd97
 800dd34:	0800dd83 	.word	0x0800dd83
 800dd38:	0800dd97 	.word	0x0800dd97
 800dd3c:	0800dd5b 	.word	0x0800dd5b
 800dd40:	0800dd51 	.word	0x0800dd51
 800dd44:	0800dd97 	.word	0x0800dd97
 800dd48:	0800dd6f 	.word	0x0800dd6f
 800dd4c:	0800dd65 	.word	0x0800dd65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dd50:	6839      	ldr	r1, [r7, #0]
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f9d4 	bl	800e100 <USBD_GetDescriptor>
          break;
 800dd58:	e022      	b.n	800dda0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 fb61 	bl	800e424 <USBD_SetAddress>
          break;
 800dd62:	e01d      	b.n	800dda0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fb9e 	bl	800e4a8 <USBD_SetConfig>
          break;
 800dd6c:	e018      	b.n	800dda0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 fc27 	bl	800e5c4 <USBD_GetConfig>
          break;
 800dd76:	e013      	b.n	800dda0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd78:	6839      	ldr	r1, [r7, #0]
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 fc56 	bl	800e62c <USBD_GetStatus>
          break;
 800dd80:	e00e      	b.n	800dda0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd82:	6839      	ldr	r1, [r7, #0]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 fc84 	bl	800e692 <USBD_SetFeature>
          break;
 800dd8a:	e009      	b.n	800dda0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fc93 	bl	800e6ba <USBD_ClrFeature>
          break;
 800dd94:	e004      	b.n	800dda0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800dd96:	6839      	ldr	r1, [r7, #0]
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 fcec 	bl	800e776 <USBD_CtlError>
          break;
 800dd9e:	bf00      	nop
      }
      break;
 800dda0:	e004      	b.n	800ddac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 fce6 	bl	800e776 <USBD_CtlError>
      break;
 800ddaa:	bf00      	nop
  }

  return ret;
 800ddac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop

0800ddb8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddce:	2b20      	cmp	r3, #32
 800ddd0:	d003      	beq.n	800ddda <USBD_StdItfReq+0x22>
 800ddd2:	2b40      	cmp	r3, #64	; 0x40
 800ddd4:	d001      	beq.n	800ddda <USBD_StdItfReq+0x22>
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d12a      	bne.n	800de30 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dde0:	3b01      	subs	r3, #1
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d81d      	bhi.n	800de22 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	889b      	ldrh	r3, [r3, #4]
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d813      	bhi.n	800de18 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	6839      	ldr	r1, [r7, #0]
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	4798      	blx	r3
 800ddfe:	4603      	mov	r3, r0
 800de00:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	88db      	ldrh	r3, [r3, #6]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d110      	bne.n	800de2c <USBD_StdItfReq+0x74>
 800de0a:	7bfb      	ldrb	r3, [r7, #15]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10d      	bne.n	800de2c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fd79 	bl	800e908 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800de16:	e009      	b.n	800de2c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fcab 	bl	800e776 <USBD_CtlError>
          break;
 800de20:	e004      	b.n	800de2c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fca6 	bl	800e776 <USBD_CtlError>
          break;
 800de2a:	e000      	b.n	800de2e <USBD_StdItfReq+0x76>
          break;
 800de2c:	bf00      	nop
      }
      break;
 800de2e:	e004      	b.n	800de3a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fc9f 	bl	800e776 <USBD_CtlError>
      break;
 800de38:	bf00      	nop
  }

  return USBD_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800de4e:	2300      	movs	r3, #0
 800de50:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	889b      	ldrh	r3, [r3, #4]
 800de56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de60:	2b20      	cmp	r3, #32
 800de62:	d004      	beq.n	800de6e <USBD_StdEPReq+0x2a>
 800de64:	2b40      	cmp	r3, #64	; 0x40
 800de66:	d002      	beq.n	800de6e <USBD_StdEPReq+0x2a>
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d008      	beq.n	800de7e <USBD_StdEPReq+0x3a>
 800de6c:	e13d      	b.n	800e0ea <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	6839      	ldr	r1, [r7, #0]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	4798      	blx	r3
      break;
 800de7c:	e13a      	b.n	800e0f4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de86:	2b20      	cmp	r3, #32
 800de88:	d10a      	bne.n	800dea0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	4798      	blx	r3
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	e12a      	b.n	800e0f6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	785b      	ldrb	r3, [r3, #1]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d03e      	beq.n	800df26 <USBD_StdEPReq+0xe2>
 800dea8:	2b03      	cmp	r3, #3
 800deaa:	d002      	beq.n	800deb2 <USBD_StdEPReq+0x6e>
 800deac:	2b00      	cmp	r3, #0
 800deae:	d070      	beq.n	800df92 <USBD_StdEPReq+0x14e>
 800deb0:	e115      	b.n	800e0de <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d002      	beq.n	800dec2 <USBD_StdEPReq+0x7e>
 800debc:	2b03      	cmp	r3, #3
 800debe:	d015      	beq.n	800deec <USBD_StdEPReq+0xa8>
 800dec0:	e02b      	b.n	800df1a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dec2:	7bbb      	ldrb	r3, [r7, #14]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00c      	beq.n	800dee2 <USBD_StdEPReq+0x9e>
 800dec8:	7bbb      	ldrb	r3, [r7, #14]
 800deca:	2b80      	cmp	r3, #128	; 0x80
 800decc:	d009      	beq.n	800dee2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dece:	7bbb      	ldrb	r3, [r7, #14]
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f004 fa32 	bl	801233c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ded8:	2180      	movs	r1, #128	; 0x80
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f004 fa2e 	bl	801233c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dee0:	e020      	b.n	800df24 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fc46 	bl	800e776 <USBD_CtlError>
              break;
 800deea:	e01b      	b.n	800df24 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	885b      	ldrh	r3, [r3, #2]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10e      	bne.n	800df12 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00b      	beq.n	800df12 <USBD_StdEPReq+0xce>
 800defa:	7bbb      	ldrb	r3, [r7, #14]
 800defc:	2b80      	cmp	r3, #128	; 0x80
 800defe:	d008      	beq.n	800df12 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	88db      	ldrh	r3, [r3, #6]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d104      	bne.n	800df12 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800df08:	7bbb      	ldrb	r3, [r7, #14]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f004 fa15 	bl	801233c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fcf8 	bl	800e908 <USBD_CtlSendStatus>

              break;
 800df18:	e004      	b.n	800df24 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fc2a 	bl	800e776 <USBD_CtlError>
              break;
 800df22:	bf00      	nop
          }
          break;
 800df24:	e0e0      	b.n	800e0e8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d002      	beq.n	800df36 <USBD_StdEPReq+0xf2>
 800df30:	2b03      	cmp	r3, #3
 800df32:	d015      	beq.n	800df60 <USBD_StdEPReq+0x11c>
 800df34:	e026      	b.n	800df84 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df36:	7bbb      	ldrb	r3, [r7, #14]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00c      	beq.n	800df56 <USBD_StdEPReq+0x112>
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	2b80      	cmp	r3, #128	; 0x80
 800df40:	d009      	beq.n	800df56 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	4619      	mov	r1, r3
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f004 f9f8 	bl	801233c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800df4c:	2180      	movs	r1, #128	; 0x80
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f004 f9f4 	bl	801233c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df54:	e01c      	b.n	800df90 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 fc0c 	bl	800e776 <USBD_CtlError>
              break;
 800df5e:	e017      	b.n	800df90 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	885b      	ldrh	r3, [r3, #2]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d112      	bne.n	800df8e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df68:	7bbb      	ldrb	r3, [r7, #14]
 800df6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d004      	beq.n	800df7c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800df72:	7bbb      	ldrb	r3, [r7, #14]
 800df74:	4619      	mov	r1, r3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f004 fa16 	bl	80123a8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 fcc3 	bl	800e908 <USBD_CtlSendStatus>
              }
              break;
 800df82:	e004      	b.n	800df8e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800df84:	6839      	ldr	r1, [r7, #0]
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fbf5 	bl	800e776 <USBD_CtlError>
              break;
 800df8c:	e000      	b.n	800df90 <USBD_StdEPReq+0x14c>
              break;
 800df8e:	bf00      	nop
          }
          break;
 800df90:	e0aa      	b.n	800e0e8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df98:	2b02      	cmp	r3, #2
 800df9a:	d002      	beq.n	800dfa2 <USBD_StdEPReq+0x15e>
 800df9c:	2b03      	cmp	r3, #3
 800df9e:	d032      	beq.n	800e006 <USBD_StdEPReq+0x1c2>
 800dfa0:	e097      	b.n	800e0d2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d007      	beq.n	800dfb8 <USBD_StdEPReq+0x174>
 800dfa8:	7bbb      	ldrb	r3, [r7, #14]
 800dfaa:	2b80      	cmp	r3, #128	; 0x80
 800dfac:	d004      	beq.n	800dfb8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fbe0 	bl	800e776 <USBD_CtlError>
                break;
 800dfb6:	e091      	b.n	800e0dc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	da0b      	bge.n	800dfd8 <USBD_StdEPReq+0x194>
 800dfc0:	7bbb      	ldrb	r3, [r7, #14]
 800dfc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	4413      	add	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	3310      	adds	r3, #16
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	e00b      	b.n	800dff0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfde:	4613      	mov	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	4413      	add	r3, r2
 800dfee:	3304      	adds	r3, #4
 800dff0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	2200      	movs	r2, #0
 800dff6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2202      	movs	r2, #2
 800dffc:	4619      	mov	r1, r3
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fc24 	bl	800e84c <USBD_CtlSendData>
              break;
 800e004:	e06a      	b.n	800e0dc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	da11      	bge.n	800e032 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e00e:	7bbb      	ldrb	r3, [r7, #14]
 800e010:	f003 020f 	and.w	r2, r3, #15
 800e014:	6879      	ldr	r1, [r7, #4]
 800e016:	4613      	mov	r3, r2
 800e018:	009b      	lsls	r3, r3, #2
 800e01a:	4413      	add	r3, r2
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	440b      	add	r3, r1
 800e020:	3318      	adds	r3, #24
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d117      	bne.n	800e058 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800e028:	6839      	ldr	r1, [r7, #0]
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 fba3 	bl	800e776 <USBD_CtlError>
                  break;
 800e030:	e054      	b.n	800e0dc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	f003 020f 	and.w	r2, r3, #15
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	4613      	mov	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	440b      	add	r3, r1
 800e044:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d104      	bne.n	800e058 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800e04e:	6839      	ldr	r1, [r7, #0]
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fb90 	bl	800e776 <USBD_CtlError>
                  break;
 800e056:	e041      	b.n	800e0dc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	da0b      	bge.n	800e078 <USBD_StdEPReq+0x234>
 800e060:	7bbb      	ldrb	r3, [r7, #14]
 800e062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	3310      	adds	r3, #16
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	4413      	add	r3, r2
 800e074:	3304      	adds	r3, #4
 800e076:	e00b      	b.n	800e090 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e078:	7bbb      	ldrb	r3, [r7, #14]
 800e07a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e07e:	4613      	mov	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	4413      	add	r3, r2
 800e08e:	3304      	adds	r3, #4
 800e090:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e092:	7bbb      	ldrb	r3, [r7, #14]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <USBD_StdEPReq+0x25a>
 800e098:	7bbb      	ldrb	r3, [r7, #14]
 800e09a:	2b80      	cmp	r3, #128	; 0x80
 800e09c:	d103      	bne.n	800e0a6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	e00e      	b.n	800e0c4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e0a6:	7bbb      	ldrb	r3, [r7, #14]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f004 f9b2 	bl	8012414 <USBD_LL_IsStallEP>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d003      	beq.n	800e0be <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	e002      	b.n	800e0c4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fbbe 	bl	800e84c <USBD_CtlSendData>
              break;
 800e0d0:	e004      	b.n	800e0dc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fb4e 	bl	800e776 <USBD_CtlError>
              break;
 800e0da:	bf00      	nop
          }
          break;
 800e0dc:	e004      	b.n	800e0e8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fb48 	bl	800e776 <USBD_CtlError>
          break;
 800e0e6:	bf00      	nop
      }
      break;
 800e0e8:	e004      	b.n	800e0f4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 fb42 	bl	800e776 <USBD_CtlError>
      break;
 800e0f2:	bf00      	nop
  }

  return ret;
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
	...

0800e100 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e10a:	2300      	movs	r3, #0
 800e10c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e112:	2300      	movs	r3, #0
 800e114:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	885b      	ldrh	r3, [r3, #2]
 800e11a:	0a1b      	lsrs	r3, r3, #8
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	3b01      	subs	r3, #1
 800e120:	2b0e      	cmp	r3, #14
 800e122:	f200 8152 	bhi.w	800e3ca <USBD_GetDescriptor+0x2ca>
 800e126:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <USBD_GetDescriptor+0x2c>)
 800e128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12c:	0800e19d 	.word	0x0800e19d
 800e130:	0800e1b5 	.word	0x0800e1b5
 800e134:	0800e1f5 	.word	0x0800e1f5
 800e138:	0800e3cb 	.word	0x0800e3cb
 800e13c:	0800e3cb 	.word	0x0800e3cb
 800e140:	0800e36b 	.word	0x0800e36b
 800e144:	0800e397 	.word	0x0800e397
 800e148:	0800e3cb 	.word	0x0800e3cb
 800e14c:	0800e3cb 	.word	0x0800e3cb
 800e150:	0800e3cb 	.word	0x0800e3cb
 800e154:	0800e3cb 	.word	0x0800e3cb
 800e158:	0800e3cb 	.word	0x0800e3cb
 800e15c:	0800e3cb 	.word	0x0800e3cb
 800e160:	0800e3cb 	.word	0x0800e3cb
 800e164:	0800e169 	.word	0x0800e169
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e16e:	69db      	ldr	r3, [r3, #28]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00b      	beq.n	800e18c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e17a:	69db      	ldr	r3, [r3, #28]
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	7c12      	ldrb	r2, [r2, #16]
 800e180:	f107 0108 	add.w	r1, r7, #8
 800e184:	4610      	mov	r0, r2
 800e186:	4798      	blx	r3
 800e188:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e18a:	e126      	b.n	800e3da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 faf1 	bl	800e776 <USBD_CtlError>
        err++;
 800e194:	7afb      	ldrb	r3, [r7, #11]
 800e196:	3301      	adds	r3, #1
 800e198:	72fb      	strb	r3, [r7, #11]
      break;
 800e19a:	e11e      	b.n	800e3da <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	7c12      	ldrb	r2, [r2, #16]
 800e1a8:	f107 0108 	add.w	r1, r7, #8
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	4798      	blx	r3
 800e1b0:	60f8      	str	r0, [r7, #12]
      break;
 800e1b2:	e112      	b.n	800e3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	7c1b      	ldrb	r3, [r3, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10d      	bne.n	800e1d8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c4:	f107 0208 	add.w	r2, r7, #8
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	4798      	blx	r3
 800e1cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e1d6:	e100      	b.n	800e3da <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e0:	f107 0208 	add.w	r2, r7, #8
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4798      	blx	r3
 800e1e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	2202      	movs	r2, #2
 800e1f0:	701a      	strb	r2, [r3, #0]
      break;
 800e1f2:	e0f2      	b.n	800e3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	885b      	ldrh	r3, [r3, #2]
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	2b05      	cmp	r3, #5
 800e1fc:	f200 80ac 	bhi.w	800e358 <USBD_GetDescriptor+0x258>
 800e200:	a201      	add	r2, pc, #4	; (adr r2, 800e208 <USBD_GetDescriptor+0x108>)
 800e202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e206:	bf00      	nop
 800e208:	0800e221 	.word	0x0800e221
 800e20c:	0800e255 	.word	0x0800e255
 800e210:	0800e289 	.word	0x0800e289
 800e214:	0800e2bd 	.word	0x0800e2bd
 800e218:	0800e2f1 	.word	0x0800e2f1
 800e21c:	0800e325 	.word	0x0800e325
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00b      	beq.n	800e244 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	7c12      	ldrb	r2, [r2, #16]
 800e238:	f107 0108 	add.w	r1, r7, #8
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e242:	e091      	b.n	800e368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fa95 	bl	800e776 <USBD_CtlError>
            err++;
 800e24c:	7afb      	ldrb	r3, [r7, #11]
 800e24e:	3301      	adds	r3, #1
 800e250:	72fb      	strb	r3, [r7, #11]
          break;
 800e252:	e089      	b.n	800e368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00b      	beq.n	800e278 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	7c12      	ldrb	r2, [r2, #16]
 800e26c:	f107 0108 	add.w	r1, r7, #8
 800e270:	4610      	mov	r0, r2
 800e272:	4798      	blx	r3
 800e274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e276:	e077      	b.n	800e368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fa7b 	bl	800e776 <USBD_CtlError>
            err++;
 800e280:	7afb      	ldrb	r3, [r7, #11]
 800e282:	3301      	adds	r3, #1
 800e284:	72fb      	strb	r3, [r7, #11]
          break;
 800e286:	e06f      	b.n	800e368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00b      	beq.n	800e2ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	7c12      	ldrb	r2, [r2, #16]
 800e2a0:	f107 0108 	add.w	r1, r7, #8
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	4798      	blx	r3
 800e2a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2aa:	e05d      	b.n	800e368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fa61 	bl	800e776 <USBD_CtlError>
            err++;
 800e2b4:	7afb      	ldrb	r3, [r7, #11]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ba:	e055      	b.n	800e368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00b      	beq.n	800e2e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	7c12      	ldrb	r2, [r2, #16]
 800e2d4:	f107 0108 	add.w	r1, r7, #8
 800e2d8:	4610      	mov	r0, r2
 800e2da:	4798      	blx	r3
 800e2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2de:	e043      	b.n	800e368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fa47 	bl	800e776 <USBD_CtlError>
            err++;
 800e2e8:	7afb      	ldrb	r3, [r7, #11]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ee:	e03b      	b.n	800e368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00b      	beq.n	800e314 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	7c12      	ldrb	r2, [r2, #16]
 800e308:	f107 0108 	add.w	r1, r7, #8
 800e30c:	4610      	mov	r0, r2
 800e30e:	4798      	blx	r3
 800e310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e312:	e029      	b.n	800e368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e314:	6839      	ldr	r1, [r7, #0]
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fa2d 	bl	800e776 <USBD_CtlError>
            err++;
 800e31c:	7afb      	ldrb	r3, [r7, #11]
 800e31e:	3301      	adds	r3, #1
 800e320:	72fb      	strb	r3, [r7, #11]
          break;
 800e322:	e021      	b.n	800e368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00b      	beq.n	800e348 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e336:	699b      	ldr	r3, [r3, #24]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	7c12      	ldrb	r2, [r2, #16]
 800e33c:	f107 0108 	add.w	r1, r7, #8
 800e340:	4610      	mov	r0, r2
 800e342:	4798      	blx	r3
 800e344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e346:	e00f      	b.n	800e368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fa13 	bl	800e776 <USBD_CtlError>
            err++;
 800e350:	7afb      	ldrb	r3, [r7, #11]
 800e352:	3301      	adds	r3, #1
 800e354:	72fb      	strb	r3, [r7, #11]
          break;
 800e356:	e007      	b.n	800e368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e358:	6839      	ldr	r1, [r7, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fa0b 	bl	800e776 <USBD_CtlError>
          err++;
 800e360:	7afb      	ldrb	r3, [r7, #11]
 800e362:	3301      	adds	r3, #1
 800e364:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800e366:	e038      	b.n	800e3da <USBD_GetDescriptor+0x2da>
 800e368:	e037      	b.n	800e3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	7c1b      	ldrb	r3, [r3, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d109      	bne.n	800e386 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37a:	f107 0208 	add.w	r2, r7, #8
 800e37e:	4610      	mov	r0, r2
 800e380:	4798      	blx	r3
 800e382:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e384:	e029      	b.n	800e3da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f9f4 	bl	800e776 <USBD_CtlError>
        err++;
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	3301      	adds	r3, #1
 800e392:	72fb      	strb	r3, [r7, #11]
      break;
 800e394:	e021      	b.n	800e3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	7c1b      	ldrb	r3, [r3, #16]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10d      	bne.n	800e3ba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3a6:	f107 0208 	add.w	r2, r7, #8
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	4798      	blx	r3
 800e3ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	2207      	movs	r2, #7
 800e3b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3b8:	e00f      	b.n	800e3da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f9da 	bl	800e776 <USBD_CtlError>
        err++;
 800e3c2:	7afb      	ldrb	r3, [r7, #11]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e3c8:	e007      	b.n	800e3da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f9d2 	bl	800e776 <USBD_CtlError>
      err++;
 800e3d2:	7afb      	ldrb	r3, [r7, #11]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e3d8:	bf00      	nop
  }

  if (err != 0U)
 800e3da:	7afb      	ldrb	r3, [r7, #11]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d11c      	bne.n	800e41a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e3e0:	893b      	ldrh	r3, [r7, #8]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d011      	beq.n	800e40a <USBD_GetDescriptor+0x30a>
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	88db      	ldrh	r3, [r3, #6]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00d      	beq.n	800e40a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	88da      	ldrh	r2, [r3, #6]
 800e3f2:	893b      	ldrh	r3, [r7, #8]
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	bf28      	it	cs
 800e3f8:	4613      	movcs	r3, r2
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3fe:	893b      	ldrh	r3, [r7, #8]
 800e400:	461a      	mov	r2, r3
 800e402:	68f9      	ldr	r1, [r7, #12]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fa21 	bl	800e84c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	88db      	ldrh	r3, [r3, #6]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d104      	bne.n	800e41c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fa78 	bl	800e908 <USBD_CtlSendStatus>
 800e418:	e000      	b.n	800e41c <USBD_GetDescriptor+0x31c>
    return;
 800e41a:	bf00      	nop
    }
  }
}
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop

0800e424 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	889b      	ldrh	r3, [r3, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d130      	bne.n	800e498 <USBD_SetAddress+0x74>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	88db      	ldrh	r3, [r3, #6]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d12c      	bne.n	800e498 <USBD_SetAddress+0x74>
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	885b      	ldrh	r3, [r3, #2]
 800e442:	2b7f      	cmp	r3, #127	; 0x7f
 800e444:	d828      	bhi.n	800e498 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	885b      	ldrh	r3, [r3, #2]
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e450:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e458:	2b03      	cmp	r3, #3
 800e45a:	d104      	bne.n	800e466 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e45c:	6839      	ldr	r1, [r7, #0]
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f989 	bl	800e776 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e464:	e01c      	b.n	800e4a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	7bfa      	ldrb	r2, [r7, #15]
 800e46a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f003 fffa 	bl	801246c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 fa45 	bl	800e908 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2202      	movs	r2, #2
 800e488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e48c:	e008      	b.n	800e4a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2201      	movs	r2, #1
 800e492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e496:	e003      	b.n	800e4a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e498:	6839      	ldr	r1, [r7, #0]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f96b 	bl	800e776 <USBD_CtlError>
  }
}
 800e4a0:	bf00      	nop
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	885b      	ldrh	r3, [r3, #2]
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	4b41      	ldr	r3, [pc, #260]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e4ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e4bc:	4b40      	ldr	r3, [pc, #256]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d904      	bls.n	800e4ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f955 	bl	800e776 <USBD_CtlError>
 800e4cc:	e075      	b.n	800e5ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d002      	beq.n	800e4de <USBD_SetConfig+0x36>
 800e4d8:	2b03      	cmp	r3, #3
 800e4da:	d023      	beq.n	800e524 <USBD_SetConfig+0x7c>
 800e4dc:	e062      	b.n	800e5a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e4de:	4b38      	ldr	r3, [pc, #224]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d01a      	beq.n	800e51c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e4e6:	4b36      	ldr	r3, [pc, #216]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2203      	movs	r2, #3
 800e4f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e4f8:	4b31      	ldr	r3, [pc, #196]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f7ff f98b 	bl	800d81a <USBD_SetClassConfig>
 800e504:	4603      	mov	r3, r0
 800e506:	2b02      	cmp	r3, #2
 800e508:	d104      	bne.n	800e514 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f932 	bl	800e776 <USBD_CtlError>
            return;
 800e512:	e052      	b.n	800e5ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 f9f7 	bl	800e908 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e51a:	e04e      	b.n	800e5ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f9f3 	bl	800e908 <USBD_CtlSendStatus>
        break;
 800e522:	e04a      	b.n	800e5ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e524:	4b26      	ldr	r3, [pc, #152]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d112      	bne.n	800e552 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2202      	movs	r2, #2
 800e530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e534:	4b22      	ldr	r3, [pc, #136]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	461a      	mov	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e53e:	4b20      	ldr	r3, [pc, #128]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	4619      	mov	r1, r3
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7ff f987 	bl	800d858 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f9dc 	bl	800e908 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e550:	e033      	b.n	800e5ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e552:	4b1b      	ldr	r3, [pc, #108]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	461a      	mov	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d01d      	beq.n	800e59c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	b2db      	uxtb	r3, r3
 800e566:	4619      	mov	r1, r3
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7ff f975 	bl	800d858 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e56e:	4b14      	ldr	r3, [pc, #80]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e578:	4b11      	ldr	r3, [pc, #68]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff f94b 	bl	800d81a <USBD_SetClassConfig>
 800e584:	4603      	mov	r3, r0
 800e586:	2b02      	cmp	r3, #2
 800e588:	d104      	bne.n	800e594 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 f8f2 	bl	800e776 <USBD_CtlError>
            return;
 800e592:	e012      	b.n	800e5ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 f9b7 	bl	800e908 <USBD_CtlSendStatus>
        break;
 800e59a:	e00e      	b.n	800e5ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 f9b3 	bl	800e908 <USBD_CtlSendStatus>
        break;
 800e5a2:	e00a      	b.n	800e5ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e5a4:	6839      	ldr	r1, [r7, #0]
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f8e5 	bl	800e776 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <USBD_SetConfig+0x118>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff f950 	bl	800d858 <USBD_ClrClassConfig>
        break;
 800e5b8:	bf00      	nop
    }
  }
}
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	200004dc 	.word	0x200004dc

0800e5c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	88db      	ldrh	r3, [r3, #6]
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d004      	beq.n	800e5e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 f8cc 	bl	800e776 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e5de:	e021      	b.n	800e624 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	db17      	blt.n	800e61a <USBD_GetConfig+0x56>
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	dd02      	ble.n	800e5f4 <USBD_GetConfig+0x30>
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d00b      	beq.n	800e60a <USBD_GetConfig+0x46>
 800e5f2:	e012      	b.n	800e61a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	3308      	adds	r3, #8
 800e5fe:	2201      	movs	r2, #1
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f922 	bl	800e84c <USBD_CtlSendData>
        break;
 800e608:	e00c      	b.n	800e624 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	3304      	adds	r3, #4
 800e60e:	2201      	movs	r2, #1
 800e610:	4619      	mov	r1, r3
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f91a 	bl	800e84c <USBD_CtlSendData>
        break;
 800e618:	e004      	b.n	800e624 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 f8aa 	bl	800e776 <USBD_CtlError>
        break;
 800e622:	bf00      	nop
}
 800e624:	bf00      	nop
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e63c:	3b01      	subs	r3, #1
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d81e      	bhi.n	800e680 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	88db      	ldrh	r3, [r3, #6]
 800e646:	2b02      	cmp	r3, #2
 800e648:	d004      	beq.n	800e654 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e64a:	6839      	ldr	r1, [r7, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f892 	bl	800e776 <USBD_CtlError>
        break;
 800e652:	e01a      	b.n	800e68a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e660:	2b00      	cmp	r3, #0
 800e662:	d005      	beq.n	800e670 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	f043 0202 	orr.w	r2, r3, #2
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	330c      	adds	r3, #12
 800e674:	2202      	movs	r2, #2
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 f8e7 	bl	800e84c <USBD_CtlSendData>
      break;
 800e67e:	e004      	b.n	800e68a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f877 	bl	800e776 <USBD_CtlError>
      break;
 800e688:	bf00      	nop
  }
}
 800e68a:	bf00      	nop
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b082      	sub	sp, #8
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
 800e69a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	885b      	ldrh	r3, [r3, #2]
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d106      	bne.n	800e6b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 f92b 	bl	800e908 <USBD_CtlSendStatus>
  }
}
 800e6b2:	bf00      	nop
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b082      	sub	sp, #8
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d80b      	bhi.n	800e6e8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	885b      	ldrh	r3, [r3, #2]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d10c      	bne.n	800e6f2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f911 	bl	800e908 <USBD_CtlSendStatus>
      }
      break;
 800e6e6:	e004      	b.n	800e6f2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e6e8:	6839      	ldr	r1, [r7, #0]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f843 	bl	800e776 <USBD_CtlError>
      break;
 800e6f0:	e000      	b.n	800e6f4 <USBD_ClrFeature+0x3a>
      break;
 800e6f2:	bf00      	nop
  }
}
 800e6f4:	bf00      	nop
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	781a      	ldrb	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	785a      	ldrb	r2, [r3, #1]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	3302      	adds	r3, #2
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	3303      	adds	r3, #3
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	b29b      	uxth	r3, r3
 800e726:	021b      	lsls	r3, r3, #8
 800e728:	b29b      	uxth	r3, r3
 800e72a:	4413      	add	r3, r2
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	3304      	adds	r3, #4
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	b29a      	uxth	r2, r3
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	3305      	adds	r3, #5
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	b29b      	uxth	r3, r3
 800e742:	021b      	lsls	r3, r3, #8
 800e744:	b29b      	uxth	r3, r3
 800e746:	4413      	add	r3, r2
 800e748:	b29a      	uxth	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	3306      	adds	r3, #6
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	b29a      	uxth	r2, r3
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	3307      	adds	r3, #7
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	021b      	lsls	r3, r3, #8
 800e760:	b29b      	uxth	r3, r3
 800e762:	4413      	add	r3, r2
 800e764:	b29a      	uxth	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	80da      	strh	r2, [r3, #6]

}
 800e76a:	bf00      	nop
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b082      	sub	sp, #8
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e780:	2180      	movs	r1, #128	; 0x80
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f003 fdda 	bl	801233c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e788:	2100      	movs	r1, #0
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f003 fdd6 	bl	801233c <USBD_LL_StallEP>
}
 800e790:	bf00      	nop
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d032      	beq.n	800e814 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f000 f834 	bl	800e81c <USBD_GetLen>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	005b      	lsls	r3, r3, #1
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e7c2:	7dfb      	ldrb	r3, [r7, #23]
 800e7c4:	1c5a      	adds	r2, r3, #1
 800e7c6:	75fa      	strb	r2, [r7, #23]
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	7812      	ldrb	r2, [r2, #0]
 800e7d2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e7d4:	7dfb      	ldrb	r3, [r7, #23]
 800e7d6:	1c5a      	adds	r2, r3, #1
 800e7d8:	75fa      	strb	r2, [r7, #23]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	4413      	add	r3, r2
 800e7e0:	2203      	movs	r2, #3
 800e7e2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e7e4:	e012      	b.n	800e80c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	1c5a      	adds	r2, r3, #1
 800e7ea:	60fa      	str	r2, [r7, #12]
 800e7ec:	7dfa      	ldrb	r2, [r7, #23]
 800e7ee:	1c51      	adds	r1, r2, #1
 800e7f0:	75f9      	strb	r1, [r7, #23]
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	440a      	add	r2, r1
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	75fa      	strb	r2, [r7, #23]
 800e802:	461a      	mov	r2, r3
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	4413      	add	r3, r2
 800e808:	2200      	movs	r2, #0
 800e80a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1e8      	bne.n	800e7e6 <USBD_GetString+0x4e>
    }
  }
}
 800e814:	bf00      	nop
 800e816:	3718      	adds	r7, #24
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e824:	2300      	movs	r3, #0
 800e826:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e828:	e005      	b.n	800e836 <USBD_GetLen+0x1a>
  {
    len++;
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	3301      	adds	r3, #1
 800e82e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	3301      	adds	r3, #1
 800e834:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1f5      	bne.n	800e82a <USBD_GetLen+0xe>
  }

  return len;
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	4613      	mov	r3, r2
 800e858:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2202      	movs	r2, #2
 800e85e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e862:	88fa      	ldrh	r2, [r7, #6]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e868:	88fa      	ldrh	r2, [r7, #6]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e86e:	88fb      	ldrh	r3, [r7, #6]
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	2100      	movs	r1, #0
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f003 fe2f 	bl	80124d8 <USBD_LL_Transmit>

  return USBD_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	4613      	mov	r3, r2
 800e890:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e892:	88fb      	ldrh	r3, [r7, #6]
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	2100      	movs	r1, #0
 800e898:	68f8      	ldr	r0, [r7, #12]
 800e89a:	f003 fe1d 	bl	80124d8 <USBD_LL_Transmit>

  return USBD_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2203      	movs	r2, #3
 800e8ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e8be:	88fa      	ldrh	r2, [r7, #6]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e8c6:	88fa      	ldrh	r2, [r7, #6]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e8ce:	88fb      	ldrh	r3, [r7, #6]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f003 fe39 	bl	801254c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e8f2:	88fb      	ldrh	r3, [r7, #6]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f003 fe27 	bl	801254c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2204      	movs	r2, #4
 800e914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e918:	2300      	movs	r3, #0
 800e91a:	2200      	movs	r2, #0
 800e91c:	2100      	movs	r1, #0
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f003 fdda 	bl	80124d8 <USBD_LL_Transmit>

  return USBD_OK;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b082      	sub	sp, #8
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2205      	movs	r2, #5
 800e93a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e93e:	2300      	movs	r3, #0
 800e940:	2200      	movs	r2, #0
 800e942:	2100      	movs	r1, #0
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f003 fe01 	bl	801254c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e958:	bf00      	nop
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
	...

0800e964 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e96a:	f3ef 8305 	mrs	r3, IPSR
 800e96e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e970:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10f      	bne.n	800e996 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e976:	f3ef 8310 	mrs	r3, PRIMASK
 800e97a:	607b      	str	r3, [r7, #4]
  return(result);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d105      	bne.n	800e98e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e982:	f3ef 8311 	mrs	r3, BASEPRI
 800e986:	603b      	str	r3, [r7, #0]
  return(result);
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d007      	beq.n	800e99e <osKernelInitialize+0x3a>
 800e98e:	4b0e      	ldr	r3, [pc, #56]	; (800e9c8 <osKernelInitialize+0x64>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2b02      	cmp	r3, #2
 800e994:	d103      	bne.n	800e99e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e996:	f06f 0305 	mvn.w	r3, #5
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	e00c      	b.n	800e9b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e99e:	4b0a      	ldr	r3, [pc, #40]	; (800e9c8 <osKernelInitialize+0x64>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d105      	bne.n	800e9b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e9a6:	4b08      	ldr	r3, [pc, #32]	; (800e9c8 <osKernelInitialize+0x64>)
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	60fb      	str	r3, [r7, #12]
 800e9b0:	e002      	b.n	800e9b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e9b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	200004e0 	.word	0x200004e0

0800e9cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9d2:	f3ef 8305 	mrs	r3, IPSR
 800e9d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e9d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10f      	bne.n	800e9fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9de:	f3ef 8310 	mrs	r3, PRIMASK
 800e9e2:	607b      	str	r3, [r7, #4]
  return(result);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d105      	bne.n	800e9f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9ea:	f3ef 8311 	mrs	r3, BASEPRI
 800e9ee:	603b      	str	r3, [r7, #0]
  return(result);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d007      	beq.n	800ea06 <osKernelStart+0x3a>
 800e9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ea34 <osKernelStart+0x68>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d103      	bne.n	800ea06 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e9fe:	f06f 0305 	mvn.w	r3, #5
 800ea02:	60fb      	str	r3, [r7, #12]
 800ea04:	e010      	b.n	800ea28 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ea06:	4b0b      	ldr	r3, [pc, #44]	; (800ea34 <osKernelStart+0x68>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d109      	bne.n	800ea22 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ea0e:	f7ff ffa1 	bl	800e954 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ea12:	4b08      	ldr	r3, [pc, #32]	; (800ea34 <osKernelStart+0x68>)
 800ea14:	2202      	movs	r2, #2
 800ea16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ea18:	f001 faee 	bl	800fff8 <vTaskStartScheduler>
      stat = osOK;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	60fb      	str	r3, [r7, #12]
 800ea20:	e002      	b.n	800ea28 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ea22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ea28:	68fb      	ldr	r3, [r7, #12]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	200004e0 	.word	0x200004e0

0800ea38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b090      	sub	sp, #64	; 0x40
 800ea3c:	af04      	add	r7, sp, #16
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ea44:	2300      	movs	r3, #0
 800ea46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea48:	f3ef 8305 	mrs	r3, IPSR
 800ea4c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ea4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f040 808f 	bne.w	800eb74 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea56:	f3ef 8310 	mrs	r3, PRIMASK
 800ea5a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d105      	bne.n	800ea6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea62:	f3ef 8311 	mrs	r3, BASEPRI
 800ea66:	617b      	str	r3, [r7, #20]
  return(result);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d003      	beq.n	800ea76 <osThreadNew+0x3e>
 800ea6e:	4b44      	ldr	r3, [pc, #272]	; (800eb80 <osThreadNew+0x148>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d07e      	beq.n	800eb74 <osThreadNew+0x13c>
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d07b      	beq.n	800eb74 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ea7c:	2380      	movs	r3, #128	; 0x80
 800ea7e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ea80:	2318      	movs	r3, #24
 800ea82:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ea84:	2300      	movs	r3, #0
 800ea86:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ea88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d045      	beq.n	800eb20 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d002      	beq.n	800eaa2 <osThreadNew+0x6a>
        name = attr->name;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	699b      	ldr	r3, [r3, #24]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d002      	beq.n	800eab0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	699b      	ldr	r3, [r3, #24]
 800eaae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d008      	beq.n	800eac8 <osThreadNew+0x90>
 800eab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab8:	2b38      	cmp	r3, #56	; 0x38
 800eaba:	d805      	bhi.n	800eac8 <osThreadNew+0x90>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	f003 0301 	and.w	r3, r3, #1
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d001      	beq.n	800eacc <osThreadNew+0x94>
        return (NULL);
 800eac8:	2300      	movs	r3, #0
 800eaca:	e054      	b.n	800eb76 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	695b      	ldr	r3, [r3, #20]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d003      	beq.n	800eadc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	695b      	ldr	r3, [r3, #20]
 800ead8:	089b      	lsrs	r3, r3, #2
 800eada:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00e      	beq.n	800eb02 <osThreadNew+0xca>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	2b5b      	cmp	r3, #91	; 0x5b
 800eaea:	d90a      	bls.n	800eb02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d006      	beq.n	800eb02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	695b      	ldr	r3, [r3, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <osThreadNew+0xca>
        mem = 1;
 800eafc:	2301      	movs	r3, #1
 800eafe:	623b      	str	r3, [r7, #32]
 800eb00:	e010      	b.n	800eb24 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d10c      	bne.n	800eb24 <osThreadNew+0xec>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68db      	ldr	r3, [r3, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d108      	bne.n	800eb24 <osThreadNew+0xec>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d104      	bne.n	800eb24 <osThreadNew+0xec>
          mem = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	623b      	str	r3, [r7, #32]
 800eb1e:	e001      	b.n	800eb24 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800eb20:	2300      	movs	r3, #0
 800eb22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d110      	bne.n	800eb4c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb32:	9202      	str	r2, [sp, #8]
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f000 ff9b 	bl	800fa7c <xTaskCreateStatic>
 800eb46:	4603      	mov	r3, r0
 800eb48:	613b      	str	r3, [r7, #16]
 800eb4a:	e013      	b.n	800eb74 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800eb4c:	6a3b      	ldr	r3, [r7, #32]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d110      	bne.n	800eb74 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800eb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	f107 0310 	add.w	r3, r7, #16
 800eb5a:	9301      	str	r3, [sp, #4]
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f000 ffe3 	bl	800fb30 <xTaskCreate>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d001      	beq.n	800eb74 <osThreadNew+0x13c>
          hTask = NULL;
 800eb70:	2300      	movs	r3, #0
 800eb72:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800eb74:	693b      	ldr	r3, [r7, #16]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3730      	adds	r7, #48	; 0x30
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	200004e0 	.word	0x200004e0

0800eb84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb8c:	f3ef 8305 	mrs	r3, IPSR
 800eb90:	613b      	str	r3, [r7, #16]
  return(result);
 800eb92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10f      	bne.n	800ebb8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb98:	f3ef 8310 	mrs	r3, PRIMASK
 800eb9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d105      	bne.n	800ebb0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eba4:	f3ef 8311 	mrs	r3, BASEPRI
 800eba8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d007      	beq.n	800ebc0 <osDelay+0x3c>
 800ebb0:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <osDelay+0x58>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	d103      	bne.n	800ebc0 <osDelay+0x3c>
    stat = osErrorISR;
 800ebb8:	f06f 0305 	mvn.w	r3, #5
 800ebbc:	617b      	str	r3, [r7, #20]
 800ebbe:	e007      	b.n	800ebd0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d002      	beq.n	800ebd0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f001 f9e0 	bl	800ff90 <vTaskDelay>
    }
  }

  return (stat);
 800ebd0:	697b      	ldr	r3, [r7, #20]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	200004e0 	.word	0x200004e0

0800ebe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	4a07      	ldr	r2, [pc, #28]	; (800ec0c <vApplicationGetIdleTaskMemory+0x2c>)
 800ebf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	4a06      	ldr	r2, [pc, #24]	; (800ec10 <vApplicationGetIdleTaskMemory+0x30>)
 800ebf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2280      	movs	r2, #128	; 0x80
 800ebfc:	601a      	str	r2, [r3, #0]
}
 800ebfe:	bf00      	nop
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	200004e4 	.word	0x200004e4
 800ec10:	20000540 	.word	0x20000540

0800ec14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	4a07      	ldr	r2, [pc, #28]	; (800ec40 <vApplicationGetTimerTaskMemory+0x2c>)
 800ec24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	4a06      	ldr	r2, [pc, #24]	; (800ec44 <vApplicationGetTimerTaskMemory+0x30>)
 800ec2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec32:	601a      	str	r2, [r3, #0]
}
 800ec34:	bf00      	nop
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	20000740 	.word	0x20000740
 800ec44:	2000079c 	.word	0x2000079c

0800ec48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f103 0208 	add.w	r2, r3, #8
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f103 0208 	add.w	r2, r3, #8
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f103 0208 	add.w	r2, r3, #8
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec96:	bf00      	nop
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr

0800eca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eca2:	b480      	push	{r7}
 800eca4:	b085      	sub	sp, #20
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	689a      	ldr	r2, [r3, #8]
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	683a      	ldr	r2, [r7, #0]
 800ecc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	601a      	str	r2, [r3, #0]
}
 800ecde:	bf00      	nop
 800ece0:	3714      	adds	r7, #20
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecea:	b480      	push	{r7}
 800ecec:	b085      	sub	sp, #20
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed00:	d103      	bne.n	800ed0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	691b      	ldr	r3, [r3, #16]
 800ed06:	60fb      	str	r3, [r7, #12]
 800ed08:	e00c      	b.n	800ed24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	3308      	adds	r3, #8
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	e002      	b.n	800ed18 <vListInsert+0x2e>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d2f6      	bcs.n	800ed12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	685a      	ldr	r2, [r3, #4]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	683a      	ldr	r2, [r7, #0]
 800ed3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	1c5a      	adds	r2, r3, #1
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	601a      	str	r2, [r3, #0]
}
 800ed50:	bf00      	nop
 800ed52:	3714      	adds	r7, #20
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	691b      	ldr	r3, [r3, #16]
 800ed68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	6892      	ldr	r2, [r2, #8]
 800ed72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	6852      	ldr	r2, [r2, #4]
 800ed7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d103      	bne.n	800ed90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	1e5a      	subs	r2, r3, #1
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d109      	bne.n	800edd8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	60bb      	str	r3, [r7, #8]
 800edd6:	e7fe      	b.n	800edd6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800edd8:	f002 fb88 	bl	80114ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ede4:	68f9      	ldr	r1, [r7, #12]
 800ede6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ede8:	fb01 f303 	mul.w	r3, r1, r3
 800edec:	441a      	add	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	68f9      	ldr	r1, [r7, #12]
 800ee0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee0e:	fb01 f303 	mul.w	r3, r1, r3
 800ee12:	441a      	add	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	22ff      	movs	r2, #255	; 0xff
 800ee1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	22ff      	movs	r2, #255	; 0xff
 800ee24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d114      	bne.n	800ee58 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	691b      	ldr	r3, [r3, #16]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d01a      	beq.n	800ee6c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	3310      	adds	r3, #16
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f001 fb5c 	bl	80104f8 <xTaskRemoveFromEventList>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d012      	beq.n	800ee6c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ee46:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <xQueueGenericReset+0xcc>)
 800ee48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee4c:	601a      	str	r2, [r3, #0]
 800ee4e:	f3bf 8f4f 	dsb	sy
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	e009      	b.n	800ee6c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	3310      	adds	r3, #16
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff fef3 	bl	800ec48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3324      	adds	r3, #36	; 0x24
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff feee 	bl	800ec48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ee6c:	f002 fb6c 	bl	8011548 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ee70:	2301      	movs	r3, #1
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	e000ed04 	.word	0xe000ed04

0800ee80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b08e      	sub	sp, #56	; 0x38
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d109      	bne.n	800eea8 <xQueueGenericCreateStatic+0x28>
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	62bb      	str	r3, [r7, #40]	; 0x28
 800eea6:	e7fe      	b.n	800eea6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d109      	bne.n	800eec2 <xQueueGenericCreateStatic+0x42>
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	627b      	str	r3, [r7, #36]	; 0x24
 800eec0:	e7fe      	b.n	800eec0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <xQueueGenericCreateStatic+0x4e>
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <xQueueGenericCreateStatic+0x52>
 800eece:	2301      	movs	r3, #1
 800eed0:	e000      	b.n	800eed4 <xQueueGenericCreateStatic+0x54>
 800eed2:	2300      	movs	r3, #0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d109      	bne.n	800eeec <xQueueGenericCreateStatic+0x6c>
 800eed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eedc:	f383 8811 	msr	BASEPRI, r3
 800eee0:	f3bf 8f6f 	isb	sy
 800eee4:	f3bf 8f4f 	dsb	sy
 800eee8:	623b      	str	r3, [r7, #32]
 800eeea:	e7fe      	b.n	800eeea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d102      	bne.n	800eef8 <xQueueGenericCreateStatic+0x78>
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d101      	bne.n	800eefc <xQueueGenericCreateStatic+0x7c>
 800eef8:	2301      	movs	r3, #1
 800eefa:	e000      	b.n	800eefe <xQueueGenericCreateStatic+0x7e>
 800eefc:	2300      	movs	r3, #0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d109      	bne.n	800ef16 <xQueueGenericCreateStatic+0x96>
 800ef02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef06:	f383 8811 	msr	BASEPRI, r3
 800ef0a:	f3bf 8f6f 	isb	sy
 800ef0e:	f3bf 8f4f 	dsb	sy
 800ef12:	61fb      	str	r3, [r7, #28]
 800ef14:	e7fe      	b.n	800ef14 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef16:	2350      	movs	r3, #80	; 0x50
 800ef18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	2b50      	cmp	r3, #80	; 0x50
 800ef1e:	d009      	beq.n	800ef34 <xQueueGenericCreateStatic+0xb4>
 800ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef24:	f383 8811 	msr	BASEPRI, r3
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	61bb      	str	r3, [r7, #24]
 800ef32:	e7fe      	b.n	800ef32 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00d      	beq.n	800ef5c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef42:	2201      	movs	r2, #1
 800ef44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ef4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4e:	9300      	str	r3, [sp, #0]
 800ef50:	4613      	mov	r3, r2
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	68b9      	ldr	r1, [r7, #8]
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f000 f844 	bl	800efe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3730      	adds	r7, #48	; 0x30
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b08a      	sub	sp, #40	; 0x28
 800ef6a:	af02      	add	r7, sp, #8
 800ef6c:	60f8      	str	r0, [r7, #12]
 800ef6e:	60b9      	str	r1, [r7, #8]
 800ef70:	4613      	mov	r3, r2
 800ef72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d109      	bne.n	800ef8e <xQueueGenericCreate+0x28>
 800ef7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7e:	f383 8811 	msr	BASEPRI, r3
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	f3bf 8f4f 	dsb	sy
 800ef8a:	613b      	str	r3, [r7, #16]
 800ef8c:	e7fe      	b.n	800ef8c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ef94:	2300      	movs	r3, #0
 800ef96:	61fb      	str	r3, [r7, #28]
 800ef98:	e004      	b.n	800efa4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	fb02 f303 	mul.w	r3, r2, r3
 800efa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	3350      	adds	r3, #80	; 0x50
 800efa8:	4618      	mov	r0, r3
 800efaa:	f002 fbb9 	bl	8011720 <pvPortMalloc>
 800efae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d011      	beq.n	800efda <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	3350      	adds	r3, #80	; 0x50
 800efbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800efc8:	79fa      	ldrb	r2, [r7, #7]
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	4613      	mov	r3, r2
 800efd0:	697a      	ldr	r2, [r7, #20]
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 f805 	bl	800efe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800efda:	69bb      	ldr	r3, [r7, #24]
	}
 800efdc:	4618      	mov	r0, r3
 800efde:	3720      	adds	r7, #32
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d103      	bne.n	800f000 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	69ba      	ldr	r2, [r7, #24]
 800effc:	601a      	str	r2, [r3, #0]
 800effe:	e002      	b.n	800f006 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f012:	2101      	movs	r1, #1
 800f014:	69b8      	ldr	r0, [r7, #24]
 800f016:	f7ff fecb 	bl	800edb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	78fa      	ldrb	r2, [r7, #3]
 800f01e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f022:	bf00      	nop
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b082      	sub	sp, #8
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00e      	beq.n	800f056 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f04a:	2300      	movs	r3, #0
 800f04c:	2200      	movs	r2, #0
 800f04e:	2100      	movs	r1, #0
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 f81d 	bl	800f090 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f056:	bf00      	nop
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b086      	sub	sp, #24
 800f062:	af00      	add	r7, sp, #0
 800f064:	4603      	mov	r3, r0
 800f066:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f068:	2301      	movs	r3, #1
 800f06a:	617b      	str	r3, [r7, #20]
 800f06c:	2300      	movs	r3, #0
 800f06e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f070:	79fb      	ldrb	r3, [r7, #7]
 800f072:	461a      	mov	r2, r3
 800f074:	6939      	ldr	r1, [r7, #16]
 800f076:	6978      	ldr	r0, [r7, #20]
 800f078:	f7ff ff75 	bl	800ef66 <xQueueGenericCreate>
 800f07c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f7ff ffd3 	bl	800f02a <prvInitialiseMutex>

		return xNewQueue;
 800f084:	68fb      	ldr	r3, [r7, #12]
	}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
	...

0800f090 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b08e      	sub	sp, #56	; 0x38
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
 800f09c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d109      	bne.n	800f0c0 <xQueueGenericSend+0x30>
 800f0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b0:	f383 8811 	msr	BASEPRI, r3
 800f0b4:	f3bf 8f6f 	isb	sy
 800f0b8:	f3bf 8f4f 	dsb	sy
 800f0bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0be:	e7fe      	b.n	800f0be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d103      	bne.n	800f0ce <xQueueGenericSend+0x3e>
 800f0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <xQueueGenericSend+0x42>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e000      	b.n	800f0d4 <xQueueGenericSend+0x44>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <xQueueGenericSend+0x5c>
 800f0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ea:	e7fe      	b.n	800f0ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	d103      	bne.n	800f0fa <xQueueGenericSend+0x6a>
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d101      	bne.n	800f0fe <xQueueGenericSend+0x6e>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e000      	b.n	800f100 <xQueueGenericSend+0x70>
 800f0fe:	2300      	movs	r3, #0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d109      	bne.n	800f118 <xQueueGenericSend+0x88>
 800f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	623b      	str	r3, [r7, #32]
 800f116:	e7fe      	b.n	800f116 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f118:	f001 fba4 	bl	8010864 <xTaskGetSchedulerState>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d102      	bne.n	800f128 <xQueueGenericSend+0x98>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d101      	bne.n	800f12c <xQueueGenericSend+0x9c>
 800f128:	2301      	movs	r3, #1
 800f12a:	e000      	b.n	800f12e <xQueueGenericSend+0x9e>
 800f12c:	2300      	movs	r3, #0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d109      	bne.n	800f146 <xQueueGenericSend+0xb6>
 800f132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	61fb      	str	r3, [r7, #28]
 800f144:	e7fe      	b.n	800f144 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f146:	f002 f9d1 	bl	80114ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f152:	429a      	cmp	r2, r3
 800f154:	d302      	bcc.n	800f15c <xQueueGenericSend+0xcc>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d129      	bne.n	800f1b0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f15c:	683a      	ldr	r2, [r7, #0]
 800f15e:	68b9      	ldr	r1, [r7, #8]
 800f160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f162:	f000 fb1f 	bl	800f7a4 <prvCopyDataToQueue>
 800f166:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d010      	beq.n	800f192 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f172:	3324      	adds	r3, #36	; 0x24
 800f174:	4618      	mov	r0, r3
 800f176:	f001 f9bf 	bl	80104f8 <xTaskRemoveFromEventList>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d013      	beq.n	800f1a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f180:	4b3f      	ldr	r3, [pc, #252]	; (800f280 <xQueueGenericSend+0x1f0>)
 800f182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f186:	601a      	str	r2, [r3, #0]
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	e00a      	b.n	800f1a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f194:	2b00      	cmp	r3, #0
 800f196:	d007      	beq.n	800f1a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f198:	4b39      	ldr	r3, [pc, #228]	; (800f280 <xQueueGenericSend+0x1f0>)
 800f19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f19e:	601a      	str	r2, [r3, #0]
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f1a8:	f002 f9ce 	bl	8011548 <vPortExitCritical>
				return pdPASS;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e063      	b.n	800f278 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d103      	bne.n	800f1be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f1b6:	f002 f9c7 	bl	8011548 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e05c      	b.n	800f278 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d106      	bne.n	800f1d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1c4:	f107 0314 	add.w	r3, r7, #20
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f001 f9f7 	bl	80105bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1d2:	f002 f9b9 	bl	8011548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1d6:	f000 ff73 	bl	80100c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1da:	f002 f987 	bl	80114ec <vPortEnterCritical>
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1e4:	b25b      	sxtb	r3, r3
 800f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1ea:	d103      	bne.n	800f1f4 <xQueueGenericSend+0x164>
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1fa:	b25b      	sxtb	r3, r3
 800f1fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f200:	d103      	bne.n	800f20a <xQueueGenericSend+0x17a>
 800f202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f204:	2200      	movs	r2, #0
 800f206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f20a:	f002 f99d 	bl	8011548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f20e:	1d3a      	adds	r2, r7, #4
 800f210:	f107 0314 	add.w	r3, r7, #20
 800f214:	4611      	mov	r1, r2
 800f216:	4618      	mov	r0, r3
 800f218:	f001 f9e6 	bl	80105e8 <xTaskCheckForTimeOut>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d124      	bne.n	800f26c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f222:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f224:	f000 fbb6 	bl	800f994 <prvIsQueueFull>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d018      	beq.n	800f260 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f230:	3310      	adds	r3, #16
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	4611      	mov	r1, r2
 800f236:	4618      	mov	r0, r3
 800f238:	f001 f910 	bl	801045c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f23c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f23e:	f000 fb41 	bl	800f8c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f242:	f000 ff4b 	bl	80100dc <xTaskResumeAll>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f47f af7c 	bne.w	800f146 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f24e:	4b0c      	ldr	r3, [pc, #48]	; (800f280 <xQueueGenericSend+0x1f0>)
 800f250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f254:	601a      	str	r2, [r3, #0]
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	f3bf 8f6f 	isb	sy
 800f25e:	e772      	b.n	800f146 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f262:	f000 fb2f 	bl	800f8c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f266:	f000 ff39 	bl	80100dc <xTaskResumeAll>
 800f26a:	e76c      	b.n	800f146 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f26e:	f000 fb29 	bl	800f8c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f272:	f000 ff33 	bl	80100dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f276:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3738      	adds	r7, #56	; 0x38
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	e000ed04 	.word	0xe000ed04

0800f284 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08e      	sub	sp, #56	; 0x38
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d109      	bne.n	800f2b0 <xQueueGenericSendFromISR+0x2c>
 800f29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ae:	e7fe      	b.n	800f2ae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d103      	bne.n	800f2be <xQueueGenericSendFromISR+0x3a>
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d101      	bne.n	800f2c2 <xQueueGenericSendFromISR+0x3e>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e000      	b.n	800f2c4 <xQueueGenericSendFromISR+0x40>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d109      	bne.n	800f2dc <xQueueGenericSendFromISR+0x58>
 800f2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2cc:	f383 8811 	msr	BASEPRI, r3
 800f2d0:	f3bf 8f6f 	isb	sy
 800f2d4:	f3bf 8f4f 	dsb	sy
 800f2d8:	623b      	str	r3, [r7, #32]
 800f2da:	e7fe      	b.n	800f2da <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d103      	bne.n	800f2ea <xQueueGenericSendFromISR+0x66>
 800f2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d101      	bne.n	800f2ee <xQueueGenericSendFromISR+0x6a>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e000      	b.n	800f2f0 <xQueueGenericSendFromISR+0x6c>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d109      	bne.n	800f308 <xQueueGenericSendFromISR+0x84>
 800f2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f8:	f383 8811 	msr	BASEPRI, r3
 800f2fc:	f3bf 8f6f 	isb	sy
 800f300:	f3bf 8f4f 	dsb	sy
 800f304:	61fb      	str	r3, [r7, #28]
 800f306:	e7fe      	b.n	800f306 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f308:	f002 f9cc 	bl	80116a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f30c:	f3ef 8211 	mrs	r2, BASEPRI
 800f310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	61ba      	str	r2, [r7, #24]
 800f322:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f324:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f326:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f330:	429a      	cmp	r2, r3
 800f332:	d302      	bcc.n	800f33a <xQueueGenericSendFromISR+0xb6>
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2b02      	cmp	r3, #2
 800f338:	d12c      	bne.n	800f394 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f344:	683a      	ldr	r2, [r7, #0]
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f34a:	f000 fa2b 	bl	800f7a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f34e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f356:	d112      	bne.n	800f37e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d016      	beq.n	800f38e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f362:	3324      	adds	r3, #36	; 0x24
 800f364:	4618      	mov	r0, r3
 800f366:	f001 f8c7 	bl	80104f8 <xTaskRemoveFromEventList>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d00e      	beq.n	800f38e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2201      	movs	r2, #1
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	e007      	b.n	800f38e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f37e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f382:	3301      	adds	r3, #1
 800f384:	b2db      	uxtb	r3, r3
 800f386:	b25a      	sxtb	r2, r3
 800f388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f38e:	2301      	movs	r3, #1
 800f390:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f392:	e001      	b.n	800f398 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f394:	2300      	movs	r3, #0
 800f396:	637b      	str	r3, [r7, #52]	; 0x34
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3738      	adds	r7, #56	; 0x38
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08c      	sub	sp, #48	; 0x30
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d109      	bne.n	800f3da <xQueueReceive+0x2e>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	623b      	str	r3, [r7, #32]
 800f3d8:	e7fe      	b.n	800f3d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d103      	bne.n	800f3e8 <xQueueReceive+0x3c>
 800f3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d101      	bne.n	800f3ec <xQueueReceive+0x40>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e000      	b.n	800f3ee <xQueueReceive+0x42>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d109      	bne.n	800f406 <xQueueReceive+0x5a>
 800f3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	61fb      	str	r3, [r7, #28]
 800f404:	e7fe      	b.n	800f404 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f406:	f001 fa2d 	bl	8010864 <xTaskGetSchedulerState>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d102      	bne.n	800f416 <xQueueReceive+0x6a>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <xQueueReceive+0x6e>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <xQueueReceive+0x70>
 800f41a:	2300      	movs	r3, #0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d109      	bne.n	800f434 <xQueueReceive+0x88>
 800f420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f424:	f383 8811 	msr	BASEPRI, r3
 800f428:	f3bf 8f6f 	isb	sy
 800f42c:	f3bf 8f4f 	dsb	sy
 800f430:	61bb      	str	r3, [r7, #24]
 800f432:	e7fe      	b.n	800f432 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f434:	f002 f85a 	bl	80114ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f43c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f440:	2b00      	cmp	r3, #0
 800f442:	d01f      	beq.n	800f484 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f444:	68b9      	ldr	r1, [r7, #8]
 800f446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f448:	f000 fa16 	bl	800f878 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44e:	1e5a      	subs	r2, r3, #1
 800f450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f452:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f456:	691b      	ldr	r3, [r3, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00f      	beq.n	800f47c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45e:	3310      	adds	r3, #16
 800f460:	4618      	mov	r0, r3
 800f462:	f001 f849 	bl	80104f8 <xTaskRemoveFromEventList>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d007      	beq.n	800f47c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f46c:	4b3c      	ldr	r3, [pc, #240]	; (800f560 <xQueueReceive+0x1b4>)
 800f46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f472:	601a      	str	r2, [r3, #0]
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f47c:	f002 f864 	bl	8011548 <vPortExitCritical>
				return pdPASS;
 800f480:	2301      	movs	r3, #1
 800f482:	e069      	b.n	800f558 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d103      	bne.n	800f492 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f48a:	f002 f85d 	bl	8011548 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f48e:	2300      	movs	r3, #0
 800f490:	e062      	b.n	800f558 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d106      	bne.n	800f4a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f498:	f107 0310 	add.w	r3, r7, #16
 800f49c:	4618      	mov	r0, r3
 800f49e:	f001 f88d 	bl	80105bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4a6:	f002 f84f 	bl	8011548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4aa:	f000 fe09 	bl	80100c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4ae:	f002 f81d 	bl	80114ec <vPortEnterCritical>
 800f4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4b8:	b25b      	sxtb	r3, r3
 800f4ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4be:	d103      	bne.n	800f4c8 <xQueueReceive+0x11c>
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ce:	b25b      	sxtb	r3, r3
 800f4d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4d4:	d103      	bne.n	800f4de <xQueueReceive+0x132>
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4de:	f002 f833 	bl	8011548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4e2:	1d3a      	adds	r2, r7, #4
 800f4e4:	f107 0310 	add.w	r3, r7, #16
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f001 f87c 	bl	80105e8 <xTaskCheckForTimeOut>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d123      	bne.n	800f53e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4f8:	f000 fa36 	bl	800f968 <prvIsQueueEmpty>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d017      	beq.n	800f532 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	3324      	adds	r3, #36	; 0x24
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	4611      	mov	r1, r2
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 ffa6 	bl	801045c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f512:	f000 f9d7 	bl	800f8c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f516:	f000 fde1 	bl	80100dc <xTaskResumeAll>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d189      	bne.n	800f434 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f520:	4b0f      	ldr	r3, [pc, #60]	; (800f560 <xQueueReceive+0x1b4>)
 800f522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f526:	601a      	str	r2, [r3, #0]
 800f528:	f3bf 8f4f 	dsb	sy
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	e780      	b.n	800f434 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f534:	f000 f9c6 	bl	800f8c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f538:	f000 fdd0 	bl	80100dc <xTaskResumeAll>
 800f53c:	e77a      	b.n	800f434 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f53e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f540:	f000 f9c0 	bl	800f8c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f544:	f000 fdca 	bl	80100dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f54a:	f000 fa0d 	bl	800f968 <prvIsQueueEmpty>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	f43f af6f 	beq.w	800f434 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f556:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3730      	adds	r7, #48	; 0x30
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	e000ed04 	.word	0xe000ed04

0800f564 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08e      	sub	sp, #56	; 0x38
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f56e:	2300      	movs	r3, #0
 800f570:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f576:	2300      	movs	r3, #0
 800f578:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d109      	bne.n	800f594 <xQueueSemaphoreTake+0x30>
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	623b      	str	r3, [r7, #32]
 800f592:	e7fe      	b.n	800f592 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d009      	beq.n	800f5b0 <xQueueSemaphoreTake+0x4c>
 800f59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a0:	f383 8811 	msr	BASEPRI, r3
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	f3bf 8f4f 	dsb	sy
 800f5ac:	61fb      	str	r3, [r7, #28]
 800f5ae:	e7fe      	b.n	800f5ae <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5b0:	f001 f958 	bl	8010864 <xTaskGetSchedulerState>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d102      	bne.n	800f5c0 <xQueueSemaphoreTake+0x5c>
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d101      	bne.n	800f5c4 <xQueueSemaphoreTake+0x60>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e000      	b.n	800f5c6 <xQueueSemaphoreTake+0x62>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d109      	bne.n	800f5de <xQueueSemaphoreTake+0x7a>
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	61bb      	str	r3, [r7, #24]
 800f5dc:	e7fe      	b.n	800f5dc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5de:	f001 ff85 	bl	80114ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d024      	beq.n	800f638 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f0:	1e5a      	subs	r2, r3, #1
 800f5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d104      	bne.n	800f608 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f5fe:	f001 faa3 	bl	8010b48 <pvTaskIncrementMutexHeldCount>
 800f602:	4602      	mov	r2, r0
 800f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f606:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00f      	beq.n	800f630 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f612:	3310      	adds	r3, #16
 800f614:	4618      	mov	r0, r3
 800f616:	f000 ff6f 	bl	80104f8 <xTaskRemoveFromEventList>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d007      	beq.n	800f630 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f620:	4b53      	ldr	r3, [pc, #332]	; (800f770 <xQueueSemaphoreTake+0x20c>)
 800f622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f626:	601a      	str	r2, [r3, #0]
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f630:	f001 ff8a 	bl	8011548 <vPortExitCritical>
				return pdPASS;
 800f634:	2301      	movs	r3, #1
 800f636:	e096      	b.n	800f766 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d110      	bne.n	800f660 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	2b00      	cmp	r3, #0
 800f642:	d009      	beq.n	800f658 <xQueueSemaphoreTake+0xf4>
 800f644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f648:	f383 8811 	msr	BASEPRI, r3
 800f64c:	f3bf 8f6f 	isb	sy
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	e7fe      	b.n	800f656 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f658:	f001 ff76 	bl	8011548 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f65c:	2300      	movs	r3, #0
 800f65e:	e082      	b.n	800f766 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f662:	2b00      	cmp	r3, #0
 800f664:	d106      	bne.n	800f674 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f666:	f107 030c 	add.w	r3, r7, #12
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 ffa6 	bl	80105bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f670:	2301      	movs	r3, #1
 800f672:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f674:	f001 ff68 	bl	8011548 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f678:	f000 fd22 	bl	80100c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f67c:	f001 ff36 	bl	80114ec <vPortEnterCritical>
 800f680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f686:	b25b      	sxtb	r3, r3
 800f688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f68c:	d103      	bne.n	800f696 <xQueueSemaphoreTake+0x132>
 800f68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f690:	2200      	movs	r2, #0
 800f692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f69c:	b25b      	sxtb	r3, r3
 800f69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6a2:	d103      	bne.n	800f6ac <xQueueSemaphoreTake+0x148>
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6ac:	f001 ff4c 	bl	8011548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6b0:	463a      	mov	r2, r7
 800f6b2:	f107 030c 	add.w	r3, r7, #12
 800f6b6:	4611      	mov	r1, r2
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 ff95 	bl	80105e8 <xTaskCheckForTimeOut>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d132      	bne.n	800f72a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6c6:	f000 f94f 	bl	800f968 <prvIsQueueEmpty>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d026      	beq.n	800f71e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d109      	bne.n	800f6ec <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f6d8:	f001 ff08 	bl	80114ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f001 f8dd 	bl	80108a0 <xTaskPriorityInherit>
 800f6e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f6e8:	f001 ff2e 	bl	8011548 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	3324      	adds	r3, #36	; 0x24
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 feb1 	bl	801045c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6fc:	f000 f8e2 	bl	800f8c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f700:	f000 fcec 	bl	80100dc <xTaskResumeAll>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	f47f af69 	bne.w	800f5de <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f70c:	4b18      	ldr	r3, [pc, #96]	; (800f770 <xQueueSemaphoreTake+0x20c>)
 800f70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f712:	601a      	str	r2, [r3, #0]
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	e75f      	b.n	800f5de <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f720:	f000 f8d0 	bl	800f8c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f724:	f000 fcda 	bl	80100dc <xTaskResumeAll>
 800f728:	e759      	b.n	800f5de <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f72a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f72c:	f000 f8ca 	bl	800f8c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f730:	f000 fcd4 	bl	80100dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f736:	f000 f917 	bl	800f968 <prvIsQueueEmpty>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f43f af4e 	beq.w	800f5de <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00d      	beq.n	800f764 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f748:	f001 fed0 	bl	80114ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f74c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f74e:	f000 f811 	bl	800f774 <prvGetDisinheritPriorityAfterTimeout>
 800f752:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f75a:	4618      	mov	r0, r3
 800f75c:	f001 f974 	bl	8010a48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f760:	f001 fef2 	bl	8011548 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f766:	4618      	mov	r0, r3
 800f768:	3738      	adds	r7, #56	; 0x38
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	e000ed04 	.word	0xe000ed04

0800f774 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f774:	b480      	push	{r7}
 800f776:	b085      	sub	sp, #20
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f780:	2b00      	cmp	r3, #0
 800f782:	d006      	beq.n	800f792 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f78e:	60fb      	str	r3, [r7, #12]
 800f790:	e001      	b.n	800f796 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f792:	2300      	movs	r3, #0
 800f794:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f796:	68fb      	ldr	r3, [r7, #12]
	}
 800f798:	4618      	mov	r0, r3
 800f79a:	3714      	adds	r7, #20
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d10d      	bne.n	800f7de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d14d      	bne.n	800f866 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f001 f8ce 	bl	8010970 <xTaskPriorityDisinherit>
 800f7d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	609a      	str	r2, [r3, #8]
 800f7dc:	e043      	b.n	800f866 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d119      	bne.n	800f818 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6858      	ldr	r0, [r3, #4]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	68b9      	ldr	r1, [r7, #8]
 800f7f0:	f002 ffc4 	bl	801277c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7fc:	441a      	add	r2, r3
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d32b      	bcc.n	800f866 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	605a      	str	r2, [r3, #4]
 800f816:	e026      	b.n	800f866 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	68d8      	ldr	r0, [r3, #12]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f820:	461a      	mov	r2, r3
 800f822:	68b9      	ldr	r1, [r7, #8]
 800f824:	f002 ffaa 	bl	801277c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	68da      	ldr	r2, [r3, #12]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f830:	425b      	negs	r3, r3
 800f832:	441a      	add	r2, r3
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	68da      	ldr	r2, [r3, #12]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	429a      	cmp	r2, r3
 800f842:	d207      	bcs.n	800f854 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	689a      	ldr	r2, [r3, #8]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84c:	425b      	negs	r3, r3
 800f84e:	441a      	add	r2, r3
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2b02      	cmp	r3, #2
 800f858:	d105      	bne.n	800f866 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	3b01      	subs	r3, #1
 800f864:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	1c5a      	adds	r2, r3, #1
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f86e:	697b      	ldr	r3, [r7, #20]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3718      	adds	r7, #24
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f886:	2b00      	cmp	r3, #0
 800f888:	d018      	beq.n	800f8bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	68da      	ldr	r2, [r3, #12]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f892:	441a      	add	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	68da      	ldr	r2, [r3, #12]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d303      	bcc.n	800f8ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	68d9      	ldr	r1, [r3, #12]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	6838      	ldr	r0, [r7, #0]
 800f8b8:	f002 ff60 	bl	801277c <memcpy>
	}
}
 800f8bc:	bf00      	nop
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f8cc:	f001 fe0e 	bl	80114ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8d8:	e011      	b.n	800f8fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d012      	beq.n	800f908 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	3324      	adds	r3, #36	; 0x24
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 fe06 	bl	80104f8 <xTaskRemoveFromEventList>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f8f2:	f000 fed9 	bl	80106a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f8f6:	7bfb      	ldrb	r3, [r7, #15]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f902:	2b00      	cmp	r3, #0
 800f904:	dce9      	bgt.n	800f8da <prvUnlockQueue+0x16>
 800f906:	e000      	b.n	800f90a <prvUnlockQueue+0x46>
					break;
 800f908:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	22ff      	movs	r2, #255	; 0xff
 800f90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f912:	f001 fe19 	bl	8011548 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f916:	f001 fde9 	bl	80114ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f920:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f922:	e011      	b.n	800f948 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d012      	beq.n	800f952 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	3310      	adds	r3, #16
 800f930:	4618      	mov	r0, r3
 800f932:	f000 fde1 	bl	80104f8 <xTaskRemoveFromEventList>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d001      	beq.n	800f940 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f93c:	f000 feb4 	bl	80106a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f940:	7bbb      	ldrb	r3, [r7, #14]
 800f942:	3b01      	subs	r3, #1
 800f944:	b2db      	uxtb	r3, r3
 800f946:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dce9      	bgt.n	800f924 <prvUnlockQueue+0x60>
 800f950:	e000      	b.n	800f954 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f952:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	22ff      	movs	r2, #255	; 0xff
 800f958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f95c:	f001 fdf4 	bl	8011548 <vPortExitCritical>
}
 800f960:	bf00      	nop
 800f962:	3710      	adds	r7, #16
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f970:	f001 fdbc 	bl	80114ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d102      	bne.n	800f982 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f97c:	2301      	movs	r3, #1
 800f97e:	60fb      	str	r3, [r7, #12]
 800f980:	e001      	b.n	800f986 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f982:	2300      	movs	r3, #0
 800f984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f986:	f001 fddf 	bl	8011548 <vPortExitCritical>

	return xReturn;
 800f98a:	68fb      	ldr	r3, [r7, #12]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3710      	adds	r7, #16
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f99c:	f001 fda6 	bl	80114ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d102      	bne.n	800f9b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	60fb      	str	r3, [r7, #12]
 800f9b0:	e001      	b.n	800f9b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f9b6:	f001 fdc7 	bl	8011548 <vPortExitCritical>

	return xReturn;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	60fb      	str	r3, [r7, #12]
 800f9d2:	e014      	b.n	800f9fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f9d4:	4a0e      	ldr	r2, [pc, #56]	; (800fa10 <vQueueAddToRegistry+0x4c>)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d10b      	bne.n	800f9f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f9e0:	490b      	ldr	r1, [pc, #44]	; (800fa10 <vQueueAddToRegistry+0x4c>)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	683a      	ldr	r2, [r7, #0]
 800f9e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f9ea:	4a09      	ldr	r2, [pc, #36]	; (800fa10 <vQueueAddToRegistry+0x4c>)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	00db      	lsls	r3, r3, #3
 800f9f0:	4413      	add	r3, r2
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f9f6:	e005      	b.n	800fa04 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	60fb      	str	r3, [r7, #12]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2b07      	cmp	r3, #7
 800fa02:	d9e7      	bls.n	800f9d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fa04:	bf00      	nop
 800fa06:	3714      	adds	r7, #20
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr
 800fa10:	2000ebbc 	.word	0x2000ebbc

0800fa14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fa24:	f001 fd62 	bl	80114ec <vPortEnterCritical>
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa2e:	b25b      	sxtb	r3, r3
 800fa30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa34:	d103      	bne.n	800fa3e <vQueueWaitForMessageRestricted+0x2a>
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa44:	b25b      	sxtb	r3, r3
 800fa46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa4a:	d103      	bne.n	800fa54 <vQueueWaitForMessageRestricted+0x40>
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa54:	f001 fd78 	bl	8011548 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d106      	bne.n	800fa6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	3324      	adds	r3, #36	; 0x24
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	68b9      	ldr	r1, [r7, #8]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f000 fd1b 	bl	80104a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fa6e:	6978      	ldr	r0, [r7, #20]
 800fa70:	f7ff ff28 	bl	800f8c4 <prvUnlockQueue>
	}
 800fa74:	bf00      	nop
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08e      	sub	sp, #56	; 0x38
 800fa80:	af04      	add	r7, sp, #16
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
 800fa88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d109      	bne.n	800faa4 <xTaskCreateStatic+0x28>
 800fa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa94:	f383 8811 	msr	BASEPRI, r3
 800fa98:	f3bf 8f6f 	isb	sy
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	623b      	str	r3, [r7, #32]
 800faa2:	e7fe      	b.n	800faa2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800faa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d109      	bne.n	800fabe <xTaskCreateStatic+0x42>
 800faaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faae:	f383 8811 	msr	BASEPRI, r3
 800fab2:	f3bf 8f6f 	isb	sy
 800fab6:	f3bf 8f4f 	dsb	sy
 800faba:	61fb      	str	r3, [r7, #28]
 800fabc:	e7fe      	b.n	800fabc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fabe:	235c      	movs	r3, #92	; 0x5c
 800fac0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	2b5c      	cmp	r3, #92	; 0x5c
 800fac6:	d009      	beq.n	800fadc <xTaskCreateStatic+0x60>
 800fac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800facc:	f383 8811 	msr	BASEPRI, r3
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	f3bf 8f4f 	dsb	sy
 800fad8:	61bb      	str	r3, [r7, #24]
 800fada:	e7fe      	b.n	800fada <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fadc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d01e      	beq.n	800fb22 <xTaskCreateStatic+0xa6>
 800fae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d01b      	beq.n	800fb22 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800faea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800faf2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf6:	2202      	movs	r2, #2
 800faf8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fafc:	2300      	movs	r3, #0
 800fafe:	9303      	str	r3, [sp, #12]
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	9302      	str	r3, [sp, #8]
 800fb04:	f107 0314 	add.w	r3, r7, #20
 800fb08:	9301      	str	r3, [sp, #4]
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	68b9      	ldr	r1, [r7, #8]
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f000 f850 	bl	800fbba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb1c:	f000 f8dc 	bl	800fcd8 <prvAddNewTaskToReadyList>
 800fb20:	e001      	b.n	800fb26 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fb26:	697b      	ldr	r3, [r7, #20]
	}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3728      	adds	r7, #40	; 0x28
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b08c      	sub	sp, #48	; 0x30
 800fb34:	af04      	add	r7, sp, #16
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	603b      	str	r3, [r7, #0]
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb40:	88fb      	ldrh	r3, [r7, #6]
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4618      	mov	r0, r3
 800fb46:	f001 fdeb 	bl	8011720 <pvPortMalloc>
 800fb4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d00e      	beq.n	800fb70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb52:	205c      	movs	r0, #92	; 0x5c
 800fb54:	f001 fde4 	bl	8011720 <pvPortMalloc>
 800fb58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d003      	beq.n	800fb68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	631a      	str	r2, [r3, #48]	; 0x30
 800fb66:	e005      	b.n	800fb74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fb68:	6978      	ldr	r0, [r7, #20]
 800fb6a:	f001 fe9b 	bl	80118a4 <vPortFree>
 800fb6e:	e001      	b.n	800fb74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fb70:	2300      	movs	r3, #0
 800fb72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d017      	beq.n	800fbaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb82:	88fa      	ldrh	r2, [r7, #6]
 800fb84:	2300      	movs	r3, #0
 800fb86:	9303      	str	r3, [sp, #12]
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	9302      	str	r3, [sp, #8]
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	68b9      	ldr	r1, [r7, #8]
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f000 f80e 	bl	800fbba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb9e:	69f8      	ldr	r0, [r7, #28]
 800fba0:	f000 f89a 	bl	800fcd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fba4:	2301      	movs	r3, #1
 800fba6:	61bb      	str	r3, [r7, #24]
 800fba8:	e002      	b.n	800fbb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fbaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fbae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fbb0:	69bb      	ldr	r3, [r7, #24]
	}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3720      	adds	r7, #32
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b088      	sub	sp, #32
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	60f8      	str	r0, [r7, #12]
 800fbc2:	60b9      	str	r1, [r7, #8]
 800fbc4:	607a      	str	r2, [r7, #4]
 800fbc6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	21a5      	movs	r1, #165	; 0xa5
 800fbd4:	f002 fddd 	bl	8012792 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fbe2:	3b01      	subs	r3, #1
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	f023 0307 	bic.w	r3, r3, #7
 800fbf0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	f003 0307 	and.w	r3, r3, #7
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d009      	beq.n	800fc10 <prvInitialiseNewTask+0x56>
 800fbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc00:	f383 8811 	msr	BASEPRI, r3
 800fc04:	f3bf 8f6f 	isb	sy
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	617b      	str	r3, [r7, #20]
 800fc0e:	e7fe      	b.n	800fc0e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d01f      	beq.n	800fc56 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc16:	2300      	movs	r3, #0
 800fc18:	61fb      	str	r3, [r7, #28]
 800fc1a:	e012      	b.n	800fc42 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	4413      	add	r3, r2
 800fc22:	7819      	ldrb	r1, [r3, #0]
 800fc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	4413      	add	r3, r2
 800fc2a:	3334      	adds	r3, #52	; 0x34
 800fc2c:	460a      	mov	r2, r1
 800fc2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	4413      	add	r3, r2
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d006      	beq.n	800fc4a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	61fb      	str	r3, [r7, #28]
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	2b0f      	cmp	r3, #15
 800fc46:	d9e9      	bls.n	800fc1c <prvInitialiseNewTask+0x62>
 800fc48:	e000      	b.n	800fc4c <prvInitialiseNewTask+0x92>
			{
				break;
 800fc4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fc54:	e003      	b.n	800fc5e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc60:	2b37      	cmp	r3, #55	; 0x37
 800fc62:	d901      	bls.n	800fc68 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fc64:	2337      	movs	r3, #55	; 0x37
 800fc66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc76:	2200      	movs	r2, #0
 800fc78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff f802 	bl	800ec88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	3318      	adds	r3, #24
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fe fffd 	bl	800ec88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fca2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	2200      	movs	r2, #0
 800fca8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	2200      	movs	r2, #0
 800fcae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fcb2:	683a      	ldr	r2, [r7, #0]
 800fcb4:	68f9      	ldr	r1, [r7, #12]
 800fcb6:	69b8      	ldr	r0, [r7, #24]
 800fcb8:	f001 faf4 	bl	80112a4 <pxPortInitialiseStack>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d002      	beq.n	800fcce <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcce:	bf00      	nop
 800fcd0:	3720      	adds	r7, #32
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
	...

0800fcd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fce0:	f001 fc04 	bl	80114ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fce4:	4b2d      	ldr	r3, [pc, #180]	; (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3301      	adds	r3, #1
 800fcea:	4a2c      	ldr	r2, [pc, #176]	; (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fcec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fcee:	4b2c      	ldr	r3, [pc, #176]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fcf6:	4a2a      	ldr	r2, [pc, #168]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fcfc:	4b27      	ldr	r3, [pc, #156]	; (800fd9c <prvAddNewTaskToReadyList+0xc4>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d110      	bne.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fd04:	f000 fcf4 	bl	80106f0 <prvInitialiseTaskLists>
 800fd08:	e00d      	b.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fd0a:	4b26      	ldr	r3, [pc, #152]	; (800fda4 <prvAddNewTaskToReadyList+0xcc>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d109      	bne.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fd12:	4b23      	ldr	r3, [pc, #140]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d802      	bhi.n	800fd26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fd20:	4a1f      	ldr	r2, [pc, #124]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fd26:	4b20      	ldr	r3, [pc, #128]	; (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	4a1e      	ldr	r2, [pc, #120]	; (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fd30:	4b1d      	ldr	r3, [pc, #116]	; (800fda8 <prvAddNewTaskToReadyList+0xd0>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd3c:	4b1b      	ldr	r3, [pc, #108]	; (800fdac <prvAddNewTaskToReadyList+0xd4>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d903      	bls.n	800fd4c <prvAddNewTaskToReadyList+0x74>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd48:	4a18      	ldr	r2, [pc, #96]	; (800fdac <prvAddNewTaskToReadyList+0xd4>)
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd50:	4613      	mov	r3, r2
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	4413      	add	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4a15      	ldr	r2, [pc, #84]	; (800fdb0 <prvAddNewTaskToReadyList+0xd8>)
 800fd5a:	441a      	add	r2, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3304      	adds	r3, #4
 800fd60:	4619      	mov	r1, r3
 800fd62:	4610      	mov	r0, r2
 800fd64:	f7fe ff9d 	bl	800eca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fd68:	f001 fbee 	bl	8011548 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fd6c:	4b0d      	ldr	r3, [pc, #52]	; (800fda4 <prvAddNewTaskToReadyList+0xcc>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00e      	beq.n	800fd92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd74:	4b0a      	ldr	r3, [pc, #40]	; (800fda0 <prvAddNewTaskToReadyList+0xc8>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d207      	bcs.n	800fd92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd82:	4b0c      	ldr	r3, [pc, #48]	; (800fdb4 <prvAddNewTaskToReadyList+0xdc>)
 800fd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd92:	bf00      	nop
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	20001070 	.word	0x20001070
 800fda0:	20000b9c 	.word	0x20000b9c
 800fda4:	2000107c 	.word	0x2000107c
 800fda8:	2000108c 	.word	0x2000108c
 800fdac:	20001078 	.word	0x20001078
 800fdb0:	20000ba0 	.word	0x20000ba0
 800fdb4:	e000ed04 	.word	0xe000ed04

0800fdb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fdc0:	f001 fb94 	bl	80114ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d102      	bne.n	800fdd0 <vTaskDelete+0x18>
 800fdca:	4b2c      	ldr	r3, [pc, #176]	; (800fe7c <vTaskDelete+0xc4>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	e000      	b.n	800fdd2 <vTaskDelete+0x1a>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7fe ffbf 	bl	800ed5c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d004      	beq.n	800fdf0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	3318      	adds	r3, #24
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe ffb6 	bl	800ed5c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fdf0:	4b23      	ldr	r3, [pc, #140]	; (800fe80 <vTaskDelete+0xc8>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	4a22      	ldr	r2, [pc, #136]	; (800fe80 <vTaskDelete+0xc8>)
 800fdf8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fdfa:	4b20      	ldr	r3, [pc, #128]	; (800fe7c <vTaskDelete+0xc4>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d10b      	bne.n	800fe1c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3304      	adds	r3, #4
 800fe08:	4619      	mov	r1, r3
 800fe0a:	481e      	ldr	r0, [pc, #120]	; (800fe84 <vTaskDelete+0xcc>)
 800fe0c:	f7fe ff49 	bl	800eca2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800fe10:	4b1d      	ldr	r3, [pc, #116]	; (800fe88 <vTaskDelete+0xd0>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	3301      	adds	r3, #1
 800fe16:	4a1c      	ldr	r2, [pc, #112]	; (800fe88 <vTaskDelete+0xd0>)
 800fe18:	6013      	str	r3, [r2, #0]
 800fe1a:	e009      	b.n	800fe30 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800fe1c:	4b1b      	ldr	r3, [pc, #108]	; (800fe8c <vTaskDelete+0xd4>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	4a1a      	ldr	r2, [pc, #104]	; (800fe8c <vTaskDelete+0xd4>)
 800fe24:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f000 fcce 	bl	80107c8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800fe2c:	f000 fcfa 	bl	8010824 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800fe30:	f001 fb8a 	bl	8011548 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800fe34:	4b16      	ldr	r3, [pc, #88]	; (800fe90 <vTaskDelete+0xd8>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d01a      	beq.n	800fe72 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 800fe3c:	4b0f      	ldr	r3, [pc, #60]	; (800fe7c <vTaskDelete+0xc4>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d115      	bne.n	800fe72 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800fe46:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <vTaskDelete+0xdc>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d009      	beq.n	800fe62 <vTaskDelete+0xaa>
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60bb      	str	r3, [r7, #8]
 800fe60:	e7fe      	b.n	800fe60 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800fe62:	4b0d      	ldr	r3, [pc, #52]	; (800fe98 <vTaskDelete+0xe0>)
 800fe64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe68:	601a      	str	r2, [r3, #0]
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fe72:	bf00      	nop
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20000b9c 	.word	0x20000b9c
 800fe80:	2000108c 	.word	0x2000108c
 800fe84:	20001044 	.word	0x20001044
 800fe88:	20001058 	.word	0x20001058
 800fe8c:	20001070 	.word	0x20001070
 800fe90:	2000107c 	.word	0x2000107c
 800fe94:	20001098 	.word	0x20001098
 800fe98:	e000ed04 	.word	0xe000ed04

0800fe9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b08a      	sub	sp, #40	; 0x28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fea6:	2300      	movs	r3, #0
 800fea8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d109      	bne.n	800fec4 <vTaskDelayUntil+0x28>
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	617b      	str	r3, [r7, #20]
 800fec2:	e7fe      	b.n	800fec2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d109      	bne.n	800fede <vTaskDelayUntil+0x42>
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	613b      	str	r3, [r7, #16]
 800fedc:	e7fe      	b.n	800fedc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800fede:	4b29      	ldr	r3, [pc, #164]	; (800ff84 <vTaskDelayUntil+0xe8>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d009      	beq.n	800fefa <vTaskDelayUntil+0x5e>
 800fee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feea:	f383 8811 	msr	BASEPRI, r3
 800feee:	f3bf 8f6f 	isb	sy
 800fef2:	f3bf 8f4f 	dsb	sy
 800fef6:	60fb      	str	r3, [r7, #12]
 800fef8:	e7fe      	b.n	800fef8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800fefa:	f000 f8e1 	bl	80100c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fefe:	4b22      	ldr	r3, [pc, #136]	; (800ff88 <vTaskDelayUntil+0xec>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	683a      	ldr	r2, [r7, #0]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	6a3a      	ldr	r2, [r7, #32]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d20b      	bcs.n	800ff30 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	69fa      	ldr	r2, [r7, #28]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d211      	bcs.n	800ff46 <vTaskDelayUntil+0xaa>
 800ff22:	69fa      	ldr	r2, [r7, #28]
 800ff24:	6a3b      	ldr	r3, [r7, #32]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d90d      	bls.n	800ff46 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ff2e:	e00a      	b.n	800ff46 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	69fa      	ldr	r2, [r7, #28]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d303      	bcc.n	800ff42 <vTaskDelayUntil+0xa6>
 800ff3a:	69fa      	ldr	r2, [r7, #28]
 800ff3c:	6a3b      	ldr	r3, [r7, #32]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d901      	bls.n	800ff46 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800ff42:	2301      	movs	r3, #1
 800ff44:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	69fa      	ldr	r2, [r7, #28]
 800ff4a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ff4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d006      	beq.n	800ff60 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ff52:	69fa      	ldr	r2, [r7, #28]
 800ff54:	6a3b      	ldr	r3, [r7, #32]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	2100      	movs	r1, #0
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fe08 	bl	8010b70 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ff60:	f000 f8bc 	bl	80100dc <xTaskResumeAll>
 800ff64:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d107      	bne.n	800ff7c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800ff6c:	4b07      	ldr	r3, [pc, #28]	; (800ff8c <vTaskDelayUntil+0xf0>)
 800ff6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff7c:	bf00      	nop
 800ff7e:	3728      	adds	r7, #40	; 0x28
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	20001098 	.word	0x20001098
 800ff88:	20001074 	.word	0x20001074
 800ff8c:	e000ed04 	.word	0xe000ed04

0800ff90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d016      	beq.n	800ffd0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ffa2:	4b13      	ldr	r3, [pc, #76]	; (800fff0 <vTaskDelay+0x60>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d009      	beq.n	800ffbe <vTaskDelay+0x2e>
 800ffaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffae:	f383 8811 	msr	BASEPRI, r3
 800ffb2:	f3bf 8f6f 	isb	sy
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	60bb      	str	r3, [r7, #8]
 800ffbc:	e7fe      	b.n	800ffbc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ffbe:	f000 f87f 	bl	80100c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fdd3 	bl	8010b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ffca:	f000 f887 	bl	80100dc <xTaskResumeAll>
 800ffce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d107      	bne.n	800ffe6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ffd6:	4b07      	ldr	r3, [pc, #28]	; (800fff4 <vTaskDelay+0x64>)
 800ffd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	f3bf 8f4f 	dsb	sy
 800ffe2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffe6:	bf00      	nop
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	20001098 	.word	0x20001098
 800fff4:	e000ed04 	.word	0xe000ed04

0800fff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b08a      	sub	sp, #40	; 0x28
 800fffc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010002:	2300      	movs	r3, #0
 8010004:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010006:	463a      	mov	r2, r7
 8010008:	1d39      	adds	r1, r7, #4
 801000a:	f107 0308 	add.w	r3, r7, #8
 801000e:	4618      	mov	r0, r3
 8010010:	f7fe fde6 	bl	800ebe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	9202      	str	r2, [sp, #8]
 801001c:	9301      	str	r3, [sp, #4]
 801001e:	2300      	movs	r3, #0
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	2300      	movs	r3, #0
 8010024:	460a      	mov	r2, r1
 8010026:	4920      	ldr	r1, [pc, #128]	; (80100a8 <vTaskStartScheduler+0xb0>)
 8010028:	4820      	ldr	r0, [pc, #128]	; (80100ac <vTaskStartScheduler+0xb4>)
 801002a:	f7ff fd27 	bl	800fa7c <xTaskCreateStatic>
 801002e:	4602      	mov	r2, r0
 8010030:	4b1f      	ldr	r3, [pc, #124]	; (80100b0 <vTaskStartScheduler+0xb8>)
 8010032:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010034:	4b1e      	ldr	r3, [pc, #120]	; (80100b0 <vTaskStartScheduler+0xb8>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801003c:	2301      	movs	r3, #1
 801003e:	617b      	str	r3, [r7, #20]
 8010040:	e001      	b.n	8010046 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010042:	2300      	movs	r3, #0
 8010044:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	2b01      	cmp	r3, #1
 801004a:	d102      	bne.n	8010052 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801004c:	f000 fde4 	bl	8010c18 <xTimerCreateTimerTask>
 8010050:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d115      	bne.n	8010084 <vTaskStartScheduler+0x8c>
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801006a:	4b12      	ldr	r3, [pc, #72]	; (80100b4 <vTaskStartScheduler+0xbc>)
 801006c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010072:	4b11      	ldr	r3, [pc, #68]	; (80100b8 <vTaskStartScheduler+0xc0>)
 8010074:	2201      	movs	r2, #1
 8010076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010078:	4b10      	ldr	r3, [pc, #64]	; (80100bc <vTaskStartScheduler+0xc4>)
 801007a:	2200      	movs	r2, #0
 801007c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801007e:	f001 f997 	bl	80113b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010082:	e00d      	b.n	80100a0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801008a:	d109      	bne.n	80100a0 <vTaskStartScheduler+0xa8>
 801008c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010090:	f383 8811 	msr	BASEPRI, r3
 8010094:	f3bf 8f6f 	isb	sy
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	60fb      	str	r3, [r7, #12]
 801009e:	e7fe      	b.n	801009e <vTaskStartScheduler+0xa6>
}
 80100a0:	bf00      	nop
 80100a2:	3718      	adds	r7, #24
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	08013eec 	.word	0x08013eec
 80100ac:	080106c1 	.word	0x080106c1
 80100b0:	20001094 	.word	0x20001094
 80100b4:	20001090 	.word	0x20001090
 80100b8:	2000107c 	.word	0x2000107c
 80100bc:	20001074 	.word	0x20001074

080100c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80100c0:	b480      	push	{r7}
 80100c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80100c4:	4b04      	ldr	r3, [pc, #16]	; (80100d8 <vTaskSuspendAll+0x18>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	3301      	adds	r3, #1
 80100ca:	4a03      	ldr	r2, [pc, #12]	; (80100d8 <vTaskSuspendAll+0x18>)
 80100cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80100ce:	bf00      	nop
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr
 80100d8:	20001098 	.word	0x20001098

080100dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80100e2:	2300      	movs	r3, #0
 80100e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80100ea:	4b41      	ldr	r3, [pc, #260]	; (80101f0 <xTaskResumeAll+0x114>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d109      	bne.n	8010106 <xTaskResumeAll+0x2a>
 80100f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f6:	f383 8811 	msr	BASEPRI, r3
 80100fa:	f3bf 8f6f 	isb	sy
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	603b      	str	r3, [r7, #0]
 8010104:	e7fe      	b.n	8010104 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010106:	f001 f9f1 	bl	80114ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801010a:	4b39      	ldr	r3, [pc, #228]	; (80101f0 <xTaskResumeAll+0x114>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	3b01      	subs	r3, #1
 8010110:	4a37      	ldr	r2, [pc, #220]	; (80101f0 <xTaskResumeAll+0x114>)
 8010112:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010114:	4b36      	ldr	r3, [pc, #216]	; (80101f0 <xTaskResumeAll+0x114>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d162      	bne.n	80101e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801011c:	4b35      	ldr	r3, [pc, #212]	; (80101f4 <xTaskResumeAll+0x118>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d05e      	beq.n	80101e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010124:	e02f      	b.n	8010186 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010126:	4b34      	ldr	r3, [pc, #208]	; (80101f8 <xTaskResumeAll+0x11c>)
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3318      	adds	r3, #24
 8010132:	4618      	mov	r0, r3
 8010134:	f7fe fe12 	bl	800ed5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	3304      	adds	r3, #4
 801013c:	4618      	mov	r0, r3
 801013e:	f7fe fe0d 	bl	800ed5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010146:	4b2d      	ldr	r3, [pc, #180]	; (80101fc <xTaskResumeAll+0x120>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	429a      	cmp	r2, r3
 801014c:	d903      	bls.n	8010156 <xTaskResumeAll+0x7a>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010152:	4a2a      	ldr	r2, [pc, #168]	; (80101fc <xTaskResumeAll+0x120>)
 8010154:	6013      	str	r3, [r2, #0]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801015a:	4613      	mov	r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	4413      	add	r3, r2
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	4a27      	ldr	r2, [pc, #156]	; (8010200 <xTaskResumeAll+0x124>)
 8010164:	441a      	add	r2, r3
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3304      	adds	r3, #4
 801016a:	4619      	mov	r1, r3
 801016c:	4610      	mov	r0, r2
 801016e:	f7fe fd98 	bl	800eca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010176:	4b23      	ldr	r3, [pc, #140]	; (8010204 <xTaskResumeAll+0x128>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017c:	429a      	cmp	r2, r3
 801017e:	d302      	bcc.n	8010186 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010180:	4b21      	ldr	r3, [pc, #132]	; (8010208 <xTaskResumeAll+0x12c>)
 8010182:	2201      	movs	r2, #1
 8010184:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010186:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <xTaskResumeAll+0x11c>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1cb      	bne.n	8010126 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d001      	beq.n	8010198 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010194:	f000 fb46 	bl	8010824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010198:	4b1c      	ldr	r3, [pc, #112]	; (801020c <xTaskResumeAll+0x130>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d010      	beq.n	80101c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80101a4:	f000 f846 	bl	8010234 <xTaskIncrementTick>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d002      	beq.n	80101b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80101ae:	4b16      	ldr	r3, [pc, #88]	; (8010208 <xTaskResumeAll+0x12c>)
 80101b0:	2201      	movs	r2, #1
 80101b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	3b01      	subs	r3, #1
 80101b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1f1      	bne.n	80101a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80101c0:	4b12      	ldr	r3, [pc, #72]	; (801020c <xTaskResumeAll+0x130>)
 80101c2:	2200      	movs	r2, #0
 80101c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80101c6:	4b10      	ldr	r3, [pc, #64]	; (8010208 <xTaskResumeAll+0x12c>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d009      	beq.n	80101e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80101ce:	2301      	movs	r3, #1
 80101d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80101d2:	4b0f      	ldr	r3, [pc, #60]	; (8010210 <xTaskResumeAll+0x134>)
 80101d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80101e2:	f001 f9b1 	bl	8011548 <vPortExitCritical>

	return xAlreadyYielded;
 80101e6:	68bb      	ldr	r3, [r7, #8]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	20001098 	.word	0x20001098
 80101f4:	20001070 	.word	0x20001070
 80101f8:	20001030 	.word	0x20001030
 80101fc:	20001078 	.word	0x20001078
 8010200:	20000ba0 	.word	0x20000ba0
 8010204:	20000b9c 	.word	0x20000b9c
 8010208:	20001084 	.word	0x20001084
 801020c:	20001080 	.word	0x20001080
 8010210:	e000ed04 	.word	0xe000ed04

08010214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801021a:	4b05      	ldr	r3, [pc, #20]	; (8010230 <xTaskGetTickCount+0x1c>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010220:	687b      	ldr	r3, [r7, #4]
}
 8010222:	4618      	mov	r0, r3
 8010224:	370c      	adds	r7, #12
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	20001074 	.word	0x20001074

08010234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b086      	sub	sp, #24
 8010238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801023a:	2300      	movs	r3, #0
 801023c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801023e:	4b4e      	ldr	r3, [pc, #312]	; (8010378 <xTaskIncrementTick+0x144>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	f040 8088 	bne.w	8010358 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010248:	4b4c      	ldr	r3, [pc, #304]	; (801037c <xTaskIncrementTick+0x148>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3301      	adds	r3, #1
 801024e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010250:	4a4a      	ldr	r2, [pc, #296]	; (801037c <xTaskIncrementTick+0x148>)
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d11f      	bne.n	801029c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801025c:	4b48      	ldr	r3, [pc, #288]	; (8010380 <xTaskIncrementTick+0x14c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d009      	beq.n	801027a <xTaskIncrementTick+0x46>
 8010266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026a:	f383 8811 	msr	BASEPRI, r3
 801026e:	f3bf 8f6f 	isb	sy
 8010272:	f3bf 8f4f 	dsb	sy
 8010276:	603b      	str	r3, [r7, #0]
 8010278:	e7fe      	b.n	8010278 <xTaskIncrementTick+0x44>
 801027a:	4b41      	ldr	r3, [pc, #260]	; (8010380 <xTaskIncrementTick+0x14c>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	4b40      	ldr	r3, [pc, #256]	; (8010384 <xTaskIncrementTick+0x150>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4a3e      	ldr	r2, [pc, #248]	; (8010380 <xTaskIncrementTick+0x14c>)
 8010286:	6013      	str	r3, [r2, #0]
 8010288:	4a3e      	ldr	r2, [pc, #248]	; (8010384 <xTaskIncrementTick+0x150>)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	6013      	str	r3, [r2, #0]
 801028e:	4b3e      	ldr	r3, [pc, #248]	; (8010388 <xTaskIncrementTick+0x154>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3301      	adds	r3, #1
 8010294:	4a3c      	ldr	r2, [pc, #240]	; (8010388 <xTaskIncrementTick+0x154>)
 8010296:	6013      	str	r3, [r2, #0]
 8010298:	f000 fac4 	bl	8010824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801029c:	4b3b      	ldr	r3, [pc, #236]	; (801038c <xTaskIncrementTick+0x158>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d349      	bcc.n	801033a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102a6:	4b36      	ldr	r3, [pc, #216]	; (8010380 <xTaskIncrementTick+0x14c>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d104      	bne.n	80102ba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102b0:	4b36      	ldr	r3, [pc, #216]	; (801038c <xTaskIncrementTick+0x158>)
 80102b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80102b6:	601a      	str	r2, [r3, #0]
					break;
 80102b8:	e03f      	b.n	801033a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102ba:	4b31      	ldr	r3, [pc, #196]	; (8010380 <xTaskIncrementTick+0x14c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80102ca:	693a      	ldr	r2, [r7, #16]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d203      	bcs.n	80102da <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80102d2:	4a2e      	ldr	r2, [pc, #184]	; (801038c <xTaskIncrementTick+0x158>)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80102d8:	e02f      	b.n	801033a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	3304      	adds	r3, #4
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fe fd3c 	bl	800ed5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d004      	beq.n	80102f6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	3318      	adds	r3, #24
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7fe fd33 	bl	800ed5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fa:	4b25      	ldr	r3, [pc, #148]	; (8010390 <xTaskIncrementTick+0x15c>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d903      	bls.n	801030a <xTaskIncrementTick+0xd6>
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010306:	4a22      	ldr	r2, [pc, #136]	; (8010390 <xTaskIncrementTick+0x15c>)
 8010308:	6013      	str	r3, [r2, #0]
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801030e:	4613      	mov	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4413      	add	r3, r2
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	4a1f      	ldr	r2, [pc, #124]	; (8010394 <xTaskIncrementTick+0x160>)
 8010318:	441a      	add	r2, r3
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	3304      	adds	r3, #4
 801031e:	4619      	mov	r1, r3
 8010320:	4610      	mov	r0, r2
 8010322:	f7fe fcbe 	bl	800eca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801032a:	4b1b      	ldr	r3, [pc, #108]	; (8010398 <xTaskIncrementTick+0x164>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010330:	429a      	cmp	r2, r3
 8010332:	d3b8      	bcc.n	80102a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010334:	2301      	movs	r3, #1
 8010336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010338:	e7b5      	b.n	80102a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801033a:	4b17      	ldr	r3, [pc, #92]	; (8010398 <xTaskIncrementTick+0x164>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010340:	4914      	ldr	r1, [pc, #80]	; (8010394 <xTaskIncrementTick+0x160>)
 8010342:	4613      	mov	r3, r2
 8010344:	009b      	lsls	r3, r3, #2
 8010346:	4413      	add	r3, r2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	440b      	add	r3, r1
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b01      	cmp	r3, #1
 8010350:	d907      	bls.n	8010362 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010352:	2301      	movs	r3, #1
 8010354:	617b      	str	r3, [r7, #20]
 8010356:	e004      	b.n	8010362 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010358:	4b10      	ldr	r3, [pc, #64]	; (801039c <xTaskIncrementTick+0x168>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	3301      	adds	r3, #1
 801035e:	4a0f      	ldr	r2, [pc, #60]	; (801039c <xTaskIncrementTick+0x168>)
 8010360:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010362:	4b0f      	ldr	r3, [pc, #60]	; (80103a0 <xTaskIncrementTick+0x16c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d001      	beq.n	801036e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801036a:	2301      	movs	r3, #1
 801036c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801036e:	697b      	ldr	r3, [r7, #20]
}
 8010370:	4618      	mov	r0, r3
 8010372:	3718      	adds	r7, #24
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	20001098 	.word	0x20001098
 801037c:	20001074 	.word	0x20001074
 8010380:	20001028 	.word	0x20001028
 8010384:	2000102c 	.word	0x2000102c
 8010388:	20001088 	.word	0x20001088
 801038c:	20001090 	.word	0x20001090
 8010390:	20001078 	.word	0x20001078
 8010394:	20000ba0 	.word	0x20000ba0
 8010398:	20000b9c 	.word	0x20000b9c
 801039c:	20001080 	.word	0x20001080
 80103a0:	20001084 	.word	0x20001084

080103a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80103aa:	4b27      	ldr	r3, [pc, #156]	; (8010448 <vTaskSwitchContext+0xa4>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d003      	beq.n	80103ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80103b2:	4b26      	ldr	r3, [pc, #152]	; (801044c <vTaskSwitchContext+0xa8>)
 80103b4:	2201      	movs	r2, #1
 80103b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80103b8:	e040      	b.n	801043c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80103ba:	4b24      	ldr	r3, [pc, #144]	; (801044c <vTaskSwitchContext+0xa8>)
 80103bc:	2200      	movs	r2, #0
 80103be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103c0:	4b23      	ldr	r3, [pc, #140]	; (8010450 <vTaskSwitchContext+0xac>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	60fb      	str	r3, [r7, #12]
 80103c6:	e00f      	b.n	80103e8 <vTaskSwitchContext+0x44>
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d109      	bne.n	80103e2 <vTaskSwitchContext+0x3e>
 80103ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d2:	f383 8811 	msr	BASEPRI, r3
 80103d6:	f3bf 8f6f 	isb	sy
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	607b      	str	r3, [r7, #4]
 80103e0:	e7fe      	b.n	80103e0 <vTaskSwitchContext+0x3c>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	3b01      	subs	r3, #1
 80103e6:	60fb      	str	r3, [r7, #12]
 80103e8:	491a      	ldr	r1, [pc, #104]	; (8010454 <vTaskSwitchContext+0xb0>)
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	4613      	mov	r3, r2
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	4413      	add	r3, r2
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	440b      	add	r3, r1
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d0e5      	beq.n	80103c8 <vTaskSwitchContext+0x24>
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	4613      	mov	r3, r2
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4413      	add	r3, r2
 8010404:	009b      	lsls	r3, r3, #2
 8010406:	4a13      	ldr	r2, [pc, #76]	; (8010454 <vTaskSwitchContext+0xb0>)
 8010408:	4413      	add	r3, r2
 801040a:	60bb      	str	r3, [r7, #8]
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	685a      	ldr	r2, [r3, #4]
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	605a      	str	r2, [r3, #4]
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	685a      	ldr	r2, [r3, #4]
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	3308      	adds	r3, #8
 801041e:	429a      	cmp	r2, r3
 8010420:	d104      	bne.n	801042c <vTaskSwitchContext+0x88>
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	685a      	ldr	r2, [r3, #4]
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	605a      	str	r2, [r3, #4]
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	4a09      	ldr	r2, [pc, #36]	; (8010458 <vTaskSwitchContext+0xb4>)
 8010434:	6013      	str	r3, [r2, #0]
 8010436:	4a06      	ldr	r2, [pc, #24]	; (8010450 <vTaskSwitchContext+0xac>)
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6013      	str	r3, [r2, #0]
}
 801043c:	bf00      	nop
 801043e:	3714      	adds	r7, #20
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr
 8010448:	20001098 	.word	0x20001098
 801044c:	20001084 	.word	0x20001084
 8010450:	20001078 	.word	0x20001078
 8010454:	20000ba0 	.word	0x20000ba0
 8010458:	20000b9c 	.word	0x20000b9c

0801045c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d109      	bne.n	8010480 <vTaskPlaceOnEventList+0x24>
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	60fb      	str	r3, [r7, #12]
 801047e:	e7fe      	b.n	801047e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010480:	4b07      	ldr	r3, [pc, #28]	; (80104a0 <vTaskPlaceOnEventList+0x44>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	3318      	adds	r3, #24
 8010486:	4619      	mov	r1, r3
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7fe fc2e 	bl	800ecea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801048e:	2101      	movs	r1, #1
 8010490:	6838      	ldr	r0, [r7, #0]
 8010492:	f000 fb6d 	bl	8010b70 <prvAddCurrentTaskToDelayedList>
}
 8010496:	bf00      	nop
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	20000b9c 	.word	0x20000b9c

080104a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d109      	bne.n	80104ca <vTaskPlaceOnEventListRestricted+0x26>
 80104b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ba:	f383 8811 	msr	BASEPRI, r3
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	617b      	str	r3, [r7, #20]
 80104c8:	e7fe      	b.n	80104c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104ca:	4b0a      	ldr	r3, [pc, #40]	; (80104f4 <vTaskPlaceOnEventListRestricted+0x50>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	3318      	adds	r3, #24
 80104d0:	4619      	mov	r1, r3
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f7fe fbe5 	bl	800eca2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d002      	beq.n	80104e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80104de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80104e4:	6879      	ldr	r1, [r7, #4]
 80104e6:	68b8      	ldr	r0, [r7, #8]
 80104e8:	f000 fb42 	bl	8010b70 <prvAddCurrentTaskToDelayedList>
	}
 80104ec:	bf00      	nop
 80104ee:	3718      	adds	r7, #24
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	20000b9c 	.word	0x20000b9c

080104f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b086      	sub	sp, #24
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d109      	bne.n	8010522 <xTaskRemoveFromEventList+0x2a>
 801050e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	f3bf 8f6f 	isb	sy
 801051a:	f3bf 8f4f 	dsb	sy
 801051e:	60fb      	str	r3, [r7, #12]
 8010520:	e7fe      	b.n	8010520 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	3318      	adds	r3, #24
 8010526:	4618      	mov	r0, r3
 8010528:	f7fe fc18 	bl	800ed5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801052c:	4b1d      	ldr	r3, [pc, #116]	; (80105a4 <xTaskRemoveFromEventList+0xac>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d11d      	bne.n	8010570 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	3304      	adds	r3, #4
 8010538:	4618      	mov	r0, r3
 801053a:	f7fe fc0f 	bl	800ed5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010542:	4b19      	ldr	r3, [pc, #100]	; (80105a8 <xTaskRemoveFromEventList+0xb0>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	429a      	cmp	r2, r3
 8010548:	d903      	bls.n	8010552 <xTaskRemoveFromEventList+0x5a>
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054e:	4a16      	ldr	r2, [pc, #88]	; (80105a8 <xTaskRemoveFromEventList+0xb0>)
 8010550:	6013      	str	r3, [r2, #0]
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010556:	4613      	mov	r3, r2
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	4413      	add	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4a13      	ldr	r2, [pc, #76]	; (80105ac <xTaskRemoveFromEventList+0xb4>)
 8010560:	441a      	add	r2, r3
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	3304      	adds	r3, #4
 8010566:	4619      	mov	r1, r3
 8010568:	4610      	mov	r0, r2
 801056a:	f7fe fb9a 	bl	800eca2 <vListInsertEnd>
 801056e:	e005      	b.n	801057c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	3318      	adds	r3, #24
 8010574:	4619      	mov	r1, r3
 8010576:	480e      	ldr	r0, [pc, #56]	; (80105b0 <xTaskRemoveFromEventList+0xb8>)
 8010578:	f7fe fb93 	bl	800eca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010580:	4b0c      	ldr	r3, [pc, #48]	; (80105b4 <xTaskRemoveFromEventList+0xbc>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010586:	429a      	cmp	r2, r3
 8010588:	d905      	bls.n	8010596 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801058a:	2301      	movs	r3, #1
 801058c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801058e:	4b0a      	ldr	r3, [pc, #40]	; (80105b8 <xTaskRemoveFromEventList+0xc0>)
 8010590:	2201      	movs	r2, #1
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	e001      	b.n	801059a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010596:	2300      	movs	r3, #0
 8010598:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801059a:	697b      	ldr	r3, [r7, #20]
}
 801059c:	4618      	mov	r0, r3
 801059e:	3718      	adds	r7, #24
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	20001098 	.word	0x20001098
 80105a8:	20001078 	.word	0x20001078
 80105ac:	20000ba0 	.word	0x20000ba0
 80105b0:	20001030 	.word	0x20001030
 80105b4:	20000b9c 	.word	0x20000b9c
 80105b8:	20001084 	.word	0x20001084

080105bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80105c4:	4b06      	ldr	r3, [pc, #24]	; (80105e0 <vTaskInternalSetTimeOutState+0x24>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80105cc:	4b05      	ldr	r3, [pc, #20]	; (80105e4 <vTaskInternalSetTimeOutState+0x28>)
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	605a      	str	r2, [r3, #4]
}
 80105d4:	bf00      	nop
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr
 80105e0:	20001088 	.word	0x20001088
 80105e4:	20001074 	.word	0x20001074

080105e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b088      	sub	sp, #32
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d109      	bne.n	801060c <xTaskCheckForTimeOut+0x24>
 80105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	613b      	str	r3, [r7, #16]
 801060a:	e7fe      	b.n	801060a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d109      	bne.n	8010626 <xTaskCheckForTimeOut+0x3e>
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	60fb      	str	r3, [r7, #12]
 8010624:	e7fe      	b.n	8010624 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010626:	f000 ff61 	bl	80114ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801062a:	4b1d      	ldr	r3, [pc, #116]	; (80106a0 <xTaskCheckForTimeOut+0xb8>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	69ba      	ldr	r2, [r7, #24]
 8010636:	1ad3      	subs	r3, r2, r3
 8010638:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010642:	d102      	bne.n	801064a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010644:	2300      	movs	r3, #0
 8010646:	61fb      	str	r3, [r7, #28]
 8010648:	e023      	b.n	8010692 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	4b15      	ldr	r3, [pc, #84]	; (80106a4 <xTaskCheckForTimeOut+0xbc>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	429a      	cmp	r2, r3
 8010654:	d007      	beq.n	8010666 <xTaskCheckForTimeOut+0x7e>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	69ba      	ldr	r2, [r7, #24]
 801065c:	429a      	cmp	r2, r3
 801065e:	d302      	bcc.n	8010666 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010660:	2301      	movs	r3, #1
 8010662:	61fb      	str	r3, [r7, #28]
 8010664:	e015      	b.n	8010692 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	697a      	ldr	r2, [r7, #20]
 801066c:	429a      	cmp	r2, r3
 801066e:	d20b      	bcs.n	8010688 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	1ad2      	subs	r2, r2, r3
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7ff ff9d 	bl	80105bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010682:	2300      	movs	r3, #0
 8010684:	61fb      	str	r3, [r7, #28]
 8010686:	e004      	b.n	8010692 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	2200      	movs	r2, #0
 801068c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801068e:	2301      	movs	r3, #1
 8010690:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010692:	f000 ff59 	bl	8011548 <vPortExitCritical>

	return xReturn;
 8010696:	69fb      	ldr	r3, [r7, #28]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3720      	adds	r7, #32
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	20001074 	.word	0x20001074
 80106a4:	20001088 	.word	0x20001088

080106a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80106a8:	b480      	push	{r7}
 80106aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80106ac:	4b03      	ldr	r3, [pc, #12]	; (80106bc <vTaskMissedYield+0x14>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	601a      	str	r2, [r3, #0]
}
 80106b2:	bf00      	nop
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	20001084 	.word	0x20001084

080106c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80106c8:	f000 f852 	bl	8010770 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80106cc:	4b06      	ldr	r3, [pc, #24]	; (80106e8 <prvIdleTask+0x28>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d9f9      	bls.n	80106c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80106d4:	4b05      	ldr	r3, [pc, #20]	; (80106ec <prvIdleTask+0x2c>)
 80106d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106da:	601a      	str	r2, [r3, #0]
 80106dc:	f3bf 8f4f 	dsb	sy
 80106e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80106e4:	e7f0      	b.n	80106c8 <prvIdleTask+0x8>
 80106e6:	bf00      	nop
 80106e8:	20000ba0 	.word	0x20000ba0
 80106ec:	e000ed04 	.word	0xe000ed04

080106f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80106f6:	2300      	movs	r3, #0
 80106f8:	607b      	str	r3, [r7, #4]
 80106fa:	e00c      	b.n	8010716 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	4613      	mov	r3, r2
 8010700:	009b      	lsls	r3, r3, #2
 8010702:	4413      	add	r3, r2
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	4a12      	ldr	r2, [pc, #72]	; (8010750 <prvInitialiseTaskLists+0x60>)
 8010708:	4413      	add	r3, r2
 801070a:	4618      	mov	r0, r3
 801070c:	f7fe fa9c 	bl	800ec48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	3301      	adds	r3, #1
 8010714:	607b      	str	r3, [r7, #4]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2b37      	cmp	r3, #55	; 0x37
 801071a:	d9ef      	bls.n	80106fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801071c:	480d      	ldr	r0, [pc, #52]	; (8010754 <prvInitialiseTaskLists+0x64>)
 801071e:	f7fe fa93 	bl	800ec48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010722:	480d      	ldr	r0, [pc, #52]	; (8010758 <prvInitialiseTaskLists+0x68>)
 8010724:	f7fe fa90 	bl	800ec48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010728:	480c      	ldr	r0, [pc, #48]	; (801075c <prvInitialiseTaskLists+0x6c>)
 801072a:	f7fe fa8d 	bl	800ec48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801072e:	480c      	ldr	r0, [pc, #48]	; (8010760 <prvInitialiseTaskLists+0x70>)
 8010730:	f7fe fa8a 	bl	800ec48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010734:	480b      	ldr	r0, [pc, #44]	; (8010764 <prvInitialiseTaskLists+0x74>)
 8010736:	f7fe fa87 	bl	800ec48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801073a:	4b0b      	ldr	r3, [pc, #44]	; (8010768 <prvInitialiseTaskLists+0x78>)
 801073c:	4a05      	ldr	r2, [pc, #20]	; (8010754 <prvInitialiseTaskLists+0x64>)
 801073e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <prvInitialiseTaskLists+0x7c>)
 8010742:	4a05      	ldr	r2, [pc, #20]	; (8010758 <prvInitialiseTaskLists+0x68>)
 8010744:	601a      	str	r2, [r3, #0]
}
 8010746:	bf00      	nop
 8010748:	3708      	adds	r7, #8
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	20000ba0 	.word	0x20000ba0
 8010754:	20001000 	.word	0x20001000
 8010758:	20001014 	.word	0x20001014
 801075c:	20001030 	.word	0x20001030
 8010760:	20001044 	.word	0x20001044
 8010764:	2000105c 	.word	0x2000105c
 8010768:	20001028 	.word	0x20001028
 801076c:	2000102c 	.word	0x2000102c

08010770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010776:	e019      	b.n	80107ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010778:	f000 feb8 	bl	80114ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801077c:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <prvCheckTasksWaitingTermination+0x4c>)
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	3304      	adds	r3, #4
 8010788:	4618      	mov	r0, r3
 801078a:	f7fe fae7 	bl	800ed5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801078e:	4b0c      	ldr	r3, [pc, #48]	; (80107c0 <prvCheckTasksWaitingTermination+0x50>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	3b01      	subs	r3, #1
 8010794:	4a0a      	ldr	r2, [pc, #40]	; (80107c0 <prvCheckTasksWaitingTermination+0x50>)
 8010796:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010798:	4b0a      	ldr	r3, [pc, #40]	; (80107c4 <prvCheckTasksWaitingTermination+0x54>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3b01      	subs	r3, #1
 801079e:	4a09      	ldr	r2, [pc, #36]	; (80107c4 <prvCheckTasksWaitingTermination+0x54>)
 80107a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80107a2:	f000 fed1 	bl	8011548 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 f80e 	bl	80107c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107ac:	4b05      	ldr	r3, [pc, #20]	; (80107c4 <prvCheckTasksWaitingTermination+0x54>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1e1      	bne.n	8010778 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80107b4:	bf00      	nop
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	20001044 	.word	0x20001044
 80107c0:	20001070 	.word	0x20001070
 80107c4:	20001058 	.word	0x20001058

080107c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d108      	bne.n	80107ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107de:	4618      	mov	r0, r3
 80107e0:	f001 f860 	bl	80118a4 <vPortFree>
				vPortFree( pxTCB );
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f001 f85d 	bl	80118a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80107ea:	e017      	b.n	801081c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d103      	bne.n	80107fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f001 f854 	bl	80118a4 <vPortFree>
	}
 80107fc:	e00e      	b.n	801081c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010804:	2b02      	cmp	r3, #2
 8010806:	d009      	beq.n	801081c <prvDeleteTCB+0x54>
 8010808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080c:	f383 8811 	msr	BASEPRI, r3
 8010810:	f3bf 8f6f 	isb	sy
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	60fb      	str	r3, [r7, #12]
 801081a:	e7fe      	b.n	801081a <prvDeleteTCB+0x52>
	}
 801081c:	bf00      	nop
 801081e:	3710      	adds	r7, #16
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801082a:	4b0c      	ldr	r3, [pc, #48]	; (801085c <prvResetNextTaskUnblockTime+0x38>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d104      	bne.n	801083e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010834:	4b0a      	ldr	r3, [pc, #40]	; (8010860 <prvResetNextTaskUnblockTime+0x3c>)
 8010836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801083a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801083c:	e008      	b.n	8010850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801083e:	4b07      	ldr	r3, [pc, #28]	; (801085c <prvResetNextTaskUnblockTime+0x38>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	4a04      	ldr	r2, [pc, #16]	; (8010860 <prvResetNextTaskUnblockTime+0x3c>)
 801084e:	6013      	str	r3, [r2, #0]
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	20001028 	.word	0x20001028
 8010860:	20001090 	.word	0x20001090

08010864 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801086a:	4b0b      	ldr	r3, [pc, #44]	; (8010898 <xTaskGetSchedulerState+0x34>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d102      	bne.n	8010878 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010872:	2301      	movs	r3, #1
 8010874:	607b      	str	r3, [r7, #4]
 8010876:	e008      	b.n	801088a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010878:	4b08      	ldr	r3, [pc, #32]	; (801089c <xTaskGetSchedulerState+0x38>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d102      	bne.n	8010886 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010880:	2302      	movs	r3, #2
 8010882:	607b      	str	r3, [r7, #4]
 8010884:	e001      	b.n	801088a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010886:	2300      	movs	r3, #0
 8010888:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801088a:	687b      	ldr	r3, [r7, #4]
	}
 801088c:	4618      	mov	r0, r3
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr
 8010898:	2000107c 	.word	0x2000107c
 801089c:	20001098 	.word	0x20001098

080108a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80108ac:	2300      	movs	r3, #0
 80108ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d051      	beq.n	801095a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ba:	4b2a      	ldr	r3, [pc, #168]	; (8010964 <xTaskPriorityInherit+0xc4>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d241      	bcs.n	8010948 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	699b      	ldr	r3, [r3, #24]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	db06      	blt.n	80108da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108cc:	4b25      	ldr	r3, [pc, #148]	; (8010964 <xTaskPriorityInherit+0xc4>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	6959      	ldr	r1, [r3, #20]
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e2:	4613      	mov	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	4413      	add	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	4a1f      	ldr	r2, [pc, #124]	; (8010968 <xTaskPriorityInherit+0xc8>)
 80108ec:	4413      	add	r3, r2
 80108ee:	4299      	cmp	r1, r3
 80108f0:	d122      	bne.n	8010938 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	3304      	adds	r3, #4
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fe fa30 	bl	800ed5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80108fc:	4b19      	ldr	r3, [pc, #100]	; (8010964 <xTaskPriorityInherit+0xc4>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801090a:	4b18      	ldr	r3, [pc, #96]	; (801096c <xTaskPriorityInherit+0xcc>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	429a      	cmp	r2, r3
 8010910:	d903      	bls.n	801091a <xTaskPriorityInherit+0x7a>
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010916:	4a15      	ldr	r2, [pc, #84]	; (801096c <xTaskPriorityInherit+0xcc>)
 8010918:	6013      	str	r3, [r2, #0]
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801091e:	4613      	mov	r3, r2
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	4413      	add	r3, r2
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	4a10      	ldr	r2, [pc, #64]	; (8010968 <xTaskPriorityInherit+0xc8>)
 8010928:	441a      	add	r2, r3
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	3304      	adds	r3, #4
 801092e:	4619      	mov	r1, r3
 8010930:	4610      	mov	r0, r2
 8010932:	f7fe f9b6 	bl	800eca2 <vListInsertEnd>
 8010936:	e004      	b.n	8010942 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010938:	4b0a      	ldr	r3, [pc, #40]	; (8010964 <xTaskPriorityInherit+0xc4>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010942:	2301      	movs	r3, #1
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	e008      	b.n	801095a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801094c:	4b05      	ldr	r3, [pc, #20]	; (8010964 <xTaskPriorityInherit+0xc4>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010952:	429a      	cmp	r2, r3
 8010954:	d201      	bcs.n	801095a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010956:	2301      	movs	r3, #1
 8010958:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801095a:	68fb      	ldr	r3, [r7, #12]
	}
 801095c:	4618      	mov	r0, r3
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}
 8010964:	20000b9c 	.word	0x20000b9c
 8010968:	20000ba0 	.word	0x20000ba0
 801096c:	20001078 	.word	0x20001078

08010970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801097c:	2300      	movs	r3, #0
 801097e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d054      	beq.n	8010a30 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010986:	4b2d      	ldr	r3, [pc, #180]	; (8010a3c <xTaskPriorityDisinherit+0xcc>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	693a      	ldr	r2, [r7, #16]
 801098c:	429a      	cmp	r2, r3
 801098e:	d009      	beq.n	80109a4 <xTaskPriorityDisinherit+0x34>
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	60fb      	str	r3, [r7, #12]
 80109a2:	e7fe      	b.n	80109a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d109      	bne.n	80109c0 <xTaskPriorityDisinherit+0x50>
 80109ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b0:	f383 8811 	msr	BASEPRI, r3
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	60bb      	str	r3, [r7, #8]
 80109be:	e7fe      	b.n	80109be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109c4:	1e5a      	subs	r2, r3, #1
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d02c      	beq.n	8010a30 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d128      	bne.n	8010a30 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	3304      	adds	r3, #4
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fe f9ba 	bl	800ed5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a00:	4b0f      	ldr	r3, [pc, #60]	; (8010a40 <xTaskPriorityDisinherit+0xd0>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d903      	bls.n	8010a10 <xTaskPriorityDisinherit+0xa0>
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a0c:	4a0c      	ldr	r2, [pc, #48]	; (8010a40 <xTaskPriorityDisinherit+0xd0>)
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a14:	4613      	mov	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4413      	add	r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	4a09      	ldr	r2, [pc, #36]	; (8010a44 <xTaskPriorityDisinherit+0xd4>)
 8010a1e:	441a      	add	r2, r3
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	3304      	adds	r3, #4
 8010a24:	4619      	mov	r1, r3
 8010a26:	4610      	mov	r0, r2
 8010a28:	f7fe f93b 	bl	800eca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a30:	697b      	ldr	r3, [r7, #20]
	}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3718      	adds	r7, #24
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	20000b9c 	.word	0x20000b9c
 8010a40:	20001078 	.word	0x20001078
 8010a44:	20000ba0 	.word	0x20000ba0

08010a48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b088      	sub	sp, #32
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010a56:	2301      	movs	r3, #1
 8010a58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d068      	beq.n	8010b32 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010a60:	69bb      	ldr	r3, [r7, #24]
 8010a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d109      	bne.n	8010a7c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8010a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6c:	f383 8811 	msr	BASEPRI, r3
 8010a70:	f3bf 8f6f 	isb	sy
 8010a74:	f3bf 8f4f 	dsb	sy
 8010a78:	60fb      	str	r3, [r7, #12]
 8010a7a:	e7fe      	b.n	8010a7a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010a7c:	69bb      	ldr	r3, [r7, #24]
 8010a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a80:	683a      	ldr	r2, [r7, #0]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d902      	bls.n	8010a8c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	61fb      	str	r3, [r7, #28]
 8010a8a:	e002      	b.n	8010a92 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a96:	69fa      	ldr	r2, [r7, #28]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d04a      	beq.n	8010b32 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010a9c:	69bb      	ldr	r3, [r7, #24]
 8010a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aa0:	697a      	ldr	r2, [r7, #20]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d145      	bne.n	8010b32 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010aa6:	4b25      	ldr	r3, [pc, #148]	; (8010b3c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	69ba      	ldr	r2, [r7, #24]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d109      	bne.n	8010ac4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	60bb      	str	r3, [r7, #8]
 8010ac2:	e7fe      	b.n	8010ac2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010ac4:	69bb      	ldr	r3, [r7, #24]
 8010ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	69fa      	ldr	r2, [r7, #28]
 8010ace:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	699b      	ldr	r3, [r3, #24]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	db04      	blt.n	8010ae2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ae2:	69bb      	ldr	r3, [r7, #24]
 8010ae4:	6959      	ldr	r1, [r3, #20]
 8010ae6:	693a      	ldr	r2, [r7, #16]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	4a13      	ldr	r2, [pc, #76]	; (8010b40 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010af2:	4413      	add	r3, r2
 8010af4:	4299      	cmp	r1, r3
 8010af6:	d11c      	bne.n	8010b32 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	3304      	adds	r3, #4
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fe f92d 	bl	800ed5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010b02:	69bb      	ldr	r3, [r7, #24]
 8010b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b06:	4b0f      	ldr	r3, [pc, #60]	; (8010b44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d903      	bls.n	8010b16 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b12:	4a0c      	ldr	r2, [pc, #48]	; (8010b44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010b14:	6013      	str	r3, [r2, #0]
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	4413      	add	r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	4a07      	ldr	r2, [pc, #28]	; (8010b40 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010b24:	441a      	add	r2, r3
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	3304      	adds	r3, #4
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	f7fe f8b8 	bl	800eca2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b32:	bf00      	nop
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	20000b9c 	.word	0x20000b9c
 8010b40:	20000ba0 	.word	0x20000ba0
 8010b44:	20001078 	.word	0x20001078

08010b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010b48:	b480      	push	{r7}
 8010b4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010b4c:	4b07      	ldr	r3, [pc, #28]	; (8010b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d004      	beq.n	8010b5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010b54:	4b05      	ldr	r3, [pc, #20]	; (8010b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b5a:	3201      	adds	r2, #1
 8010b5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010b5e:	4b03      	ldr	r3, [pc, #12]	; (8010b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010b60:	681b      	ldr	r3, [r3, #0]
	}
 8010b62:	4618      	mov	r0, r3
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr
 8010b6c:	20000b9c 	.word	0x20000b9c

08010b70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010b7a:	4b21      	ldr	r3, [pc, #132]	; (8010c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b80:	4b20      	ldr	r3, [pc, #128]	; (8010c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	3304      	adds	r3, #4
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fe f8e8 	bl	800ed5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b92:	d10a      	bne.n	8010baa <prvAddCurrentTaskToDelayedList+0x3a>
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d007      	beq.n	8010baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b9a:	4b1a      	ldr	r3, [pc, #104]	; (8010c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	3304      	adds	r3, #4
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	4819      	ldr	r0, [pc, #100]	; (8010c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8010ba4:	f7fe f87d 	bl	800eca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ba8:	e026      	b.n	8010bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	4413      	add	r3, r2
 8010bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010bb2:	4b14      	ldr	r3, [pc, #80]	; (8010c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010bba:	68ba      	ldr	r2, [r7, #8]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d209      	bcs.n	8010bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010bc2:	4b12      	ldr	r3, [pc, #72]	; (8010c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	4b0f      	ldr	r3, [pc, #60]	; (8010c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	3304      	adds	r3, #4
 8010bcc:	4619      	mov	r1, r3
 8010bce:	4610      	mov	r0, r2
 8010bd0:	f7fe f88b 	bl	800ecea <vListInsert>
}
 8010bd4:	e010      	b.n	8010bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010bd6:	4b0e      	ldr	r3, [pc, #56]	; (8010c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	4b0a      	ldr	r3, [pc, #40]	; (8010c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	3304      	adds	r3, #4
 8010be0:	4619      	mov	r1, r3
 8010be2:	4610      	mov	r0, r2
 8010be4:	f7fe f881 	bl	800ecea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010be8:	4b0a      	ldr	r3, [pc, #40]	; (8010c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d202      	bcs.n	8010bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010bf2:	4a08      	ldr	r2, [pc, #32]	; (8010c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	6013      	str	r3, [r2, #0]
}
 8010bf8:	bf00      	nop
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	20001074 	.word	0x20001074
 8010c04:	20000b9c 	.word	0x20000b9c
 8010c08:	2000105c 	.word	0x2000105c
 8010c0c:	2000102c 	.word	0x2000102c
 8010c10:	20001028 	.word	0x20001028
 8010c14:	20001090 	.word	0x20001090

08010c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b08a      	sub	sp, #40	; 0x28
 8010c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010c22:	f000 faff 	bl	8011224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010c26:	4b1c      	ldr	r3, [pc, #112]	; (8010c98 <xTimerCreateTimerTask+0x80>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d021      	beq.n	8010c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010c32:	2300      	movs	r3, #0
 8010c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010c36:	1d3a      	adds	r2, r7, #4
 8010c38:	f107 0108 	add.w	r1, r7, #8
 8010c3c:	f107 030c 	add.w	r3, r7, #12
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fd ffe7 	bl	800ec14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010c46:	6879      	ldr	r1, [r7, #4]
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	9202      	str	r2, [sp, #8]
 8010c4e:	9301      	str	r3, [sp, #4]
 8010c50:	2302      	movs	r3, #2
 8010c52:	9300      	str	r3, [sp, #0]
 8010c54:	2300      	movs	r3, #0
 8010c56:	460a      	mov	r2, r1
 8010c58:	4910      	ldr	r1, [pc, #64]	; (8010c9c <xTimerCreateTimerTask+0x84>)
 8010c5a:	4811      	ldr	r0, [pc, #68]	; (8010ca0 <xTimerCreateTimerTask+0x88>)
 8010c5c:	f7fe ff0e 	bl	800fa7c <xTaskCreateStatic>
 8010c60:	4602      	mov	r2, r0
 8010c62:	4b10      	ldr	r3, [pc, #64]	; (8010ca4 <xTimerCreateTimerTask+0x8c>)
 8010c64:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010c66:	4b0f      	ldr	r3, [pc, #60]	; (8010ca4 <xTimerCreateTimerTask+0x8c>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d109      	bne.n	8010c8c <xTimerCreateTimerTask+0x74>
 8010c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7c:	f383 8811 	msr	BASEPRI, r3
 8010c80:	f3bf 8f6f 	isb	sy
 8010c84:	f3bf 8f4f 	dsb	sy
 8010c88:	613b      	str	r3, [r7, #16]
 8010c8a:	e7fe      	b.n	8010c8a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010c8c:	697b      	ldr	r3, [r7, #20]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3718      	adds	r7, #24
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	200010cc 	.word	0x200010cc
 8010c9c:	08013ef4 	.word	0x08013ef4
 8010ca0:	08010dd9 	.word	0x08010dd9
 8010ca4:	200010d0 	.word	0x200010d0

08010ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b08a      	sub	sp, #40	; 0x28
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	607a      	str	r2, [r7, #4]
 8010cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d109      	bne.n	8010cd4 <xTimerGenericCommand+0x2c>
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	623b      	str	r3, [r7, #32]
 8010cd2:	e7fe      	b.n	8010cd2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010cd4:	4b19      	ldr	r3, [pc, #100]	; (8010d3c <xTimerGenericCommand+0x94>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d02a      	beq.n	8010d32 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	2b05      	cmp	r3, #5
 8010cec:	dc18      	bgt.n	8010d20 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010cee:	f7ff fdb9 	bl	8010864 <xTaskGetSchedulerState>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	d109      	bne.n	8010d0c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010cf8:	4b10      	ldr	r3, [pc, #64]	; (8010d3c <xTimerGenericCommand+0x94>)
 8010cfa:	6818      	ldr	r0, [r3, #0]
 8010cfc:	f107 0110 	add.w	r1, r7, #16
 8010d00:	2300      	movs	r3, #0
 8010d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d04:	f7fe f9c4 	bl	800f090 <xQueueGenericSend>
 8010d08:	6278      	str	r0, [r7, #36]	; 0x24
 8010d0a:	e012      	b.n	8010d32 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010d0c:	4b0b      	ldr	r3, [pc, #44]	; (8010d3c <xTimerGenericCommand+0x94>)
 8010d0e:	6818      	ldr	r0, [r3, #0]
 8010d10:	f107 0110 	add.w	r1, r7, #16
 8010d14:	2300      	movs	r3, #0
 8010d16:	2200      	movs	r2, #0
 8010d18:	f7fe f9ba 	bl	800f090 <xQueueGenericSend>
 8010d1c:	6278      	str	r0, [r7, #36]	; 0x24
 8010d1e:	e008      	b.n	8010d32 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010d20:	4b06      	ldr	r3, [pc, #24]	; (8010d3c <xTimerGenericCommand+0x94>)
 8010d22:	6818      	ldr	r0, [r3, #0]
 8010d24:	f107 0110 	add.w	r1, r7, #16
 8010d28:	2300      	movs	r3, #0
 8010d2a:	683a      	ldr	r2, [r7, #0]
 8010d2c:	f7fe faaa 	bl	800f284 <xQueueGenericSendFromISR>
 8010d30:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3728      	adds	r7, #40	; 0x28
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	200010cc 	.word	0x200010cc

08010d40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b088      	sub	sp, #32
 8010d44:	af02      	add	r7, sp, #8
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d4a:	4b22      	ldr	r3, [pc, #136]	; (8010dd4 <prvProcessExpiredTimer+0x94>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	3304      	adds	r3, #4
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fd ffff 	bl	800ed5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d64:	f003 0304 	and.w	r3, r3, #4
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d021      	beq.n	8010db0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	699a      	ldr	r2, [r3, #24]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	18d1      	adds	r1, r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	683a      	ldr	r2, [r7, #0]
 8010d78:	6978      	ldr	r0, [r7, #20]
 8010d7a:	f000 f8d1 	bl	8010f20 <prvInsertTimerInActiveList>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d01e      	beq.n	8010dc2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d84:	2300      	movs	r3, #0
 8010d86:	9300      	str	r3, [sp, #0]
 8010d88:	2300      	movs	r3, #0
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	6978      	ldr	r0, [r7, #20]
 8010d90:	f7ff ff8a 	bl	8010ca8 <xTimerGenericCommand>
 8010d94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d112      	bne.n	8010dc2 <prvProcessExpiredTimer+0x82>
 8010d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da0:	f383 8811 	msr	BASEPRI, r3
 8010da4:	f3bf 8f6f 	isb	sy
 8010da8:	f3bf 8f4f 	dsb	sy
 8010dac:	60fb      	str	r3, [r7, #12]
 8010dae:	e7fe      	b.n	8010dae <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010db6:	f023 0301 	bic.w	r3, r3, #1
 8010dba:	b2da      	uxtb	r2, r3
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	6a1b      	ldr	r3, [r3, #32]
 8010dc6:	6978      	ldr	r0, [r7, #20]
 8010dc8:	4798      	blx	r3
}
 8010dca:	bf00      	nop
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	200010c4 	.word	0x200010c4

08010dd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010de0:	f107 0308 	add.w	r3, r7, #8
 8010de4:	4618      	mov	r0, r3
 8010de6:	f000 f857 	bl	8010e98 <prvGetNextExpireTime>
 8010dea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	4619      	mov	r1, r3
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f000 f803 	bl	8010dfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010df6:	f000 f8d5 	bl	8010fa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010dfa:	e7f1      	b.n	8010de0 <prvTimerTask+0x8>

08010dfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010e06:	f7ff f95b 	bl	80100c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e0a:	f107 0308 	add.w	r3, r7, #8
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f000 f866 	bl	8010ee0 <prvSampleTimeNow>
 8010e14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d130      	bne.n	8010e7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d10a      	bne.n	8010e38 <prvProcessTimerOrBlockTask+0x3c>
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d806      	bhi.n	8010e38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010e2a:	f7ff f957 	bl	80100dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010e2e:	68f9      	ldr	r1, [r7, #12]
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7ff ff85 	bl	8010d40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010e36:	e024      	b.n	8010e82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d008      	beq.n	8010e50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010e3e:	4b13      	ldr	r3, [pc, #76]	; (8010e8c <prvProcessTimerOrBlockTask+0x90>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d101      	bne.n	8010e4c <prvProcessTimerOrBlockTask+0x50>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e000      	b.n	8010e4e <prvProcessTimerOrBlockTask+0x52>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010e50:	4b0f      	ldr	r3, [pc, #60]	; (8010e90 <prvProcessTimerOrBlockTask+0x94>)
 8010e52:	6818      	ldr	r0, [r3, #0]
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	1ad3      	subs	r3, r2, r3
 8010e5a:	683a      	ldr	r2, [r7, #0]
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	f7fe fdd9 	bl	800fa14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010e62:	f7ff f93b 	bl	80100dc <xTaskResumeAll>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d10a      	bne.n	8010e82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010e6c:	4b09      	ldr	r3, [pc, #36]	; (8010e94 <prvProcessTimerOrBlockTask+0x98>)
 8010e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	f3bf 8f4f 	dsb	sy
 8010e78:	f3bf 8f6f 	isb	sy
}
 8010e7c:	e001      	b.n	8010e82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010e7e:	f7ff f92d 	bl	80100dc <xTaskResumeAll>
}
 8010e82:	bf00      	nop
 8010e84:	3710      	adds	r7, #16
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	200010c8 	.word	0x200010c8
 8010e90:	200010cc 	.word	0x200010cc
 8010e94:	e000ed04 	.word	0xe000ed04

08010e98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ea0:	4b0e      	ldr	r3, [pc, #56]	; (8010edc <prvGetNextExpireTime+0x44>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d101      	bne.n	8010eae <prvGetNextExpireTime+0x16>
 8010eaa:	2201      	movs	r2, #1
 8010eac:	e000      	b.n	8010eb0 <prvGetNextExpireTime+0x18>
 8010eae:	2200      	movs	r2, #0
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d105      	bne.n	8010ec8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ebc:	4b07      	ldr	r3, [pc, #28]	; (8010edc <prvGetNextExpireTime+0x44>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	60fb      	str	r3, [r7, #12]
 8010ec6:	e001      	b.n	8010ecc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3714      	adds	r7, #20
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop
 8010edc:	200010c4 	.word	0x200010c4

08010ee0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010ee8:	f7ff f994 	bl	8010214 <xTaskGetTickCount>
 8010eec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010eee:	4b0b      	ldr	r3, [pc, #44]	; (8010f1c <prvSampleTimeNow+0x3c>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d205      	bcs.n	8010f04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010ef8:	f000 f930 	bl	801115c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2201      	movs	r2, #1
 8010f00:	601a      	str	r2, [r3, #0]
 8010f02:	e002      	b.n	8010f0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010f0a:	4a04      	ldr	r2, [pc, #16]	; (8010f1c <prvSampleTimeNow+0x3c>)
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010f10:	68fb      	ldr	r3, [r7, #12]
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3710      	adds	r7, #16
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	200010d4 	.word	0x200010d4

08010f20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b086      	sub	sp, #24
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	607a      	str	r2, [r7, #4]
 8010f2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	68ba      	ldr	r2, [r7, #8]
 8010f36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	68fa      	ldr	r2, [r7, #12]
 8010f3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d812      	bhi.n	8010f6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	1ad2      	subs	r2, r2, r3
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	699b      	ldr	r3, [r3, #24]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d302      	bcc.n	8010f5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010f54:	2301      	movs	r3, #1
 8010f56:	617b      	str	r3, [r7, #20]
 8010f58:	e01b      	b.n	8010f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010f5a:	4b10      	ldr	r3, [pc, #64]	; (8010f9c <prvInsertTimerInActiveList+0x7c>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	3304      	adds	r3, #4
 8010f62:	4619      	mov	r1, r3
 8010f64:	4610      	mov	r0, r2
 8010f66:	f7fd fec0 	bl	800ecea <vListInsert>
 8010f6a:	e012      	b.n	8010f92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d206      	bcs.n	8010f82 <prvInsertTimerInActiveList+0x62>
 8010f74:	68ba      	ldr	r2, [r7, #8]
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d302      	bcc.n	8010f82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	617b      	str	r3, [r7, #20]
 8010f80:	e007      	b.n	8010f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f82:	4b07      	ldr	r3, [pc, #28]	; (8010fa0 <prvInsertTimerInActiveList+0x80>)
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	3304      	adds	r3, #4
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	4610      	mov	r0, r2
 8010f8e:	f7fd feac 	bl	800ecea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010f92:	697b      	ldr	r3, [r7, #20]
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3718      	adds	r7, #24
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	200010c8 	.word	0x200010c8
 8010fa0:	200010c4 	.word	0x200010c4

08010fa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b08e      	sub	sp, #56	; 0x38
 8010fa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010faa:	e0c6      	b.n	801113a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	da17      	bge.n	8010fe2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010fb2:	1d3b      	adds	r3, r7, #4
 8010fb4:	3304      	adds	r3, #4
 8010fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d109      	bne.n	8010fd2 <prvProcessReceivedCommands+0x2e>
 8010fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc2:	f383 8811 	msr	BASEPRI, r3
 8010fc6:	f3bf 8f6f 	isb	sy
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	61fb      	str	r3, [r7, #28]
 8010fd0:	e7fe      	b.n	8010fd0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fd8:	6850      	ldr	r0, [r2, #4]
 8010fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fdc:	6892      	ldr	r2, [r2, #8]
 8010fde:	4611      	mov	r1, r2
 8010fe0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f2c0 80a7 	blt.w	8011138 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff0:	695b      	ldr	r3, [r3, #20]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d004      	beq.n	8011000 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fd feae 	bl	800ed5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011000:	463b      	mov	r3, r7
 8011002:	4618      	mov	r0, r3
 8011004:	f7ff ff6c 	bl	8010ee0 <prvSampleTimeNow>
 8011008:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2b09      	cmp	r3, #9
 801100e:	f200 8094 	bhi.w	801113a <prvProcessReceivedCommands+0x196>
 8011012:	a201      	add	r2, pc, #4	; (adr r2, 8011018 <prvProcessReceivedCommands+0x74>)
 8011014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011018:	08011041 	.word	0x08011041
 801101c:	08011041 	.word	0x08011041
 8011020:	08011041 	.word	0x08011041
 8011024:	080110b3 	.word	0x080110b3
 8011028:	080110c7 	.word	0x080110c7
 801102c:	0801110f 	.word	0x0801110f
 8011030:	08011041 	.word	0x08011041
 8011034:	08011041 	.word	0x08011041
 8011038:	080110b3 	.word	0x080110b3
 801103c:	080110c7 	.word	0x080110c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011046:	f043 0301 	orr.w	r3, r3, #1
 801104a:	b2da      	uxtb	r2, r3
 801104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011052:	68ba      	ldr	r2, [r7, #8]
 8011054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	18d1      	adds	r1, r2, r3
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801105e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011060:	f7ff ff5e 	bl	8010f20 <prvInsertTimerInActiveList>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d067      	beq.n	801113a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106c:	6a1b      	ldr	r3, [r3, #32]
 801106e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011070:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011078:	f003 0304 	and.w	r3, r3, #4
 801107c:	2b00      	cmp	r3, #0
 801107e:	d05c      	beq.n	801113a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011080:	68ba      	ldr	r2, [r7, #8]
 8011082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011084:	699b      	ldr	r3, [r3, #24]
 8011086:	441a      	add	r2, r3
 8011088:	2300      	movs	r3, #0
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	2300      	movs	r3, #0
 801108e:	2100      	movs	r1, #0
 8011090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011092:	f7ff fe09 	bl	8010ca8 <xTimerGenericCommand>
 8011096:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011098:	6a3b      	ldr	r3, [r7, #32]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d14d      	bne.n	801113a <prvProcessReceivedCommands+0x196>
 801109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a2:	f383 8811 	msr	BASEPRI, r3
 80110a6:	f3bf 8f6f 	isb	sy
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	61bb      	str	r3, [r7, #24]
 80110b0:	e7fe      	b.n	80110b0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80110b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110b8:	f023 0301 	bic.w	r3, r3, #1
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80110c4:	e039      	b.n	801113a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80110c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110cc:	f043 0301 	orr.w	r3, r3, #1
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	699b      	ldr	r3, [r3, #24]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d109      	bne.n	80110fa <prvProcessReceivedCommands+0x156>
 80110e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ea:	f383 8811 	msr	BASEPRI, r3
 80110ee:	f3bf 8f6f 	isb	sy
 80110f2:	f3bf 8f4f 	dsb	sy
 80110f6:	617b      	str	r3, [r7, #20]
 80110f8:	e7fe      	b.n	80110f8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80110fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fc:	699a      	ldr	r2, [r3, #24]
 80110fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011100:	18d1      	adds	r1, r2, r3
 8011102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011108:	f7ff ff0a 	bl	8010f20 <prvInsertTimerInActiveList>
					break;
 801110c:	e015      	b.n	801113a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011114:	f003 0302 	and.w	r3, r3, #2
 8011118:	2b00      	cmp	r3, #0
 801111a:	d103      	bne.n	8011124 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801111c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801111e:	f000 fbc1 	bl	80118a4 <vPortFree>
 8011122:	e00a      	b.n	801113a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801112a:	f023 0301 	bic.w	r3, r3, #1
 801112e:	b2da      	uxtb	r2, r3
 8011130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011136:	e000      	b.n	801113a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011138:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801113a:	4b07      	ldr	r3, [pc, #28]	; (8011158 <prvProcessReceivedCommands+0x1b4>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	1d39      	adds	r1, r7, #4
 8011140:	2200      	movs	r2, #0
 8011142:	4618      	mov	r0, r3
 8011144:	f7fe f932 	bl	800f3ac <xQueueReceive>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	f47f af2e 	bne.w	8010fac <prvProcessReceivedCommands+0x8>
	}
}
 8011150:	bf00      	nop
 8011152:	3730      	adds	r7, #48	; 0x30
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	200010cc 	.word	0x200010cc

0801115c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b088      	sub	sp, #32
 8011160:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011162:	e047      	b.n	80111f4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011164:	4b2d      	ldr	r3, [pc, #180]	; (801121c <prvSwitchTimerLists+0xc0>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801116e:	4b2b      	ldr	r3, [pc, #172]	; (801121c <prvSwitchTimerLists+0xc0>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	3304      	adds	r3, #4
 801117c:	4618      	mov	r0, r3
 801117e:	f7fd fded 	bl	800ed5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	6a1b      	ldr	r3, [r3, #32]
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011190:	f003 0304 	and.w	r3, r3, #4
 8011194:	2b00      	cmp	r3, #0
 8011196:	d02d      	beq.n	80111f4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	699b      	ldr	r3, [r3, #24]
 801119c:	693a      	ldr	r2, [r7, #16]
 801119e:	4413      	add	r3, r2
 80111a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80111a2:	68ba      	ldr	r2, [r7, #8]
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d90e      	bls.n	80111c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	68fa      	ldr	r2, [r7, #12]
 80111b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80111b6:	4b19      	ldr	r3, [pc, #100]	; (801121c <prvSwitchTimerLists+0xc0>)
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	3304      	adds	r3, #4
 80111be:	4619      	mov	r1, r3
 80111c0:	4610      	mov	r0, r2
 80111c2:	f7fd fd92 	bl	800ecea <vListInsert>
 80111c6:	e015      	b.n	80111f4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80111c8:	2300      	movs	r3, #0
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	2300      	movs	r3, #0
 80111ce:	693a      	ldr	r2, [r7, #16]
 80111d0:	2100      	movs	r1, #0
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	f7ff fd68 	bl	8010ca8 <xTimerGenericCommand>
 80111d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d109      	bne.n	80111f4 <prvSwitchTimerLists+0x98>
 80111e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e4:	f383 8811 	msr	BASEPRI, r3
 80111e8:	f3bf 8f6f 	isb	sy
 80111ec:	f3bf 8f4f 	dsb	sy
 80111f0:	603b      	str	r3, [r7, #0]
 80111f2:	e7fe      	b.n	80111f2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80111f4:	4b09      	ldr	r3, [pc, #36]	; (801121c <prvSwitchTimerLists+0xc0>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d1b2      	bne.n	8011164 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80111fe:	4b07      	ldr	r3, [pc, #28]	; (801121c <prvSwitchTimerLists+0xc0>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011204:	4b06      	ldr	r3, [pc, #24]	; (8011220 <prvSwitchTimerLists+0xc4>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a04      	ldr	r2, [pc, #16]	; (801121c <prvSwitchTimerLists+0xc0>)
 801120a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801120c:	4a04      	ldr	r2, [pc, #16]	; (8011220 <prvSwitchTimerLists+0xc4>)
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	6013      	str	r3, [r2, #0]
}
 8011212:	bf00      	nop
 8011214:	3718      	adds	r7, #24
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	200010c4 	.word	0x200010c4
 8011220:	200010c8 	.word	0x200010c8

08011224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801122a:	f000 f95f 	bl	80114ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801122e:	4b15      	ldr	r3, [pc, #84]	; (8011284 <prvCheckForValidListAndQueue+0x60>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d120      	bne.n	8011278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011236:	4814      	ldr	r0, [pc, #80]	; (8011288 <prvCheckForValidListAndQueue+0x64>)
 8011238:	f7fd fd06 	bl	800ec48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801123c:	4813      	ldr	r0, [pc, #76]	; (801128c <prvCheckForValidListAndQueue+0x68>)
 801123e:	f7fd fd03 	bl	800ec48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011242:	4b13      	ldr	r3, [pc, #76]	; (8011290 <prvCheckForValidListAndQueue+0x6c>)
 8011244:	4a10      	ldr	r2, [pc, #64]	; (8011288 <prvCheckForValidListAndQueue+0x64>)
 8011246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011248:	4b12      	ldr	r3, [pc, #72]	; (8011294 <prvCheckForValidListAndQueue+0x70>)
 801124a:	4a10      	ldr	r2, [pc, #64]	; (801128c <prvCheckForValidListAndQueue+0x68>)
 801124c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801124e:	2300      	movs	r3, #0
 8011250:	9300      	str	r3, [sp, #0]
 8011252:	4b11      	ldr	r3, [pc, #68]	; (8011298 <prvCheckForValidListAndQueue+0x74>)
 8011254:	4a11      	ldr	r2, [pc, #68]	; (801129c <prvCheckForValidListAndQueue+0x78>)
 8011256:	2110      	movs	r1, #16
 8011258:	200a      	movs	r0, #10
 801125a:	f7fd fe11 	bl	800ee80 <xQueueGenericCreateStatic>
 801125e:	4602      	mov	r2, r0
 8011260:	4b08      	ldr	r3, [pc, #32]	; (8011284 <prvCheckForValidListAndQueue+0x60>)
 8011262:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011264:	4b07      	ldr	r3, [pc, #28]	; (8011284 <prvCheckForValidListAndQueue+0x60>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d005      	beq.n	8011278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801126c:	4b05      	ldr	r3, [pc, #20]	; (8011284 <prvCheckForValidListAndQueue+0x60>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	490b      	ldr	r1, [pc, #44]	; (80112a0 <prvCheckForValidListAndQueue+0x7c>)
 8011272:	4618      	mov	r0, r3
 8011274:	f7fe fba6 	bl	800f9c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011278:	f000 f966 	bl	8011548 <vPortExitCritical>
}
 801127c:	bf00      	nop
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	200010cc 	.word	0x200010cc
 8011288:	2000109c 	.word	0x2000109c
 801128c:	200010b0 	.word	0x200010b0
 8011290:	200010c4 	.word	0x200010c4
 8011294:	200010c8 	.word	0x200010c8
 8011298:	20001178 	.word	0x20001178
 801129c:	200010d8 	.word	0x200010d8
 80112a0:	08013efc 	.word	0x08013efc

080112a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80112a4:	b480      	push	{r7}
 80112a6:	b085      	sub	sp, #20
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	3b04      	subs	r3, #4
 80112b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80112bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	3b04      	subs	r3, #4
 80112c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	f023 0201 	bic.w	r2, r3, #1
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	3b04      	subs	r3, #4
 80112d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80112d4:	4a0c      	ldr	r2, [pc, #48]	; (8011308 <pxPortInitialiseStack+0x64>)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	3b14      	subs	r3, #20
 80112de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80112e0:	687a      	ldr	r2, [r7, #4]
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	3b04      	subs	r3, #4
 80112ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f06f 0202 	mvn.w	r2, #2
 80112f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	3b20      	subs	r3, #32
 80112f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80112fa:	68fb      	ldr	r3, [r7, #12]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3714      	adds	r7, #20
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr
 8011308:	0801130d 	.word	0x0801130d

0801130c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801130c:	b480      	push	{r7}
 801130e:	b085      	sub	sp, #20
 8011310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011312:	2300      	movs	r3, #0
 8011314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011316:	4b11      	ldr	r3, [pc, #68]	; (801135c <prvTaskExitError+0x50>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801131e:	d009      	beq.n	8011334 <prvTaskExitError+0x28>
 8011320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011324:	f383 8811 	msr	BASEPRI, r3
 8011328:	f3bf 8f6f 	isb	sy
 801132c:	f3bf 8f4f 	dsb	sy
 8011330:	60fb      	str	r3, [r7, #12]
 8011332:	e7fe      	b.n	8011332 <prvTaskExitError+0x26>
 8011334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011346:	bf00      	nop
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d0fc      	beq.n	8011348 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801134e:	bf00      	nop
 8011350:	3714      	adds	r7, #20
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	2000015c 	.word	0x2000015c

08011360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011360:	4b07      	ldr	r3, [pc, #28]	; (8011380 <pxCurrentTCBConst2>)
 8011362:	6819      	ldr	r1, [r3, #0]
 8011364:	6808      	ldr	r0, [r1, #0]
 8011366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136a:	f380 8809 	msr	PSP, r0
 801136e:	f3bf 8f6f 	isb	sy
 8011372:	f04f 0000 	mov.w	r0, #0
 8011376:	f380 8811 	msr	BASEPRI, r0
 801137a:	4770      	bx	lr
 801137c:	f3af 8000 	nop.w

08011380 <pxCurrentTCBConst2>:
 8011380:	20000b9c 	.word	0x20000b9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011384:	bf00      	nop
 8011386:	bf00      	nop

08011388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011388:	4808      	ldr	r0, [pc, #32]	; (80113ac <prvPortStartFirstTask+0x24>)
 801138a:	6800      	ldr	r0, [r0, #0]
 801138c:	6800      	ldr	r0, [r0, #0]
 801138e:	f380 8808 	msr	MSP, r0
 8011392:	f04f 0000 	mov.w	r0, #0
 8011396:	f380 8814 	msr	CONTROL, r0
 801139a:	b662      	cpsie	i
 801139c:	b661      	cpsie	f
 801139e:	f3bf 8f4f 	dsb	sy
 80113a2:	f3bf 8f6f 	isb	sy
 80113a6:	df00      	svc	0
 80113a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80113aa:	bf00      	nop
 80113ac:	e000ed08 	.word	0xe000ed08

080113b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80113b6:	4b44      	ldr	r3, [pc, #272]	; (80114c8 <xPortStartScheduler+0x118>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4a44      	ldr	r2, [pc, #272]	; (80114cc <xPortStartScheduler+0x11c>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d109      	bne.n	80113d4 <xPortStartScheduler+0x24>
 80113c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	613b      	str	r3, [r7, #16]
 80113d2:	e7fe      	b.n	80113d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80113d4:	4b3c      	ldr	r3, [pc, #240]	; (80114c8 <xPortStartScheduler+0x118>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4a3d      	ldr	r2, [pc, #244]	; (80114d0 <xPortStartScheduler+0x120>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d109      	bne.n	80113f2 <xPortStartScheduler+0x42>
 80113de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e2:	f383 8811 	msr	BASEPRI, r3
 80113e6:	f3bf 8f6f 	isb	sy
 80113ea:	f3bf 8f4f 	dsb	sy
 80113ee:	60fb      	str	r3, [r7, #12]
 80113f0:	e7fe      	b.n	80113f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80113f2:	4b38      	ldr	r3, [pc, #224]	; (80114d4 <xPortStartScheduler+0x124>)
 80113f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	b2db      	uxtb	r3, r3
 80113fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	22ff      	movs	r2, #255	; 0xff
 8011402:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	b2db      	uxtb	r3, r3
 801140a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801140c:	78fb      	ldrb	r3, [r7, #3]
 801140e:	b2db      	uxtb	r3, r3
 8011410:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011414:	b2da      	uxtb	r2, r3
 8011416:	4b30      	ldr	r3, [pc, #192]	; (80114d8 <xPortStartScheduler+0x128>)
 8011418:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801141a:	4b30      	ldr	r3, [pc, #192]	; (80114dc <xPortStartScheduler+0x12c>)
 801141c:	2207      	movs	r2, #7
 801141e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011420:	e009      	b.n	8011436 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011422:	4b2e      	ldr	r3, [pc, #184]	; (80114dc <xPortStartScheduler+0x12c>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	3b01      	subs	r3, #1
 8011428:	4a2c      	ldr	r2, [pc, #176]	; (80114dc <xPortStartScheduler+0x12c>)
 801142a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801142c:	78fb      	ldrb	r3, [r7, #3]
 801142e:	b2db      	uxtb	r3, r3
 8011430:	005b      	lsls	r3, r3, #1
 8011432:	b2db      	uxtb	r3, r3
 8011434:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011436:	78fb      	ldrb	r3, [r7, #3]
 8011438:	b2db      	uxtb	r3, r3
 801143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801143e:	2b80      	cmp	r3, #128	; 0x80
 8011440:	d0ef      	beq.n	8011422 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011442:	4b26      	ldr	r3, [pc, #152]	; (80114dc <xPortStartScheduler+0x12c>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f1c3 0307 	rsb	r3, r3, #7
 801144a:	2b04      	cmp	r3, #4
 801144c:	d009      	beq.n	8011462 <xPortStartScheduler+0xb2>
 801144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011452:	f383 8811 	msr	BASEPRI, r3
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	f3bf 8f4f 	dsb	sy
 801145e:	60bb      	str	r3, [r7, #8]
 8011460:	e7fe      	b.n	8011460 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011462:	4b1e      	ldr	r3, [pc, #120]	; (80114dc <xPortStartScheduler+0x12c>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	021b      	lsls	r3, r3, #8
 8011468:	4a1c      	ldr	r2, [pc, #112]	; (80114dc <xPortStartScheduler+0x12c>)
 801146a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801146c:	4b1b      	ldr	r3, [pc, #108]	; (80114dc <xPortStartScheduler+0x12c>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011474:	4a19      	ldr	r2, [pc, #100]	; (80114dc <xPortStartScheduler+0x12c>)
 8011476:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	b2da      	uxtb	r2, r3
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011480:	4b17      	ldr	r3, [pc, #92]	; (80114e0 <xPortStartScheduler+0x130>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4a16      	ldr	r2, [pc, #88]	; (80114e0 <xPortStartScheduler+0x130>)
 8011486:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801148a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801148c:	4b14      	ldr	r3, [pc, #80]	; (80114e0 <xPortStartScheduler+0x130>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4a13      	ldr	r2, [pc, #76]	; (80114e0 <xPortStartScheduler+0x130>)
 8011492:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011496:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011498:	f000 f8d6 	bl	8011648 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801149c:	4b11      	ldr	r3, [pc, #68]	; (80114e4 <xPortStartScheduler+0x134>)
 801149e:	2200      	movs	r2, #0
 80114a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80114a2:	f000 f8f5 	bl	8011690 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80114a6:	4b10      	ldr	r3, [pc, #64]	; (80114e8 <xPortStartScheduler+0x138>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4a0f      	ldr	r2, [pc, #60]	; (80114e8 <xPortStartScheduler+0x138>)
 80114ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80114b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80114b2:	f7ff ff69 	bl	8011388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80114b6:	f7fe ff75 	bl	80103a4 <vTaskSwitchContext>
	prvTaskExitError();
 80114ba:	f7ff ff27 	bl	801130c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80114be:	2300      	movs	r3, #0
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3718      	adds	r7, #24
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	e000ed00 	.word	0xe000ed00
 80114cc:	410fc271 	.word	0x410fc271
 80114d0:	410fc270 	.word	0x410fc270
 80114d4:	e000e400 	.word	0xe000e400
 80114d8:	200011c8 	.word	0x200011c8
 80114dc:	200011cc 	.word	0x200011cc
 80114e0:	e000ed20 	.word	0xe000ed20
 80114e4:	2000015c 	.word	0x2000015c
 80114e8:	e000ef34 	.word	0xe000ef34

080114ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f6:	f383 8811 	msr	BASEPRI, r3
 80114fa:	f3bf 8f6f 	isb	sy
 80114fe:	f3bf 8f4f 	dsb	sy
 8011502:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011504:	4b0e      	ldr	r3, [pc, #56]	; (8011540 <vPortEnterCritical+0x54>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	3301      	adds	r3, #1
 801150a:	4a0d      	ldr	r2, [pc, #52]	; (8011540 <vPortEnterCritical+0x54>)
 801150c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801150e:	4b0c      	ldr	r3, [pc, #48]	; (8011540 <vPortEnterCritical+0x54>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2b01      	cmp	r3, #1
 8011514:	d10e      	bne.n	8011534 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011516:	4b0b      	ldr	r3, [pc, #44]	; (8011544 <vPortEnterCritical+0x58>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	b2db      	uxtb	r3, r3
 801151c:	2b00      	cmp	r3, #0
 801151e:	d009      	beq.n	8011534 <vPortEnterCritical+0x48>
 8011520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011524:	f383 8811 	msr	BASEPRI, r3
 8011528:	f3bf 8f6f 	isb	sy
 801152c:	f3bf 8f4f 	dsb	sy
 8011530:	603b      	str	r3, [r7, #0]
 8011532:	e7fe      	b.n	8011532 <vPortEnterCritical+0x46>
	}
}
 8011534:	bf00      	nop
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	2000015c 	.word	0x2000015c
 8011544:	e000ed04 	.word	0xe000ed04

08011548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801154e:	4b11      	ldr	r3, [pc, #68]	; (8011594 <vPortExitCritical+0x4c>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d109      	bne.n	801156a <vPortExitCritical+0x22>
 8011556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155a:	f383 8811 	msr	BASEPRI, r3
 801155e:	f3bf 8f6f 	isb	sy
 8011562:	f3bf 8f4f 	dsb	sy
 8011566:	607b      	str	r3, [r7, #4]
 8011568:	e7fe      	b.n	8011568 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801156a:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <vPortExitCritical+0x4c>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	3b01      	subs	r3, #1
 8011570:	4a08      	ldr	r2, [pc, #32]	; (8011594 <vPortExitCritical+0x4c>)
 8011572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011574:	4b07      	ldr	r3, [pc, #28]	; (8011594 <vPortExitCritical+0x4c>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d104      	bne.n	8011586 <vPortExitCritical+0x3e>
 801157c:	2300      	movs	r3, #0
 801157e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011586:	bf00      	nop
 8011588:	370c      	adds	r7, #12
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	2000015c 	.word	0x2000015c
	...

080115a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80115a0:	f3ef 8009 	mrs	r0, PSP
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	4b15      	ldr	r3, [pc, #84]	; (8011600 <pxCurrentTCBConst>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	f01e 0f10 	tst.w	lr, #16
 80115b0:	bf08      	it	eq
 80115b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80115b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ba:	6010      	str	r0, [r2, #0]
 80115bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80115c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80115c4:	f380 8811 	msr	BASEPRI, r0
 80115c8:	f3bf 8f4f 	dsb	sy
 80115cc:	f3bf 8f6f 	isb	sy
 80115d0:	f7fe fee8 	bl	80103a4 <vTaskSwitchContext>
 80115d4:	f04f 0000 	mov.w	r0, #0
 80115d8:	f380 8811 	msr	BASEPRI, r0
 80115dc:	bc09      	pop	{r0, r3}
 80115de:	6819      	ldr	r1, [r3, #0]
 80115e0:	6808      	ldr	r0, [r1, #0]
 80115e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e6:	f01e 0f10 	tst.w	lr, #16
 80115ea:	bf08      	it	eq
 80115ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80115f0:	f380 8809 	msr	PSP, r0
 80115f4:	f3bf 8f6f 	isb	sy
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	f3af 8000 	nop.w

08011600 <pxCurrentTCBConst>:
 8011600:	20000b9c 	.word	0x20000b9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011604:	bf00      	nop
 8011606:	bf00      	nop

08011608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
	__asm volatile
 801160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011620:	f7fe fe08 	bl	8010234 <xTaskIncrementTick>
 8011624:	4603      	mov	r3, r0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d003      	beq.n	8011632 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801162a:	4b06      	ldr	r3, [pc, #24]	; (8011644 <SysTick_Handler+0x3c>)
 801162c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011630:	601a      	str	r2, [r3, #0]
 8011632:	2300      	movs	r3, #0
 8011634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801163c:	bf00      	nop
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	e000ed04 	.word	0xe000ed04

08011648 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011648:	b480      	push	{r7}
 801164a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801164c:	4b0b      	ldr	r3, [pc, #44]	; (801167c <vPortSetupTimerInterrupt+0x34>)
 801164e:	2200      	movs	r2, #0
 8011650:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011652:	4b0b      	ldr	r3, [pc, #44]	; (8011680 <vPortSetupTimerInterrupt+0x38>)
 8011654:	2200      	movs	r2, #0
 8011656:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011658:	4b0a      	ldr	r3, [pc, #40]	; (8011684 <vPortSetupTimerInterrupt+0x3c>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	4a0a      	ldr	r2, [pc, #40]	; (8011688 <vPortSetupTimerInterrupt+0x40>)
 801165e:	fba2 2303 	umull	r2, r3, r2, r3
 8011662:	099b      	lsrs	r3, r3, #6
 8011664:	4a09      	ldr	r2, [pc, #36]	; (801168c <vPortSetupTimerInterrupt+0x44>)
 8011666:	3b01      	subs	r3, #1
 8011668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801166a:	4b04      	ldr	r3, [pc, #16]	; (801167c <vPortSetupTimerInterrupt+0x34>)
 801166c:	2207      	movs	r2, #7
 801166e:	601a      	str	r2, [r3, #0]
}
 8011670:	bf00      	nop
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop
 801167c:	e000e010 	.word	0xe000e010
 8011680:	e000e018 	.word	0xe000e018
 8011684:	20000040 	.word	0x20000040
 8011688:	10624dd3 	.word	0x10624dd3
 801168c:	e000e014 	.word	0xe000e014

08011690 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011690:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80116a0 <vPortEnableVFP+0x10>
 8011694:	6801      	ldr	r1, [r0, #0]
 8011696:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801169a:	6001      	str	r1, [r0, #0]
 801169c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801169e:	bf00      	nop
 80116a0:	e000ed88 	.word	0xe000ed88

080116a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80116a4:	b480      	push	{r7}
 80116a6:	b085      	sub	sp, #20
 80116a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80116aa:	f3ef 8305 	mrs	r3, IPSR
 80116ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b0f      	cmp	r3, #15
 80116b4:	d913      	bls.n	80116de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80116b6:	4a16      	ldr	r2, [pc, #88]	; (8011710 <vPortValidateInterruptPriority+0x6c>)
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	4413      	add	r3, r2
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80116c0:	4b14      	ldr	r3, [pc, #80]	; (8011714 <vPortValidateInterruptPriority+0x70>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	7afa      	ldrb	r2, [r7, #11]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d209      	bcs.n	80116de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80116ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ce:	f383 8811 	msr	BASEPRI, r3
 80116d2:	f3bf 8f6f 	isb	sy
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	607b      	str	r3, [r7, #4]
 80116dc:	e7fe      	b.n	80116dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80116de:	4b0e      	ldr	r3, [pc, #56]	; (8011718 <vPortValidateInterruptPriority+0x74>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80116e6:	4b0d      	ldr	r3, [pc, #52]	; (801171c <vPortValidateInterruptPriority+0x78>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d909      	bls.n	8011702 <vPortValidateInterruptPriority+0x5e>
 80116ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	603b      	str	r3, [r7, #0]
 8011700:	e7fe      	b.n	8011700 <vPortValidateInterruptPriority+0x5c>
	}
 8011702:	bf00      	nop
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop
 8011710:	e000e3f0 	.word	0xe000e3f0
 8011714:	200011c8 	.word	0x200011c8
 8011718:	e000ed0c 	.word	0xe000ed0c
 801171c:	200011cc 	.word	0x200011cc

08011720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b08a      	sub	sp, #40	; 0x28
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011728:	2300      	movs	r3, #0
 801172a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801172c:	f7fe fcc8 	bl	80100c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011730:	4b57      	ldr	r3, [pc, #348]	; (8011890 <pvPortMalloc+0x170>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d101      	bne.n	801173c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011738:	f000 f90c 	bl	8011954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801173c:	4b55      	ldr	r3, [pc, #340]	; (8011894 <pvPortMalloc+0x174>)
 801173e:	681a      	ldr	r2, [r3, #0]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4013      	ands	r3, r2
 8011744:	2b00      	cmp	r3, #0
 8011746:	f040 808c 	bne.w	8011862 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d01c      	beq.n	801178a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011750:	2208      	movs	r2, #8
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4413      	add	r3, r2
 8011756:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f003 0307 	and.w	r3, r3, #7
 801175e:	2b00      	cmp	r3, #0
 8011760:	d013      	beq.n	801178a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f023 0307 	bic.w	r3, r3, #7
 8011768:	3308      	adds	r3, #8
 801176a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f003 0307 	and.w	r3, r3, #7
 8011772:	2b00      	cmp	r3, #0
 8011774:	d009      	beq.n	801178a <pvPortMalloc+0x6a>
 8011776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177a:	f383 8811 	msr	BASEPRI, r3
 801177e:	f3bf 8f6f 	isb	sy
 8011782:	f3bf 8f4f 	dsb	sy
 8011786:	617b      	str	r3, [r7, #20]
 8011788:	e7fe      	b.n	8011788 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d068      	beq.n	8011862 <pvPortMalloc+0x142>
 8011790:	4b41      	ldr	r3, [pc, #260]	; (8011898 <pvPortMalloc+0x178>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	687a      	ldr	r2, [r7, #4]
 8011796:	429a      	cmp	r2, r3
 8011798:	d863      	bhi.n	8011862 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801179a:	4b40      	ldr	r3, [pc, #256]	; (801189c <pvPortMalloc+0x17c>)
 801179c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801179e:	4b3f      	ldr	r3, [pc, #252]	; (801189c <pvPortMalloc+0x17c>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117a4:	e004      	b.n	80117b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80117a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80117aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	687a      	ldr	r2, [r7, #4]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d903      	bls.n	80117c2 <pvPortMalloc+0xa2>
 80117ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1f1      	bne.n	80117a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80117c2:	4b33      	ldr	r3, [pc, #204]	; (8011890 <pvPortMalloc+0x170>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d04a      	beq.n	8011862 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80117cc:	6a3b      	ldr	r3, [r7, #32]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2208      	movs	r2, #8
 80117d2:	4413      	add	r3, r2
 80117d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80117d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d8:	681a      	ldr	r2, [r3, #0]
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80117de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e0:	685a      	ldr	r2, [r3, #4]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	1ad2      	subs	r2, r2, r3
 80117e6:	2308      	movs	r3, #8
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d91e      	bls.n	801182c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80117ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4413      	add	r3, r2
 80117f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	f003 0307 	and.w	r3, r3, #7
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d009      	beq.n	8011814 <pvPortMalloc+0xf4>
 8011800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011804:	f383 8811 	msr	BASEPRI, r3
 8011808:	f3bf 8f6f 	isb	sy
 801180c:	f3bf 8f4f 	dsb	sy
 8011810:	613b      	str	r3, [r7, #16]
 8011812:	e7fe      	b.n	8011812 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	685a      	ldr	r2, [r3, #4]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	1ad2      	subs	r2, r2, r3
 801181c:	69bb      	ldr	r3, [r7, #24]
 801181e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011826:	69b8      	ldr	r0, [r7, #24]
 8011828:	f000 f8f6 	bl	8011a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801182c:	4b1a      	ldr	r3, [pc, #104]	; (8011898 <pvPortMalloc+0x178>)
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	4a18      	ldr	r2, [pc, #96]	; (8011898 <pvPortMalloc+0x178>)
 8011838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801183a:	4b17      	ldr	r3, [pc, #92]	; (8011898 <pvPortMalloc+0x178>)
 801183c:	681a      	ldr	r2, [r3, #0]
 801183e:	4b18      	ldr	r3, [pc, #96]	; (80118a0 <pvPortMalloc+0x180>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	429a      	cmp	r2, r3
 8011844:	d203      	bcs.n	801184e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011846:	4b14      	ldr	r3, [pc, #80]	; (8011898 <pvPortMalloc+0x178>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	4a15      	ldr	r2, [pc, #84]	; (80118a0 <pvPortMalloc+0x180>)
 801184c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	4b10      	ldr	r3, [pc, #64]	; (8011894 <pvPortMalloc+0x174>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	431a      	orrs	r2, r3
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	2200      	movs	r2, #0
 8011860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011862:	f7fe fc3b 	bl	80100dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	f003 0307 	and.w	r3, r3, #7
 801186c:	2b00      	cmp	r3, #0
 801186e:	d009      	beq.n	8011884 <pvPortMalloc+0x164>
 8011870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011874:	f383 8811 	msr	BASEPRI, r3
 8011878:	f3bf 8f6f 	isb	sy
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	60fb      	str	r3, [r7, #12]
 8011882:	e7fe      	b.n	8011882 <pvPortMalloc+0x162>
	return pvReturn;
 8011884:	69fb      	ldr	r3, [r7, #28]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3728      	adds	r7, #40	; 0x28
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
 801188e:	bf00      	nop
 8011890:	2000d528 	.word	0x2000d528
 8011894:	2000d534 	.word	0x2000d534
 8011898:	2000d52c 	.word	0x2000d52c
 801189c:	2000d520 	.word	0x2000d520
 80118a0:	2000d530 	.word	0x2000d530

080118a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b086      	sub	sp, #24
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d046      	beq.n	8011944 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80118b6:	2308      	movs	r3, #8
 80118b8:	425b      	negs	r3, r3
 80118ba:	697a      	ldr	r2, [r7, #20]
 80118bc:	4413      	add	r3, r2
 80118be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	4b20      	ldr	r3, [pc, #128]	; (801194c <vPortFree+0xa8>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4013      	ands	r3, r2
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d109      	bne.n	80118e6 <vPortFree+0x42>
 80118d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	60fb      	str	r3, [r7, #12]
 80118e4:	e7fe      	b.n	80118e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d009      	beq.n	8011902 <vPortFree+0x5e>
 80118ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	60bb      	str	r3, [r7, #8]
 8011900:	e7fe      	b.n	8011900 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	685a      	ldr	r2, [r3, #4]
 8011906:	4b11      	ldr	r3, [pc, #68]	; (801194c <vPortFree+0xa8>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	4013      	ands	r3, r2
 801190c:	2b00      	cmp	r3, #0
 801190e:	d019      	beq.n	8011944 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d115      	bne.n	8011944 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	685a      	ldr	r2, [r3, #4]
 801191c:	4b0b      	ldr	r3, [pc, #44]	; (801194c <vPortFree+0xa8>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	43db      	mvns	r3, r3
 8011922:	401a      	ands	r2, r3
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011928:	f7fe fbca 	bl	80100c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	685a      	ldr	r2, [r3, #4]
 8011930:	4b07      	ldr	r3, [pc, #28]	; (8011950 <vPortFree+0xac>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	4413      	add	r3, r2
 8011936:	4a06      	ldr	r2, [pc, #24]	; (8011950 <vPortFree+0xac>)
 8011938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801193a:	6938      	ldr	r0, [r7, #16]
 801193c:	f000 f86c 	bl	8011a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011940:	f7fe fbcc 	bl	80100dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011944:	bf00      	nop
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	2000d534 	.word	0x2000d534
 8011950:	2000d52c 	.word	0x2000d52c

08011954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801195a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801195e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011960:	4b27      	ldr	r3, [pc, #156]	; (8011a00 <prvHeapInit+0xac>)
 8011962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f003 0307 	and.w	r3, r3, #7
 801196a:	2b00      	cmp	r3, #0
 801196c:	d00c      	beq.n	8011988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	3307      	adds	r3, #7
 8011972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f023 0307 	bic.w	r3, r3, #7
 801197a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	4a1f      	ldr	r2, [pc, #124]	; (8011a00 <prvHeapInit+0xac>)
 8011984:	4413      	add	r3, r2
 8011986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801198c:	4a1d      	ldr	r2, [pc, #116]	; (8011a04 <prvHeapInit+0xb0>)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011992:	4b1c      	ldr	r3, [pc, #112]	; (8011a04 <prvHeapInit+0xb0>)
 8011994:	2200      	movs	r2, #0
 8011996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	4413      	add	r3, r2
 801199e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80119a0:	2208      	movs	r2, #8
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	1a9b      	subs	r3, r3, r2
 80119a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	f023 0307 	bic.w	r3, r3, #7
 80119ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	4a15      	ldr	r2, [pc, #84]	; (8011a08 <prvHeapInit+0xb4>)
 80119b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80119b6:	4b14      	ldr	r3, [pc, #80]	; (8011a08 <prvHeapInit+0xb4>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2200      	movs	r2, #0
 80119bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80119be:	4b12      	ldr	r3, [pc, #72]	; (8011a08 <prvHeapInit+0xb4>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2200      	movs	r2, #0
 80119c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	1ad2      	subs	r2, r2, r3
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80119d4:	4b0c      	ldr	r3, [pc, #48]	; (8011a08 <prvHeapInit+0xb4>)
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	4a0a      	ldr	r2, [pc, #40]	; (8011a0c <prvHeapInit+0xb8>)
 80119e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	4a09      	ldr	r2, [pc, #36]	; (8011a10 <prvHeapInit+0xbc>)
 80119ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80119ec:	4b09      	ldr	r3, [pc, #36]	; (8011a14 <prvHeapInit+0xc0>)
 80119ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80119f2:	601a      	str	r2, [r3, #0]
}
 80119f4:	bf00      	nop
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr
 8011a00:	200011d0 	.word	0x200011d0
 8011a04:	2000d520 	.word	0x2000d520
 8011a08:	2000d528 	.word	0x2000d528
 8011a0c:	2000d530 	.word	0x2000d530
 8011a10:	2000d52c 	.word	0x2000d52c
 8011a14:	2000d534 	.word	0x2000d534

08011a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b085      	sub	sp, #20
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011a20:	4b28      	ldr	r3, [pc, #160]	; (8011ac4 <prvInsertBlockIntoFreeList+0xac>)
 8011a22:	60fb      	str	r3, [r7, #12]
 8011a24:	e002      	b.n	8011a2c <prvInsertBlockIntoFreeList+0x14>
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	60fb      	str	r3, [r7, #12]
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d8f7      	bhi.n	8011a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	4413      	add	r3, r2
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d108      	bne.n	8011a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	685a      	ldr	r2, [r3, #4]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	441a      	add	r2, r3
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	68ba      	ldr	r2, [r7, #8]
 8011a64:	441a      	add	r2, r3
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d118      	bne.n	8011aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	4b15      	ldr	r3, [pc, #84]	; (8011ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d00d      	beq.n	8011a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	685a      	ldr	r2, [r3, #4]
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	441a      	add	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	e008      	b.n	8011aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011a96:	4b0c      	ldr	r3, [pc, #48]	; (8011ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	601a      	str	r2, [r3, #0]
 8011a9e:	e003      	b.n	8011aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d002      	beq.n	8011ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ab6:	bf00      	nop
 8011ab8:	3714      	adds	r7, #20
 8011aba:	46bd      	mov	sp, r7
 8011abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac0:	4770      	bx	lr
 8011ac2:	bf00      	nop
 8011ac4:	2000d520 	.word	0x2000d520
 8011ac8:	2000d528 	.word	0x2000d528

08011acc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	4912      	ldr	r1, [pc, #72]	; (8011b1c <MX_USB_DEVICE_Init+0x50>)
 8011ad4:	4812      	ldr	r0, [pc, #72]	; (8011b20 <MX_USB_DEVICE_Init+0x54>)
 8011ad6:	f7fb fe44 	bl	800d762 <USBD_Init>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d001      	beq.n	8011ae4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011ae0:	f7f0 fc20 	bl	8002324 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011ae4:	490f      	ldr	r1, [pc, #60]	; (8011b24 <MX_USB_DEVICE_Init+0x58>)
 8011ae6:	480e      	ldr	r0, [pc, #56]	; (8011b20 <MX_USB_DEVICE_Init+0x54>)
 8011ae8:	f7fb fe66 	bl	800d7b8 <USBD_RegisterClass>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d001      	beq.n	8011af6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011af2:	f7f0 fc17 	bl	8002324 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011af6:	490c      	ldr	r1, [pc, #48]	; (8011b28 <MX_USB_DEVICE_Init+0x5c>)
 8011af8:	4809      	ldr	r0, [pc, #36]	; (8011b20 <MX_USB_DEVICE_Init+0x54>)
 8011afa:	f7fb fdc3 	bl	800d684 <USBD_CDC_RegisterInterface>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011b04:	f7f0 fc0e 	bl	8002324 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011b08:	4805      	ldr	r0, [pc, #20]	; (8011b20 <MX_USB_DEVICE_Init+0x54>)
 8011b0a:	f7fb fe6f 	bl	800d7ec <USBD_Start>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011b14:	f7f0 fc06 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011b18:	bf00      	nop
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	20000170 	.word	0x20000170
 8011b20:	2000ebfc 	.word	0x2000ebfc
 8011b24:	20000058 	.word	0x20000058
 8011b28:	20000160 	.word	0x20000160

08011b2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011b30:	2200      	movs	r2, #0
 8011b32:	4905      	ldr	r1, [pc, #20]	; (8011b48 <CDC_Init_FS+0x1c>)
 8011b34:	4805      	ldr	r0, [pc, #20]	; (8011b4c <CDC_Init_FS+0x20>)
 8011b36:	f7fb fdbc 	bl	800d6b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011b3a:	4905      	ldr	r1, [pc, #20]	; (8011b50 <CDC_Init_FS+0x24>)
 8011b3c:	4803      	ldr	r0, [pc, #12]	; (8011b4c <CDC_Init_FS+0x20>)
 8011b3e:	f7fb fdd2 	bl	800d6e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011b42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	2000f6c0 	.word	0x2000f6c0
 8011b4c:	2000ebfc 	.word	0x2000ebfc
 8011b50:	2000eec0 	.word	0x2000eec0

08011b54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011b54:	b480      	push	{r7}
 8011b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011b58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b083      	sub	sp, #12
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	6039      	str	r1, [r7, #0]
 8011b6e:	71fb      	strb	r3, [r7, #7]
 8011b70:	4613      	mov	r3, r2
 8011b72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011b74:	79fb      	ldrb	r3, [r7, #7]
 8011b76:	2b23      	cmp	r3, #35	; 0x23
 8011b78:	d84a      	bhi.n	8011c10 <CDC_Control_FS+0xac>
 8011b7a:	a201      	add	r2, pc, #4	; (adr r2, 8011b80 <CDC_Control_FS+0x1c>)
 8011b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b80:	08011c11 	.word	0x08011c11
 8011b84:	08011c11 	.word	0x08011c11
 8011b88:	08011c11 	.word	0x08011c11
 8011b8c:	08011c11 	.word	0x08011c11
 8011b90:	08011c11 	.word	0x08011c11
 8011b94:	08011c11 	.word	0x08011c11
 8011b98:	08011c11 	.word	0x08011c11
 8011b9c:	08011c11 	.word	0x08011c11
 8011ba0:	08011c11 	.word	0x08011c11
 8011ba4:	08011c11 	.word	0x08011c11
 8011ba8:	08011c11 	.word	0x08011c11
 8011bac:	08011c11 	.word	0x08011c11
 8011bb0:	08011c11 	.word	0x08011c11
 8011bb4:	08011c11 	.word	0x08011c11
 8011bb8:	08011c11 	.word	0x08011c11
 8011bbc:	08011c11 	.word	0x08011c11
 8011bc0:	08011c11 	.word	0x08011c11
 8011bc4:	08011c11 	.word	0x08011c11
 8011bc8:	08011c11 	.word	0x08011c11
 8011bcc:	08011c11 	.word	0x08011c11
 8011bd0:	08011c11 	.word	0x08011c11
 8011bd4:	08011c11 	.word	0x08011c11
 8011bd8:	08011c11 	.word	0x08011c11
 8011bdc:	08011c11 	.word	0x08011c11
 8011be0:	08011c11 	.word	0x08011c11
 8011be4:	08011c11 	.word	0x08011c11
 8011be8:	08011c11 	.word	0x08011c11
 8011bec:	08011c11 	.word	0x08011c11
 8011bf0:	08011c11 	.word	0x08011c11
 8011bf4:	08011c11 	.word	0x08011c11
 8011bf8:	08011c11 	.word	0x08011c11
 8011bfc:	08011c11 	.word	0x08011c11
 8011c00:	08011c11 	.word	0x08011c11
 8011c04:	08011c11 	.word	0x08011c11
 8011c08:	08011c11 	.word	0x08011c11
 8011c0c:	08011c11 	.word	0x08011c11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011c10:	bf00      	nop
  }

  return (USBD_OK);
 8011c12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr

08011c20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011c2a:	6879      	ldr	r1, [r7, #4]
 8011c2c:	4805      	ldr	r0, [pc, #20]	; (8011c44 <CDC_Receive_FS+0x24>)
 8011c2e:	f7fb fd5a 	bl	800d6e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011c32:	4804      	ldr	r0, [pc, #16]	; (8011c44 <CDC_Receive_FS+0x24>)
 8011c34:	f7fb fd6b 	bl	800d70e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011c38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	2000ebfc 	.word	0x2000ebfc

08011c48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	4603      	mov	r3, r0
 8011c50:	6039      	str	r1, [r7, #0]
 8011c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	2212      	movs	r2, #18
 8011c58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011c5a:	4b03      	ldr	r3, [pc, #12]	; (8011c68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr
 8011c68:	20000190 	.word	0x20000190

08011c6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	4603      	mov	r3, r0
 8011c74:	6039      	str	r1, [r7, #0]
 8011c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011c7e:	4b03      	ldr	r3, [pc, #12]	; (8011c8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	370c      	adds	r7, #12
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr
 8011c8c:	200001b0 	.word	0x200001b0

08011c90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	4603      	mov	r3, r0
 8011c98:	6039      	str	r1, [r7, #0]
 8011c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c9c:	79fb      	ldrb	r3, [r7, #7]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d105      	bne.n	8011cae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011ca2:	683a      	ldr	r2, [r7, #0]
 8011ca4:	4907      	ldr	r1, [pc, #28]	; (8011cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011ca6:	4808      	ldr	r0, [pc, #32]	; (8011cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011ca8:	f7fc fd76 	bl	800e798 <USBD_GetString>
 8011cac:	e004      	b.n	8011cb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cae:	683a      	ldr	r2, [r7, #0]
 8011cb0:	4904      	ldr	r1, [pc, #16]	; (8011cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011cb2:	4805      	ldr	r0, [pc, #20]	; (8011cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011cb4:	f7fc fd70 	bl	800e798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011cb8:	4b02      	ldr	r3, [pc, #8]	; (8011cc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3708      	adds	r7, #8
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	2000fec0 	.word	0x2000fec0
 8011cc8:	08013f04 	.word	0x08013f04

08011ccc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	6039      	str	r1, [r7, #0]
 8011cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011cd8:	683a      	ldr	r2, [r7, #0]
 8011cda:	4904      	ldr	r1, [pc, #16]	; (8011cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011cdc:	4804      	ldr	r0, [pc, #16]	; (8011cf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011cde:	f7fc fd5b 	bl	800e798 <USBD_GetString>
  return USBD_StrDesc;
 8011ce2:	4b02      	ldr	r3, [pc, #8]	; (8011cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3708      	adds	r7, #8
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}
 8011cec:	2000fec0 	.word	0x2000fec0
 8011cf0:	08013f1c 	.word	0x08013f1c

08011cf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	6039      	str	r1, [r7, #0]
 8011cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	221a      	movs	r2, #26
 8011d04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011d06:	f000 f855 	bl	8011db4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011d0a:	4b02      	ldr	r3, [pc, #8]	; (8011d14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3708      	adds	r7, #8
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	200001b4 	.word	0x200001b4

08011d18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	4603      	mov	r3, r0
 8011d20:	6039      	str	r1, [r7, #0]
 8011d22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d24:	79fb      	ldrb	r3, [r7, #7]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d105      	bne.n	8011d36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d2a:	683a      	ldr	r2, [r7, #0]
 8011d2c:	4907      	ldr	r1, [pc, #28]	; (8011d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d2e:	4808      	ldr	r0, [pc, #32]	; (8011d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d30:	f7fc fd32 	bl	800e798 <USBD_GetString>
 8011d34:	e004      	b.n	8011d40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d36:	683a      	ldr	r2, [r7, #0]
 8011d38:	4904      	ldr	r1, [pc, #16]	; (8011d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d3a:	4805      	ldr	r0, [pc, #20]	; (8011d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d3c:	f7fc fd2c 	bl	800e798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d40:	4b02      	ldr	r3, [pc, #8]	; (8011d4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3708      	adds	r7, #8
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	2000fec0 	.word	0x2000fec0
 8011d50:	08013f30 	.word	0x08013f30

08011d54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	6039      	str	r1, [r7, #0]
 8011d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d60:	79fb      	ldrb	r3, [r7, #7]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d105      	bne.n	8011d72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d66:	683a      	ldr	r2, [r7, #0]
 8011d68:	4907      	ldr	r1, [pc, #28]	; (8011d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011d6a:	4808      	ldr	r0, [pc, #32]	; (8011d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011d6c:	f7fc fd14 	bl	800e798 <USBD_GetString>
 8011d70:	e004      	b.n	8011d7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d72:	683a      	ldr	r2, [r7, #0]
 8011d74:	4904      	ldr	r1, [pc, #16]	; (8011d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011d76:	4805      	ldr	r0, [pc, #20]	; (8011d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011d78:	f7fc fd0e 	bl	800e798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d7c:	4b02      	ldr	r3, [pc, #8]	; (8011d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3708      	adds	r7, #8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	2000fec0 	.word	0x2000fec0
 8011d8c:	08013f3c 	.word	0x08013f3c

08011d90 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b083      	sub	sp, #12
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	4603      	mov	r3, r0
 8011d98:	6039      	str	r1, [r7, #0]
 8011d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	220c      	movs	r2, #12
 8011da0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8011da2:	4b03      	ldr	r3, [pc, #12]	; (8011db0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr
 8011db0:	200001a4 	.word	0x200001a4

08011db4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011dba:	4b0f      	ldr	r3, [pc, #60]	; (8011df8 <Get_SerialNum+0x44>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011dc0:	4b0e      	ldr	r3, [pc, #56]	; (8011dfc <Get_SerialNum+0x48>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011dc6:	4b0e      	ldr	r3, [pc, #56]	; (8011e00 <Get_SerialNum+0x4c>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d009      	beq.n	8011dee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011dda:	2208      	movs	r2, #8
 8011ddc:	4909      	ldr	r1, [pc, #36]	; (8011e04 <Get_SerialNum+0x50>)
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f000 f814 	bl	8011e0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011de4:	2204      	movs	r2, #4
 8011de6:	4908      	ldr	r1, [pc, #32]	; (8011e08 <Get_SerialNum+0x54>)
 8011de8:	68b8      	ldr	r0, [r7, #8]
 8011dea:	f000 f80f 	bl	8011e0c <IntToUnicode>
  }
}
 8011dee:	bf00      	nop
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	1fff7590 	.word	0x1fff7590
 8011dfc:	1fff7594 	.word	0x1fff7594
 8011e00:	1fff7598 	.word	0x1fff7598
 8011e04:	200001b6 	.word	0x200001b6
 8011e08:	200001c6 	.word	0x200001c6

08011e0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b087      	sub	sp, #28
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	4613      	mov	r3, r2
 8011e18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011e1e:	2300      	movs	r3, #0
 8011e20:	75fb      	strb	r3, [r7, #23]
 8011e22:	e027      	b.n	8011e74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	0f1b      	lsrs	r3, r3, #28
 8011e28:	2b09      	cmp	r3, #9
 8011e2a:	d80b      	bhi.n	8011e44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	0f1b      	lsrs	r3, r3, #28
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	7dfb      	ldrb	r3, [r7, #23]
 8011e34:	005b      	lsls	r3, r3, #1
 8011e36:	4619      	mov	r1, r3
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	440b      	add	r3, r1
 8011e3c:	3230      	adds	r2, #48	; 0x30
 8011e3e:	b2d2      	uxtb	r2, r2
 8011e40:	701a      	strb	r2, [r3, #0]
 8011e42:	e00a      	b.n	8011e5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	0f1b      	lsrs	r3, r3, #28
 8011e48:	b2da      	uxtb	r2, r3
 8011e4a:	7dfb      	ldrb	r3, [r7, #23]
 8011e4c:	005b      	lsls	r3, r3, #1
 8011e4e:	4619      	mov	r1, r3
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	440b      	add	r3, r1
 8011e54:	3237      	adds	r2, #55	; 0x37
 8011e56:	b2d2      	uxtb	r2, r2
 8011e58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	011b      	lsls	r3, r3, #4
 8011e5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e60:	7dfb      	ldrb	r3, [r7, #23]
 8011e62:	005b      	lsls	r3, r3, #1
 8011e64:	3301      	adds	r3, #1
 8011e66:	68ba      	ldr	r2, [r7, #8]
 8011e68:	4413      	add	r3, r2
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e6e:	7dfb      	ldrb	r3, [r7, #23]
 8011e70:	3301      	adds	r3, #1
 8011e72:	75fb      	strb	r3, [r7, #23]
 8011e74:	7dfa      	ldrb	r2, [r7, #23]
 8011e76:	79fb      	ldrb	r3, [r7, #7]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d3d3      	bcc.n	8011e24 <IntToUnicode+0x18>
  }
}
 8011e7c:	bf00      	nop
 8011e7e:	371c      	adds	r7, #28
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b08a      	sub	sp, #40	; 0x28
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e90:	f107 0314 	add.w	r3, r7, #20
 8011e94:	2200      	movs	r2, #0
 8011e96:	601a      	str	r2, [r3, #0]
 8011e98:	605a      	str	r2, [r3, #4]
 8011e9a:	609a      	str	r2, [r3, #8]
 8011e9c:	60da      	str	r2, [r3, #12]
 8011e9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011ea8:	d14e      	bne.n	8011f48 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011eaa:	4b29      	ldr	r3, [pc, #164]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011eae:	4a28      	ldr	r2, [pc, #160]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011eb0:	f043 0301 	orr.w	r3, r3, #1
 8011eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011eb6:	4b26      	ldr	r3, [pc, #152]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011eba:	f003 0301 	and.w	r3, r3, #1
 8011ebe:	613b      	str	r3, [r7, #16]
 8011ec0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8011ec2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ec8:	2302      	movs	r3, #2
 8011eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ed0:	2303      	movs	r3, #3
 8011ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011ed4:	230a      	movs	r3, #10
 8011ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ed8:	f107 0314 	add.w	r3, r7, #20
 8011edc:	4619      	mov	r1, r3
 8011ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011ee2:	f7f2 ff4f 	bl	8004d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011ee6:	4b1a      	ldr	r3, [pc, #104]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011eea:	4a19      	ldr	r2, [pc, #100]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011ef2:	4b17      	ldr	r3, [pc, #92]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011efa:	60fb      	str	r3, [r7, #12]
 8011efc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011efe:	4b14      	ldr	r3, [pc, #80]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d114      	bne.n	8011f34 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011f0a:	4b11      	ldr	r3, [pc, #68]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f0e:	4a10      	ldr	r2, [pc, #64]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f14:	6593      	str	r3, [r2, #88]	; 0x58
 8011f16:	4b0e      	ldr	r3, [pc, #56]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f1e:	60bb      	str	r3, [r7, #8]
 8011f20:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8011f22:	f7f4 fc1d 	bl	8006760 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011f26:	4b0a      	ldr	r3, [pc, #40]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f2a:	4a09      	ldr	r2, [pc, #36]	; (8011f50 <HAL_PCD_MspInit+0xc8>)
 8011f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011f30:	6593      	str	r3, [r2, #88]	; 0x58
 8011f32:	e001      	b.n	8011f38 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8011f34:	f7f4 fc14 	bl	8006760 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011f38:	2200      	movs	r2, #0
 8011f3a:	2105      	movs	r1, #5
 8011f3c:	2043      	movs	r0, #67	; 0x43
 8011f3e:	f7f2 fe21 	bl	8004b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011f42:	2043      	movs	r0, #67	; 0x43
 8011f44:	f7f2 fe3a 	bl	8004bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011f48:	bf00      	nop
 8011f4a:	3728      	adds	r7, #40	; 0x28
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	40021000 	.word	0x40021000

08011f54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4610      	mov	r0, r2
 8011f6c:	f7fb fc87 	bl	800d87e <USBD_LL_SetupStage>
}
 8011f70:	bf00      	nop
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	460b      	mov	r3, r1
 8011f82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011f8a:	78fa      	ldrb	r2, [r7, #3]
 8011f8c:	6879      	ldr	r1, [r7, #4]
 8011f8e:	4613      	mov	r3, r2
 8011f90:	00db      	lsls	r3, r3, #3
 8011f92:	1a9b      	subs	r3, r3, r2
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	440b      	add	r3, r1
 8011f98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011f9c:	681a      	ldr	r2, [r3, #0]
 8011f9e:	78fb      	ldrb	r3, [r7, #3]
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	f7fb fcb7 	bl	800d914 <USBD_LL_DataOutStage>
}
 8011fa6:	bf00      	nop
 8011fa8:	3708      	adds	r7, #8
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b082      	sub	sp, #8
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011fc0:	78fa      	ldrb	r2, [r7, #3]
 8011fc2:	6879      	ldr	r1, [r7, #4]
 8011fc4:	4613      	mov	r3, r2
 8011fc6:	00db      	lsls	r3, r3, #3
 8011fc8:	1a9b      	subs	r3, r3, r2
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	440b      	add	r3, r1
 8011fce:	3348      	adds	r3, #72	; 0x48
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	78fb      	ldrb	r3, [r7, #3]
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	f7fb fd0e 	bl	800d9f6 <USBD_LL_DataInStage>
}
 8011fda:	bf00      	nop
 8011fdc:	3708      	adds	r7, #8
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}

08011fe2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fe2:	b580      	push	{r7, lr}
 8011fe4:	b082      	sub	sp, #8
 8011fe6:	af00      	add	r7, sp, #0
 8011fe8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7fb fe21 	bl	800dc38 <USBD_LL_SOF>
}
 8011ff6:	bf00      	nop
 8011ff8:	3708      	adds	r7, #8
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}

08011ffe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b084      	sub	sp, #16
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012006:	2301      	movs	r3, #1
 8012008:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	2b02      	cmp	r3, #2
 8012010:	d001      	beq.n	8012016 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012012:	f7f0 f987 	bl	8002324 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801201c:	7bfa      	ldrb	r2, [r7, #15]
 801201e:	4611      	mov	r1, r2
 8012020:	4618      	mov	r0, r3
 8012022:	f7fb fdce 	bl	800dbc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801202c:	4618      	mov	r0, r3
 801202e:	f7fb fd87 	bl	800db40 <USBD_LL_Reset>
}
 8012032:	bf00      	nop
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
	...

0801203c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	6812      	ldr	r2, [r2, #0]
 8012052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012056:	f043 0301 	orr.w	r3, r3, #1
 801205a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012062:	4618      	mov	r0, r3
 8012064:	f7fb fdbd 	bl	800dbe2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6a1b      	ldr	r3, [r3, #32]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d005      	beq.n	801207c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012070:	4b04      	ldr	r3, [pc, #16]	; (8012084 <HAL_PCD_SuspendCallback+0x48>)
 8012072:	691b      	ldr	r3, [r3, #16]
 8012074:	4a03      	ldr	r2, [pc, #12]	; (8012084 <HAL_PCD_SuspendCallback+0x48>)
 8012076:	f043 0306 	orr.w	r3, r3, #6
 801207a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801207c:	bf00      	nop
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	e000ed00 	.word	0xe000ed00

08012088 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	6812      	ldr	r2, [r2, #0]
 801209e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80120a2:	f023 0301 	bic.w	r3, r3, #1
 80120a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6a1b      	ldr	r3, [r3, #32]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d007      	beq.n	80120c0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80120b0:	4b08      	ldr	r3, [pc, #32]	; (80120d4 <HAL_PCD_ResumeCallback+0x4c>)
 80120b2:	691b      	ldr	r3, [r3, #16]
 80120b4:	4a07      	ldr	r2, [pc, #28]	; (80120d4 <HAL_PCD_ResumeCallback+0x4c>)
 80120b6:	f023 0306 	bic.w	r3, r3, #6
 80120ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80120bc:	f000 fafa 	bl	80126b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fb fda0 	bl	800dc0c <USBD_LL_Resume>
}
 80120cc:	bf00      	nop
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	e000ed00 	.word	0xe000ed00

080120d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	460b      	mov	r3, r1
 80120e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120ea:	78fa      	ldrb	r2, [r7, #3]
 80120ec:	4611      	mov	r1, r2
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fb fdc9 	bl	800dc86 <USBD_LL_IsoOUTIncomplete>
}
 80120f4:	bf00      	nop
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	460b      	mov	r3, r1
 8012106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801210e:	78fa      	ldrb	r2, [r7, #3]
 8012110:	4611      	mov	r1, r2
 8012112:	4618      	mov	r0, r3
 8012114:	f7fb fdaa 	bl	800dc6c <USBD_LL_IsoINIncomplete>
}
 8012118:	bf00      	nop
 801211a:	3708      	adds	r7, #8
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801212e:	4618      	mov	r0, r3
 8012130:	f7fb fdb6 	bl	800dca0 <USBD_LL_DevConnected>
}
 8012134:	bf00      	nop
 8012136:	3708      	adds	r7, #8
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801214a:	4618      	mov	r0, r3
 801214c:	f7fb fdb3 	bl	800dcb6 <USBD_LL_DevDisconnected>
}
 8012150:	bf00      	nop
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d13c      	bne.n	80121e2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012168:	4a20      	ldr	r2, [pc, #128]	; (80121ec <USBD_LL_Init+0x94>)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	4a1e      	ldr	r2, [pc, #120]	; (80121ec <USBD_LL_Init+0x94>)
 8012174:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012178:	4b1c      	ldr	r3, [pc, #112]	; (80121ec <USBD_LL_Init+0x94>)
 801217a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801217e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012180:	4b1a      	ldr	r3, [pc, #104]	; (80121ec <USBD_LL_Init+0x94>)
 8012182:	2206      	movs	r2, #6
 8012184:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012186:	4b19      	ldr	r3, [pc, #100]	; (80121ec <USBD_LL_Init+0x94>)
 8012188:	2202      	movs	r2, #2
 801218a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801218c:	4b17      	ldr	r3, [pc, #92]	; (80121ec <USBD_LL_Init+0x94>)
 801218e:	2202      	movs	r2, #2
 8012190:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012192:	4b16      	ldr	r3, [pc, #88]	; (80121ec <USBD_LL_Init+0x94>)
 8012194:	2200      	movs	r2, #0
 8012196:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012198:	4b14      	ldr	r3, [pc, #80]	; (80121ec <USBD_LL_Init+0x94>)
 801219a:	2200      	movs	r2, #0
 801219c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801219e:	4b13      	ldr	r3, [pc, #76]	; (80121ec <USBD_LL_Init+0x94>)
 80121a0:	2200      	movs	r2, #0
 80121a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80121a4:	4b11      	ldr	r3, [pc, #68]	; (80121ec <USBD_LL_Init+0x94>)
 80121a6:	2200      	movs	r2, #0
 80121a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80121aa:	4b10      	ldr	r3, [pc, #64]	; (80121ec <USBD_LL_Init+0x94>)
 80121ac:	2200      	movs	r2, #0
 80121ae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80121b0:	4b0e      	ldr	r3, [pc, #56]	; (80121ec <USBD_LL_Init+0x94>)
 80121b2:	2200      	movs	r2, #0
 80121b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80121b6:	480d      	ldr	r0, [pc, #52]	; (80121ec <USBD_LL_Init+0x94>)
 80121b8:	f7f3 f9bf 	bl	800553a <HAL_PCD_Init>
 80121bc:	4603      	mov	r3, r0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80121c2:	f7f0 f8af 	bl	8002324 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80121c6:	2180      	movs	r1, #128	; 0x80
 80121c8:	4808      	ldr	r0, [pc, #32]	; (80121ec <USBD_LL_Init+0x94>)
 80121ca:	f7f4 fa20 	bl	800660e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80121ce:	2240      	movs	r2, #64	; 0x40
 80121d0:	2100      	movs	r1, #0
 80121d2:	4806      	ldr	r0, [pc, #24]	; (80121ec <USBD_LL_Init+0x94>)
 80121d4:	f7f4 f9d4 	bl	8006580 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80121d8:	2280      	movs	r2, #128	; 0x80
 80121da:	2101      	movs	r1, #1
 80121dc:	4803      	ldr	r0, [pc, #12]	; (80121ec <USBD_LL_Init+0x94>)
 80121de:	f7f4 f9cf 	bl	8006580 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80121e2:	2300      	movs	r3, #0
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	200100c0 	.word	0x200100c0

080121f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121f8:	2300      	movs	r3, #0
 80121fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012206:	4618      	mov	r0, r3
 8012208:	f7f3 fabb 	bl	8005782 <HAL_PCD_Start>
 801220c:	4603      	mov	r3, r0
 801220e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8012210:	7bbb      	ldrb	r3, [r7, #14]
 8012212:	2b03      	cmp	r3, #3
 8012214:	d816      	bhi.n	8012244 <USBD_LL_Start+0x54>
 8012216:	a201      	add	r2, pc, #4	; (adr r2, 801221c <USBD_LL_Start+0x2c>)
 8012218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801221c:	0801222d 	.word	0x0801222d
 8012220:	08012233 	.word	0x08012233
 8012224:	08012239 	.word	0x08012239
 8012228:	0801223f 	.word	0x0801223f
    case HAL_OK :
      usb_status = USBD_OK;
 801222c:	2300      	movs	r3, #0
 801222e:	73fb      	strb	r3, [r7, #15]
    break;
 8012230:	e00b      	b.n	801224a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012232:	2302      	movs	r3, #2
 8012234:	73fb      	strb	r3, [r7, #15]
    break;
 8012236:	e008      	b.n	801224a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012238:	2301      	movs	r3, #1
 801223a:	73fb      	strb	r3, [r7, #15]
    break;
 801223c:	e005      	b.n	801224a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801223e:	2302      	movs	r3, #2
 8012240:	73fb      	strb	r3, [r7, #15]
    break;
 8012242:	e002      	b.n	801224a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012244:	2302      	movs	r3, #2
 8012246:	73fb      	strb	r3, [r7, #15]
    break;
 8012248:	bf00      	nop
  }
  return usb_status;
 801224a:	7bfb      	ldrb	r3, [r7, #15]
}
 801224c:	4618      	mov	r0, r3
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	4608      	mov	r0, r1
 801225e:	4611      	mov	r1, r2
 8012260:	461a      	mov	r2, r3
 8012262:	4603      	mov	r3, r0
 8012264:	70fb      	strb	r3, [r7, #3]
 8012266:	460b      	mov	r3, r1
 8012268:	70bb      	strb	r3, [r7, #2]
 801226a:	4613      	mov	r3, r2
 801226c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801226e:	2300      	movs	r3, #0
 8012270:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012272:	2300      	movs	r3, #0
 8012274:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801227c:	78bb      	ldrb	r3, [r7, #2]
 801227e:	883a      	ldrh	r2, [r7, #0]
 8012280:	78f9      	ldrb	r1, [r7, #3]
 8012282:	f7f3 fe76 	bl	8005f72 <HAL_PCD_EP_Open>
 8012286:	4603      	mov	r3, r0
 8012288:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801228a:	7bbb      	ldrb	r3, [r7, #14]
 801228c:	2b03      	cmp	r3, #3
 801228e:	d817      	bhi.n	80122c0 <USBD_LL_OpenEP+0x6c>
 8012290:	a201      	add	r2, pc, #4	; (adr r2, 8012298 <USBD_LL_OpenEP+0x44>)
 8012292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012296:	bf00      	nop
 8012298:	080122a9 	.word	0x080122a9
 801229c:	080122af 	.word	0x080122af
 80122a0:	080122b5 	.word	0x080122b5
 80122a4:	080122bb 	.word	0x080122bb
    case HAL_OK :
      usb_status = USBD_OK;
 80122a8:	2300      	movs	r3, #0
 80122aa:	73fb      	strb	r3, [r7, #15]
    break;
 80122ac:	e00b      	b.n	80122c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80122ae:	2302      	movs	r3, #2
 80122b0:	73fb      	strb	r3, [r7, #15]
    break;
 80122b2:	e008      	b.n	80122c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80122b4:	2301      	movs	r3, #1
 80122b6:	73fb      	strb	r3, [r7, #15]
    break;
 80122b8:	e005      	b.n	80122c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80122ba:	2302      	movs	r3, #2
 80122bc:	73fb      	strb	r3, [r7, #15]
    break;
 80122be:	e002      	b.n	80122c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80122c0:	2302      	movs	r3, #2
 80122c2:	73fb      	strb	r3, [r7, #15]
    break;
 80122c4:	bf00      	nop
  }
  return usb_status;
 80122c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3710      	adds	r7, #16
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	460b      	mov	r3, r1
 80122da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122dc:	2300      	movs	r3, #0
 80122de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122e0:	2300      	movs	r3, #0
 80122e2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80122ea:	78fa      	ldrb	r2, [r7, #3]
 80122ec:	4611      	mov	r1, r2
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7f3 fea7 	bl	8006042 <HAL_PCD_EP_Close>
 80122f4:	4603      	mov	r3, r0
 80122f6:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80122f8:	7bbb      	ldrb	r3, [r7, #14]
 80122fa:	2b03      	cmp	r3, #3
 80122fc:	d816      	bhi.n	801232c <USBD_LL_CloseEP+0x5c>
 80122fe:	a201      	add	r2, pc, #4	; (adr r2, 8012304 <USBD_LL_CloseEP+0x34>)
 8012300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012304:	08012315 	.word	0x08012315
 8012308:	0801231b 	.word	0x0801231b
 801230c:	08012321 	.word	0x08012321
 8012310:	08012327 	.word	0x08012327
    case HAL_OK :
      usb_status = USBD_OK;
 8012314:	2300      	movs	r3, #0
 8012316:	73fb      	strb	r3, [r7, #15]
    break;
 8012318:	e00b      	b.n	8012332 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801231a:	2302      	movs	r3, #2
 801231c:	73fb      	strb	r3, [r7, #15]
    break;
 801231e:	e008      	b.n	8012332 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012320:	2301      	movs	r3, #1
 8012322:	73fb      	strb	r3, [r7, #15]
    break;
 8012324:	e005      	b.n	8012332 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012326:	2302      	movs	r3, #2
 8012328:	73fb      	strb	r3, [r7, #15]
    break;
 801232a:	e002      	b.n	8012332 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801232c:	2302      	movs	r3, #2
 801232e:	73fb      	strb	r3, [r7, #15]
    break;
 8012330:	bf00      	nop
  }
  return usb_status;  
 8012332:	7bfb      	ldrb	r3, [r7, #15]
}
 8012334:	4618      	mov	r0, r3
 8012336:	3710      	adds	r7, #16
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	460b      	mov	r3, r1
 8012346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012348:	2300      	movs	r3, #0
 801234a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012356:	78fa      	ldrb	r2, [r7, #3]
 8012358:	4611      	mov	r1, r2
 801235a:	4618      	mov	r0, r3
 801235c:	f7f3 ff4e 	bl	80061fc <HAL_PCD_EP_SetStall>
 8012360:	4603      	mov	r3, r0
 8012362:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012364:	7bbb      	ldrb	r3, [r7, #14]
 8012366:	2b03      	cmp	r3, #3
 8012368:	d816      	bhi.n	8012398 <USBD_LL_StallEP+0x5c>
 801236a:	a201      	add	r2, pc, #4	; (adr r2, 8012370 <USBD_LL_StallEP+0x34>)
 801236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012370:	08012381 	.word	0x08012381
 8012374:	08012387 	.word	0x08012387
 8012378:	0801238d 	.word	0x0801238d
 801237c:	08012393 	.word	0x08012393
    case HAL_OK :
      usb_status = USBD_OK;
 8012380:	2300      	movs	r3, #0
 8012382:	73fb      	strb	r3, [r7, #15]
    break;
 8012384:	e00b      	b.n	801239e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012386:	2302      	movs	r3, #2
 8012388:	73fb      	strb	r3, [r7, #15]
    break;
 801238a:	e008      	b.n	801239e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801238c:	2301      	movs	r3, #1
 801238e:	73fb      	strb	r3, [r7, #15]
    break;
 8012390:	e005      	b.n	801239e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012392:	2302      	movs	r3, #2
 8012394:	73fb      	strb	r3, [r7, #15]
    break;
 8012396:	e002      	b.n	801239e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012398:	2302      	movs	r3, #2
 801239a:	73fb      	strb	r3, [r7, #15]
    break;
 801239c:	bf00      	nop
  }
  return usb_status;  
 801239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	460b      	mov	r3, r1
 80123b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123b8:	2300      	movs	r3, #0
 80123ba:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80123c2:	78fa      	ldrb	r2, [r7, #3]
 80123c4:	4611      	mov	r1, r2
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7f3 ff7a 	bl	80062c0 <HAL_PCD_EP_ClrStall>
 80123cc:	4603      	mov	r3, r0
 80123ce:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80123d0:	7bbb      	ldrb	r3, [r7, #14]
 80123d2:	2b03      	cmp	r3, #3
 80123d4:	d816      	bhi.n	8012404 <USBD_LL_ClearStallEP+0x5c>
 80123d6:	a201      	add	r2, pc, #4	; (adr r2, 80123dc <USBD_LL_ClearStallEP+0x34>)
 80123d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123dc:	080123ed 	.word	0x080123ed
 80123e0:	080123f3 	.word	0x080123f3
 80123e4:	080123f9 	.word	0x080123f9
 80123e8:	080123ff 	.word	0x080123ff
    case HAL_OK :
      usb_status = USBD_OK;
 80123ec:	2300      	movs	r3, #0
 80123ee:	73fb      	strb	r3, [r7, #15]
    break;
 80123f0:	e00b      	b.n	801240a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80123f2:	2302      	movs	r3, #2
 80123f4:	73fb      	strb	r3, [r7, #15]
    break;
 80123f6:	e008      	b.n	801240a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80123f8:	2301      	movs	r3, #1
 80123fa:	73fb      	strb	r3, [r7, #15]
    break;
 80123fc:	e005      	b.n	801240a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80123fe:	2302      	movs	r3, #2
 8012400:	73fb      	strb	r3, [r7, #15]
    break;
 8012402:	e002      	b.n	801240a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012404:	2302      	movs	r3, #2
 8012406:	73fb      	strb	r3, [r7, #15]
    break;
 8012408:	bf00      	nop
  }
  return usb_status; 
 801240a:	7bfb      	ldrb	r3, [r7, #15]
}
 801240c:	4618      	mov	r0, r3
 801240e:	3710      	adds	r7, #16
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012414:	b480      	push	{r7}
 8012416:	b085      	sub	sp, #20
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	460b      	mov	r3, r1
 801241e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012426:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8012428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801242c:	2b00      	cmp	r3, #0
 801242e:	da0b      	bge.n	8012448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8012430:	78fb      	ldrb	r3, [r7, #3]
 8012432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012436:	68f9      	ldr	r1, [r7, #12]
 8012438:	4613      	mov	r3, r2
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	1a9b      	subs	r3, r3, r2
 801243e:	009b      	lsls	r3, r3, #2
 8012440:	440b      	add	r3, r1
 8012442:	333e      	adds	r3, #62	; 0x3e
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	e00b      	b.n	8012460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8012448:	78fb      	ldrb	r3, [r7, #3]
 801244a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801244e:	68f9      	ldr	r1, [r7, #12]
 8012450:	4613      	mov	r3, r2
 8012452:	00db      	lsls	r3, r3, #3
 8012454:	1a9b      	subs	r3, r3, r2
 8012456:	009b      	lsls	r3, r3, #2
 8012458:	440b      	add	r3, r1
 801245a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801245e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012460:	4618      	mov	r0, r3
 8012462:	3714      	adds	r7, #20
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012478:	2300      	movs	r3, #0
 801247a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012486:	78fa      	ldrb	r2, [r7, #3]
 8012488:	4611      	mov	r1, r2
 801248a:	4618      	mov	r0, r3
 801248c:	f7f3 fd4c 	bl	8005f28 <HAL_PCD_SetAddress>
 8012490:	4603      	mov	r3, r0
 8012492:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8012494:	7bbb      	ldrb	r3, [r7, #14]
 8012496:	2b03      	cmp	r3, #3
 8012498:	d816      	bhi.n	80124c8 <USBD_LL_SetUSBAddress+0x5c>
 801249a:	a201      	add	r2, pc, #4	; (adr r2, 80124a0 <USBD_LL_SetUSBAddress+0x34>)
 801249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a0:	080124b1 	.word	0x080124b1
 80124a4:	080124b7 	.word	0x080124b7
 80124a8:	080124bd 	.word	0x080124bd
 80124ac:	080124c3 	.word	0x080124c3
    case HAL_OK :
      usb_status = USBD_OK;
 80124b0:	2300      	movs	r3, #0
 80124b2:	73fb      	strb	r3, [r7, #15]
    break;
 80124b4:	e00b      	b.n	80124ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80124b6:	2302      	movs	r3, #2
 80124b8:	73fb      	strb	r3, [r7, #15]
    break;
 80124ba:	e008      	b.n	80124ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80124bc:	2301      	movs	r3, #1
 80124be:	73fb      	strb	r3, [r7, #15]
    break;
 80124c0:	e005      	b.n	80124ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80124c2:	2302      	movs	r3, #2
 80124c4:	73fb      	strb	r3, [r7, #15]
    break;
 80124c6:	e002      	b.n	80124ce <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80124c8:	2302      	movs	r3, #2
 80124ca:	73fb      	strb	r3, [r7, #15]
    break;
 80124cc:	bf00      	nop
  }
  return usb_status;  
 80124ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3710      	adds	r7, #16
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b086      	sub	sp, #24
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	607a      	str	r2, [r7, #4]
 80124e2:	461a      	mov	r2, r3
 80124e4:	460b      	mov	r3, r1
 80124e6:	72fb      	strb	r3, [r7, #11]
 80124e8:	4613      	mov	r3, r2
 80124ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124ec:	2300      	movs	r3, #0
 80124ee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124f0:	2300      	movs	r3, #0
 80124f2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80124fa:	893b      	ldrh	r3, [r7, #8]
 80124fc:	7af9      	ldrb	r1, [r7, #11]
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	f7f3 fe3f 	bl	8006182 <HAL_PCD_EP_Transmit>
 8012504:	4603      	mov	r3, r0
 8012506:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8012508:	7dbb      	ldrb	r3, [r7, #22]
 801250a:	2b03      	cmp	r3, #3
 801250c:	d816      	bhi.n	801253c <USBD_LL_Transmit+0x64>
 801250e:	a201      	add	r2, pc, #4	; (adr r2, 8012514 <USBD_LL_Transmit+0x3c>)
 8012510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012514:	08012525 	.word	0x08012525
 8012518:	0801252b 	.word	0x0801252b
 801251c:	08012531 	.word	0x08012531
 8012520:	08012537 	.word	0x08012537
    case HAL_OK :
      usb_status = USBD_OK;
 8012524:	2300      	movs	r3, #0
 8012526:	75fb      	strb	r3, [r7, #23]
    break;
 8012528:	e00b      	b.n	8012542 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801252a:	2302      	movs	r3, #2
 801252c:	75fb      	strb	r3, [r7, #23]
    break;
 801252e:	e008      	b.n	8012542 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012530:	2301      	movs	r3, #1
 8012532:	75fb      	strb	r3, [r7, #23]
    break;
 8012534:	e005      	b.n	8012542 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012536:	2302      	movs	r3, #2
 8012538:	75fb      	strb	r3, [r7, #23]
    break;
 801253a:	e002      	b.n	8012542 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 801253c:	2302      	movs	r3, #2
 801253e:	75fb      	strb	r3, [r7, #23]
    break;
 8012540:	bf00      	nop
  }
  return usb_status;    
 8012542:	7dfb      	ldrb	r3, [r7, #23]
}
 8012544:	4618      	mov	r0, r3
 8012546:	3718      	adds	r7, #24
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b086      	sub	sp, #24
 8012550:	af00      	add	r7, sp, #0
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	607a      	str	r2, [r7, #4]
 8012556:	461a      	mov	r2, r3
 8012558:	460b      	mov	r3, r1
 801255a:	72fb      	strb	r3, [r7, #11]
 801255c:	4613      	mov	r3, r2
 801255e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012560:	2300      	movs	r3, #0
 8012562:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012564:	2300      	movs	r3, #0
 8012566:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801256e:	893b      	ldrh	r3, [r7, #8]
 8012570:	7af9      	ldrb	r1, [r7, #11]
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	f7f3 fdaf 	bl	80060d6 <HAL_PCD_EP_Receive>
 8012578:	4603      	mov	r3, r0
 801257a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 801257c:	7dbb      	ldrb	r3, [r7, #22]
 801257e:	2b03      	cmp	r3, #3
 8012580:	d816      	bhi.n	80125b0 <USBD_LL_PrepareReceive+0x64>
 8012582:	a201      	add	r2, pc, #4	; (adr r2, 8012588 <USBD_LL_PrepareReceive+0x3c>)
 8012584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012588:	08012599 	.word	0x08012599
 801258c:	0801259f 	.word	0x0801259f
 8012590:	080125a5 	.word	0x080125a5
 8012594:	080125ab 	.word	0x080125ab
    case HAL_OK :
      usb_status = USBD_OK;
 8012598:	2300      	movs	r3, #0
 801259a:	75fb      	strb	r3, [r7, #23]
    break;
 801259c:	e00b      	b.n	80125b6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801259e:	2302      	movs	r3, #2
 80125a0:	75fb      	strb	r3, [r7, #23]
    break;
 80125a2:	e008      	b.n	80125b6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80125a4:	2301      	movs	r3, #1
 80125a6:	75fb      	strb	r3, [r7, #23]
    break;
 80125a8:	e005      	b.n	80125b6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80125aa:	2302      	movs	r3, #2
 80125ac:	75fb      	strb	r3, [r7, #23]
    break;
 80125ae:	e002      	b.n	80125b6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80125b0:	2302      	movs	r3, #2
 80125b2:	75fb      	strb	r3, [r7, #23]
    break;
 80125b4:	bf00      	nop
  }
  return usb_status; 
 80125b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	460b      	mov	r3, r1
 80125ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80125d2:	78fa      	ldrb	r2, [r7, #3]
 80125d4:	4611      	mov	r1, r2
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7f3 fdbb 	bl	8006152 <HAL_PCD_EP_GetRxCount>
 80125dc:	4603      	mov	r3, r0
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3708      	adds	r7, #8
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
	...

080125e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	460b      	mov	r3, r1
 80125f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80125f4:	78fb      	ldrb	r3, [r7, #3]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d002      	beq.n	8012600 <HAL_PCDEx_LPM_Callback+0x18>
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d01f      	beq.n	801263e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80125fe:	e03b      	b.n	8012678 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6a1b      	ldr	r3, [r3, #32]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d007      	beq.n	8012618 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012608:	f000 f854 	bl	80126b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801260c:	4b1c      	ldr	r3, [pc, #112]	; (8012680 <HAL_PCDEx_LPM_Callback+0x98>)
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	4a1b      	ldr	r2, [pc, #108]	; (8012680 <HAL_PCDEx_LPM_Callback+0x98>)
 8012612:	f023 0306 	bic.w	r3, r3, #6
 8012616:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	6812      	ldr	r2, [r2, #0]
 8012626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801262a:	f023 0301 	bic.w	r3, r3, #1
 801262e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012636:	4618      	mov	r0, r3
 8012638:	f7fb fae8 	bl	800dc0c <USBD_LL_Resume>
    break;
 801263c:	e01c      	b.n	8012678 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	6812      	ldr	r2, [r2, #0]
 801264c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012650:	f043 0301 	orr.w	r3, r3, #1
 8012654:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801265c:	4618      	mov	r0, r3
 801265e:	f7fb fac0 	bl	800dbe2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6a1b      	ldr	r3, [r3, #32]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d005      	beq.n	8012676 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801266a:	4b05      	ldr	r3, [pc, #20]	; (8012680 <HAL_PCDEx_LPM_Callback+0x98>)
 801266c:	691b      	ldr	r3, [r3, #16]
 801266e:	4a04      	ldr	r2, [pc, #16]	; (8012680 <HAL_PCDEx_LPM_Callback+0x98>)
 8012670:	f043 0306 	orr.w	r3, r3, #6
 8012674:	6113      	str	r3, [r2, #16]
    break;   
 8012676:	bf00      	nop
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	e000ed00 	.word	0xe000ed00

08012684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012684:	b480      	push	{r7}
 8012686:	b083      	sub	sp, #12
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801268c:	4b03      	ldr	r3, [pc, #12]	; (801269c <USBD_static_malloc+0x18>)
}
 801268e:	4618      	mov	r0, r3
 8012690:	370c      	adds	r7, #12
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	2000d538 	.word	0x2000d538

080126a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b083      	sub	sp, #12
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]

}
 80126a8:	bf00      	nop
 80126aa:	370c      	adds	r7, #12
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr

080126b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80126b8:	f7ee ff78 	bl	80015ac <SystemClock_Config>
}
 80126bc:	bf00      	nop
 80126be:	bd80      	pop	{r7, pc}

080126c0 <__assert_func>:
 80126c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126c2:	461c      	mov	r4, r3
 80126c4:	4b09      	ldr	r3, [pc, #36]	; (80126ec <__assert_func+0x2c>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	4605      	mov	r5, r0
 80126ca:	68d8      	ldr	r0, [r3, #12]
 80126cc:	b152      	cbz	r2, 80126e4 <__assert_func+0x24>
 80126ce:	4b08      	ldr	r3, [pc, #32]	; (80126f0 <__assert_func+0x30>)
 80126d0:	9100      	str	r1, [sp, #0]
 80126d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80126d6:	4907      	ldr	r1, [pc, #28]	; (80126f4 <__assert_func+0x34>)
 80126d8:	462b      	mov	r3, r5
 80126da:	4622      	mov	r2, r4
 80126dc:	f000 f818 	bl	8012710 <fiprintf>
 80126e0:	f000 fdfc 	bl	80132dc <abort>
 80126e4:	4b04      	ldr	r3, [pc, #16]	; (80126f8 <__assert_func+0x38>)
 80126e6:	461a      	mov	r2, r3
 80126e8:	e7f2      	b.n	80126d0 <__assert_func+0x10>
 80126ea:	bf00      	nop
 80126ec:	200001d0 	.word	0x200001d0
 80126f0:	08013fd8 	.word	0x08013fd8
 80126f4:	08013fe5 	.word	0x08013fe5
 80126f8:	08014013 	.word	0x08014013

080126fc <atoi>:
 80126fc:	220a      	movs	r2, #10
 80126fe:	2100      	movs	r1, #0
 8012700:	f000 bd16 	b.w	8013130 <strtol>

08012704 <__errno>:
 8012704:	4b01      	ldr	r3, [pc, #4]	; (801270c <__errno+0x8>)
 8012706:	6818      	ldr	r0, [r3, #0]
 8012708:	4770      	bx	lr
 801270a:	bf00      	nop
 801270c:	200001d0 	.word	0x200001d0

08012710 <fiprintf>:
 8012710:	b40e      	push	{r1, r2, r3}
 8012712:	b503      	push	{r0, r1, lr}
 8012714:	4601      	mov	r1, r0
 8012716:	ab03      	add	r3, sp, #12
 8012718:	4805      	ldr	r0, [pc, #20]	; (8012730 <fiprintf+0x20>)
 801271a:	f853 2b04 	ldr.w	r2, [r3], #4
 801271e:	6800      	ldr	r0, [r0, #0]
 8012720:	9301      	str	r3, [sp, #4]
 8012722:	f000 f911 	bl	8012948 <_vfiprintf_r>
 8012726:	b002      	add	sp, #8
 8012728:	f85d eb04 	ldr.w	lr, [sp], #4
 801272c:	b003      	add	sp, #12
 801272e:	4770      	bx	lr
 8012730:	200001d0 	.word	0x200001d0

08012734 <__libc_init_array>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	4e0d      	ldr	r6, [pc, #52]	; (801276c <__libc_init_array+0x38>)
 8012738:	4c0d      	ldr	r4, [pc, #52]	; (8012770 <__libc_init_array+0x3c>)
 801273a:	1ba4      	subs	r4, r4, r6
 801273c:	10a4      	asrs	r4, r4, #2
 801273e:	2500      	movs	r5, #0
 8012740:	42a5      	cmp	r5, r4
 8012742:	d109      	bne.n	8012758 <__libc_init_array+0x24>
 8012744:	4e0b      	ldr	r6, [pc, #44]	; (8012774 <__libc_init_array+0x40>)
 8012746:	4c0c      	ldr	r4, [pc, #48]	; (8012778 <__libc_init_array+0x44>)
 8012748:	f001 fa5c 	bl	8013c04 <_init>
 801274c:	1ba4      	subs	r4, r4, r6
 801274e:	10a4      	asrs	r4, r4, #2
 8012750:	2500      	movs	r5, #0
 8012752:	42a5      	cmp	r5, r4
 8012754:	d105      	bne.n	8012762 <__libc_init_array+0x2e>
 8012756:	bd70      	pop	{r4, r5, r6, pc}
 8012758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801275c:	4798      	blx	r3
 801275e:	3501      	adds	r5, #1
 8012760:	e7ee      	b.n	8012740 <__libc_init_array+0xc>
 8012762:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012766:	4798      	blx	r3
 8012768:	3501      	adds	r5, #1
 801276a:	e7f2      	b.n	8012752 <__libc_init_array+0x1e>
 801276c:	080141c0 	.word	0x080141c0
 8012770:	080141c0 	.word	0x080141c0
 8012774:	080141c0 	.word	0x080141c0
 8012778:	080141c4 	.word	0x080141c4

0801277c <memcpy>:
 801277c:	b510      	push	{r4, lr}
 801277e:	1e43      	subs	r3, r0, #1
 8012780:	440a      	add	r2, r1
 8012782:	4291      	cmp	r1, r2
 8012784:	d100      	bne.n	8012788 <memcpy+0xc>
 8012786:	bd10      	pop	{r4, pc}
 8012788:	f811 4b01 	ldrb.w	r4, [r1], #1
 801278c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012790:	e7f7      	b.n	8012782 <memcpy+0x6>

08012792 <memset>:
 8012792:	4402      	add	r2, r0
 8012794:	4603      	mov	r3, r0
 8012796:	4293      	cmp	r3, r2
 8012798:	d100      	bne.n	801279c <memset+0xa>
 801279a:	4770      	bx	lr
 801279c:	f803 1b01 	strb.w	r1, [r3], #1
 80127a0:	e7f9      	b.n	8012796 <memset+0x4>
	...

080127a4 <_free_r>:
 80127a4:	b538      	push	{r3, r4, r5, lr}
 80127a6:	4605      	mov	r5, r0
 80127a8:	2900      	cmp	r1, #0
 80127aa:	d045      	beq.n	8012838 <_free_r+0x94>
 80127ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127b0:	1f0c      	subs	r4, r1, #4
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	bfb8      	it	lt
 80127b6:	18e4      	addlt	r4, r4, r3
 80127b8:	f000 ffa5 	bl	8013706 <__malloc_lock>
 80127bc:	4a1f      	ldr	r2, [pc, #124]	; (801283c <_free_r+0x98>)
 80127be:	6813      	ldr	r3, [r2, #0]
 80127c0:	4610      	mov	r0, r2
 80127c2:	b933      	cbnz	r3, 80127d2 <_free_r+0x2e>
 80127c4:	6063      	str	r3, [r4, #4]
 80127c6:	6014      	str	r4, [r2, #0]
 80127c8:	4628      	mov	r0, r5
 80127ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ce:	f000 bf9b 	b.w	8013708 <__malloc_unlock>
 80127d2:	42a3      	cmp	r3, r4
 80127d4:	d90c      	bls.n	80127f0 <_free_r+0x4c>
 80127d6:	6821      	ldr	r1, [r4, #0]
 80127d8:	1862      	adds	r2, r4, r1
 80127da:	4293      	cmp	r3, r2
 80127dc:	bf04      	itt	eq
 80127de:	681a      	ldreq	r2, [r3, #0]
 80127e0:	685b      	ldreq	r3, [r3, #4]
 80127e2:	6063      	str	r3, [r4, #4]
 80127e4:	bf04      	itt	eq
 80127e6:	1852      	addeq	r2, r2, r1
 80127e8:	6022      	streq	r2, [r4, #0]
 80127ea:	6004      	str	r4, [r0, #0]
 80127ec:	e7ec      	b.n	80127c8 <_free_r+0x24>
 80127ee:	4613      	mov	r3, r2
 80127f0:	685a      	ldr	r2, [r3, #4]
 80127f2:	b10a      	cbz	r2, 80127f8 <_free_r+0x54>
 80127f4:	42a2      	cmp	r2, r4
 80127f6:	d9fa      	bls.n	80127ee <_free_r+0x4a>
 80127f8:	6819      	ldr	r1, [r3, #0]
 80127fa:	1858      	adds	r0, r3, r1
 80127fc:	42a0      	cmp	r0, r4
 80127fe:	d10b      	bne.n	8012818 <_free_r+0x74>
 8012800:	6820      	ldr	r0, [r4, #0]
 8012802:	4401      	add	r1, r0
 8012804:	1858      	adds	r0, r3, r1
 8012806:	4282      	cmp	r2, r0
 8012808:	6019      	str	r1, [r3, #0]
 801280a:	d1dd      	bne.n	80127c8 <_free_r+0x24>
 801280c:	6810      	ldr	r0, [r2, #0]
 801280e:	6852      	ldr	r2, [r2, #4]
 8012810:	605a      	str	r2, [r3, #4]
 8012812:	4401      	add	r1, r0
 8012814:	6019      	str	r1, [r3, #0]
 8012816:	e7d7      	b.n	80127c8 <_free_r+0x24>
 8012818:	d902      	bls.n	8012820 <_free_r+0x7c>
 801281a:	230c      	movs	r3, #12
 801281c:	602b      	str	r3, [r5, #0]
 801281e:	e7d3      	b.n	80127c8 <_free_r+0x24>
 8012820:	6820      	ldr	r0, [r4, #0]
 8012822:	1821      	adds	r1, r4, r0
 8012824:	428a      	cmp	r2, r1
 8012826:	bf04      	itt	eq
 8012828:	6811      	ldreq	r1, [r2, #0]
 801282a:	6852      	ldreq	r2, [r2, #4]
 801282c:	6062      	str	r2, [r4, #4]
 801282e:	bf04      	itt	eq
 8012830:	1809      	addeq	r1, r1, r0
 8012832:	6021      	streq	r1, [r4, #0]
 8012834:	605c      	str	r4, [r3, #4]
 8012836:	e7c7      	b.n	80127c8 <_free_r+0x24>
 8012838:	bd38      	pop	{r3, r4, r5, pc}
 801283a:	bf00      	nop
 801283c:	2000d758 	.word	0x2000d758

08012840 <_malloc_r>:
 8012840:	b570      	push	{r4, r5, r6, lr}
 8012842:	1ccd      	adds	r5, r1, #3
 8012844:	f025 0503 	bic.w	r5, r5, #3
 8012848:	3508      	adds	r5, #8
 801284a:	2d0c      	cmp	r5, #12
 801284c:	bf38      	it	cc
 801284e:	250c      	movcc	r5, #12
 8012850:	2d00      	cmp	r5, #0
 8012852:	4606      	mov	r6, r0
 8012854:	db01      	blt.n	801285a <_malloc_r+0x1a>
 8012856:	42a9      	cmp	r1, r5
 8012858:	d903      	bls.n	8012862 <_malloc_r+0x22>
 801285a:	230c      	movs	r3, #12
 801285c:	6033      	str	r3, [r6, #0]
 801285e:	2000      	movs	r0, #0
 8012860:	bd70      	pop	{r4, r5, r6, pc}
 8012862:	f000 ff50 	bl	8013706 <__malloc_lock>
 8012866:	4a21      	ldr	r2, [pc, #132]	; (80128ec <_malloc_r+0xac>)
 8012868:	6814      	ldr	r4, [r2, #0]
 801286a:	4621      	mov	r1, r4
 801286c:	b991      	cbnz	r1, 8012894 <_malloc_r+0x54>
 801286e:	4c20      	ldr	r4, [pc, #128]	; (80128f0 <_malloc_r+0xb0>)
 8012870:	6823      	ldr	r3, [r4, #0]
 8012872:	b91b      	cbnz	r3, 801287c <_malloc_r+0x3c>
 8012874:	4630      	mov	r0, r6
 8012876:	f000 fb81 	bl	8012f7c <_sbrk_r>
 801287a:	6020      	str	r0, [r4, #0]
 801287c:	4629      	mov	r1, r5
 801287e:	4630      	mov	r0, r6
 8012880:	f000 fb7c 	bl	8012f7c <_sbrk_r>
 8012884:	1c43      	adds	r3, r0, #1
 8012886:	d124      	bne.n	80128d2 <_malloc_r+0x92>
 8012888:	230c      	movs	r3, #12
 801288a:	6033      	str	r3, [r6, #0]
 801288c:	4630      	mov	r0, r6
 801288e:	f000 ff3b 	bl	8013708 <__malloc_unlock>
 8012892:	e7e4      	b.n	801285e <_malloc_r+0x1e>
 8012894:	680b      	ldr	r3, [r1, #0]
 8012896:	1b5b      	subs	r3, r3, r5
 8012898:	d418      	bmi.n	80128cc <_malloc_r+0x8c>
 801289a:	2b0b      	cmp	r3, #11
 801289c:	d90f      	bls.n	80128be <_malloc_r+0x7e>
 801289e:	600b      	str	r3, [r1, #0]
 80128a0:	50cd      	str	r5, [r1, r3]
 80128a2:	18cc      	adds	r4, r1, r3
 80128a4:	4630      	mov	r0, r6
 80128a6:	f000 ff2f 	bl	8013708 <__malloc_unlock>
 80128aa:	f104 000b 	add.w	r0, r4, #11
 80128ae:	1d23      	adds	r3, r4, #4
 80128b0:	f020 0007 	bic.w	r0, r0, #7
 80128b4:	1ac3      	subs	r3, r0, r3
 80128b6:	d0d3      	beq.n	8012860 <_malloc_r+0x20>
 80128b8:	425a      	negs	r2, r3
 80128ba:	50e2      	str	r2, [r4, r3]
 80128bc:	e7d0      	b.n	8012860 <_malloc_r+0x20>
 80128be:	428c      	cmp	r4, r1
 80128c0:	684b      	ldr	r3, [r1, #4]
 80128c2:	bf16      	itet	ne
 80128c4:	6063      	strne	r3, [r4, #4]
 80128c6:	6013      	streq	r3, [r2, #0]
 80128c8:	460c      	movne	r4, r1
 80128ca:	e7eb      	b.n	80128a4 <_malloc_r+0x64>
 80128cc:	460c      	mov	r4, r1
 80128ce:	6849      	ldr	r1, [r1, #4]
 80128d0:	e7cc      	b.n	801286c <_malloc_r+0x2c>
 80128d2:	1cc4      	adds	r4, r0, #3
 80128d4:	f024 0403 	bic.w	r4, r4, #3
 80128d8:	42a0      	cmp	r0, r4
 80128da:	d005      	beq.n	80128e8 <_malloc_r+0xa8>
 80128dc:	1a21      	subs	r1, r4, r0
 80128de:	4630      	mov	r0, r6
 80128e0:	f000 fb4c 	bl	8012f7c <_sbrk_r>
 80128e4:	3001      	adds	r0, #1
 80128e6:	d0cf      	beq.n	8012888 <_malloc_r+0x48>
 80128e8:	6025      	str	r5, [r4, #0]
 80128ea:	e7db      	b.n	80128a4 <_malloc_r+0x64>
 80128ec:	2000d758 	.word	0x2000d758
 80128f0:	2000d75c 	.word	0x2000d75c

080128f4 <__sfputc_r>:
 80128f4:	6893      	ldr	r3, [r2, #8]
 80128f6:	3b01      	subs	r3, #1
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	b410      	push	{r4}
 80128fc:	6093      	str	r3, [r2, #8]
 80128fe:	da08      	bge.n	8012912 <__sfputc_r+0x1e>
 8012900:	6994      	ldr	r4, [r2, #24]
 8012902:	42a3      	cmp	r3, r4
 8012904:	db01      	blt.n	801290a <__sfputc_r+0x16>
 8012906:	290a      	cmp	r1, #10
 8012908:	d103      	bne.n	8012912 <__sfputc_r+0x1e>
 801290a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801290e:	f000 bc25 	b.w	801315c <__swbuf_r>
 8012912:	6813      	ldr	r3, [r2, #0]
 8012914:	1c58      	adds	r0, r3, #1
 8012916:	6010      	str	r0, [r2, #0]
 8012918:	7019      	strb	r1, [r3, #0]
 801291a:	4608      	mov	r0, r1
 801291c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012920:	4770      	bx	lr

08012922 <__sfputs_r>:
 8012922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012924:	4606      	mov	r6, r0
 8012926:	460f      	mov	r7, r1
 8012928:	4614      	mov	r4, r2
 801292a:	18d5      	adds	r5, r2, r3
 801292c:	42ac      	cmp	r4, r5
 801292e:	d101      	bne.n	8012934 <__sfputs_r+0x12>
 8012930:	2000      	movs	r0, #0
 8012932:	e007      	b.n	8012944 <__sfputs_r+0x22>
 8012934:	463a      	mov	r2, r7
 8012936:	f814 1b01 	ldrb.w	r1, [r4], #1
 801293a:	4630      	mov	r0, r6
 801293c:	f7ff ffda 	bl	80128f4 <__sfputc_r>
 8012940:	1c43      	adds	r3, r0, #1
 8012942:	d1f3      	bne.n	801292c <__sfputs_r+0xa>
 8012944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012948 <_vfiprintf_r>:
 8012948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294c:	460c      	mov	r4, r1
 801294e:	b09d      	sub	sp, #116	; 0x74
 8012950:	4617      	mov	r7, r2
 8012952:	461d      	mov	r5, r3
 8012954:	4606      	mov	r6, r0
 8012956:	b118      	cbz	r0, 8012960 <_vfiprintf_r+0x18>
 8012958:	6983      	ldr	r3, [r0, #24]
 801295a:	b90b      	cbnz	r3, 8012960 <_vfiprintf_r+0x18>
 801295c:	f000 fdb6 	bl	80134cc <__sinit>
 8012960:	4b7c      	ldr	r3, [pc, #496]	; (8012b54 <_vfiprintf_r+0x20c>)
 8012962:	429c      	cmp	r4, r3
 8012964:	d158      	bne.n	8012a18 <_vfiprintf_r+0xd0>
 8012966:	6874      	ldr	r4, [r6, #4]
 8012968:	89a3      	ldrh	r3, [r4, #12]
 801296a:	0718      	lsls	r0, r3, #28
 801296c:	d55e      	bpl.n	8012a2c <_vfiprintf_r+0xe4>
 801296e:	6923      	ldr	r3, [r4, #16]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d05b      	beq.n	8012a2c <_vfiprintf_r+0xe4>
 8012974:	2300      	movs	r3, #0
 8012976:	9309      	str	r3, [sp, #36]	; 0x24
 8012978:	2320      	movs	r3, #32
 801297a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801297e:	2330      	movs	r3, #48	; 0x30
 8012980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012984:	9503      	str	r5, [sp, #12]
 8012986:	f04f 0b01 	mov.w	fp, #1
 801298a:	46b8      	mov	r8, r7
 801298c:	4645      	mov	r5, r8
 801298e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012992:	b10b      	cbz	r3, 8012998 <_vfiprintf_r+0x50>
 8012994:	2b25      	cmp	r3, #37	; 0x25
 8012996:	d154      	bne.n	8012a42 <_vfiprintf_r+0xfa>
 8012998:	ebb8 0a07 	subs.w	sl, r8, r7
 801299c:	d00b      	beq.n	80129b6 <_vfiprintf_r+0x6e>
 801299e:	4653      	mov	r3, sl
 80129a0:	463a      	mov	r2, r7
 80129a2:	4621      	mov	r1, r4
 80129a4:	4630      	mov	r0, r6
 80129a6:	f7ff ffbc 	bl	8012922 <__sfputs_r>
 80129aa:	3001      	adds	r0, #1
 80129ac:	f000 80c2 	beq.w	8012b34 <_vfiprintf_r+0x1ec>
 80129b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b2:	4453      	add	r3, sl
 80129b4:	9309      	str	r3, [sp, #36]	; 0x24
 80129b6:	f898 3000 	ldrb.w	r3, [r8]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f000 80ba 	beq.w	8012b34 <_vfiprintf_r+0x1ec>
 80129c0:	2300      	movs	r3, #0
 80129c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129ca:	9304      	str	r3, [sp, #16]
 80129cc:	9307      	str	r3, [sp, #28]
 80129ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129d2:	931a      	str	r3, [sp, #104]	; 0x68
 80129d4:	46a8      	mov	r8, r5
 80129d6:	2205      	movs	r2, #5
 80129d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80129dc:	485e      	ldr	r0, [pc, #376]	; (8012b58 <_vfiprintf_r+0x210>)
 80129de:	f7ed fc0f 	bl	8000200 <memchr>
 80129e2:	9b04      	ldr	r3, [sp, #16]
 80129e4:	bb78      	cbnz	r0, 8012a46 <_vfiprintf_r+0xfe>
 80129e6:	06d9      	lsls	r1, r3, #27
 80129e8:	bf44      	itt	mi
 80129ea:	2220      	movmi	r2, #32
 80129ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80129f0:	071a      	lsls	r2, r3, #28
 80129f2:	bf44      	itt	mi
 80129f4:	222b      	movmi	r2, #43	; 0x2b
 80129f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80129fa:	782a      	ldrb	r2, [r5, #0]
 80129fc:	2a2a      	cmp	r2, #42	; 0x2a
 80129fe:	d02a      	beq.n	8012a56 <_vfiprintf_r+0x10e>
 8012a00:	9a07      	ldr	r2, [sp, #28]
 8012a02:	46a8      	mov	r8, r5
 8012a04:	2000      	movs	r0, #0
 8012a06:	250a      	movs	r5, #10
 8012a08:	4641      	mov	r1, r8
 8012a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a0e:	3b30      	subs	r3, #48	; 0x30
 8012a10:	2b09      	cmp	r3, #9
 8012a12:	d969      	bls.n	8012ae8 <_vfiprintf_r+0x1a0>
 8012a14:	b360      	cbz	r0, 8012a70 <_vfiprintf_r+0x128>
 8012a16:	e024      	b.n	8012a62 <_vfiprintf_r+0x11a>
 8012a18:	4b50      	ldr	r3, [pc, #320]	; (8012b5c <_vfiprintf_r+0x214>)
 8012a1a:	429c      	cmp	r4, r3
 8012a1c:	d101      	bne.n	8012a22 <_vfiprintf_r+0xda>
 8012a1e:	68b4      	ldr	r4, [r6, #8]
 8012a20:	e7a2      	b.n	8012968 <_vfiprintf_r+0x20>
 8012a22:	4b4f      	ldr	r3, [pc, #316]	; (8012b60 <_vfiprintf_r+0x218>)
 8012a24:	429c      	cmp	r4, r3
 8012a26:	bf08      	it	eq
 8012a28:	68f4      	ldreq	r4, [r6, #12]
 8012a2a:	e79d      	b.n	8012968 <_vfiprintf_r+0x20>
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f000 fbe6 	bl	8013200 <__swsetup_r>
 8012a34:	2800      	cmp	r0, #0
 8012a36:	d09d      	beq.n	8012974 <_vfiprintf_r+0x2c>
 8012a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a3c:	b01d      	add	sp, #116	; 0x74
 8012a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a42:	46a8      	mov	r8, r5
 8012a44:	e7a2      	b.n	801298c <_vfiprintf_r+0x44>
 8012a46:	4a44      	ldr	r2, [pc, #272]	; (8012b58 <_vfiprintf_r+0x210>)
 8012a48:	1a80      	subs	r0, r0, r2
 8012a4a:	fa0b f000 	lsl.w	r0, fp, r0
 8012a4e:	4318      	orrs	r0, r3
 8012a50:	9004      	str	r0, [sp, #16]
 8012a52:	4645      	mov	r5, r8
 8012a54:	e7be      	b.n	80129d4 <_vfiprintf_r+0x8c>
 8012a56:	9a03      	ldr	r2, [sp, #12]
 8012a58:	1d11      	adds	r1, r2, #4
 8012a5a:	6812      	ldr	r2, [r2, #0]
 8012a5c:	9103      	str	r1, [sp, #12]
 8012a5e:	2a00      	cmp	r2, #0
 8012a60:	db01      	blt.n	8012a66 <_vfiprintf_r+0x11e>
 8012a62:	9207      	str	r2, [sp, #28]
 8012a64:	e004      	b.n	8012a70 <_vfiprintf_r+0x128>
 8012a66:	4252      	negs	r2, r2
 8012a68:	f043 0302 	orr.w	r3, r3, #2
 8012a6c:	9207      	str	r2, [sp, #28]
 8012a6e:	9304      	str	r3, [sp, #16]
 8012a70:	f898 3000 	ldrb.w	r3, [r8]
 8012a74:	2b2e      	cmp	r3, #46	; 0x2e
 8012a76:	d10e      	bne.n	8012a96 <_vfiprintf_r+0x14e>
 8012a78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8012a7e:	d138      	bne.n	8012af2 <_vfiprintf_r+0x1aa>
 8012a80:	9b03      	ldr	r3, [sp, #12]
 8012a82:	1d1a      	adds	r2, r3, #4
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	9203      	str	r2, [sp, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	bfb8      	it	lt
 8012a8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012a90:	f108 0802 	add.w	r8, r8, #2
 8012a94:	9305      	str	r3, [sp, #20]
 8012a96:	4d33      	ldr	r5, [pc, #204]	; (8012b64 <_vfiprintf_r+0x21c>)
 8012a98:	f898 1000 	ldrb.w	r1, [r8]
 8012a9c:	2203      	movs	r2, #3
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	f7ed fbae 	bl	8000200 <memchr>
 8012aa4:	b140      	cbz	r0, 8012ab8 <_vfiprintf_r+0x170>
 8012aa6:	2340      	movs	r3, #64	; 0x40
 8012aa8:	1b40      	subs	r0, r0, r5
 8012aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8012aae:	9b04      	ldr	r3, [sp, #16]
 8012ab0:	4303      	orrs	r3, r0
 8012ab2:	f108 0801 	add.w	r8, r8, #1
 8012ab6:	9304      	str	r3, [sp, #16]
 8012ab8:	f898 1000 	ldrb.w	r1, [r8]
 8012abc:	482a      	ldr	r0, [pc, #168]	; (8012b68 <_vfiprintf_r+0x220>)
 8012abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ac2:	2206      	movs	r2, #6
 8012ac4:	f108 0701 	add.w	r7, r8, #1
 8012ac8:	f7ed fb9a 	bl	8000200 <memchr>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	d037      	beq.n	8012b40 <_vfiprintf_r+0x1f8>
 8012ad0:	4b26      	ldr	r3, [pc, #152]	; (8012b6c <_vfiprintf_r+0x224>)
 8012ad2:	bb1b      	cbnz	r3, 8012b1c <_vfiprintf_r+0x1d4>
 8012ad4:	9b03      	ldr	r3, [sp, #12]
 8012ad6:	3307      	adds	r3, #7
 8012ad8:	f023 0307 	bic.w	r3, r3, #7
 8012adc:	3308      	adds	r3, #8
 8012ade:	9303      	str	r3, [sp, #12]
 8012ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ae2:	444b      	add	r3, r9
 8012ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ae6:	e750      	b.n	801298a <_vfiprintf_r+0x42>
 8012ae8:	fb05 3202 	mla	r2, r5, r2, r3
 8012aec:	2001      	movs	r0, #1
 8012aee:	4688      	mov	r8, r1
 8012af0:	e78a      	b.n	8012a08 <_vfiprintf_r+0xc0>
 8012af2:	2300      	movs	r3, #0
 8012af4:	f108 0801 	add.w	r8, r8, #1
 8012af8:	9305      	str	r3, [sp, #20]
 8012afa:	4619      	mov	r1, r3
 8012afc:	250a      	movs	r5, #10
 8012afe:	4640      	mov	r0, r8
 8012b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b04:	3a30      	subs	r2, #48	; 0x30
 8012b06:	2a09      	cmp	r2, #9
 8012b08:	d903      	bls.n	8012b12 <_vfiprintf_r+0x1ca>
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d0c3      	beq.n	8012a96 <_vfiprintf_r+0x14e>
 8012b0e:	9105      	str	r1, [sp, #20]
 8012b10:	e7c1      	b.n	8012a96 <_vfiprintf_r+0x14e>
 8012b12:	fb05 2101 	mla	r1, r5, r1, r2
 8012b16:	2301      	movs	r3, #1
 8012b18:	4680      	mov	r8, r0
 8012b1a:	e7f0      	b.n	8012afe <_vfiprintf_r+0x1b6>
 8012b1c:	ab03      	add	r3, sp, #12
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	4622      	mov	r2, r4
 8012b22:	4b13      	ldr	r3, [pc, #76]	; (8012b70 <_vfiprintf_r+0x228>)
 8012b24:	a904      	add	r1, sp, #16
 8012b26:	4630      	mov	r0, r6
 8012b28:	f3af 8000 	nop.w
 8012b2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012b30:	4681      	mov	r9, r0
 8012b32:	d1d5      	bne.n	8012ae0 <_vfiprintf_r+0x198>
 8012b34:	89a3      	ldrh	r3, [r4, #12]
 8012b36:	065b      	lsls	r3, r3, #25
 8012b38:	f53f af7e 	bmi.w	8012a38 <_vfiprintf_r+0xf0>
 8012b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b3e:	e77d      	b.n	8012a3c <_vfiprintf_r+0xf4>
 8012b40:	ab03      	add	r3, sp, #12
 8012b42:	9300      	str	r3, [sp, #0]
 8012b44:	4622      	mov	r2, r4
 8012b46:	4b0a      	ldr	r3, [pc, #40]	; (8012b70 <_vfiprintf_r+0x228>)
 8012b48:	a904      	add	r1, sp, #16
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	f000 f888 	bl	8012c60 <_printf_i>
 8012b50:	e7ec      	b.n	8012b2c <_vfiprintf_r+0x1e4>
 8012b52:	bf00      	nop
 8012b54:	0801406c 	.word	0x0801406c
 8012b58:	08014018 	.word	0x08014018
 8012b5c:	0801408c 	.word	0x0801408c
 8012b60:	0801404c 	.word	0x0801404c
 8012b64:	0801401e 	.word	0x0801401e
 8012b68:	08014022 	.word	0x08014022
 8012b6c:	00000000 	.word	0x00000000
 8012b70:	08012923 	.word	0x08012923

08012b74 <_printf_common>:
 8012b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b78:	4691      	mov	r9, r2
 8012b7a:	461f      	mov	r7, r3
 8012b7c:	688a      	ldr	r2, [r1, #8]
 8012b7e:	690b      	ldr	r3, [r1, #16]
 8012b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b84:	4293      	cmp	r3, r2
 8012b86:	bfb8      	it	lt
 8012b88:	4613      	movlt	r3, r2
 8012b8a:	f8c9 3000 	str.w	r3, [r9]
 8012b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b92:	4606      	mov	r6, r0
 8012b94:	460c      	mov	r4, r1
 8012b96:	b112      	cbz	r2, 8012b9e <_printf_common+0x2a>
 8012b98:	3301      	adds	r3, #1
 8012b9a:	f8c9 3000 	str.w	r3, [r9]
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	0699      	lsls	r1, r3, #26
 8012ba2:	bf42      	ittt	mi
 8012ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012ba8:	3302      	addmi	r3, #2
 8012baa:	f8c9 3000 	strmi.w	r3, [r9]
 8012bae:	6825      	ldr	r5, [r4, #0]
 8012bb0:	f015 0506 	ands.w	r5, r5, #6
 8012bb4:	d107      	bne.n	8012bc6 <_printf_common+0x52>
 8012bb6:	f104 0a19 	add.w	sl, r4, #25
 8012bba:	68e3      	ldr	r3, [r4, #12]
 8012bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8012bc0:	1a9b      	subs	r3, r3, r2
 8012bc2:	42ab      	cmp	r3, r5
 8012bc4:	dc28      	bgt.n	8012c18 <_printf_common+0xa4>
 8012bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012bca:	6822      	ldr	r2, [r4, #0]
 8012bcc:	3300      	adds	r3, #0
 8012bce:	bf18      	it	ne
 8012bd0:	2301      	movne	r3, #1
 8012bd2:	0692      	lsls	r2, r2, #26
 8012bd4:	d42d      	bmi.n	8012c32 <_printf_common+0xbe>
 8012bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bda:	4639      	mov	r1, r7
 8012bdc:	4630      	mov	r0, r6
 8012bde:	47c0      	blx	r8
 8012be0:	3001      	adds	r0, #1
 8012be2:	d020      	beq.n	8012c26 <_printf_common+0xb2>
 8012be4:	6823      	ldr	r3, [r4, #0]
 8012be6:	68e5      	ldr	r5, [r4, #12]
 8012be8:	f8d9 2000 	ldr.w	r2, [r9]
 8012bec:	f003 0306 	and.w	r3, r3, #6
 8012bf0:	2b04      	cmp	r3, #4
 8012bf2:	bf08      	it	eq
 8012bf4:	1aad      	subeq	r5, r5, r2
 8012bf6:	68a3      	ldr	r3, [r4, #8]
 8012bf8:	6922      	ldr	r2, [r4, #16]
 8012bfa:	bf0c      	ite	eq
 8012bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c00:	2500      	movne	r5, #0
 8012c02:	4293      	cmp	r3, r2
 8012c04:	bfc4      	itt	gt
 8012c06:	1a9b      	subgt	r3, r3, r2
 8012c08:	18ed      	addgt	r5, r5, r3
 8012c0a:	f04f 0900 	mov.w	r9, #0
 8012c0e:	341a      	adds	r4, #26
 8012c10:	454d      	cmp	r5, r9
 8012c12:	d11a      	bne.n	8012c4a <_printf_common+0xd6>
 8012c14:	2000      	movs	r0, #0
 8012c16:	e008      	b.n	8012c2a <_printf_common+0xb6>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	4652      	mov	r2, sl
 8012c1c:	4639      	mov	r1, r7
 8012c1e:	4630      	mov	r0, r6
 8012c20:	47c0      	blx	r8
 8012c22:	3001      	adds	r0, #1
 8012c24:	d103      	bne.n	8012c2e <_printf_common+0xba>
 8012c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2e:	3501      	adds	r5, #1
 8012c30:	e7c3      	b.n	8012bba <_printf_common+0x46>
 8012c32:	18e1      	adds	r1, r4, r3
 8012c34:	1c5a      	adds	r2, r3, #1
 8012c36:	2030      	movs	r0, #48	; 0x30
 8012c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c3c:	4422      	add	r2, r4
 8012c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c46:	3302      	adds	r3, #2
 8012c48:	e7c5      	b.n	8012bd6 <_printf_common+0x62>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	4622      	mov	r2, r4
 8012c4e:	4639      	mov	r1, r7
 8012c50:	4630      	mov	r0, r6
 8012c52:	47c0      	blx	r8
 8012c54:	3001      	adds	r0, #1
 8012c56:	d0e6      	beq.n	8012c26 <_printf_common+0xb2>
 8012c58:	f109 0901 	add.w	r9, r9, #1
 8012c5c:	e7d8      	b.n	8012c10 <_printf_common+0x9c>
	...

08012c60 <_printf_i>:
 8012c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012c68:	460c      	mov	r4, r1
 8012c6a:	7e09      	ldrb	r1, [r1, #24]
 8012c6c:	b085      	sub	sp, #20
 8012c6e:	296e      	cmp	r1, #110	; 0x6e
 8012c70:	4617      	mov	r7, r2
 8012c72:	4606      	mov	r6, r0
 8012c74:	4698      	mov	r8, r3
 8012c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c78:	f000 80b3 	beq.w	8012de2 <_printf_i+0x182>
 8012c7c:	d822      	bhi.n	8012cc4 <_printf_i+0x64>
 8012c7e:	2963      	cmp	r1, #99	; 0x63
 8012c80:	d036      	beq.n	8012cf0 <_printf_i+0x90>
 8012c82:	d80a      	bhi.n	8012c9a <_printf_i+0x3a>
 8012c84:	2900      	cmp	r1, #0
 8012c86:	f000 80b9 	beq.w	8012dfc <_printf_i+0x19c>
 8012c8a:	2958      	cmp	r1, #88	; 0x58
 8012c8c:	f000 8083 	beq.w	8012d96 <_printf_i+0x136>
 8012c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012c98:	e032      	b.n	8012d00 <_printf_i+0xa0>
 8012c9a:	2964      	cmp	r1, #100	; 0x64
 8012c9c:	d001      	beq.n	8012ca2 <_printf_i+0x42>
 8012c9e:	2969      	cmp	r1, #105	; 0x69
 8012ca0:	d1f6      	bne.n	8012c90 <_printf_i+0x30>
 8012ca2:	6820      	ldr	r0, [r4, #0]
 8012ca4:	6813      	ldr	r3, [r2, #0]
 8012ca6:	0605      	lsls	r5, r0, #24
 8012ca8:	f103 0104 	add.w	r1, r3, #4
 8012cac:	d52a      	bpl.n	8012d04 <_printf_i+0xa4>
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	6011      	str	r1, [r2, #0]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	da03      	bge.n	8012cbe <_printf_i+0x5e>
 8012cb6:	222d      	movs	r2, #45	; 0x2d
 8012cb8:	425b      	negs	r3, r3
 8012cba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012cbe:	486f      	ldr	r0, [pc, #444]	; (8012e7c <_printf_i+0x21c>)
 8012cc0:	220a      	movs	r2, #10
 8012cc2:	e039      	b.n	8012d38 <_printf_i+0xd8>
 8012cc4:	2973      	cmp	r1, #115	; 0x73
 8012cc6:	f000 809d 	beq.w	8012e04 <_printf_i+0x1a4>
 8012cca:	d808      	bhi.n	8012cde <_printf_i+0x7e>
 8012ccc:	296f      	cmp	r1, #111	; 0x6f
 8012cce:	d020      	beq.n	8012d12 <_printf_i+0xb2>
 8012cd0:	2970      	cmp	r1, #112	; 0x70
 8012cd2:	d1dd      	bne.n	8012c90 <_printf_i+0x30>
 8012cd4:	6823      	ldr	r3, [r4, #0]
 8012cd6:	f043 0320 	orr.w	r3, r3, #32
 8012cda:	6023      	str	r3, [r4, #0]
 8012cdc:	e003      	b.n	8012ce6 <_printf_i+0x86>
 8012cde:	2975      	cmp	r1, #117	; 0x75
 8012ce0:	d017      	beq.n	8012d12 <_printf_i+0xb2>
 8012ce2:	2978      	cmp	r1, #120	; 0x78
 8012ce4:	d1d4      	bne.n	8012c90 <_printf_i+0x30>
 8012ce6:	2378      	movs	r3, #120	; 0x78
 8012ce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012cec:	4864      	ldr	r0, [pc, #400]	; (8012e80 <_printf_i+0x220>)
 8012cee:	e055      	b.n	8012d9c <_printf_i+0x13c>
 8012cf0:	6813      	ldr	r3, [r2, #0]
 8012cf2:	1d19      	adds	r1, r3, #4
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	6011      	str	r1, [r2, #0]
 8012cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d00:	2301      	movs	r3, #1
 8012d02:	e08c      	b.n	8012e1e <_printf_i+0x1be>
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	6011      	str	r1, [r2, #0]
 8012d08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012d0c:	bf18      	it	ne
 8012d0e:	b21b      	sxthne	r3, r3
 8012d10:	e7cf      	b.n	8012cb2 <_printf_i+0x52>
 8012d12:	6813      	ldr	r3, [r2, #0]
 8012d14:	6825      	ldr	r5, [r4, #0]
 8012d16:	1d18      	adds	r0, r3, #4
 8012d18:	6010      	str	r0, [r2, #0]
 8012d1a:	0628      	lsls	r0, r5, #24
 8012d1c:	d501      	bpl.n	8012d22 <_printf_i+0xc2>
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	e002      	b.n	8012d28 <_printf_i+0xc8>
 8012d22:	0668      	lsls	r0, r5, #25
 8012d24:	d5fb      	bpl.n	8012d1e <_printf_i+0xbe>
 8012d26:	881b      	ldrh	r3, [r3, #0]
 8012d28:	4854      	ldr	r0, [pc, #336]	; (8012e7c <_printf_i+0x21c>)
 8012d2a:	296f      	cmp	r1, #111	; 0x6f
 8012d2c:	bf14      	ite	ne
 8012d2e:	220a      	movne	r2, #10
 8012d30:	2208      	moveq	r2, #8
 8012d32:	2100      	movs	r1, #0
 8012d34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d38:	6865      	ldr	r5, [r4, #4]
 8012d3a:	60a5      	str	r5, [r4, #8]
 8012d3c:	2d00      	cmp	r5, #0
 8012d3e:	f2c0 8095 	blt.w	8012e6c <_printf_i+0x20c>
 8012d42:	6821      	ldr	r1, [r4, #0]
 8012d44:	f021 0104 	bic.w	r1, r1, #4
 8012d48:	6021      	str	r1, [r4, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d13d      	bne.n	8012dca <_printf_i+0x16a>
 8012d4e:	2d00      	cmp	r5, #0
 8012d50:	f040 808e 	bne.w	8012e70 <_printf_i+0x210>
 8012d54:	4665      	mov	r5, ip
 8012d56:	2a08      	cmp	r2, #8
 8012d58:	d10b      	bne.n	8012d72 <_printf_i+0x112>
 8012d5a:	6823      	ldr	r3, [r4, #0]
 8012d5c:	07db      	lsls	r3, r3, #31
 8012d5e:	d508      	bpl.n	8012d72 <_printf_i+0x112>
 8012d60:	6923      	ldr	r3, [r4, #16]
 8012d62:	6862      	ldr	r2, [r4, #4]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	bfde      	ittt	le
 8012d68:	2330      	movle	r3, #48	; 0x30
 8012d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d6e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012d72:	ebac 0305 	sub.w	r3, ip, r5
 8012d76:	6123      	str	r3, [r4, #16]
 8012d78:	f8cd 8000 	str.w	r8, [sp]
 8012d7c:	463b      	mov	r3, r7
 8012d7e:	aa03      	add	r2, sp, #12
 8012d80:	4621      	mov	r1, r4
 8012d82:	4630      	mov	r0, r6
 8012d84:	f7ff fef6 	bl	8012b74 <_printf_common>
 8012d88:	3001      	adds	r0, #1
 8012d8a:	d14d      	bne.n	8012e28 <_printf_i+0x1c8>
 8012d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d90:	b005      	add	sp, #20
 8012d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d96:	4839      	ldr	r0, [pc, #228]	; (8012e7c <_printf_i+0x21c>)
 8012d98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012d9c:	6813      	ldr	r3, [r2, #0]
 8012d9e:	6821      	ldr	r1, [r4, #0]
 8012da0:	1d1d      	adds	r5, r3, #4
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	6015      	str	r5, [r2, #0]
 8012da6:	060a      	lsls	r2, r1, #24
 8012da8:	d50b      	bpl.n	8012dc2 <_printf_i+0x162>
 8012daa:	07ca      	lsls	r2, r1, #31
 8012dac:	bf44      	itt	mi
 8012dae:	f041 0120 	orrmi.w	r1, r1, #32
 8012db2:	6021      	strmi	r1, [r4, #0]
 8012db4:	b91b      	cbnz	r3, 8012dbe <_printf_i+0x15e>
 8012db6:	6822      	ldr	r2, [r4, #0]
 8012db8:	f022 0220 	bic.w	r2, r2, #32
 8012dbc:	6022      	str	r2, [r4, #0]
 8012dbe:	2210      	movs	r2, #16
 8012dc0:	e7b7      	b.n	8012d32 <_printf_i+0xd2>
 8012dc2:	064d      	lsls	r5, r1, #25
 8012dc4:	bf48      	it	mi
 8012dc6:	b29b      	uxthmi	r3, r3
 8012dc8:	e7ef      	b.n	8012daa <_printf_i+0x14a>
 8012dca:	4665      	mov	r5, ip
 8012dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8012dd4:	5cc3      	ldrb	r3, [r0, r3]
 8012dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012dda:	460b      	mov	r3, r1
 8012ddc:	2900      	cmp	r1, #0
 8012dde:	d1f5      	bne.n	8012dcc <_printf_i+0x16c>
 8012de0:	e7b9      	b.n	8012d56 <_printf_i+0xf6>
 8012de2:	6813      	ldr	r3, [r2, #0]
 8012de4:	6825      	ldr	r5, [r4, #0]
 8012de6:	6961      	ldr	r1, [r4, #20]
 8012de8:	1d18      	adds	r0, r3, #4
 8012dea:	6010      	str	r0, [r2, #0]
 8012dec:	0628      	lsls	r0, r5, #24
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	d501      	bpl.n	8012df6 <_printf_i+0x196>
 8012df2:	6019      	str	r1, [r3, #0]
 8012df4:	e002      	b.n	8012dfc <_printf_i+0x19c>
 8012df6:	066a      	lsls	r2, r5, #25
 8012df8:	d5fb      	bpl.n	8012df2 <_printf_i+0x192>
 8012dfa:	8019      	strh	r1, [r3, #0]
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	6123      	str	r3, [r4, #16]
 8012e00:	4665      	mov	r5, ip
 8012e02:	e7b9      	b.n	8012d78 <_printf_i+0x118>
 8012e04:	6813      	ldr	r3, [r2, #0]
 8012e06:	1d19      	adds	r1, r3, #4
 8012e08:	6011      	str	r1, [r2, #0]
 8012e0a:	681d      	ldr	r5, [r3, #0]
 8012e0c:	6862      	ldr	r2, [r4, #4]
 8012e0e:	2100      	movs	r1, #0
 8012e10:	4628      	mov	r0, r5
 8012e12:	f7ed f9f5 	bl	8000200 <memchr>
 8012e16:	b108      	cbz	r0, 8012e1c <_printf_i+0x1bc>
 8012e18:	1b40      	subs	r0, r0, r5
 8012e1a:	6060      	str	r0, [r4, #4]
 8012e1c:	6863      	ldr	r3, [r4, #4]
 8012e1e:	6123      	str	r3, [r4, #16]
 8012e20:	2300      	movs	r3, #0
 8012e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e26:	e7a7      	b.n	8012d78 <_printf_i+0x118>
 8012e28:	6923      	ldr	r3, [r4, #16]
 8012e2a:	462a      	mov	r2, r5
 8012e2c:	4639      	mov	r1, r7
 8012e2e:	4630      	mov	r0, r6
 8012e30:	47c0      	blx	r8
 8012e32:	3001      	adds	r0, #1
 8012e34:	d0aa      	beq.n	8012d8c <_printf_i+0x12c>
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	079b      	lsls	r3, r3, #30
 8012e3a:	d413      	bmi.n	8012e64 <_printf_i+0x204>
 8012e3c:	68e0      	ldr	r0, [r4, #12]
 8012e3e:	9b03      	ldr	r3, [sp, #12]
 8012e40:	4298      	cmp	r0, r3
 8012e42:	bfb8      	it	lt
 8012e44:	4618      	movlt	r0, r3
 8012e46:	e7a3      	b.n	8012d90 <_printf_i+0x130>
 8012e48:	2301      	movs	r3, #1
 8012e4a:	464a      	mov	r2, r9
 8012e4c:	4639      	mov	r1, r7
 8012e4e:	4630      	mov	r0, r6
 8012e50:	47c0      	blx	r8
 8012e52:	3001      	adds	r0, #1
 8012e54:	d09a      	beq.n	8012d8c <_printf_i+0x12c>
 8012e56:	3501      	adds	r5, #1
 8012e58:	68e3      	ldr	r3, [r4, #12]
 8012e5a:	9a03      	ldr	r2, [sp, #12]
 8012e5c:	1a9b      	subs	r3, r3, r2
 8012e5e:	42ab      	cmp	r3, r5
 8012e60:	dcf2      	bgt.n	8012e48 <_printf_i+0x1e8>
 8012e62:	e7eb      	b.n	8012e3c <_printf_i+0x1dc>
 8012e64:	2500      	movs	r5, #0
 8012e66:	f104 0919 	add.w	r9, r4, #25
 8012e6a:	e7f5      	b.n	8012e58 <_printf_i+0x1f8>
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d1ac      	bne.n	8012dca <_printf_i+0x16a>
 8012e70:	7803      	ldrb	r3, [r0, #0]
 8012e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e7a:	e76c      	b.n	8012d56 <_printf_i+0xf6>
 8012e7c:	08014029 	.word	0x08014029
 8012e80:	0801403a 	.word	0x0801403a

08012e84 <iprintf>:
 8012e84:	b40f      	push	{r0, r1, r2, r3}
 8012e86:	4b0a      	ldr	r3, [pc, #40]	; (8012eb0 <iprintf+0x2c>)
 8012e88:	b513      	push	{r0, r1, r4, lr}
 8012e8a:	681c      	ldr	r4, [r3, #0]
 8012e8c:	b124      	cbz	r4, 8012e98 <iprintf+0x14>
 8012e8e:	69a3      	ldr	r3, [r4, #24]
 8012e90:	b913      	cbnz	r3, 8012e98 <iprintf+0x14>
 8012e92:	4620      	mov	r0, r4
 8012e94:	f000 fb1a 	bl	80134cc <__sinit>
 8012e98:	ab05      	add	r3, sp, #20
 8012e9a:	9a04      	ldr	r2, [sp, #16]
 8012e9c:	68a1      	ldr	r1, [r4, #8]
 8012e9e:	9301      	str	r3, [sp, #4]
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f7ff fd51 	bl	8012948 <_vfiprintf_r>
 8012ea6:	b002      	add	sp, #8
 8012ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eac:	b004      	add	sp, #16
 8012eae:	4770      	bx	lr
 8012eb0:	200001d0 	.word	0x200001d0

08012eb4 <_puts_r>:
 8012eb4:	b570      	push	{r4, r5, r6, lr}
 8012eb6:	460e      	mov	r6, r1
 8012eb8:	4605      	mov	r5, r0
 8012eba:	b118      	cbz	r0, 8012ec4 <_puts_r+0x10>
 8012ebc:	6983      	ldr	r3, [r0, #24]
 8012ebe:	b90b      	cbnz	r3, 8012ec4 <_puts_r+0x10>
 8012ec0:	f000 fb04 	bl	80134cc <__sinit>
 8012ec4:	69ab      	ldr	r3, [r5, #24]
 8012ec6:	68ac      	ldr	r4, [r5, #8]
 8012ec8:	b913      	cbnz	r3, 8012ed0 <_puts_r+0x1c>
 8012eca:	4628      	mov	r0, r5
 8012ecc:	f000 fafe 	bl	80134cc <__sinit>
 8012ed0:	4b23      	ldr	r3, [pc, #140]	; (8012f60 <_puts_r+0xac>)
 8012ed2:	429c      	cmp	r4, r3
 8012ed4:	d117      	bne.n	8012f06 <_puts_r+0x52>
 8012ed6:	686c      	ldr	r4, [r5, #4]
 8012ed8:	89a3      	ldrh	r3, [r4, #12]
 8012eda:	071b      	lsls	r3, r3, #28
 8012edc:	d51d      	bpl.n	8012f1a <_puts_r+0x66>
 8012ede:	6923      	ldr	r3, [r4, #16]
 8012ee0:	b1db      	cbz	r3, 8012f1a <_puts_r+0x66>
 8012ee2:	3e01      	subs	r6, #1
 8012ee4:	68a3      	ldr	r3, [r4, #8]
 8012ee6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012eea:	3b01      	subs	r3, #1
 8012eec:	60a3      	str	r3, [r4, #8]
 8012eee:	b9e9      	cbnz	r1, 8012f2c <_puts_r+0x78>
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	da2e      	bge.n	8012f52 <_puts_r+0x9e>
 8012ef4:	4622      	mov	r2, r4
 8012ef6:	210a      	movs	r1, #10
 8012ef8:	4628      	mov	r0, r5
 8012efa:	f000 f92f 	bl	801315c <__swbuf_r>
 8012efe:	3001      	adds	r0, #1
 8012f00:	d011      	beq.n	8012f26 <_puts_r+0x72>
 8012f02:	200a      	movs	r0, #10
 8012f04:	e011      	b.n	8012f2a <_puts_r+0x76>
 8012f06:	4b17      	ldr	r3, [pc, #92]	; (8012f64 <_puts_r+0xb0>)
 8012f08:	429c      	cmp	r4, r3
 8012f0a:	d101      	bne.n	8012f10 <_puts_r+0x5c>
 8012f0c:	68ac      	ldr	r4, [r5, #8]
 8012f0e:	e7e3      	b.n	8012ed8 <_puts_r+0x24>
 8012f10:	4b15      	ldr	r3, [pc, #84]	; (8012f68 <_puts_r+0xb4>)
 8012f12:	429c      	cmp	r4, r3
 8012f14:	bf08      	it	eq
 8012f16:	68ec      	ldreq	r4, [r5, #12]
 8012f18:	e7de      	b.n	8012ed8 <_puts_r+0x24>
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f000 f96f 	bl	8013200 <__swsetup_r>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d0dd      	beq.n	8012ee2 <_puts_r+0x2e>
 8012f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	da04      	bge.n	8012f3a <_puts_r+0x86>
 8012f30:	69a2      	ldr	r2, [r4, #24]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	dc06      	bgt.n	8012f44 <_puts_r+0x90>
 8012f36:	290a      	cmp	r1, #10
 8012f38:	d004      	beq.n	8012f44 <_puts_r+0x90>
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	1c5a      	adds	r2, r3, #1
 8012f3e:	6022      	str	r2, [r4, #0]
 8012f40:	7019      	strb	r1, [r3, #0]
 8012f42:	e7cf      	b.n	8012ee4 <_puts_r+0x30>
 8012f44:	4622      	mov	r2, r4
 8012f46:	4628      	mov	r0, r5
 8012f48:	f000 f908 	bl	801315c <__swbuf_r>
 8012f4c:	3001      	adds	r0, #1
 8012f4e:	d1c9      	bne.n	8012ee4 <_puts_r+0x30>
 8012f50:	e7e9      	b.n	8012f26 <_puts_r+0x72>
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	200a      	movs	r0, #10
 8012f56:	1c5a      	adds	r2, r3, #1
 8012f58:	6022      	str	r2, [r4, #0]
 8012f5a:	7018      	strb	r0, [r3, #0]
 8012f5c:	e7e5      	b.n	8012f2a <_puts_r+0x76>
 8012f5e:	bf00      	nop
 8012f60:	0801406c 	.word	0x0801406c
 8012f64:	0801408c 	.word	0x0801408c
 8012f68:	0801404c 	.word	0x0801404c

08012f6c <puts>:
 8012f6c:	4b02      	ldr	r3, [pc, #8]	; (8012f78 <puts+0xc>)
 8012f6e:	4601      	mov	r1, r0
 8012f70:	6818      	ldr	r0, [r3, #0]
 8012f72:	f7ff bf9f 	b.w	8012eb4 <_puts_r>
 8012f76:	bf00      	nop
 8012f78:	200001d0 	.word	0x200001d0

08012f7c <_sbrk_r>:
 8012f7c:	b538      	push	{r3, r4, r5, lr}
 8012f7e:	4c06      	ldr	r4, [pc, #24]	; (8012f98 <_sbrk_r+0x1c>)
 8012f80:	2300      	movs	r3, #0
 8012f82:	4605      	mov	r5, r0
 8012f84:	4608      	mov	r0, r1
 8012f86:	6023      	str	r3, [r4, #0]
 8012f88:	f7f0 fc88 	bl	800389c <_sbrk>
 8012f8c:	1c43      	adds	r3, r0, #1
 8012f8e:	d102      	bne.n	8012f96 <_sbrk_r+0x1a>
 8012f90:	6823      	ldr	r3, [r4, #0]
 8012f92:	b103      	cbz	r3, 8012f96 <_sbrk_r+0x1a>
 8012f94:	602b      	str	r3, [r5, #0]
 8012f96:	bd38      	pop	{r3, r4, r5, pc}
 8012f98:	200104c8 	.word	0x200104c8

08012f9c <siprintf>:
 8012f9c:	b40e      	push	{r1, r2, r3}
 8012f9e:	b500      	push	{lr}
 8012fa0:	b09c      	sub	sp, #112	; 0x70
 8012fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8012fa4:	9002      	str	r0, [sp, #8]
 8012fa6:	9006      	str	r0, [sp, #24]
 8012fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012fac:	4809      	ldr	r0, [pc, #36]	; (8012fd4 <siprintf+0x38>)
 8012fae:	9107      	str	r1, [sp, #28]
 8012fb0:	9104      	str	r1, [sp, #16]
 8012fb2:	4909      	ldr	r1, [pc, #36]	; (8012fd8 <siprintf+0x3c>)
 8012fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fb8:	9105      	str	r1, [sp, #20]
 8012fba:	6800      	ldr	r0, [r0, #0]
 8012fbc:	9301      	str	r3, [sp, #4]
 8012fbe:	a902      	add	r1, sp, #8
 8012fc0:	f000 fc24 	bl	801380c <_svfiprintf_r>
 8012fc4:	9b02      	ldr	r3, [sp, #8]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	701a      	strb	r2, [r3, #0]
 8012fca:	b01c      	add	sp, #112	; 0x70
 8012fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fd0:	b003      	add	sp, #12
 8012fd2:	4770      	bx	lr
 8012fd4:	200001d0 	.word	0x200001d0
 8012fd8:	ffff0208 	.word	0xffff0208

08012fdc <strncpy>:
 8012fdc:	b570      	push	{r4, r5, r6, lr}
 8012fde:	3901      	subs	r1, #1
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	b902      	cbnz	r2, 8012fe6 <strncpy+0xa>
 8012fe4:	bd70      	pop	{r4, r5, r6, pc}
 8012fe6:	4623      	mov	r3, r4
 8012fe8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8012fec:	f803 5b01 	strb.w	r5, [r3], #1
 8012ff0:	1e56      	subs	r6, r2, #1
 8012ff2:	b92d      	cbnz	r5, 8013000 <strncpy+0x24>
 8012ff4:	4414      	add	r4, r2
 8012ff6:	42a3      	cmp	r3, r4
 8012ff8:	d0f4      	beq.n	8012fe4 <strncpy+0x8>
 8012ffa:	f803 5b01 	strb.w	r5, [r3], #1
 8012ffe:	e7fa      	b.n	8012ff6 <strncpy+0x1a>
 8013000:	461c      	mov	r4, r3
 8013002:	4632      	mov	r2, r6
 8013004:	e7ed      	b.n	8012fe2 <strncpy+0x6>

08013006 <strstr>:
 8013006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013008:	7803      	ldrb	r3, [r0, #0]
 801300a:	b17b      	cbz	r3, 801302c <strstr+0x26>
 801300c:	4604      	mov	r4, r0
 801300e:	7823      	ldrb	r3, [r4, #0]
 8013010:	4620      	mov	r0, r4
 8013012:	1c66      	adds	r6, r4, #1
 8013014:	b17b      	cbz	r3, 8013036 <strstr+0x30>
 8013016:	1e4a      	subs	r2, r1, #1
 8013018:	1e63      	subs	r3, r4, #1
 801301a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801301e:	b14d      	cbz	r5, 8013034 <strstr+0x2e>
 8013020:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8013024:	42af      	cmp	r7, r5
 8013026:	4634      	mov	r4, r6
 8013028:	d0f7      	beq.n	801301a <strstr+0x14>
 801302a:	e7f0      	b.n	801300e <strstr+0x8>
 801302c:	780b      	ldrb	r3, [r1, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	bf18      	it	ne
 8013032:	2000      	movne	r0, #0
 8013034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013036:	4618      	mov	r0, r3
 8013038:	e7fc      	b.n	8013034 <strstr+0x2e>

0801303a <_strtol_l.isra.0>:
 801303a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801303e:	4680      	mov	r8, r0
 8013040:	4689      	mov	r9, r1
 8013042:	4692      	mov	sl, r2
 8013044:	461e      	mov	r6, r3
 8013046:	460f      	mov	r7, r1
 8013048:	463d      	mov	r5, r7
 801304a:	9808      	ldr	r0, [sp, #32]
 801304c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013050:	f000 fac6 	bl	80135e0 <__locale_ctype_ptr_l>
 8013054:	4420      	add	r0, r4
 8013056:	7843      	ldrb	r3, [r0, #1]
 8013058:	f013 0308 	ands.w	r3, r3, #8
 801305c:	d132      	bne.n	80130c4 <_strtol_l.isra.0+0x8a>
 801305e:	2c2d      	cmp	r4, #45	; 0x2d
 8013060:	d132      	bne.n	80130c8 <_strtol_l.isra.0+0x8e>
 8013062:	787c      	ldrb	r4, [r7, #1]
 8013064:	1cbd      	adds	r5, r7, #2
 8013066:	2201      	movs	r2, #1
 8013068:	2e00      	cmp	r6, #0
 801306a:	d05d      	beq.n	8013128 <_strtol_l.isra.0+0xee>
 801306c:	2e10      	cmp	r6, #16
 801306e:	d109      	bne.n	8013084 <_strtol_l.isra.0+0x4a>
 8013070:	2c30      	cmp	r4, #48	; 0x30
 8013072:	d107      	bne.n	8013084 <_strtol_l.isra.0+0x4a>
 8013074:	782b      	ldrb	r3, [r5, #0]
 8013076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801307a:	2b58      	cmp	r3, #88	; 0x58
 801307c:	d14f      	bne.n	801311e <_strtol_l.isra.0+0xe4>
 801307e:	786c      	ldrb	r4, [r5, #1]
 8013080:	2610      	movs	r6, #16
 8013082:	3502      	adds	r5, #2
 8013084:	2a00      	cmp	r2, #0
 8013086:	bf14      	ite	ne
 8013088:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801308c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013090:	2700      	movs	r7, #0
 8013092:	fbb1 fcf6 	udiv	ip, r1, r6
 8013096:	4638      	mov	r0, r7
 8013098:	fb06 1e1c 	mls	lr, r6, ip, r1
 801309c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80130a0:	2b09      	cmp	r3, #9
 80130a2:	d817      	bhi.n	80130d4 <_strtol_l.isra.0+0x9a>
 80130a4:	461c      	mov	r4, r3
 80130a6:	42a6      	cmp	r6, r4
 80130a8:	dd23      	ble.n	80130f2 <_strtol_l.isra.0+0xb8>
 80130aa:	1c7b      	adds	r3, r7, #1
 80130ac:	d007      	beq.n	80130be <_strtol_l.isra.0+0x84>
 80130ae:	4584      	cmp	ip, r0
 80130b0:	d31c      	bcc.n	80130ec <_strtol_l.isra.0+0xb2>
 80130b2:	d101      	bne.n	80130b8 <_strtol_l.isra.0+0x7e>
 80130b4:	45a6      	cmp	lr, r4
 80130b6:	db19      	blt.n	80130ec <_strtol_l.isra.0+0xb2>
 80130b8:	fb00 4006 	mla	r0, r0, r6, r4
 80130bc:	2701      	movs	r7, #1
 80130be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130c2:	e7eb      	b.n	801309c <_strtol_l.isra.0+0x62>
 80130c4:	462f      	mov	r7, r5
 80130c6:	e7bf      	b.n	8013048 <_strtol_l.isra.0+0xe>
 80130c8:	2c2b      	cmp	r4, #43	; 0x2b
 80130ca:	bf04      	itt	eq
 80130cc:	1cbd      	addeq	r5, r7, #2
 80130ce:	787c      	ldrbeq	r4, [r7, #1]
 80130d0:	461a      	mov	r2, r3
 80130d2:	e7c9      	b.n	8013068 <_strtol_l.isra.0+0x2e>
 80130d4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80130d8:	2b19      	cmp	r3, #25
 80130da:	d801      	bhi.n	80130e0 <_strtol_l.isra.0+0xa6>
 80130dc:	3c37      	subs	r4, #55	; 0x37
 80130de:	e7e2      	b.n	80130a6 <_strtol_l.isra.0+0x6c>
 80130e0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80130e4:	2b19      	cmp	r3, #25
 80130e6:	d804      	bhi.n	80130f2 <_strtol_l.isra.0+0xb8>
 80130e8:	3c57      	subs	r4, #87	; 0x57
 80130ea:	e7dc      	b.n	80130a6 <_strtol_l.isra.0+0x6c>
 80130ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80130f0:	e7e5      	b.n	80130be <_strtol_l.isra.0+0x84>
 80130f2:	1c7b      	adds	r3, r7, #1
 80130f4:	d108      	bne.n	8013108 <_strtol_l.isra.0+0xce>
 80130f6:	2322      	movs	r3, #34	; 0x22
 80130f8:	f8c8 3000 	str.w	r3, [r8]
 80130fc:	4608      	mov	r0, r1
 80130fe:	f1ba 0f00 	cmp.w	sl, #0
 8013102:	d107      	bne.n	8013114 <_strtol_l.isra.0+0xda>
 8013104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013108:	b102      	cbz	r2, 801310c <_strtol_l.isra.0+0xd2>
 801310a:	4240      	negs	r0, r0
 801310c:	f1ba 0f00 	cmp.w	sl, #0
 8013110:	d0f8      	beq.n	8013104 <_strtol_l.isra.0+0xca>
 8013112:	b10f      	cbz	r7, 8013118 <_strtol_l.isra.0+0xde>
 8013114:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8013118:	f8ca 9000 	str.w	r9, [sl]
 801311c:	e7f2      	b.n	8013104 <_strtol_l.isra.0+0xca>
 801311e:	2430      	movs	r4, #48	; 0x30
 8013120:	2e00      	cmp	r6, #0
 8013122:	d1af      	bne.n	8013084 <_strtol_l.isra.0+0x4a>
 8013124:	2608      	movs	r6, #8
 8013126:	e7ad      	b.n	8013084 <_strtol_l.isra.0+0x4a>
 8013128:	2c30      	cmp	r4, #48	; 0x30
 801312a:	d0a3      	beq.n	8013074 <_strtol_l.isra.0+0x3a>
 801312c:	260a      	movs	r6, #10
 801312e:	e7a9      	b.n	8013084 <_strtol_l.isra.0+0x4a>

08013130 <strtol>:
 8013130:	4b08      	ldr	r3, [pc, #32]	; (8013154 <strtol+0x24>)
 8013132:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013134:	681c      	ldr	r4, [r3, #0]
 8013136:	4d08      	ldr	r5, [pc, #32]	; (8013158 <strtol+0x28>)
 8013138:	6a23      	ldr	r3, [r4, #32]
 801313a:	2b00      	cmp	r3, #0
 801313c:	bf08      	it	eq
 801313e:	462b      	moveq	r3, r5
 8013140:	9300      	str	r3, [sp, #0]
 8013142:	4613      	mov	r3, r2
 8013144:	460a      	mov	r2, r1
 8013146:	4601      	mov	r1, r0
 8013148:	4620      	mov	r0, r4
 801314a:	f7ff ff76 	bl	801303a <_strtol_l.isra.0>
 801314e:	b003      	add	sp, #12
 8013150:	bd30      	pop	{r4, r5, pc}
 8013152:	bf00      	nop
 8013154:	200001d0 	.word	0x200001d0
 8013158:	20000234 	.word	0x20000234

0801315c <__swbuf_r>:
 801315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315e:	460e      	mov	r6, r1
 8013160:	4614      	mov	r4, r2
 8013162:	4605      	mov	r5, r0
 8013164:	b118      	cbz	r0, 801316e <__swbuf_r+0x12>
 8013166:	6983      	ldr	r3, [r0, #24]
 8013168:	b90b      	cbnz	r3, 801316e <__swbuf_r+0x12>
 801316a:	f000 f9af 	bl	80134cc <__sinit>
 801316e:	4b21      	ldr	r3, [pc, #132]	; (80131f4 <__swbuf_r+0x98>)
 8013170:	429c      	cmp	r4, r3
 8013172:	d12a      	bne.n	80131ca <__swbuf_r+0x6e>
 8013174:	686c      	ldr	r4, [r5, #4]
 8013176:	69a3      	ldr	r3, [r4, #24]
 8013178:	60a3      	str	r3, [r4, #8]
 801317a:	89a3      	ldrh	r3, [r4, #12]
 801317c:	071a      	lsls	r2, r3, #28
 801317e:	d52e      	bpl.n	80131de <__swbuf_r+0x82>
 8013180:	6923      	ldr	r3, [r4, #16]
 8013182:	b363      	cbz	r3, 80131de <__swbuf_r+0x82>
 8013184:	6923      	ldr	r3, [r4, #16]
 8013186:	6820      	ldr	r0, [r4, #0]
 8013188:	1ac0      	subs	r0, r0, r3
 801318a:	6963      	ldr	r3, [r4, #20]
 801318c:	b2f6      	uxtb	r6, r6
 801318e:	4283      	cmp	r3, r0
 8013190:	4637      	mov	r7, r6
 8013192:	dc04      	bgt.n	801319e <__swbuf_r+0x42>
 8013194:	4621      	mov	r1, r4
 8013196:	4628      	mov	r0, r5
 8013198:	f000 f92e 	bl	80133f8 <_fflush_r>
 801319c:	bb28      	cbnz	r0, 80131ea <__swbuf_r+0x8e>
 801319e:	68a3      	ldr	r3, [r4, #8]
 80131a0:	3b01      	subs	r3, #1
 80131a2:	60a3      	str	r3, [r4, #8]
 80131a4:	6823      	ldr	r3, [r4, #0]
 80131a6:	1c5a      	adds	r2, r3, #1
 80131a8:	6022      	str	r2, [r4, #0]
 80131aa:	701e      	strb	r6, [r3, #0]
 80131ac:	6963      	ldr	r3, [r4, #20]
 80131ae:	3001      	adds	r0, #1
 80131b0:	4283      	cmp	r3, r0
 80131b2:	d004      	beq.n	80131be <__swbuf_r+0x62>
 80131b4:	89a3      	ldrh	r3, [r4, #12]
 80131b6:	07db      	lsls	r3, r3, #31
 80131b8:	d519      	bpl.n	80131ee <__swbuf_r+0x92>
 80131ba:	2e0a      	cmp	r6, #10
 80131bc:	d117      	bne.n	80131ee <__swbuf_r+0x92>
 80131be:	4621      	mov	r1, r4
 80131c0:	4628      	mov	r0, r5
 80131c2:	f000 f919 	bl	80133f8 <_fflush_r>
 80131c6:	b190      	cbz	r0, 80131ee <__swbuf_r+0x92>
 80131c8:	e00f      	b.n	80131ea <__swbuf_r+0x8e>
 80131ca:	4b0b      	ldr	r3, [pc, #44]	; (80131f8 <__swbuf_r+0x9c>)
 80131cc:	429c      	cmp	r4, r3
 80131ce:	d101      	bne.n	80131d4 <__swbuf_r+0x78>
 80131d0:	68ac      	ldr	r4, [r5, #8]
 80131d2:	e7d0      	b.n	8013176 <__swbuf_r+0x1a>
 80131d4:	4b09      	ldr	r3, [pc, #36]	; (80131fc <__swbuf_r+0xa0>)
 80131d6:	429c      	cmp	r4, r3
 80131d8:	bf08      	it	eq
 80131da:	68ec      	ldreq	r4, [r5, #12]
 80131dc:	e7cb      	b.n	8013176 <__swbuf_r+0x1a>
 80131de:	4621      	mov	r1, r4
 80131e0:	4628      	mov	r0, r5
 80131e2:	f000 f80d 	bl	8013200 <__swsetup_r>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	d0cc      	beq.n	8013184 <__swbuf_r+0x28>
 80131ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80131ee:	4638      	mov	r0, r7
 80131f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131f2:	bf00      	nop
 80131f4:	0801406c 	.word	0x0801406c
 80131f8:	0801408c 	.word	0x0801408c
 80131fc:	0801404c 	.word	0x0801404c

08013200 <__swsetup_r>:
 8013200:	4b32      	ldr	r3, [pc, #200]	; (80132cc <__swsetup_r+0xcc>)
 8013202:	b570      	push	{r4, r5, r6, lr}
 8013204:	681d      	ldr	r5, [r3, #0]
 8013206:	4606      	mov	r6, r0
 8013208:	460c      	mov	r4, r1
 801320a:	b125      	cbz	r5, 8013216 <__swsetup_r+0x16>
 801320c:	69ab      	ldr	r3, [r5, #24]
 801320e:	b913      	cbnz	r3, 8013216 <__swsetup_r+0x16>
 8013210:	4628      	mov	r0, r5
 8013212:	f000 f95b 	bl	80134cc <__sinit>
 8013216:	4b2e      	ldr	r3, [pc, #184]	; (80132d0 <__swsetup_r+0xd0>)
 8013218:	429c      	cmp	r4, r3
 801321a:	d10f      	bne.n	801323c <__swsetup_r+0x3c>
 801321c:	686c      	ldr	r4, [r5, #4]
 801321e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013222:	b29a      	uxth	r2, r3
 8013224:	0715      	lsls	r5, r2, #28
 8013226:	d42c      	bmi.n	8013282 <__swsetup_r+0x82>
 8013228:	06d0      	lsls	r0, r2, #27
 801322a:	d411      	bmi.n	8013250 <__swsetup_r+0x50>
 801322c:	2209      	movs	r2, #9
 801322e:	6032      	str	r2, [r6, #0]
 8013230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013234:	81a3      	strh	r3, [r4, #12]
 8013236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801323a:	e03e      	b.n	80132ba <__swsetup_r+0xba>
 801323c:	4b25      	ldr	r3, [pc, #148]	; (80132d4 <__swsetup_r+0xd4>)
 801323e:	429c      	cmp	r4, r3
 8013240:	d101      	bne.n	8013246 <__swsetup_r+0x46>
 8013242:	68ac      	ldr	r4, [r5, #8]
 8013244:	e7eb      	b.n	801321e <__swsetup_r+0x1e>
 8013246:	4b24      	ldr	r3, [pc, #144]	; (80132d8 <__swsetup_r+0xd8>)
 8013248:	429c      	cmp	r4, r3
 801324a:	bf08      	it	eq
 801324c:	68ec      	ldreq	r4, [r5, #12]
 801324e:	e7e6      	b.n	801321e <__swsetup_r+0x1e>
 8013250:	0751      	lsls	r1, r2, #29
 8013252:	d512      	bpl.n	801327a <__swsetup_r+0x7a>
 8013254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013256:	b141      	cbz	r1, 801326a <__swsetup_r+0x6a>
 8013258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801325c:	4299      	cmp	r1, r3
 801325e:	d002      	beq.n	8013266 <__swsetup_r+0x66>
 8013260:	4630      	mov	r0, r6
 8013262:	f7ff fa9f 	bl	80127a4 <_free_r>
 8013266:	2300      	movs	r3, #0
 8013268:	6363      	str	r3, [r4, #52]	; 0x34
 801326a:	89a3      	ldrh	r3, [r4, #12]
 801326c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013270:	81a3      	strh	r3, [r4, #12]
 8013272:	2300      	movs	r3, #0
 8013274:	6063      	str	r3, [r4, #4]
 8013276:	6923      	ldr	r3, [r4, #16]
 8013278:	6023      	str	r3, [r4, #0]
 801327a:	89a3      	ldrh	r3, [r4, #12]
 801327c:	f043 0308 	orr.w	r3, r3, #8
 8013280:	81a3      	strh	r3, [r4, #12]
 8013282:	6923      	ldr	r3, [r4, #16]
 8013284:	b94b      	cbnz	r3, 801329a <__swsetup_r+0x9a>
 8013286:	89a3      	ldrh	r3, [r4, #12]
 8013288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013290:	d003      	beq.n	801329a <__swsetup_r+0x9a>
 8013292:	4621      	mov	r1, r4
 8013294:	4630      	mov	r0, r6
 8013296:	f000 f9cb 	bl	8013630 <__smakebuf_r>
 801329a:	89a2      	ldrh	r2, [r4, #12]
 801329c:	f012 0301 	ands.w	r3, r2, #1
 80132a0:	d00c      	beq.n	80132bc <__swsetup_r+0xbc>
 80132a2:	2300      	movs	r3, #0
 80132a4:	60a3      	str	r3, [r4, #8]
 80132a6:	6963      	ldr	r3, [r4, #20]
 80132a8:	425b      	negs	r3, r3
 80132aa:	61a3      	str	r3, [r4, #24]
 80132ac:	6923      	ldr	r3, [r4, #16]
 80132ae:	b953      	cbnz	r3, 80132c6 <__swsetup_r+0xc6>
 80132b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80132b8:	d1ba      	bne.n	8013230 <__swsetup_r+0x30>
 80132ba:	bd70      	pop	{r4, r5, r6, pc}
 80132bc:	0792      	lsls	r2, r2, #30
 80132be:	bf58      	it	pl
 80132c0:	6963      	ldrpl	r3, [r4, #20]
 80132c2:	60a3      	str	r3, [r4, #8]
 80132c4:	e7f2      	b.n	80132ac <__swsetup_r+0xac>
 80132c6:	2000      	movs	r0, #0
 80132c8:	e7f7      	b.n	80132ba <__swsetup_r+0xba>
 80132ca:	bf00      	nop
 80132cc:	200001d0 	.word	0x200001d0
 80132d0:	0801406c 	.word	0x0801406c
 80132d4:	0801408c 	.word	0x0801408c
 80132d8:	0801404c 	.word	0x0801404c

080132dc <abort>:
 80132dc:	b508      	push	{r3, lr}
 80132de:	2006      	movs	r0, #6
 80132e0:	f000 fbb4 	bl	8013a4c <raise>
 80132e4:	2001      	movs	r0, #1
 80132e6:	f7f0 fa7d 	bl	80037e4 <_exit>
	...

080132ec <__sflush_r>:
 80132ec:	898a      	ldrh	r2, [r1, #12]
 80132ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f2:	4605      	mov	r5, r0
 80132f4:	0710      	lsls	r0, r2, #28
 80132f6:	460c      	mov	r4, r1
 80132f8:	d458      	bmi.n	80133ac <__sflush_r+0xc0>
 80132fa:	684b      	ldr	r3, [r1, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	dc05      	bgt.n	801330c <__sflush_r+0x20>
 8013300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013302:	2b00      	cmp	r3, #0
 8013304:	dc02      	bgt.n	801330c <__sflush_r+0x20>
 8013306:	2000      	movs	r0, #0
 8013308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801330c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801330e:	2e00      	cmp	r6, #0
 8013310:	d0f9      	beq.n	8013306 <__sflush_r+0x1a>
 8013312:	2300      	movs	r3, #0
 8013314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013318:	682f      	ldr	r7, [r5, #0]
 801331a:	6a21      	ldr	r1, [r4, #32]
 801331c:	602b      	str	r3, [r5, #0]
 801331e:	d032      	beq.n	8013386 <__sflush_r+0x9a>
 8013320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013322:	89a3      	ldrh	r3, [r4, #12]
 8013324:	075a      	lsls	r2, r3, #29
 8013326:	d505      	bpl.n	8013334 <__sflush_r+0x48>
 8013328:	6863      	ldr	r3, [r4, #4]
 801332a:	1ac0      	subs	r0, r0, r3
 801332c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801332e:	b10b      	cbz	r3, 8013334 <__sflush_r+0x48>
 8013330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013332:	1ac0      	subs	r0, r0, r3
 8013334:	2300      	movs	r3, #0
 8013336:	4602      	mov	r2, r0
 8013338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801333a:	6a21      	ldr	r1, [r4, #32]
 801333c:	4628      	mov	r0, r5
 801333e:	47b0      	blx	r6
 8013340:	1c43      	adds	r3, r0, #1
 8013342:	89a3      	ldrh	r3, [r4, #12]
 8013344:	d106      	bne.n	8013354 <__sflush_r+0x68>
 8013346:	6829      	ldr	r1, [r5, #0]
 8013348:	291d      	cmp	r1, #29
 801334a:	d848      	bhi.n	80133de <__sflush_r+0xf2>
 801334c:	4a29      	ldr	r2, [pc, #164]	; (80133f4 <__sflush_r+0x108>)
 801334e:	40ca      	lsrs	r2, r1
 8013350:	07d6      	lsls	r6, r2, #31
 8013352:	d544      	bpl.n	80133de <__sflush_r+0xf2>
 8013354:	2200      	movs	r2, #0
 8013356:	6062      	str	r2, [r4, #4]
 8013358:	04d9      	lsls	r1, r3, #19
 801335a:	6922      	ldr	r2, [r4, #16]
 801335c:	6022      	str	r2, [r4, #0]
 801335e:	d504      	bpl.n	801336a <__sflush_r+0x7e>
 8013360:	1c42      	adds	r2, r0, #1
 8013362:	d101      	bne.n	8013368 <__sflush_r+0x7c>
 8013364:	682b      	ldr	r3, [r5, #0]
 8013366:	b903      	cbnz	r3, 801336a <__sflush_r+0x7e>
 8013368:	6560      	str	r0, [r4, #84]	; 0x54
 801336a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801336c:	602f      	str	r7, [r5, #0]
 801336e:	2900      	cmp	r1, #0
 8013370:	d0c9      	beq.n	8013306 <__sflush_r+0x1a>
 8013372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013376:	4299      	cmp	r1, r3
 8013378:	d002      	beq.n	8013380 <__sflush_r+0x94>
 801337a:	4628      	mov	r0, r5
 801337c:	f7ff fa12 	bl	80127a4 <_free_r>
 8013380:	2000      	movs	r0, #0
 8013382:	6360      	str	r0, [r4, #52]	; 0x34
 8013384:	e7c0      	b.n	8013308 <__sflush_r+0x1c>
 8013386:	2301      	movs	r3, #1
 8013388:	4628      	mov	r0, r5
 801338a:	47b0      	blx	r6
 801338c:	1c41      	adds	r1, r0, #1
 801338e:	d1c8      	bne.n	8013322 <__sflush_r+0x36>
 8013390:	682b      	ldr	r3, [r5, #0]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d0c5      	beq.n	8013322 <__sflush_r+0x36>
 8013396:	2b1d      	cmp	r3, #29
 8013398:	d001      	beq.n	801339e <__sflush_r+0xb2>
 801339a:	2b16      	cmp	r3, #22
 801339c:	d101      	bne.n	80133a2 <__sflush_r+0xb6>
 801339e:	602f      	str	r7, [r5, #0]
 80133a0:	e7b1      	b.n	8013306 <__sflush_r+0x1a>
 80133a2:	89a3      	ldrh	r3, [r4, #12]
 80133a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133a8:	81a3      	strh	r3, [r4, #12]
 80133aa:	e7ad      	b.n	8013308 <__sflush_r+0x1c>
 80133ac:	690f      	ldr	r7, [r1, #16]
 80133ae:	2f00      	cmp	r7, #0
 80133b0:	d0a9      	beq.n	8013306 <__sflush_r+0x1a>
 80133b2:	0793      	lsls	r3, r2, #30
 80133b4:	680e      	ldr	r6, [r1, #0]
 80133b6:	bf08      	it	eq
 80133b8:	694b      	ldreq	r3, [r1, #20]
 80133ba:	600f      	str	r7, [r1, #0]
 80133bc:	bf18      	it	ne
 80133be:	2300      	movne	r3, #0
 80133c0:	eba6 0807 	sub.w	r8, r6, r7
 80133c4:	608b      	str	r3, [r1, #8]
 80133c6:	f1b8 0f00 	cmp.w	r8, #0
 80133ca:	dd9c      	ble.n	8013306 <__sflush_r+0x1a>
 80133cc:	4643      	mov	r3, r8
 80133ce:	463a      	mov	r2, r7
 80133d0:	6a21      	ldr	r1, [r4, #32]
 80133d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80133d4:	4628      	mov	r0, r5
 80133d6:	47b0      	blx	r6
 80133d8:	2800      	cmp	r0, #0
 80133da:	dc06      	bgt.n	80133ea <__sflush_r+0xfe>
 80133dc:	89a3      	ldrh	r3, [r4, #12]
 80133de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133e2:	81a3      	strh	r3, [r4, #12]
 80133e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133e8:	e78e      	b.n	8013308 <__sflush_r+0x1c>
 80133ea:	4407      	add	r7, r0
 80133ec:	eba8 0800 	sub.w	r8, r8, r0
 80133f0:	e7e9      	b.n	80133c6 <__sflush_r+0xda>
 80133f2:	bf00      	nop
 80133f4:	20400001 	.word	0x20400001

080133f8 <_fflush_r>:
 80133f8:	b538      	push	{r3, r4, r5, lr}
 80133fa:	690b      	ldr	r3, [r1, #16]
 80133fc:	4605      	mov	r5, r0
 80133fe:	460c      	mov	r4, r1
 8013400:	b1db      	cbz	r3, 801343a <_fflush_r+0x42>
 8013402:	b118      	cbz	r0, 801340c <_fflush_r+0x14>
 8013404:	6983      	ldr	r3, [r0, #24]
 8013406:	b90b      	cbnz	r3, 801340c <_fflush_r+0x14>
 8013408:	f000 f860 	bl	80134cc <__sinit>
 801340c:	4b0c      	ldr	r3, [pc, #48]	; (8013440 <_fflush_r+0x48>)
 801340e:	429c      	cmp	r4, r3
 8013410:	d109      	bne.n	8013426 <_fflush_r+0x2e>
 8013412:	686c      	ldr	r4, [r5, #4]
 8013414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013418:	b17b      	cbz	r3, 801343a <_fflush_r+0x42>
 801341a:	4621      	mov	r1, r4
 801341c:	4628      	mov	r0, r5
 801341e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013422:	f7ff bf63 	b.w	80132ec <__sflush_r>
 8013426:	4b07      	ldr	r3, [pc, #28]	; (8013444 <_fflush_r+0x4c>)
 8013428:	429c      	cmp	r4, r3
 801342a:	d101      	bne.n	8013430 <_fflush_r+0x38>
 801342c:	68ac      	ldr	r4, [r5, #8]
 801342e:	e7f1      	b.n	8013414 <_fflush_r+0x1c>
 8013430:	4b05      	ldr	r3, [pc, #20]	; (8013448 <_fflush_r+0x50>)
 8013432:	429c      	cmp	r4, r3
 8013434:	bf08      	it	eq
 8013436:	68ec      	ldreq	r4, [r5, #12]
 8013438:	e7ec      	b.n	8013414 <_fflush_r+0x1c>
 801343a:	2000      	movs	r0, #0
 801343c:	bd38      	pop	{r3, r4, r5, pc}
 801343e:	bf00      	nop
 8013440:	0801406c 	.word	0x0801406c
 8013444:	0801408c 	.word	0x0801408c
 8013448:	0801404c 	.word	0x0801404c

0801344c <std>:
 801344c:	2300      	movs	r3, #0
 801344e:	b510      	push	{r4, lr}
 8013450:	4604      	mov	r4, r0
 8013452:	e9c0 3300 	strd	r3, r3, [r0]
 8013456:	6083      	str	r3, [r0, #8]
 8013458:	8181      	strh	r1, [r0, #12]
 801345a:	6643      	str	r3, [r0, #100]	; 0x64
 801345c:	81c2      	strh	r2, [r0, #14]
 801345e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013462:	6183      	str	r3, [r0, #24]
 8013464:	4619      	mov	r1, r3
 8013466:	2208      	movs	r2, #8
 8013468:	305c      	adds	r0, #92	; 0x5c
 801346a:	f7ff f992 	bl	8012792 <memset>
 801346e:	4b05      	ldr	r3, [pc, #20]	; (8013484 <std+0x38>)
 8013470:	6263      	str	r3, [r4, #36]	; 0x24
 8013472:	4b05      	ldr	r3, [pc, #20]	; (8013488 <std+0x3c>)
 8013474:	62a3      	str	r3, [r4, #40]	; 0x28
 8013476:	4b05      	ldr	r3, [pc, #20]	; (801348c <std+0x40>)
 8013478:	62e3      	str	r3, [r4, #44]	; 0x2c
 801347a:	4b05      	ldr	r3, [pc, #20]	; (8013490 <std+0x44>)
 801347c:	6224      	str	r4, [r4, #32]
 801347e:	6323      	str	r3, [r4, #48]	; 0x30
 8013480:	bd10      	pop	{r4, pc}
 8013482:	bf00      	nop
 8013484:	08013a85 	.word	0x08013a85
 8013488:	08013aa7 	.word	0x08013aa7
 801348c:	08013adf 	.word	0x08013adf
 8013490:	08013b03 	.word	0x08013b03

08013494 <_cleanup_r>:
 8013494:	4901      	ldr	r1, [pc, #4]	; (801349c <_cleanup_r+0x8>)
 8013496:	f000 b885 	b.w	80135a4 <_fwalk_reent>
 801349a:	bf00      	nop
 801349c:	080133f9 	.word	0x080133f9

080134a0 <__sfmoreglue>:
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	1e4a      	subs	r2, r1, #1
 80134a4:	2568      	movs	r5, #104	; 0x68
 80134a6:	4355      	muls	r5, r2
 80134a8:	460e      	mov	r6, r1
 80134aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80134ae:	f7ff f9c7 	bl	8012840 <_malloc_r>
 80134b2:	4604      	mov	r4, r0
 80134b4:	b140      	cbz	r0, 80134c8 <__sfmoreglue+0x28>
 80134b6:	2100      	movs	r1, #0
 80134b8:	e9c0 1600 	strd	r1, r6, [r0]
 80134bc:	300c      	adds	r0, #12
 80134be:	60a0      	str	r0, [r4, #8]
 80134c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80134c4:	f7ff f965 	bl	8012792 <memset>
 80134c8:	4620      	mov	r0, r4
 80134ca:	bd70      	pop	{r4, r5, r6, pc}

080134cc <__sinit>:
 80134cc:	6983      	ldr	r3, [r0, #24]
 80134ce:	b510      	push	{r4, lr}
 80134d0:	4604      	mov	r4, r0
 80134d2:	bb33      	cbnz	r3, 8013522 <__sinit+0x56>
 80134d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80134d8:	6503      	str	r3, [r0, #80]	; 0x50
 80134da:	4b12      	ldr	r3, [pc, #72]	; (8013524 <__sinit+0x58>)
 80134dc:	4a12      	ldr	r2, [pc, #72]	; (8013528 <__sinit+0x5c>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	6282      	str	r2, [r0, #40]	; 0x28
 80134e2:	4298      	cmp	r0, r3
 80134e4:	bf04      	itt	eq
 80134e6:	2301      	moveq	r3, #1
 80134e8:	6183      	streq	r3, [r0, #24]
 80134ea:	f000 f81f 	bl	801352c <__sfp>
 80134ee:	6060      	str	r0, [r4, #4]
 80134f0:	4620      	mov	r0, r4
 80134f2:	f000 f81b 	bl	801352c <__sfp>
 80134f6:	60a0      	str	r0, [r4, #8]
 80134f8:	4620      	mov	r0, r4
 80134fa:	f000 f817 	bl	801352c <__sfp>
 80134fe:	2200      	movs	r2, #0
 8013500:	60e0      	str	r0, [r4, #12]
 8013502:	2104      	movs	r1, #4
 8013504:	6860      	ldr	r0, [r4, #4]
 8013506:	f7ff ffa1 	bl	801344c <std>
 801350a:	2201      	movs	r2, #1
 801350c:	2109      	movs	r1, #9
 801350e:	68a0      	ldr	r0, [r4, #8]
 8013510:	f7ff ff9c 	bl	801344c <std>
 8013514:	2202      	movs	r2, #2
 8013516:	2112      	movs	r1, #18
 8013518:	68e0      	ldr	r0, [r4, #12]
 801351a:	f7ff ff97 	bl	801344c <std>
 801351e:	2301      	movs	r3, #1
 8013520:	61a3      	str	r3, [r4, #24]
 8013522:	bd10      	pop	{r4, pc}
 8013524:	08014014 	.word	0x08014014
 8013528:	08013495 	.word	0x08013495

0801352c <__sfp>:
 801352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801352e:	4b1b      	ldr	r3, [pc, #108]	; (801359c <__sfp+0x70>)
 8013530:	681e      	ldr	r6, [r3, #0]
 8013532:	69b3      	ldr	r3, [r6, #24]
 8013534:	4607      	mov	r7, r0
 8013536:	b913      	cbnz	r3, 801353e <__sfp+0x12>
 8013538:	4630      	mov	r0, r6
 801353a:	f7ff ffc7 	bl	80134cc <__sinit>
 801353e:	3648      	adds	r6, #72	; 0x48
 8013540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013544:	3b01      	subs	r3, #1
 8013546:	d503      	bpl.n	8013550 <__sfp+0x24>
 8013548:	6833      	ldr	r3, [r6, #0]
 801354a:	b133      	cbz	r3, 801355a <__sfp+0x2e>
 801354c:	6836      	ldr	r6, [r6, #0]
 801354e:	e7f7      	b.n	8013540 <__sfp+0x14>
 8013550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013554:	b16d      	cbz	r5, 8013572 <__sfp+0x46>
 8013556:	3468      	adds	r4, #104	; 0x68
 8013558:	e7f4      	b.n	8013544 <__sfp+0x18>
 801355a:	2104      	movs	r1, #4
 801355c:	4638      	mov	r0, r7
 801355e:	f7ff ff9f 	bl	80134a0 <__sfmoreglue>
 8013562:	6030      	str	r0, [r6, #0]
 8013564:	2800      	cmp	r0, #0
 8013566:	d1f1      	bne.n	801354c <__sfp+0x20>
 8013568:	230c      	movs	r3, #12
 801356a:	603b      	str	r3, [r7, #0]
 801356c:	4604      	mov	r4, r0
 801356e:	4620      	mov	r0, r4
 8013570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013572:	4b0b      	ldr	r3, [pc, #44]	; (80135a0 <__sfp+0x74>)
 8013574:	6665      	str	r5, [r4, #100]	; 0x64
 8013576:	e9c4 5500 	strd	r5, r5, [r4]
 801357a:	60a5      	str	r5, [r4, #8]
 801357c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013580:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013584:	2208      	movs	r2, #8
 8013586:	4629      	mov	r1, r5
 8013588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801358c:	f7ff f901 	bl	8012792 <memset>
 8013590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013598:	e7e9      	b.n	801356e <__sfp+0x42>
 801359a:	bf00      	nop
 801359c:	08014014 	.word	0x08014014
 80135a0:	ffff0001 	.word	0xffff0001

080135a4 <_fwalk_reent>:
 80135a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135a8:	4680      	mov	r8, r0
 80135aa:	4689      	mov	r9, r1
 80135ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80135b0:	2600      	movs	r6, #0
 80135b2:	b914      	cbnz	r4, 80135ba <_fwalk_reent+0x16>
 80135b4:	4630      	mov	r0, r6
 80135b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80135be:	3f01      	subs	r7, #1
 80135c0:	d501      	bpl.n	80135c6 <_fwalk_reent+0x22>
 80135c2:	6824      	ldr	r4, [r4, #0]
 80135c4:	e7f5      	b.n	80135b2 <_fwalk_reent+0xe>
 80135c6:	89ab      	ldrh	r3, [r5, #12]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d907      	bls.n	80135dc <_fwalk_reent+0x38>
 80135cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80135d0:	3301      	adds	r3, #1
 80135d2:	d003      	beq.n	80135dc <_fwalk_reent+0x38>
 80135d4:	4629      	mov	r1, r5
 80135d6:	4640      	mov	r0, r8
 80135d8:	47c8      	blx	r9
 80135da:	4306      	orrs	r6, r0
 80135dc:	3568      	adds	r5, #104	; 0x68
 80135de:	e7ee      	b.n	80135be <_fwalk_reent+0x1a>

080135e0 <__locale_ctype_ptr_l>:
 80135e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80135e4:	4770      	bx	lr

080135e6 <__swhatbuf_r>:
 80135e6:	b570      	push	{r4, r5, r6, lr}
 80135e8:	460e      	mov	r6, r1
 80135ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135ee:	2900      	cmp	r1, #0
 80135f0:	b096      	sub	sp, #88	; 0x58
 80135f2:	4614      	mov	r4, r2
 80135f4:	461d      	mov	r5, r3
 80135f6:	da07      	bge.n	8013608 <__swhatbuf_r+0x22>
 80135f8:	2300      	movs	r3, #0
 80135fa:	602b      	str	r3, [r5, #0]
 80135fc:	89b3      	ldrh	r3, [r6, #12]
 80135fe:	061a      	lsls	r2, r3, #24
 8013600:	d410      	bmi.n	8013624 <__swhatbuf_r+0x3e>
 8013602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013606:	e00e      	b.n	8013626 <__swhatbuf_r+0x40>
 8013608:	466a      	mov	r2, sp
 801360a:	f000 faad 	bl	8013b68 <_fstat_r>
 801360e:	2800      	cmp	r0, #0
 8013610:	dbf2      	blt.n	80135f8 <__swhatbuf_r+0x12>
 8013612:	9a01      	ldr	r2, [sp, #4]
 8013614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801361c:	425a      	negs	r2, r3
 801361e:	415a      	adcs	r2, r3
 8013620:	602a      	str	r2, [r5, #0]
 8013622:	e7ee      	b.n	8013602 <__swhatbuf_r+0x1c>
 8013624:	2340      	movs	r3, #64	; 0x40
 8013626:	2000      	movs	r0, #0
 8013628:	6023      	str	r3, [r4, #0]
 801362a:	b016      	add	sp, #88	; 0x58
 801362c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013630 <__smakebuf_r>:
 8013630:	898b      	ldrh	r3, [r1, #12]
 8013632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013634:	079d      	lsls	r5, r3, #30
 8013636:	4606      	mov	r6, r0
 8013638:	460c      	mov	r4, r1
 801363a:	d507      	bpl.n	801364c <__smakebuf_r+0x1c>
 801363c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013640:	6023      	str	r3, [r4, #0]
 8013642:	6123      	str	r3, [r4, #16]
 8013644:	2301      	movs	r3, #1
 8013646:	6163      	str	r3, [r4, #20]
 8013648:	b002      	add	sp, #8
 801364a:	bd70      	pop	{r4, r5, r6, pc}
 801364c:	ab01      	add	r3, sp, #4
 801364e:	466a      	mov	r2, sp
 8013650:	f7ff ffc9 	bl	80135e6 <__swhatbuf_r>
 8013654:	9900      	ldr	r1, [sp, #0]
 8013656:	4605      	mov	r5, r0
 8013658:	4630      	mov	r0, r6
 801365a:	f7ff f8f1 	bl	8012840 <_malloc_r>
 801365e:	b948      	cbnz	r0, 8013674 <__smakebuf_r+0x44>
 8013660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013664:	059a      	lsls	r2, r3, #22
 8013666:	d4ef      	bmi.n	8013648 <__smakebuf_r+0x18>
 8013668:	f023 0303 	bic.w	r3, r3, #3
 801366c:	f043 0302 	orr.w	r3, r3, #2
 8013670:	81a3      	strh	r3, [r4, #12]
 8013672:	e7e3      	b.n	801363c <__smakebuf_r+0xc>
 8013674:	4b0d      	ldr	r3, [pc, #52]	; (80136ac <__smakebuf_r+0x7c>)
 8013676:	62b3      	str	r3, [r6, #40]	; 0x28
 8013678:	89a3      	ldrh	r3, [r4, #12]
 801367a:	6020      	str	r0, [r4, #0]
 801367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013680:	81a3      	strh	r3, [r4, #12]
 8013682:	9b00      	ldr	r3, [sp, #0]
 8013684:	6163      	str	r3, [r4, #20]
 8013686:	9b01      	ldr	r3, [sp, #4]
 8013688:	6120      	str	r0, [r4, #16]
 801368a:	b15b      	cbz	r3, 80136a4 <__smakebuf_r+0x74>
 801368c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013690:	4630      	mov	r0, r6
 8013692:	f000 fa7b 	bl	8013b8c <_isatty_r>
 8013696:	b128      	cbz	r0, 80136a4 <__smakebuf_r+0x74>
 8013698:	89a3      	ldrh	r3, [r4, #12]
 801369a:	f023 0303 	bic.w	r3, r3, #3
 801369e:	f043 0301 	orr.w	r3, r3, #1
 80136a2:	81a3      	strh	r3, [r4, #12]
 80136a4:	89a3      	ldrh	r3, [r4, #12]
 80136a6:	431d      	orrs	r5, r3
 80136a8:	81a5      	strh	r5, [r4, #12]
 80136aa:	e7cd      	b.n	8013648 <__smakebuf_r+0x18>
 80136ac:	08013495 	.word	0x08013495

080136b0 <__ascii_mbtowc>:
 80136b0:	b082      	sub	sp, #8
 80136b2:	b901      	cbnz	r1, 80136b6 <__ascii_mbtowc+0x6>
 80136b4:	a901      	add	r1, sp, #4
 80136b6:	b142      	cbz	r2, 80136ca <__ascii_mbtowc+0x1a>
 80136b8:	b14b      	cbz	r3, 80136ce <__ascii_mbtowc+0x1e>
 80136ba:	7813      	ldrb	r3, [r2, #0]
 80136bc:	600b      	str	r3, [r1, #0]
 80136be:	7812      	ldrb	r2, [r2, #0]
 80136c0:	1c10      	adds	r0, r2, #0
 80136c2:	bf18      	it	ne
 80136c4:	2001      	movne	r0, #1
 80136c6:	b002      	add	sp, #8
 80136c8:	4770      	bx	lr
 80136ca:	4610      	mov	r0, r2
 80136cc:	e7fb      	b.n	80136c6 <__ascii_mbtowc+0x16>
 80136ce:	f06f 0001 	mvn.w	r0, #1
 80136d2:	e7f8      	b.n	80136c6 <__ascii_mbtowc+0x16>

080136d4 <memmove>:
 80136d4:	4288      	cmp	r0, r1
 80136d6:	b510      	push	{r4, lr}
 80136d8:	eb01 0302 	add.w	r3, r1, r2
 80136dc:	d807      	bhi.n	80136ee <memmove+0x1a>
 80136de:	1e42      	subs	r2, r0, #1
 80136e0:	4299      	cmp	r1, r3
 80136e2:	d00a      	beq.n	80136fa <memmove+0x26>
 80136e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80136ec:	e7f8      	b.n	80136e0 <memmove+0xc>
 80136ee:	4283      	cmp	r3, r0
 80136f0:	d9f5      	bls.n	80136de <memmove+0xa>
 80136f2:	1881      	adds	r1, r0, r2
 80136f4:	1ad2      	subs	r2, r2, r3
 80136f6:	42d3      	cmn	r3, r2
 80136f8:	d100      	bne.n	80136fc <memmove+0x28>
 80136fa:	bd10      	pop	{r4, pc}
 80136fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013700:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013704:	e7f7      	b.n	80136f6 <memmove+0x22>

08013706 <__malloc_lock>:
 8013706:	4770      	bx	lr

08013708 <__malloc_unlock>:
 8013708:	4770      	bx	lr

0801370a <_realloc_r>:
 801370a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370c:	4607      	mov	r7, r0
 801370e:	4614      	mov	r4, r2
 8013710:	460e      	mov	r6, r1
 8013712:	b921      	cbnz	r1, 801371e <_realloc_r+0x14>
 8013714:	4611      	mov	r1, r2
 8013716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801371a:	f7ff b891 	b.w	8012840 <_malloc_r>
 801371e:	b922      	cbnz	r2, 801372a <_realloc_r+0x20>
 8013720:	f7ff f840 	bl	80127a4 <_free_r>
 8013724:	4625      	mov	r5, r4
 8013726:	4628      	mov	r0, r5
 8013728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801372a:	f000 fa51 	bl	8013bd0 <_malloc_usable_size_r>
 801372e:	42a0      	cmp	r0, r4
 8013730:	d20f      	bcs.n	8013752 <_realloc_r+0x48>
 8013732:	4621      	mov	r1, r4
 8013734:	4638      	mov	r0, r7
 8013736:	f7ff f883 	bl	8012840 <_malloc_r>
 801373a:	4605      	mov	r5, r0
 801373c:	2800      	cmp	r0, #0
 801373e:	d0f2      	beq.n	8013726 <_realloc_r+0x1c>
 8013740:	4631      	mov	r1, r6
 8013742:	4622      	mov	r2, r4
 8013744:	f7ff f81a 	bl	801277c <memcpy>
 8013748:	4631      	mov	r1, r6
 801374a:	4638      	mov	r0, r7
 801374c:	f7ff f82a 	bl	80127a4 <_free_r>
 8013750:	e7e9      	b.n	8013726 <_realloc_r+0x1c>
 8013752:	4635      	mov	r5, r6
 8013754:	e7e7      	b.n	8013726 <_realloc_r+0x1c>

08013756 <__ssputs_r>:
 8013756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801375a:	688e      	ldr	r6, [r1, #8]
 801375c:	429e      	cmp	r6, r3
 801375e:	4682      	mov	sl, r0
 8013760:	460c      	mov	r4, r1
 8013762:	4690      	mov	r8, r2
 8013764:	4699      	mov	r9, r3
 8013766:	d837      	bhi.n	80137d8 <__ssputs_r+0x82>
 8013768:	898a      	ldrh	r2, [r1, #12]
 801376a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801376e:	d031      	beq.n	80137d4 <__ssputs_r+0x7e>
 8013770:	6825      	ldr	r5, [r4, #0]
 8013772:	6909      	ldr	r1, [r1, #16]
 8013774:	1a6f      	subs	r7, r5, r1
 8013776:	6965      	ldr	r5, [r4, #20]
 8013778:	2302      	movs	r3, #2
 801377a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801377e:	fb95 f5f3 	sdiv	r5, r5, r3
 8013782:	f109 0301 	add.w	r3, r9, #1
 8013786:	443b      	add	r3, r7
 8013788:	429d      	cmp	r5, r3
 801378a:	bf38      	it	cc
 801378c:	461d      	movcc	r5, r3
 801378e:	0553      	lsls	r3, r2, #21
 8013790:	d530      	bpl.n	80137f4 <__ssputs_r+0x9e>
 8013792:	4629      	mov	r1, r5
 8013794:	f7ff f854 	bl	8012840 <_malloc_r>
 8013798:	4606      	mov	r6, r0
 801379a:	b950      	cbnz	r0, 80137b2 <__ssputs_r+0x5c>
 801379c:	230c      	movs	r3, #12
 801379e:	f8ca 3000 	str.w	r3, [sl]
 80137a2:	89a3      	ldrh	r3, [r4, #12]
 80137a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137a8:	81a3      	strh	r3, [r4, #12]
 80137aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137b2:	463a      	mov	r2, r7
 80137b4:	6921      	ldr	r1, [r4, #16]
 80137b6:	f7fe ffe1 	bl	801277c <memcpy>
 80137ba:	89a3      	ldrh	r3, [r4, #12]
 80137bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80137c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137c4:	81a3      	strh	r3, [r4, #12]
 80137c6:	6126      	str	r6, [r4, #16]
 80137c8:	6165      	str	r5, [r4, #20]
 80137ca:	443e      	add	r6, r7
 80137cc:	1bed      	subs	r5, r5, r7
 80137ce:	6026      	str	r6, [r4, #0]
 80137d0:	60a5      	str	r5, [r4, #8]
 80137d2:	464e      	mov	r6, r9
 80137d4:	454e      	cmp	r6, r9
 80137d6:	d900      	bls.n	80137da <__ssputs_r+0x84>
 80137d8:	464e      	mov	r6, r9
 80137da:	4632      	mov	r2, r6
 80137dc:	4641      	mov	r1, r8
 80137de:	6820      	ldr	r0, [r4, #0]
 80137e0:	f7ff ff78 	bl	80136d4 <memmove>
 80137e4:	68a3      	ldr	r3, [r4, #8]
 80137e6:	1b9b      	subs	r3, r3, r6
 80137e8:	60a3      	str	r3, [r4, #8]
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	441e      	add	r6, r3
 80137ee:	6026      	str	r6, [r4, #0]
 80137f0:	2000      	movs	r0, #0
 80137f2:	e7dc      	b.n	80137ae <__ssputs_r+0x58>
 80137f4:	462a      	mov	r2, r5
 80137f6:	f7ff ff88 	bl	801370a <_realloc_r>
 80137fa:	4606      	mov	r6, r0
 80137fc:	2800      	cmp	r0, #0
 80137fe:	d1e2      	bne.n	80137c6 <__ssputs_r+0x70>
 8013800:	6921      	ldr	r1, [r4, #16]
 8013802:	4650      	mov	r0, sl
 8013804:	f7fe ffce 	bl	80127a4 <_free_r>
 8013808:	e7c8      	b.n	801379c <__ssputs_r+0x46>
	...

0801380c <_svfiprintf_r>:
 801380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013810:	461d      	mov	r5, r3
 8013812:	898b      	ldrh	r3, [r1, #12]
 8013814:	061f      	lsls	r7, r3, #24
 8013816:	b09d      	sub	sp, #116	; 0x74
 8013818:	4680      	mov	r8, r0
 801381a:	460c      	mov	r4, r1
 801381c:	4616      	mov	r6, r2
 801381e:	d50f      	bpl.n	8013840 <_svfiprintf_r+0x34>
 8013820:	690b      	ldr	r3, [r1, #16]
 8013822:	b96b      	cbnz	r3, 8013840 <_svfiprintf_r+0x34>
 8013824:	2140      	movs	r1, #64	; 0x40
 8013826:	f7ff f80b 	bl	8012840 <_malloc_r>
 801382a:	6020      	str	r0, [r4, #0]
 801382c:	6120      	str	r0, [r4, #16]
 801382e:	b928      	cbnz	r0, 801383c <_svfiprintf_r+0x30>
 8013830:	230c      	movs	r3, #12
 8013832:	f8c8 3000 	str.w	r3, [r8]
 8013836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801383a:	e0c8      	b.n	80139ce <_svfiprintf_r+0x1c2>
 801383c:	2340      	movs	r3, #64	; 0x40
 801383e:	6163      	str	r3, [r4, #20]
 8013840:	2300      	movs	r3, #0
 8013842:	9309      	str	r3, [sp, #36]	; 0x24
 8013844:	2320      	movs	r3, #32
 8013846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801384a:	2330      	movs	r3, #48	; 0x30
 801384c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013850:	9503      	str	r5, [sp, #12]
 8013852:	f04f 0b01 	mov.w	fp, #1
 8013856:	4637      	mov	r7, r6
 8013858:	463d      	mov	r5, r7
 801385a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801385e:	b10b      	cbz	r3, 8013864 <_svfiprintf_r+0x58>
 8013860:	2b25      	cmp	r3, #37	; 0x25
 8013862:	d13e      	bne.n	80138e2 <_svfiprintf_r+0xd6>
 8013864:	ebb7 0a06 	subs.w	sl, r7, r6
 8013868:	d00b      	beq.n	8013882 <_svfiprintf_r+0x76>
 801386a:	4653      	mov	r3, sl
 801386c:	4632      	mov	r2, r6
 801386e:	4621      	mov	r1, r4
 8013870:	4640      	mov	r0, r8
 8013872:	f7ff ff70 	bl	8013756 <__ssputs_r>
 8013876:	3001      	adds	r0, #1
 8013878:	f000 80a4 	beq.w	80139c4 <_svfiprintf_r+0x1b8>
 801387c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801387e:	4453      	add	r3, sl
 8013880:	9309      	str	r3, [sp, #36]	; 0x24
 8013882:	783b      	ldrb	r3, [r7, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 809d 	beq.w	80139c4 <_svfiprintf_r+0x1b8>
 801388a:	2300      	movs	r3, #0
 801388c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013894:	9304      	str	r3, [sp, #16]
 8013896:	9307      	str	r3, [sp, #28]
 8013898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801389c:	931a      	str	r3, [sp, #104]	; 0x68
 801389e:	462f      	mov	r7, r5
 80138a0:	2205      	movs	r2, #5
 80138a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80138a6:	4850      	ldr	r0, [pc, #320]	; (80139e8 <_svfiprintf_r+0x1dc>)
 80138a8:	f7ec fcaa 	bl	8000200 <memchr>
 80138ac:	9b04      	ldr	r3, [sp, #16]
 80138ae:	b9d0      	cbnz	r0, 80138e6 <_svfiprintf_r+0xda>
 80138b0:	06d9      	lsls	r1, r3, #27
 80138b2:	bf44      	itt	mi
 80138b4:	2220      	movmi	r2, #32
 80138b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80138ba:	071a      	lsls	r2, r3, #28
 80138bc:	bf44      	itt	mi
 80138be:	222b      	movmi	r2, #43	; 0x2b
 80138c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80138c4:	782a      	ldrb	r2, [r5, #0]
 80138c6:	2a2a      	cmp	r2, #42	; 0x2a
 80138c8:	d015      	beq.n	80138f6 <_svfiprintf_r+0xea>
 80138ca:	9a07      	ldr	r2, [sp, #28]
 80138cc:	462f      	mov	r7, r5
 80138ce:	2000      	movs	r0, #0
 80138d0:	250a      	movs	r5, #10
 80138d2:	4639      	mov	r1, r7
 80138d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138d8:	3b30      	subs	r3, #48	; 0x30
 80138da:	2b09      	cmp	r3, #9
 80138dc:	d94d      	bls.n	801397a <_svfiprintf_r+0x16e>
 80138de:	b1b8      	cbz	r0, 8013910 <_svfiprintf_r+0x104>
 80138e0:	e00f      	b.n	8013902 <_svfiprintf_r+0xf6>
 80138e2:	462f      	mov	r7, r5
 80138e4:	e7b8      	b.n	8013858 <_svfiprintf_r+0x4c>
 80138e6:	4a40      	ldr	r2, [pc, #256]	; (80139e8 <_svfiprintf_r+0x1dc>)
 80138e8:	1a80      	subs	r0, r0, r2
 80138ea:	fa0b f000 	lsl.w	r0, fp, r0
 80138ee:	4318      	orrs	r0, r3
 80138f0:	9004      	str	r0, [sp, #16]
 80138f2:	463d      	mov	r5, r7
 80138f4:	e7d3      	b.n	801389e <_svfiprintf_r+0x92>
 80138f6:	9a03      	ldr	r2, [sp, #12]
 80138f8:	1d11      	adds	r1, r2, #4
 80138fa:	6812      	ldr	r2, [r2, #0]
 80138fc:	9103      	str	r1, [sp, #12]
 80138fe:	2a00      	cmp	r2, #0
 8013900:	db01      	blt.n	8013906 <_svfiprintf_r+0xfa>
 8013902:	9207      	str	r2, [sp, #28]
 8013904:	e004      	b.n	8013910 <_svfiprintf_r+0x104>
 8013906:	4252      	negs	r2, r2
 8013908:	f043 0302 	orr.w	r3, r3, #2
 801390c:	9207      	str	r2, [sp, #28]
 801390e:	9304      	str	r3, [sp, #16]
 8013910:	783b      	ldrb	r3, [r7, #0]
 8013912:	2b2e      	cmp	r3, #46	; 0x2e
 8013914:	d10c      	bne.n	8013930 <_svfiprintf_r+0x124>
 8013916:	787b      	ldrb	r3, [r7, #1]
 8013918:	2b2a      	cmp	r3, #42	; 0x2a
 801391a:	d133      	bne.n	8013984 <_svfiprintf_r+0x178>
 801391c:	9b03      	ldr	r3, [sp, #12]
 801391e:	1d1a      	adds	r2, r3, #4
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	9203      	str	r2, [sp, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	bfb8      	it	lt
 8013928:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801392c:	3702      	adds	r7, #2
 801392e:	9305      	str	r3, [sp, #20]
 8013930:	4d2e      	ldr	r5, [pc, #184]	; (80139ec <_svfiprintf_r+0x1e0>)
 8013932:	7839      	ldrb	r1, [r7, #0]
 8013934:	2203      	movs	r2, #3
 8013936:	4628      	mov	r0, r5
 8013938:	f7ec fc62 	bl	8000200 <memchr>
 801393c:	b138      	cbz	r0, 801394e <_svfiprintf_r+0x142>
 801393e:	2340      	movs	r3, #64	; 0x40
 8013940:	1b40      	subs	r0, r0, r5
 8013942:	fa03 f000 	lsl.w	r0, r3, r0
 8013946:	9b04      	ldr	r3, [sp, #16]
 8013948:	4303      	orrs	r3, r0
 801394a:	3701      	adds	r7, #1
 801394c:	9304      	str	r3, [sp, #16]
 801394e:	7839      	ldrb	r1, [r7, #0]
 8013950:	4827      	ldr	r0, [pc, #156]	; (80139f0 <_svfiprintf_r+0x1e4>)
 8013952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013956:	2206      	movs	r2, #6
 8013958:	1c7e      	adds	r6, r7, #1
 801395a:	f7ec fc51 	bl	8000200 <memchr>
 801395e:	2800      	cmp	r0, #0
 8013960:	d038      	beq.n	80139d4 <_svfiprintf_r+0x1c8>
 8013962:	4b24      	ldr	r3, [pc, #144]	; (80139f4 <_svfiprintf_r+0x1e8>)
 8013964:	bb13      	cbnz	r3, 80139ac <_svfiprintf_r+0x1a0>
 8013966:	9b03      	ldr	r3, [sp, #12]
 8013968:	3307      	adds	r3, #7
 801396a:	f023 0307 	bic.w	r3, r3, #7
 801396e:	3308      	adds	r3, #8
 8013970:	9303      	str	r3, [sp, #12]
 8013972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013974:	444b      	add	r3, r9
 8013976:	9309      	str	r3, [sp, #36]	; 0x24
 8013978:	e76d      	b.n	8013856 <_svfiprintf_r+0x4a>
 801397a:	fb05 3202 	mla	r2, r5, r2, r3
 801397e:	2001      	movs	r0, #1
 8013980:	460f      	mov	r7, r1
 8013982:	e7a6      	b.n	80138d2 <_svfiprintf_r+0xc6>
 8013984:	2300      	movs	r3, #0
 8013986:	3701      	adds	r7, #1
 8013988:	9305      	str	r3, [sp, #20]
 801398a:	4619      	mov	r1, r3
 801398c:	250a      	movs	r5, #10
 801398e:	4638      	mov	r0, r7
 8013990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013994:	3a30      	subs	r2, #48	; 0x30
 8013996:	2a09      	cmp	r2, #9
 8013998:	d903      	bls.n	80139a2 <_svfiprintf_r+0x196>
 801399a:	2b00      	cmp	r3, #0
 801399c:	d0c8      	beq.n	8013930 <_svfiprintf_r+0x124>
 801399e:	9105      	str	r1, [sp, #20]
 80139a0:	e7c6      	b.n	8013930 <_svfiprintf_r+0x124>
 80139a2:	fb05 2101 	mla	r1, r5, r1, r2
 80139a6:	2301      	movs	r3, #1
 80139a8:	4607      	mov	r7, r0
 80139aa:	e7f0      	b.n	801398e <_svfiprintf_r+0x182>
 80139ac:	ab03      	add	r3, sp, #12
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	4622      	mov	r2, r4
 80139b2:	4b11      	ldr	r3, [pc, #68]	; (80139f8 <_svfiprintf_r+0x1ec>)
 80139b4:	a904      	add	r1, sp, #16
 80139b6:	4640      	mov	r0, r8
 80139b8:	f3af 8000 	nop.w
 80139bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80139c0:	4681      	mov	r9, r0
 80139c2:	d1d6      	bne.n	8013972 <_svfiprintf_r+0x166>
 80139c4:	89a3      	ldrh	r3, [r4, #12]
 80139c6:	065b      	lsls	r3, r3, #25
 80139c8:	f53f af35 	bmi.w	8013836 <_svfiprintf_r+0x2a>
 80139cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139ce:	b01d      	add	sp, #116	; 0x74
 80139d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d4:	ab03      	add	r3, sp, #12
 80139d6:	9300      	str	r3, [sp, #0]
 80139d8:	4622      	mov	r2, r4
 80139da:	4b07      	ldr	r3, [pc, #28]	; (80139f8 <_svfiprintf_r+0x1ec>)
 80139dc:	a904      	add	r1, sp, #16
 80139de:	4640      	mov	r0, r8
 80139e0:	f7ff f93e 	bl	8012c60 <_printf_i>
 80139e4:	e7ea      	b.n	80139bc <_svfiprintf_r+0x1b0>
 80139e6:	bf00      	nop
 80139e8:	08014018 	.word	0x08014018
 80139ec:	0801401e 	.word	0x0801401e
 80139f0:	08014022 	.word	0x08014022
 80139f4:	00000000 	.word	0x00000000
 80139f8:	08013757 	.word	0x08013757

080139fc <_raise_r>:
 80139fc:	291f      	cmp	r1, #31
 80139fe:	b538      	push	{r3, r4, r5, lr}
 8013a00:	4604      	mov	r4, r0
 8013a02:	460d      	mov	r5, r1
 8013a04:	d904      	bls.n	8013a10 <_raise_r+0x14>
 8013a06:	2316      	movs	r3, #22
 8013a08:	6003      	str	r3, [r0, #0]
 8013a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a0e:	bd38      	pop	{r3, r4, r5, pc}
 8013a10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013a12:	b112      	cbz	r2, 8013a1a <_raise_r+0x1e>
 8013a14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a18:	b94b      	cbnz	r3, 8013a2e <_raise_r+0x32>
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	f000 f830 	bl	8013a80 <_getpid_r>
 8013a20:	462a      	mov	r2, r5
 8013a22:	4601      	mov	r1, r0
 8013a24:	4620      	mov	r0, r4
 8013a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a2a:	f000 b817 	b.w	8013a5c <_kill_r>
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d00a      	beq.n	8013a48 <_raise_r+0x4c>
 8013a32:	1c59      	adds	r1, r3, #1
 8013a34:	d103      	bne.n	8013a3e <_raise_r+0x42>
 8013a36:	2316      	movs	r3, #22
 8013a38:	6003      	str	r3, [r0, #0]
 8013a3a:	2001      	movs	r0, #1
 8013a3c:	e7e7      	b.n	8013a0e <_raise_r+0x12>
 8013a3e:	2400      	movs	r4, #0
 8013a40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013a44:	4628      	mov	r0, r5
 8013a46:	4798      	blx	r3
 8013a48:	2000      	movs	r0, #0
 8013a4a:	e7e0      	b.n	8013a0e <_raise_r+0x12>

08013a4c <raise>:
 8013a4c:	4b02      	ldr	r3, [pc, #8]	; (8013a58 <raise+0xc>)
 8013a4e:	4601      	mov	r1, r0
 8013a50:	6818      	ldr	r0, [r3, #0]
 8013a52:	f7ff bfd3 	b.w	80139fc <_raise_r>
 8013a56:	bf00      	nop
 8013a58:	200001d0 	.word	0x200001d0

08013a5c <_kill_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4c07      	ldr	r4, [pc, #28]	; (8013a7c <_kill_r+0x20>)
 8013a60:	2300      	movs	r3, #0
 8013a62:	4605      	mov	r5, r0
 8013a64:	4608      	mov	r0, r1
 8013a66:	4611      	mov	r1, r2
 8013a68:	6023      	str	r3, [r4, #0]
 8013a6a:	f7ef feab 	bl	80037c4 <_kill>
 8013a6e:	1c43      	adds	r3, r0, #1
 8013a70:	d102      	bne.n	8013a78 <_kill_r+0x1c>
 8013a72:	6823      	ldr	r3, [r4, #0]
 8013a74:	b103      	cbz	r3, 8013a78 <_kill_r+0x1c>
 8013a76:	602b      	str	r3, [r5, #0]
 8013a78:	bd38      	pop	{r3, r4, r5, pc}
 8013a7a:	bf00      	nop
 8013a7c:	200104c8 	.word	0x200104c8

08013a80 <_getpid_r>:
 8013a80:	f7ef be98 	b.w	80037b4 <_getpid>

08013a84 <__sread>:
 8013a84:	b510      	push	{r4, lr}
 8013a86:	460c      	mov	r4, r1
 8013a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a8c:	f000 f8a8 	bl	8013be0 <_read_r>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	bfab      	itete	ge
 8013a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a96:	89a3      	ldrhlt	r3, [r4, #12]
 8013a98:	181b      	addge	r3, r3, r0
 8013a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a9e:	bfac      	ite	ge
 8013aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013aa2:	81a3      	strhlt	r3, [r4, #12]
 8013aa4:	bd10      	pop	{r4, pc}

08013aa6 <__swrite>:
 8013aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aaa:	461f      	mov	r7, r3
 8013aac:	898b      	ldrh	r3, [r1, #12]
 8013aae:	05db      	lsls	r3, r3, #23
 8013ab0:	4605      	mov	r5, r0
 8013ab2:	460c      	mov	r4, r1
 8013ab4:	4616      	mov	r6, r2
 8013ab6:	d505      	bpl.n	8013ac4 <__swrite+0x1e>
 8013ab8:	2302      	movs	r3, #2
 8013aba:	2200      	movs	r2, #0
 8013abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac0:	f000 f874 	bl	8013bac <_lseek_r>
 8013ac4:	89a3      	ldrh	r3, [r4, #12]
 8013ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ace:	81a3      	strh	r3, [r4, #12]
 8013ad0:	4632      	mov	r2, r6
 8013ad2:	463b      	mov	r3, r7
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ada:	f000 b823 	b.w	8013b24 <_write_r>

08013ade <__sseek>:
 8013ade:	b510      	push	{r4, lr}
 8013ae0:	460c      	mov	r4, r1
 8013ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ae6:	f000 f861 	bl	8013bac <_lseek_r>
 8013aea:	1c43      	adds	r3, r0, #1
 8013aec:	89a3      	ldrh	r3, [r4, #12]
 8013aee:	bf15      	itete	ne
 8013af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013afa:	81a3      	strheq	r3, [r4, #12]
 8013afc:	bf18      	it	ne
 8013afe:	81a3      	strhne	r3, [r4, #12]
 8013b00:	bd10      	pop	{r4, pc}

08013b02 <__sclose>:
 8013b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b06:	f000 b81f 	b.w	8013b48 <_close_r>

08013b0a <__ascii_wctomb>:
 8013b0a:	b149      	cbz	r1, 8013b20 <__ascii_wctomb+0x16>
 8013b0c:	2aff      	cmp	r2, #255	; 0xff
 8013b0e:	bf85      	ittet	hi
 8013b10:	238a      	movhi	r3, #138	; 0x8a
 8013b12:	6003      	strhi	r3, [r0, #0]
 8013b14:	700a      	strbls	r2, [r1, #0]
 8013b16:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013b1a:	bf98      	it	ls
 8013b1c:	2001      	movls	r0, #1
 8013b1e:	4770      	bx	lr
 8013b20:	4608      	mov	r0, r1
 8013b22:	4770      	bx	lr

08013b24 <_write_r>:
 8013b24:	b538      	push	{r3, r4, r5, lr}
 8013b26:	4c07      	ldr	r4, [pc, #28]	; (8013b44 <_write_r+0x20>)
 8013b28:	4605      	mov	r5, r0
 8013b2a:	4608      	mov	r0, r1
 8013b2c:	4611      	mov	r1, r2
 8013b2e:	2200      	movs	r2, #0
 8013b30:	6022      	str	r2, [r4, #0]
 8013b32:	461a      	mov	r2, r3
 8013b34:	f7ed fcd9 	bl	80014ea <_write>
 8013b38:	1c43      	adds	r3, r0, #1
 8013b3a:	d102      	bne.n	8013b42 <_write_r+0x1e>
 8013b3c:	6823      	ldr	r3, [r4, #0]
 8013b3e:	b103      	cbz	r3, 8013b42 <_write_r+0x1e>
 8013b40:	602b      	str	r3, [r5, #0]
 8013b42:	bd38      	pop	{r3, r4, r5, pc}
 8013b44:	200104c8 	.word	0x200104c8

08013b48 <_close_r>:
 8013b48:	b538      	push	{r3, r4, r5, lr}
 8013b4a:	4c06      	ldr	r4, [pc, #24]	; (8013b64 <_close_r+0x1c>)
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	4605      	mov	r5, r0
 8013b50:	4608      	mov	r0, r1
 8013b52:	6023      	str	r3, [r4, #0]
 8013b54:	f7ef fe6d 	bl	8003832 <_close>
 8013b58:	1c43      	adds	r3, r0, #1
 8013b5a:	d102      	bne.n	8013b62 <_close_r+0x1a>
 8013b5c:	6823      	ldr	r3, [r4, #0]
 8013b5e:	b103      	cbz	r3, 8013b62 <_close_r+0x1a>
 8013b60:	602b      	str	r3, [r5, #0]
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	200104c8 	.word	0x200104c8

08013b68 <_fstat_r>:
 8013b68:	b538      	push	{r3, r4, r5, lr}
 8013b6a:	4c07      	ldr	r4, [pc, #28]	; (8013b88 <_fstat_r+0x20>)
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	4605      	mov	r5, r0
 8013b70:	4608      	mov	r0, r1
 8013b72:	4611      	mov	r1, r2
 8013b74:	6023      	str	r3, [r4, #0]
 8013b76:	f7ef fe68 	bl	800384a <_fstat>
 8013b7a:	1c43      	adds	r3, r0, #1
 8013b7c:	d102      	bne.n	8013b84 <_fstat_r+0x1c>
 8013b7e:	6823      	ldr	r3, [r4, #0]
 8013b80:	b103      	cbz	r3, 8013b84 <_fstat_r+0x1c>
 8013b82:	602b      	str	r3, [r5, #0]
 8013b84:	bd38      	pop	{r3, r4, r5, pc}
 8013b86:	bf00      	nop
 8013b88:	200104c8 	.word	0x200104c8

08013b8c <_isatty_r>:
 8013b8c:	b538      	push	{r3, r4, r5, lr}
 8013b8e:	4c06      	ldr	r4, [pc, #24]	; (8013ba8 <_isatty_r+0x1c>)
 8013b90:	2300      	movs	r3, #0
 8013b92:	4605      	mov	r5, r0
 8013b94:	4608      	mov	r0, r1
 8013b96:	6023      	str	r3, [r4, #0]
 8013b98:	f7ef fe67 	bl	800386a <_isatty>
 8013b9c:	1c43      	adds	r3, r0, #1
 8013b9e:	d102      	bne.n	8013ba6 <_isatty_r+0x1a>
 8013ba0:	6823      	ldr	r3, [r4, #0]
 8013ba2:	b103      	cbz	r3, 8013ba6 <_isatty_r+0x1a>
 8013ba4:	602b      	str	r3, [r5, #0]
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	200104c8 	.word	0x200104c8

08013bac <_lseek_r>:
 8013bac:	b538      	push	{r3, r4, r5, lr}
 8013bae:	4c07      	ldr	r4, [pc, #28]	; (8013bcc <_lseek_r+0x20>)
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	4608      	mov	r0, r1
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	6022      	str	r2, [r4, #0]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	f7ef fe60 	bl	8003880 <_lseek>
 8013bc0:	1c43      	adds	r3, r0, #1
 8013bc2:	d102      	bne.n	8013bca <_lseek_r+0x1e>
 8013bc4:	6823      	ldr	r3, [r4, #0]
 8013bc6:	b103      	cbz	r3, 8013bca <_lseek_r+0x1e>
 8013bc8:	602b      	str	r3, [r5, #0]
 8013bca:	bd38      	pop	{r3, r4, r5, pc}
 8013bcc:	200104c8 	.word	0x200104c8

08013bd0 <_malloc_usable_size_r>:
 8013bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bd4:	1f18      	subs	r0, r3, #4
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	bfbc      	itt	lt
 8013bda:	580b      	ldrlt	r3, [r1, r0]
 8013bdc:	18c0      	addlt	r0, r0, r3
 8013bde:	4770      	bx	lr

08013be0 <_read_r>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	4c07      	ldr	r4, [pc, #28]	; (8013c00 <_read_r+0x20>)
 8013be4:	4605      	mov	r5, r0
 8013be6:	4608      	mov	r0, r1
 8013be8:	4611      	mov	r1, r2
 8013bea:	2200      	movs	r2, #0
 8013bec:	6022      	str	r2, [r4, #0]
 8013bee:	461a      	mov	r2, r3
 8013bf0:	f7ef fe02 	bl	80037f8 <_read>
 8013bf4:	1c43      	adds	r3, r0, #1
 8013bf6:	d102      	bne.n	8013bfe <_read_r+0x1e>
 8013bf8:	6823      	ldr	r3, [r4, #0]
 8013bfa:	b103      	cbz	r3, 8013bfe <_read_r+0x1e>
 8013bfc:	602b      	str	r3, [r5, #0]
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}
 8013c00:	200104c8 	.word	0x200104c8

08013c04 <_init>:
 8013c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c06:	bf00      	nop
 8013c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c0a:	bc08      	pop	{r3}
 8013c0c:	469e      	mov	lr, r3
 8013c0e:	4770      	bx	lr

08013c10 <_fini>:
 8013c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c12:	bf00      	nop
 8013c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c16:	bc08      	pop	{r3}
 8013c18:	469e      	mov	lr, r3
 8013c1a:	4770      	bx	lr
