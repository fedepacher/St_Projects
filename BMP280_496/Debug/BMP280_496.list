
BMP280_496.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011670  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08011820  08011820  00021820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a08  08011a08  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011a08  08011a08  00021a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a10  08011a10  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a10  08011a10  00021a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a14  08011a14  00021a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011a18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002248  200001f4  08011c0c  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000243c  08011c0c  0003243c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ff7f  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055f8  00000000  00000000  000601a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002590  00000000  00000000  000657a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002320  00000000  00000000  00067d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032946  00000000  00000000  0006a050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021157  00000000  00000000  0009c996  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125fd9  00000000  00000000  000bdaed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3ac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adb8  00000000  00000000  001e3b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011808 	.word	0x08011808

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08011808 	.word	0x08011808

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <i2c_read_reg>:


extern I2C_HandleTypeDef hi2c1;

uint8_t i2c_read_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t* data, uint16_t lenght)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	603a      	str	r2, [r7, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	460b      	mov	r3, r1
 8000f78:	71bb      	strb	r3, [r7, #6]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_buff[1];

	tx_buff[0] = internal_adr;
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, TIMEOUT);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	b299      	uxth	r1, r3
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <i2c_read_reg+0x54>)
 8000f94:	f004 f8e4 	bl	8005160 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, data, lenght, TIMEOUT);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b299      	uxth	r1, r3
 8000fa0:	88ba      	ldrh	r2, [r7, #4]
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <i2c_read_reg+0x54>)
 8000fae:	f004 f9cb 	bl	8005348 <HAL_I2C_Master_Receive>

	return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000578 	.word	0x20000578

08000fc0 <i2c_write_reg>:


void i2c_write_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	71bb      	strb	r3, [r7, #6]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, sizeof(tx_buff), TIMEOUT);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <i2c_write_reg+0x38>)
 8000fec:	f004 f8b8 	bl	8005160 <HAL_I2C_Master_Transmit>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000578 	.word	0x20000578

08000ffc <BMP280_get_calib_values>:

void BMP280_get_calib_values(bmp280_dev *dev)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t temp[BMP280_CALIB_DATA_SIZE], starting_address=0x88;
 8001004:	2388      	movs	r3, #136	; 0x88
 8001006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	i2c_read_reg(BMP280_dev_address, starting_address, temp, BMP280_CALIB_DATA_SIZE);
 800100a:	f107 020c 	add.w	r2, r7, #12
 800100e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001012:	2318      	movs	r3, #24
 8001014:	20ee      	movs	r0, #238	; 0xee
 8001016:	f7ff ffa7 	bl	8000f68 <i2c_read_reg>

	dev->calib_param.dig_t1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 800101a:	7b7b      	ldrb	r3, [r7, #13]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	7b3b      	ldrb	r3, [r7, #12]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29a      	uxth	r2, r3
	dev->calib_param.dig_t1 =
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	801a      	strh	r2, [r3, #0]
	dev->calib_param.dig_t2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t2 =
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	805a      	strh	r2, [r3, #2]
	dev->calib_param.dig_t3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001040:	7c7b      	ldrb	r3, [r7, #17]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7c3b      	ldrb	r3, [r7, #16]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t3 =
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	809a      	strh	r2, [r3, #4]
	dev->calib_param.dig_p1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001052:	7cfb      	ldrb	r3, [r7, #19]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7cbb      	ldrb	r3, [r7, #18]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29a      	uxth	r2, r3
	dev->calib_param.dig_p1 =
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	80da      	strh	r2, [r3, #6]
	dev->calib_param.dig_p2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001066:	7d7b      	ldrb	r3, [r7, #21]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	7d3b      	ldrb	r3, [r7, #20]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p2 =
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	811a      	strh	r2, [r3, #8]
	dev->calib_param.dig_p3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7dbb      	ldrb	r3, [r7, #22]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p3 =
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	815a      	strh	r2, [r3, #10]
	dev->calib_param.dig_p4 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 800108a:	7e7b      	ldrb	r3, [r7, #25]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	7e3b      	ldrb	r3, [r7, #24]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p4 =
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	819a      	strh	r2, [r3, #12]
	dev->calib_param.dig_p5 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800109c:	7efb      	ldrb	r3, [r7, #27]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7ebb      	ldrb	r3, [r7, #26]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p5 =
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	81da      	strh	r2, [r3, #14]
	dev->calib_param.dig_p6 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 80010ae:	7f7b      	ldrb	r3, [r7, #29]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	7f3b      	ldrb	r3, [r7, #28]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p6 =
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	821a      	strh	r2, [r3, #16]
	dev->calib_param.dig_p7 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7fbb      	ldrb	r3, [r7, #30]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p7 =
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	825a      	strh	r2, [r3, #18]
	dev->calib_param.dig_p8 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80010d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p8 =
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	829a      	strh	r2, [r3, #20]
	dev->calib_param.dig_p9 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80010e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p9 =
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	82da      	strh	r2, [r3, #22]

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <BMP280_init>:

void BMP280_init(bmp280_dev *dev)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	uint8_t register_F4 = 0b01010111;
 800110e:	2357      	movs	r3, #87	; 0x57
 8001110:	73fb      	strb	r3, [r7, #15]
	uint8_t register_F5 = 0b10010000;
 8001112:	2390      	movs	r3, #144	; 0x90
 8001114:	73bb      	strb	r3, [r7, #14]

	i2c_write_reg(BMP280_dev_address, 0xF4, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	461a      	mov	r2, r3
 800111a:	21f4      	movs	r1, #244	; 0xf4
 800111c:	20ee      	movs	r0, #238	; 0xee
 800111e:	f7ff ff4f 	bl	8000fc0 <i2c_write_reg>
	i2c_write_reg(BMP280_dev_address, 0xF5, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	461a      	mov	r2, r3
 8001126:	21f5      	movs	r1, #245	; 0xf5
 8001128:	20ee      	movs	r0, #238	; 0xee
 800112a:	f7ff ff49 	bl	8000fc0 <i2c_write_reg>

	BMP280_get_calib_values(dev);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff64 	bl	8000ffc <BMP280_get_calib_values>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0000      	movs	r0, r0
	...

08001140 <BMP280_calc_values>:

void BMP280_calc_values(bmp280_dev *dev)
{
 8001140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001144:	b090      	sub	sp, #64	; 0x40
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	uint8_t rx_buff[6], starting_address=0xF7;
 800114a:	23f7      	movs	r3, #247	; 0xf7
 800114c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t * data = NULL;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38

	do
	{
		i2c_read_reg(BMP280_dev_address, 0xF3, data, 1);
 8001154:	2301      	movs	r3, #1
 8001156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001158:	21f3      	movs	r1, #243	; 0xf3
 800115a:	20ee      	movs	r0, #238	; 0xee
 800115c:	f7ff ff04 	bl	8000f68 <i2c_read_reg>
	} while(((*(data)&0b00001000)==8)||((*(data)&0b00000001)==1));
 8001160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f3      	bne.n	8001154 <BMP280_calc_values+0x14>
 800116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ed      	bne.n	8001154 <BMP280_calc_values+0x14>


	i2c_read_reg(BMP280_dev_address, starting_address, rx_buff, sizeof(rx_buff));
 8001178:	f107 0220 	add.w	r2, r7, #32
 800117c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001180:	2306      	movs	r3, #6
 8001182:	20ee      	movs	r0, #238	; 0xee
 8001184:	f7ff fef0 	bl	8000f68 <i2c_read_reg>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 8001188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800118c:	61fb      	str	r3, [r7, #28]
	temp[1]=rx_buff[4];
 800118e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001192:	61bb      	str	r3, [r7, #24]
	temp[0]=rx_buff[5];
 8001194:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001198:	617b      	str	r3, [r7, #20]
	dev->raw_data.temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	031a      	lsls	r2, r3, #12
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	441a      	add	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	61da      	str	r2, [r3, #28]

	temp[2]=rx_buff[0];
 80011b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011b4:	61fb      	str	r3, [r7, #28]
	temp[1]=rx_buff[1];
 80011b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80011ba:	61bb      	str	r3, [r7, #24]
	temp[0]=rx_buff[2];
 80011bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011c0:	617b      	str	r3, [r7, #20]
	dev->raw_data.pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	031a      	lsls	r2, r3, #12
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	441a      	add	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	441a      	add	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	621a      	str	r2, [r3, #32]

	double var1, var2;
	var1=(((double)dev->raw_data.temperature_raw)/16384.0-((double)dev->calib_param.dig_t1)/1024.0)*((double)dev->calib_param.dig_t2);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9b2 	bl	8000544 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4bd0      	ldr	r3, [pc, #832]	; (8001528 <BMP280_calc_values+0x3e8>)
 80011e6:	f7ff fb41 	bl	800086c <__aeabi_ddiv>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4625      	mov	r5, r4
 80011f0:	461c      	mov	r4, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f994 	bl	8000524 <__aeabi_ui2d>
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4bca      	ldr	r3, [pc, #808]	; (800152c <BMP280_calc_values+0x3ec>)
 8001202:	f7ff fb33 	bl	800086c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff f84b 	bl	80002a8 <__aeabi_dsub>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	4625      	mov	r5, r4
 8001218:	461c      	mov	r4, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f98f 	bl	8000544 <__aeabi_i2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff f9f3 	bl	8000618 <__aeabi_dmul>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=((((double)dev->raw_data.temperature_raw)/131072.0-((double)dev->calib_param.dig_t1)/8192.0)*(((double)dev->raw_data.temperature_raw)/131072.0-((double)dev->calib_param.dig_t1)/8192.0))*((double)dev->calib_param.dig_t3);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f980 	bl	8000544 <__aeabi_i2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800124c:	f7ff fb0e 	bl	800086c <__aeabi_ddiv>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f961 	bl	8000524 <__aeabi_ui2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4bb2      	ldr	r3, [pc, #712]	; (8001530 <BMP280_calc_values+0x3f0>)
 8001268:	f7ff fb00 	bl	800086c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f818 	bl	80002a8 <__aeabi_dsub>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4625      	mov	r5, r4
 800127e:	461c      	mov	r4, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f95d 	bl	8000544 <__aeabi_i2d>
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001292:	f7ff faeb 	bl	800086c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4690      	mov	r8, r2
 800129c:	4699      	mov	r9, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f93e 	bl	8000524 <__aeabi_ui2d>
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4ba0      	ldr	r3, [pc, #640]	; (8001530 <BMP280_calc_values+0x3f0>)
 80012ae:	f7ff fadd 	bl	800086c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4640      	mov	r0, r8
 80012b8:	4649      	mov	r1, r9
 80012ba:	f7fe fff5 	bl	80002a8 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7ff f9a7 	bl	8000618 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4625      	mov	r5, r4
 80012d0:	461c      	mov	r4, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f933 	bl	8000544 <__aeabi_i2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4620      	mov	r0, r4
 80012e4:	4629      	mov	r1, r5
 80012e6:	f7ff f997 	bl	8000618 <__aeabi_dmul>
 80012ea:	4603      	mov	r3, r0
 80012ec:	460c      	mov	r4, r1
 80012ee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	dev->calib_param.t_fine = (int32_t)(var1+var2);
 80012f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012fa:	f7fe ffd7 	bl	80002ac <__adddf3>
 80012fe:	4603      	mov	r3, r0
 8001300:	460c      	mov	r4, r1
 8001302:	4618      	mov	r0, r3
 8001304:	4621      	mov	r1, r4
 8001306:	f7ff fc37 	bl	8000b78 <__aeabi_d2iz>
 800130a:	4602      	mov	r2, r0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
volatile	float T = (var1+var2)/5120.0;
 8001310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001314:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001318:	f7fe ffc8 	bl	80002ac <__adddf3>
 800131c:	4603      	mov	r3, r0
 800131e:	460c      	mov	r4, r1
 8001320:	4618      	mov	r0, r3
 8001322:	4621      	mov	r1, r4
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b82      	ldr	r3, [pc, #520]	; (8001534 <BMP280_calc_values+0x3f4>)
 800132a:	f7ff fa9f 	bl	800086c <__aeabi_ddiv>
 800132e:	4603      	mov	r3, r0
 8001330:	460c      	mov	r4, r1
 8001332:	4618      	mov	r0, r3
 8001334:	4621      	mov	r1, r4
 8001336:	f7ff fc47 	bl	8000bc8 <__aeabi_d2f>
 800133a:	4603      	mov	r3, r0
 800133c:	613b      	str	r3, [r7, #16]

	var1=((double)dev->calib_param.t_fine/2.0)-64000.0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8fe 	bl	8000544 <__aeabi_i2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001350:	f7ff fa8c 	bl	800086c <__aeabi_ddiv>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b75      	ldr	r3, [pc, #468]	; (8001538 <BMP280_calc_values+0x3f8>)
 8001362:	f7fe ffa1 	bl	80002a8 <__aeabi_dsub>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=var1*var1*((double)dev->calib_param.dig_p6)/32768.0;
 800136e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001372:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001376:	f7ff f94f 	bl	8000618 <__aeabi_dmul>
 800137a:	4603      	mov	r3, r0
 800137c:	460c      	mov	r4, r1
 800137e:	4625      	mov	r5, r4
 8001380:	461c      	mov	r4, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8db 	bl	8000544 <__aeabi_i2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7ff f93f 	bl	8000618 <__aeabi_dmul>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <BMP280_calc_values+0x3fc>)
 80013a8:	f7ff fa60 	bl	800086c <__aeabi_ddiv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2=var2+var1*((double)dev->calib_param.dig_p5)*2.0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8c2 	bl	8000544 <__aeabi_i2d>
 80013c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013c4:	f7ff f928 	bl	8000618 <__aeabi_dmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	4618      	mov	r0, r3
 80013ce:	4621      	mov	r1, r4
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	f7fe ff6a 	bl	80002ac <__adddf3>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013e4:	f7fe ff62 	bl	80002ac <__adddf3>
 80013e8:	4603      	mov	r3, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2=(var2/4.0)+(((double)dev->calib_param.dig_p4)*65536.0);
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b52      	ldr	r3, [pc, #328]	; (8001540 <BMP280_calc_values+0x400>)
 80013f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013fa:	f7ff fa37 	bl	800086c <__aeabi_ddiv>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4625      	mov	r5, r4
 8001404:	461c      	mov	r4, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f899 	bl	8000544 <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <BMP280_calc_values+0x404>)
 8001418:	f7ff f8fe 	bl	8000618 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4620      	mov	r0, r4
 8001422:	4629      	mov	r1, r5
 8001424:	f7fe ff42 	bl	80002ac <__adddf3>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var1=(((double)dev->calib_param.dig_p3)*var1*var1/524288.0+((double)dev->calib_param.dig_p2)*var1)/524288.0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f884 	bl	8000544 <__aeabi_i2d>
 800143c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001440:	f7ff f8ea 	bl	8000618 <__aeabi_dmul>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	4618      	mov	r0, r3
 800144a:	4621      	mov	r1, r4
 800144c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001450:	f7ff f8e2 	bl	8000618 <__aeabi_dmul>
 8001454:	4603      	mov	r3, r0
 8001456:	460c      	mov	r4, r1
 8001458:	4618      	mov	r0, r3
 800145a:	4621      	mov	r1, r4
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <BMP280_calc_values+0x408>)
 8001462:	f7ff fa03 	bl	800086c <__aeabi_ddiv>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	4625      	mov	r5, r4
 800146c:	461c      	mov	r4, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f865 	bl	8000544 <__aeabi_i2d>
 800147a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800147e:	f7ff f8cb 	bl	8000618 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4620      	mov	r0, r4
 8001488:	4629      	mov	r1, r5
 800148a:	f7fe ff0f 	bl	80002ac <__adddf3>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <BMP280_calc_values+0x408>)
 800149c:	f7ff f9e6 	bl	800086c <__aeabi_ddiv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var1=(1.0+var1/32768.0)*((double)dev->calib_param.dig_p1);
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <BMP280_calc_values+0x3fc>)
 80014ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014b2:	f7ff f9db 	bl	800086c <__aeabi_ddiv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	4618      	mov	r0, r3
 80014bc:	4621      	mov	r1, r4
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <BMP280_calc_values+0x40c>)
 80014c4:	f7fe fef2 	bl	80002ac <__adddf3>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	88db      	ldrh	r3, [r3, #6]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f825 	bl	8000524 <__aeabi_ui2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4620      	mov	r0, r4
 80014e0:	4629      	mov	r1, r5
 80014e2:	f7ff f899 	bl	8000618 <__aeabi_dmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
volatile	double p=1048576.0-(double)dev->raw_data.pressure_raw;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f816 	bl	8000524 <__aeabi_ui2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	461a      	mov	r2, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	f04f 0000 	mov.w	r0, #0
 8001504:	4912      	ldr	r1, [pc, #72]	; (8001550 <BMP280_calc_values+0x410>)
 8001506:	f7fe fecf 	bl	80002a8 <__aeabi_dsub>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p=(p-(var2/4096.0))*6250.0/var1;
 8001512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <BMP280_calc_values+0x414>)
 800151c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001520:	f7ff f9a4 	bl	800086c <__aeabi_ddiv>
 8001524:	e018      	b.n	8001558 <BMP280_calc_values+0x418>
 8001526:	bf00      	nop
 8001528:	40d00000 	.word	0x40d00000
 800152c:	40900000 	.word	0x40900000
 8001530:	40c00000 	.word	0x40c00000
 8001534:	40b40000 	.word	0x40b40000
 8001538:	40ef4000 	.word	0x40ef4000
 800153c:	40e00000 	.word	0x40e00000
 8001540:	40100000 	.word	0x40100000
 8001544:	40f00000 	.word	0x40f00000
 8001548:	41200000 	.word	0x41200000
 800154c:	3ff00000 	.word	0x3ff00000
 8001550:	41300000 	.word	0x41300000
 8001554:	40b00000 	.word	0x40b00000
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7fe fea2 	bl	80002a8 <__aeabi_dsub>
 8001564:	4603      	mov	r3, r0
 8001566:	460c      	mov	r4, r1
 8001568:	4618      	mov	r0, r3
 800156a:	4621      	mov	r1, r4
 800156c:	a358      	add	r3, pc, #352	; (adr r3, 80016d0 <BMP280_calc_values+0x590>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f851 	bl	8000618 <__aeabi_dmul>
 8001576:	4603      	mov	r3, r0
 8001578:	460c      	mov	r4, r1
 800157a:	4618      	mov	r0, r3
 800157c:	4621      	mov	r1, r4
 800157e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001582:	f7ff f973 	bl	800086c <__aeabi_ddiv>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var1=((double)dev->calib_param.dig_p9)*p*p/2147483648.0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd5 	bl	8000544 <__aeabi_i2d>
 800159a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800159e:	461a      	mov	r2, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	f7ff f839 	bl	8000618 <__aeabi_dmul>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	4618      	mov	r0, r3
 80015ac:	4621      	mov	r1, r4
 80015ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4623      	mov	r3, r4
 80015b6:	f7ff f82f 	bl	8000618 <__aeabi_dmul>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4618      	mov	r0, r3
 80015c0:	4621      	mov	r1, r4
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <BMP280_calc_values+0x578>)
 80015c8:	f7ff f950 	bl	800086c <__aeabi_ddiv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=p*((double)dev->calib_param.dig_p8)/32768.0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffb2 	bl	8000544 <__aeabi_i2d>
 80015e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	f7ff f816 	bl	8000618 <__aeabi_dmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4618      	mov	r0, r3
 80015f2:	4621      	mov	r1, r4
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <BMP280_calc_values+0x57c>)
 80015fa:	f7ff f937 	bl	800086c <__aeabi_ddiv>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	p=p+(var1+var2+((double)dev->calib_param.dig_p7))/16.0;
 8001606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800160a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800160e:	f7fe fe4d 	bl	80002ac <__adddf3>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	4625      	mov	r5, r4
 8001618:	461c      	mov	r4, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff8f 	bl	8000544 <__aeabi_i2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7fe fe3d 	bl	80002ac <__adddf3>
 8001632:	4603      	mov	r3, r0
 8001634:	460c      	mov	r4, r1
 8001636:	4618      	mov	r0, r3
 8001638:	4621      	mov	r1, r4
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <BMP280_calc_values+0x580>)
 8001640:	f7ff f914 	bl	800086c <__aeabi_ddiv>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	4618      	mov	r0, r3
 800164a:	4621      	mov	r1, r4
 800164c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	f7fe fe2a 	bl	80002ac <__adddf3>
 8001658:	4603      	mov	r3, r0
 800165a:	460c      	mov	r4, r1
 800165c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	dev->data.temperature=T;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
	dev->data.pressure=p;
 8001666:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800166a:	4618      	mov	r0, r3
 800166c:	4621      	mov	r1, r4
 800166e:	f7ff faab 	bl	8000bc8 <__aeabi_d2f>
 8001672:	4602      	mov	r2, r0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
	dev->data.altitude=44330.0f*(1-powf(dev->data.pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800167e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80016c4 <BMP280_calc_values+0x584>
 8001682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001686:	eddf 0a10 	vldr	s1, [pc, #64]	; 80016c8 <BMP280_calc_values+0x588>
 800168a:	eeb0 0a66 	vmov.f32	s0, s13
 800168e:	f00e fcd3 	bl	8010038 <powf>
 8001692:	eeb0 7a40 	vmov.f32	s14, s0
 8001696:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800169a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800169e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016cc <BMP280_calc_values+0x58c>
 80016a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80016ac:	bf00      	nop
 80016ae:	3740      	adds	r7, #64	; 0x40
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016b6:	bf00      	nop
 80016b8:	41e00000 	.word	0x41e00000
 80016bc:	40e00000 	.word	0x40e00000
 80016c0:	40300000 	.word	0x40300000
 80016c4:	47c5e680 	.word	0x47c5e680
 80016c8:	3e42dcae 	.word	0x3e42dcae
 80016cc:	472d2a00 	.word	0x472d2a00
 80016d0:	00000000 	.word	0x00000000
 80016d4:	40b86a00 	.word	0x40b86a00

080016d8 <reverse>:
	else
		return 0;
}

// reverses a string 'str' of length 'len'
void reverse(char *str, int len) {
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80016ec:	e018      	b.n	8001720 <reverse+0x48>
		temp = str[i];
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	441a      	add	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	440b      	add	r3, r1
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
		i++;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
		j--;
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	3b01      	subs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
	while (i < j) {
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbe2      	blt.n	80016ee <reverse+0x16>
	}
}
 8001728:	bf00      	nop
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <intToStr>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
	while (x) {
 8001744:	e01d      	b.n	8001782 <intToStr+0x4e>
		str[i++] = (x % 10) + '0';
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <intToStr+0x8c>)
 800174a:	fb83 1302 	smull	r1, r3, r3, r2
 800174e:	1099      	asrs	r1, r3, #2
 8001750:	17d3      	asrs	r3, r2, #31
 8001752:	1ac9      	subs	r1, r1, r3
 8001754:	460b      	mov	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	1ad1      	subs	r1, r2, r3
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	1c59      	adds	r1, r3, #1
 8001764:	6179      	str	r1, [r7, #20]
 8001766:	4619      	mov	r1, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	440b      	add	r3, r1
 800176c:	3230      	adds	r2, #48	; 0x30
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <intToStr+0x8c>)
 8001776:	fb82 1203 	smull	r1, r2, r2, r3
 800177a:	1092      	asrs	r2, r2, #2
 800177c:	17db      	asrs	r3, r3, #31
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	60fb      	str	r3, [r7, #12]
	while (x) {
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1de      	bne.n	8001746 <intToStr+0x12>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 8001788:	e007      	b.n	800179a <intToStr+0x66>
		str[i++] = '0';
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	617a      	str	r2, [r7, #20]
 8001790:	461a      	mov	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	4413      	add	r3, r2
 8001796:	2230      	movs	r2, #48	; 0x30
 8001798:	701a      	strb	r2, [r3, #0]
	while (i < d)
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbf3      	blt.n	800178a <intToStr+0x56>

	reverse(str, i);
 80017a2:	6979      	ldr	r1, [r7, #20]
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f7ff ff97 	bl	80016d8 <reverse>
	str[i] = '\0';
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	4413      	add	r3, r2
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	return i;
 80017b4:	697b      	ldr	r3, [r7, #20]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	66666667 	.word	0x66666667
 80017c4:	00000000 	.word	0x00000000

080017c8 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint) {
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b090      	sub	sp, #64	; 0x40
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80017d2:	60b8      	str	r0, [r7, #8]
 80017d4:	6079      	str	r1, [r7, #4]
	unsigned char minus_flag = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (n < 0) {
 80017dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	d508      	bpl.n	80017fc <ftoa+0x34>
		minus_flag = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		n = -n;
 80017f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f4:	eef1 7a67 	vneg.f32	s15, s15
 80017f8:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Extract integer part
	int ipart = (int) n;
 80017fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001804:	ee17 3a90 	vmov	r3, s15
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38

	// Extract floating part
	float fpart = n - (float) ipart;
 800180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	ed97 7a03 	vldr	s14, [r7, #12]
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001826:	f7ff ff85 	bl	8001734 <intToStr>
 800182a:	6338      	str	r0, [r7, #48]	; 0x30

	// check for display option after point
	if (afterpoint != 0) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d030      	beq.n	8001894 <ftoa+0xcc>
		res[i] = '.';  // add dot
 8001832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	222e      	movs	r2, #46	; 0x2e
 800183a:	701a      	strb	r2, [r3, #0]

		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 800183c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800183e:	f7fe fe93 	bl	8000568 <__aeabi_f2d>
 8001842:	4604      	mov	r4, r0
 8001844:	460d      	mov	r5, r1
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe fe7c 	bl	8000544 <__aeabi_i2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	ec43 2b11 	vmov	d1, r2, r3
 8001854:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001950 <ftoa+0x188>
 8001858:	f00e fa7e 	bl	800fd58 <pow>
 800185c:	ec53 2b10 	vmov	r2, r3, d0
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fed8 	bl	8000618 <__aeabi_dmul>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	4618      	mov	r0, r3
 800186e:	4621      	mov	r1, r4
 8001870:	f7ff f9aa 	bl	8000bc8 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34

		intToStr((int) fpart, res + i + 1, afterpoint);
 8001878:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800187c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001882:	3301      	adds	r3, #1
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4413      	add	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4619      	mov	r1, r3
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7ff ff50 	bl	8001734 <intToStr>
	}

	char string[30];
	if (minus_flag == 1) {
 8001894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001898:	2b01      	cmp	r3, #1
 800189a:	d132      	bne.n	8001902 <ftoa+0x13a>
		memset(string, 0, 30);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	221e      	movs	r2, #30
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00d fb63 	bl	800ef70 <memset>
		string[0] = '-';
 80018aa:	232d      	movs	r3, #45	; 0x2d
 80018ac:	743b      	strb	r3, [r7, #16]
		if (n < 1.0f) {
 80018ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d509      	bpl.n	80018d4 <ftoa+0x10c>
			string[1] = '0';
 80018c0:	2330      	movs	r3, #48	; 0x30
 80018c2:	747b      	strb	r3, [r7, #17]
			strcpy(&string[2], res);
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	3302      	adds	r3, #2
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00d fb6f 	bl	800efb0 <strcpy>
 80018d2:	e006      	b.n	80018e2 <ftoa+0x11a>
		} else
			strcpy(&string[1], res);
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	3301      	adds	r3, #1
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	4618      	mov	r0, r3
 80018de:	f00d fb67 	bl	800efb0 <strcpy>

		memset(res, 0, strlen(res));
 80018e2:	68b8      	ldr	r0, [r7, #8]
 80018e4:	f7fe fc84 	bl	80001f0 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	2100      	movs	r1, #0
 80018ee:	68b8      	ldr	r0, [r7, #8]
 80018f0:	f00d fb3e 	bl	800ef70 <memset>
		strcpy(res, string);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	68b8      	ldr	r0, [r7, #8]
 80018fc:	f00d fb58 	bl	800efb0 <strcpy>
		string[0] = '0';
		strcpy(&string[1], res);
		memset(res, 0, strlen(res));
		strcpy(res, string);
	}
}
 8001900:	e021      	b.n	8001946 <ftoa+0x17e>
	} else if (n < 1.0f) {
 8001902:	edd7 7a03 	vldr	s15, [r7, #12]
 8001906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	d400      	bmi.n	8001916 <ftoa+0x14e>
}
 8001914:	e017      	b.n	8001946 <ftoa+0x17e>
		string[0] = '0';
 8001916:	2330      	movs	r3, #48	; 0x30
 8001918:	743b      	strb	r3, [r7, #16]
		strcpy(&string[1], res);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	3301      	adds	r3, #1
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	4618      	mov	r0, r3
 8001924:	f00d fb44 	bl	800efb0 <strcpy>
		memset(res, 0, strlen(res));
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f7fe fc61 	bl	80001f0 <strlen>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	68b8      	ldr	r0, [r7, #8]
 8001936:	f00d fb1b 	bl	800ef70 <memset>
		strcpy(res, string);
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	68b8      	ldr	r0, [r7, #8]
 8001942:	f00d fb35 	bl	800efb0 <strcpy>
}
 8001946:	bf00      	nop
 8001948:	3740      	adds	r7, #64	; 0x40
 800194a:	46bd      	mov	sp, r7
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	bf00      	nop
 8001950:	00000000 	.word	0x00000000
 8001954:	40240000 	.word	0x40240000

08001958 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001960:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001964:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001970:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001974:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001978:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001980:	e000      	b.n	8001984 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001982:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001984:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f9      	beq.n	8001982 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800198e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const uint8_t TOPIC_STRING1[] = "test/rgb";
const uint8_t END_STRING[] = "\r\n";

int _write(int file, char *ptr, int len) {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
	int i = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e009      	b.n	80019d0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffc7 	bl	8001958 <ITM_SendChar>
	for (i = 0; i < len; i++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf1      	blt.n	80019bc <_write+0x16>
	return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	ed2d 8b02 	vpush	{d8}
 80019ea:	b0c0      	sub	sp, #256	; 0x100
 80019ec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019ee:	f001 fef2 	bl	80037d6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019f2:	f000 f925 	bl	8001c40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019f6:	f000 feb9 	bl	800276c <MX_GPIO_Init>
	MX_ADC1_Init();
 80019fa:	f000 f9d3 	bl	8001da4 <MX_ADC1_Init>
	MX_ADC2_Init();
 80019fe:	f000 fa4b 	bl	8001e98 <MX_ADC2_Init>
	MX_ADC3_Init();
 8001a02:	f000 faaf 	bl	8001f64 <MX_ADC3_Init>
	MX_DCMI_Init();
 8001a06:	f000 fb13 	bl	8002030 <MX_DCMI_Init>
	MX_DFSDM1_Init();
 8001a0a:	f000 fb45 	bl	8002098 <MX_DFSDM1_Init>
	MX_FMC_Init();
 8001a0e:	f000 fdff 	bl	8002610 <MX_FMC_Init>
	MX_I2C1_Init();
 8001a12:	f000 fbad 	bl	8002170 <MX_I2C1_Init>
	MX_I2C2_Init();
 8001a16:	f000 fbeb 	bl	80021f0 <MX_I2C2_Init>
	MX_LPUART1_UART_Init();
 8001a1a:	f000 fc29 	bl	8002270 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 8001a1e:	f000 fc55 	bl	80022cc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001a22:	f000 fc83 	bl	800232c <MX_USART2_UART_Init>
	MX_QUADSPI_Init();
 8001a26:	f000 fcb1 	bl	800238c <MX_QUADSPI_Init>
	MX_SAI1_Init();
 8001a2a:	f000 fcdb 	bl	80023e4 <MX_SAI1_Init>
	MX_SDMMC1_SD_Init();
 8001a2e:	f000 fd81 	bl	8002534 <MX_SDMMC1_SD_Init>
	MX_SPI2_Init();
 8001a32:	f000 fdaf 	bl	8002594 <MX_SPI2_Init>
	MX_USB_DEVICE_Init();
 8001a36:	f00c fc77 	bl	800e328 <MX_USB_DEVICE_Init>
	 */

	bmp280_dev dev;

	uint8_t string[200];
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP280_dev_address, 2, 100) == HAL_OK) {
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	21ee      	movs	r1, #238	; 0xee
 8001a40:	4875      	ldr	r0, [pc, #468]	; (8001c18 <main+0x234>)
 8001a42:	f003 fd77 	bl	8005534 <HAL_I2C_IsDeviceReady>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <main+0x84>
		BMP280_init(&dev);
 8001a4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fb58 	bl	8001106 <BMP280_init>
		BMP280_calc_values(&dev);
 8001a56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb70 	bl	8001140 <BMP280_calc_values>
		dev.data.init_height = dev.data.altitude;
 8001a60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		// Getting the compensated temperature as floating point value
		rslt = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp);
		printf("UT: %ld, T32: %ld \r\n", ucomp_data.uncomp_temp, temp32);
*/

		BMP280_calc_values(&dev);
 8001a68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fb67 	bl	8001140 <BMP280_calc_values>

		memset(&string, 0, strlen((char*)string));
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fbbb 	bl	80001f0 <strlen>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00d fa75 	bl	800ef70 <memset>

		strcat((char*)string, "Temperatura: ");
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fbb1 	bl	80001f0 <strlen>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	4a61      	ldr	r2, [pc, #388]	; (8001c1c <main+0x238>)
 8001a98:	461c      	mov	r4, r3
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a9e:	6020      	str	r0, [r4, #0]
 8001aa0:	6061      	str	r1, [r4, #4]
 8001aa2:	60a2      	str	r2, [r4, #8]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	81a3      	strh	r3, [r4, #12]
		ftoa(dev.data.temperature, (char*)&string[strlen((char*)string)], 3);
 8001aa8:	ed97 8a3c 	vldr	s16, [r7, #240]	; 0xf0
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fb9e 	bl	80001f0 <strlen>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	2103      	movs	r1, #3
 8001abc:	4618      	mov	r0, r3
 8001abe:	eeb0 0a48 	vmov.f32	s0, s16
 8001ac2:	f7ff fe81 	bl	80017c8 <ftoa>
		strcat((char*)string, " C\n");
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fb91 	bl	80001f0 <strlen>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a52      	ldr	r2, [pc, #328]	; (8001c20 <main+0x23c>)
 8001ad8:	6810      	ldr	r0, [r2, #0]
 8001ada:	6018      	str	r0, [r3, #0]

		strcat((char*)string, "Presion: ");
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fb86 	bl	80001f0 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	494d      	ldr	r1, [pc, #308]	; (8001c24 <main+0x240>)
 8001aee:	461a      	mov	r2, r3
 8001af0:	460b      	mov	r3, r1
 8001af2:	cb03      	ldmia	r3!, {r0, r1}
 8001af4:	6010      	str	r0, [r2, #0]
 8001af6:	6051      	str	r1, [r2, #4]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	8113      	strh	r3, [r2, #8]
		ftoa(dev.data.pressure, (char*)&string[strlen((char*)string)], 3);
 8001afc:	ed97 8a3d 	vldr	s16, [r7, #244]	; 0xf4
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fb74 	bl	80001f0 <strlen>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4618      	mov	r0, r3
 8001b12:	eeb0 0a48 	vmov.f32	s0, s16
 8001b16:	f7ff fe57 	bl	80017c8 <ftoa>
		strcat((char*)string, " Pa\n");
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fb67 	bl	80001f0 <strlen>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a3f      	ldr	r2, [pc, #252]	; (8001c28 <main+0x244>)
 8001b2c:	6810      	ldr	r0, [r2, #0]
 8001b2e:	6018      	str	r0, [r3, #0]
 8001b30:	7912      	ldrb	r2, [r2, #4]
 8001b32:	711a      	strb	r2, [r3, #4]

		strcat((char*)string, "Altitud: ");
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fb5a 	bl	80001f0 <strlen>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	4939      	ldr	r1, [pc, #228]	; (8001c2c <main+0x248>)
 8001b46:	461a      	mov	r2, r3
 8001b48:	460b      	mov	r3, r1
 8001b4a:	cb03      	ldmia	r3!, {r0, r1}
 8001b4c:	6010      	str	r0, [r2, #0]
 8001b4e:	6051      	str	r1, [r2, #4]
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	8113      	strh	r3, [r2, #8]
		ftoa(dev.data.altitude, (char*)&string[strlen((char*)string)], 3);
 8001b54:	ed97 8a3e 	vldr	s16, [r7, #248]	; 0xf8
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fb48 	bl	80001f0 <strlen>
 8001b60:	4602      	mov	r2, r0
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4413      	add	r3, r2
 8001b66:	2103      	movs	r1, #3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8001b6e:	f7ff fe2b 	bl	80017c8 <ftoa>
		strcat((char*)string, " m\n");
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fb3b 	bl	80001f0 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <main+0x24c>)
 8001b84:	6810      	ldr	r0, [r2, #0]
 8001b86:	6018      	str	r0, [r3, #0]

		strcat((char*)string, "Altitud relativa: ");
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fb30 	bl	80001f0 <strlen>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <main+0x250>)
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba0:	6028      	str	r0, [r5, #0]
 8001ba2:	6069      	str	r1, [r5, #4]
 8001ba4:	60aa      	str	r2, [r5, #8]
 8001ba6:	60eb      	str	r3, [r5, #12]
 8001ba8:	8823      	ldrh	r3, [r4, #0]
 8001baa:	78a2      	ldrb	r2, [r4, #2]
 8001bac:	822b      	strh	r3, [r5, #16]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	74ab      	strb	r3, [r5, #18]
		ftoa(dev.data.altitude - dev.data.init_height, (char*)&string[strlen((char*)string)], 3);
 8001bb2:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8001bb6:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8001bba:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fb15 	bl	80001f0 <strlen>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4413      	add	r3, r2
 8001bcc:	2103      	movs	r1, #3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8001bd4:	f7ff fdf8 	bl	80017c8 <ftoa>
		strcat((char*)string, " m\n\n\n");
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb08 	bl	80001f0 <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4413      	add	r3, r2
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <main+0x254>)
 8001bea:	6810      	ldr	r0, [r2, #0]
 8001bec:	6018      	str	r0, [r3, #0]
 8001bee:	8892      	ldrh	r2, [r2, #4]
 8001bf0:	809a      	strh	r2, [r3, #4]


		printf((char*)string);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00d f9c3 	bl	800ef80 <iprintf>


		//HAL_UART_Transmit(&huart1, (uint8_t *)txData, strlen((char*)txData), 1000);
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfe:	480f      	ldr	r0, [pc, #60]	; (8001c3c <main+0x258>)
 8001c00:	f003 fa06 	bl	8005010 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001c04:	2120      	movs	r1, #32
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0a:	f003 fa01 	bl	8005010 <HAL_GPIO_TogglePin>

		HAL_Delay(1000);
 8001c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c12:	f001 fe51 	bl	80038b8 <HAL_Delay>
		BMP280_calc_values(&dev);
 8001c16:	e727      	b.n	8001a68 <main+0x84>
 8001c18:	20000578 	.word	0x20000578
 8001c1c:	08011820 	.word	0x08011820
 8001c20:	08011830 	.word	0x08011830
 8001c24:	08011834 	.word	0x08011834
 8001c28:	08011840 	.word	0x08011840
 8001c2c:	08011848 	.word	0x08011848
 8001c30:	08011854 	.word	0x08011854
 8001c34:	08011858 	.word	0x08011858
 8001c38:	0801186c 	.word	0x0801186c
 8001c3c:	48000400 	.word	0x48000400

08001c40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0ba      	sub	sp, #232	; 0xe8
 8001c44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c4a:	2244      	movs	r2, #68	; 0x44
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f00d f98e 	bl	800ef70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c54:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	228c      	movs	r2, #140	; 0x8c
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00d f980 	bl	800ef70 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001c70:	f005 f87e 	bl	8006d70 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c74:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <SystemClock_Config+0x158>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	4a47      	ldr	r2, [pc, #284]	; (8001d98 <SystemClock_Config+0x158>)
 8001c7c:	f023 0318 	bic.w	r3, r3, #24
 8001c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001c84:	2314      	movs	r3, #20
 8001c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c9c:	2360      	movs	r3, #96	; 0x60
 8001c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001cb4:	2328      	movs	r3, #40	; 0x28
 8001cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ccc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f005 f9af 	bl	8007034 <HAL_RCC_OscConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0xa0>
		Error_Handler();
 8001cdc:	f000 fef6 	bl	8002acc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001cfe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d02:	2104      	movs	r1, #4
 8001d04:	4618      	mov	r0, r3
 8001d06:	f005 fdbb 	bl	8007880 <HAL_RCC_ClockConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <SystemClock_Config+0xd4>
		Error_Handler();
 8001d10:	f000 fedc 	bl	8002acc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <SystemClock_Config+0x15c>)
 8001d16:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_SAI1
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_DFSDM1
			| RCC_PERIPHCLK_USB | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d42:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001d44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d48:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d52:	2318      	movs	r3, #24
 8001d54:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <SystemClock_Config+0x160>)
 8001d64:	623b      	str	r3, [r7, #32]
			| RCC_PLLSAI1_48M2CLK | RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f005 ff8d 	bl	8007c88 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0x138>
		Error_Handler();
 8001d74:	f000 feaa 	bl	8002acc <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d7c:	f005 f816 	bl	8006dac <HAL_PWREx_ControlVoltageScaling>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0x14a>
			!= HAL_OK) {
		Error_Handler();
 8001d86:	f000 fea1 	bl	8002acc <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001d8a:	f006 ff3b 	bl	8008c04 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d8e:	bf00      	nop
 8001d90:	37e8      	adds	r7, #232	; 0xe8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	000968e3 	.word	0x000968e3
 8001da0:	01110000 	.word	0x01110000

08001da4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001dc8:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <MX_ADC1_Init+0xec>)
 8001dca:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001de6:	2204      	movs	r2, #4
 8001de8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.NbrOfDiscConversion = 1;
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001e2c:	4817      	ldr	r0, [pc, #92]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e2e:	f001 fef7 	bl	8003c20 <HAL_ADC_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_ADC1_Init+0x98>
		Error_Handler();
 8001e38:	f000 fe48 	bl	8002acc <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4811      	ldr	r0, [pc, #68]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e48:	f002 fbe8 	bl	800461c <HAL_ADCEx_MultiModeConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8001e52:	f000 fe3b 	bl	8002acc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_ADC1_Init+0xf0>)
 8001e58:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e62:	237f      	movs	r3, #127	; 0x7f
 8001e64:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e66:	2304      	movs	r3, #4
 8001e68:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <MX_ADC1_Init+0xe8>)
 8001e74:	f002 f82c 	bl	8003ed0 <HAL_ADC_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_ADC1_Init+0xde>
		Error_Handler();
 8001e7e:	f000 fe25 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200007e8 	.word	0x200007e8
 8001e90:	50040000 	.word	0x50040000
 8001e94:	10c00010 	.word	0x10c00010

08001e98 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <MX_ADC2_Init+0xc4>)
 8001eb2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ece:	2204      	movs	r2, #4
 8001ed0:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.NbrOfDiscConversion = 1;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001f14:	4810      	ldr	r0, [pc, #64]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001f16:	f001 fe83 	bl	8003c20 <HAL_ADC_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC2_Init+0x8c>
		Error_Handler();
 8001f20:	f000 fdd4 	bl	8002acc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_ADC2_Init+0xc8>)
 8001f26:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f28:	2306      	movs	r3, #6
 8001f2a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f30:	237f      	movs	r3, #127	; 0x7f
 8001f32:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f34:	2304      	movs	r3, #4
 8001f36:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_ADC2_Init+0xc0>)
 8001f42:	f001 ffc5 	bl	8003ed0 <HAL_ADC_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC2_Init+0xb8>
		Error_Handler();
 8001f4c:	f000 fdbe 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000510 	.word	0x20000510
 8001f5c:	50040100 	.word	0x50040100
 8001f60:	25b00200 	.word	0x25b00200

08001f64 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001f7c:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <MX_ADC3_Init+0xc4>)
 8001f7e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.NbrOfDiscConversion = 1;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001fe0:	4810      	ldr	r0, [pc, #64]	; (8002024 <MX_ADC3_Init+0xc0>)
 8001fe2:	f001 fe1d 	bl	8003c20 <HAL_ADC_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC3_Init+0x8c>
		Error_Handler();
 8001fec:	f000 fd6e 	bl	8002acc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_ADC3_Init+0xc8>)
 8001ff2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ff4:	2306      	movs	r3, #6
 8001ff6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ffc:	237f      	movs	r3, #127	; 0x7f
 8001ffe:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002000:	2304      	movs	r3, #4
 8002002:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002008:	463b      	mov	r3, r7
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_ADC3_Init+0xc0>)
 800200e:	f001 ff5f 	bl	8003ed0 <HAL_ADC_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC3_Init+0xb8>
		Error_Handler();
 8002018:	f000 fd58 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000850 	.word	0x20000850
 8002028:	50040200 	.word	0x50040200
 800202c:	36902000 	.word	0x36902000

08002030 <MX_DCMI_Init>:
/**
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void) {
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <MX_DCMI_Init+0x60>)
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <MX_DCMI_Init+0x64>)
 8002038:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <MX_DCMI_Init+0x60>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <MX_DCMI_Init+0x60>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <MX_DCMI_Init+0x60>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <MX_DCMI_Init+0x60>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <MX_DCMI_Init+0x60>)
 8002054:	2200      	movs	r2, #0
 8002056:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <MX_DCMI_Init+0x60>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <MX_DCMI_Init+0x60>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <MX_DCMI_Init+0x60>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MX_DCMI_Init+0x60>)
 800206c:	2200      	movs	r2, #0
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <MX_DCMI_Init+0x60>)
 8002072:	2200      	movs	r2, #0
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <MX_DCMI_Init+0x60>)
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK) {
 800207c:	4804      	ldr	r0, [pc, #16]	; (8002090 <MX_DCMI_Init+0x60>)
 800207e:	f002 fc8b 	bl	8004998 <HAL_DCMI_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_DCMI_Init+0x5c>
		Error_Handler();
 8002088:	f000 fd20 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200008b8 	.word	0x200008b8
 8002094:	50050000 	.word	0x50050000

08002098 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 800209e:	4a31      	ldr	r2, [pc, #196]	; (8002164 <MX_DFSDM1_Init+0xcc>)
 80020a0:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80020a2:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel1.Init.OutputClock.Selection =
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80020ae:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020ce:	2204      	movs	r2, #4
 80020d0:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80020d2:	4b23      	ldr	r3, [pc, #140]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel1.Init.Offset = 0;
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 80020ea:	481d      	ldr	r0, [pc, #116]	; (8002160 <MX_DFSDM1_Init+0xc8>)
 80020ec:	f002 fcda 	bl	8004aa4 <HAL_DFSDM_ChannelInit>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_DFSDM1_Init+0x62>
		Error_Handler();
 80020f6:	f000 fce9 	bl	8002acc <Error_Handler>
	}
	hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <MX_DFSDM1_Init+0xd4>)
 80020fe:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002102:	2201      	movs	r2, #1
 8002104:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel2.Init.OutputClock.Selection =
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 800210e:	2202      	movs	r2, #2
 8002110:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002124:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel2.Init.SerialInterface.SpiClock =
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 800212e:	2204      	movs	r2, #4
 8002130:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
	hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002134:	2200      	movs	r2, #0
 8002136:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 800213a:	2201      	movs	r2, #1
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel2.Init.Offset = 0;
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002140:	2200      	movs	r2, #0
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK) {
 800214a:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_DFSDM1_Init+0xd0>)
 800214c:	f002 fcaa 	bl	8004aa4 <HAL_DFSDM_ChannelInit>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_DFSDM1_Init+0xc2>
		Error_Handler();
 8002156:	f000 fcb9 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000474 	.word	0x20000474
 8002164:	40016020 	.word	0x40016020
 8002168:	20000ae4 	.word	0x20000ae4
 800216c:	40016040 	.word	0x40016040

08002170 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_I2C1_Init+0x74>)
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <MX_I2C1_Init+0x78>)
 8002178:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_I2C1_Init+0x74>)
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <MX_I2C1_Init+0x7c>)
 800217e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_I2C1_Init+0x74>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <MX_I2C1_Init+0x74>)
 8002188:	2201      	movs	r2, #1
 800218a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_I2C1_Init+0x74>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_I2C1_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_I2C1_Init+0x74>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_I2C1_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_I2C1_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <MX_I2C1_Init+0x74>)
 80021ac:	f002 ff49 	bl	8005042 <HAL_I2C_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_I2C1_Init+0x4a>
		Error_Handler();
 80021b6:	f000 fc89 	bl	8002acc <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80021ba:	2100      	movs	r1, #0
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <MX_I2C1_Init+0x74>)
 80021be:	f003 fca1 	bl	8005b04 <HAL_I2CEx_ConfigAnalogFilter>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80021c8:	f000 fc80 	bl	8002acc <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80021cc:	2100      	movs	r1, #0
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_I2C1_Init+0x74>)
 80021d0:	f003 fce3 	bl	8005b9a <HAL_I2CEx_ConfigDigitalFilter>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_I2C1_Init+0x6e>
		Error_Handler();
 80021da:	f000 fc77 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000578 	.word	0x20000578
 80021e8:	40005400 	.word	0x40005400
 80021ec:	10909cec 	.word	0x10909cec

080021f0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <MX_I2C2_Init+0x74>)
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <MX_I2C2_Init+0x78>)
 80021f8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <MX_I2C2_Init+0x74>)
 80021fc:	4a1b      	ldr	r2, [pc, #108]	; (800226c <MX_I2C2_Init+0x7c>)
 80021fe:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <MX_I2C2_Init+0x74>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <MX_I2C2_Init+0x74>)
 8002208:	2201      	movs	r2, #1
 800220a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <MX_I2C2_Init+0x74>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_I2C2_Init+0x74>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <MX_I2C2_Init+0x74>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_I2C2_Init+0x74>)
 8002220:	2200      	movs	r2, #0
 8002222:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_I2C2_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800222a:	480e      	ldr	r0, [pc, #56]	; (8002264 <MX_I2C2_Init+0x74>)
 800222c:	f002 ff09 	bl	8005042 <HAL_I2C_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_I2C2_Init+0x4a>
		Error_Handler();
 8002236:	f000 fc49 	bl	8002acc <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800223a:	2100      	movs	r1, #0
 800223c:	4809      	ldr	r0, [pc, #36]	; (8002264 <MX_I2C2_Init+0x74>)
 800223e:	f003 fc61 	bl	8005b04 <HAL_I2CEx_ConfigAnalogFilter>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002248:	f000 fc40 	bl	8002acc <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800224c:	2100      	movs	r1, #0
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_I2C2_Init+0x74>)
 8002250:	f003 fca3 	bl	8005b9a <HAL_I2CEx_ConfigDigitalFilter>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_I2C2_Init+0x6e>
		Error_Handler();
 800225a:	f000 fc37 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200005c4 	.word	0x200005c4
 8002268:	40005800 	.word	0x40005800
 800226c:	10909cec 	.word	0x10909cec

08002270 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 8002276:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <MX_LPUART1_UART_Init+0x54>)
 8002278:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 800227c:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <MX_LPUART1_UART_Init+0x58>)
 800227e:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 8002282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002286:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <MX_LPUART1_UART_Init+0x50>)
 80022ae:	f007 ffaf 	bl	800a210 <HAL_UART_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 80022b8:	f000 fc08 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200006e4 	.word	0x200006e4
 80022c4:	40008000 	.word	0x40008000
 80022c8:	00033324 	.word	0x00033324

080022cc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART1_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART1_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART1_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART1_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART1_UART_Init+0x58>)
 8002310:	f007 ff7e 	bl	800a210 <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800231a:	f000 fbd7 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000910 	.word	0x20000910
 8002328:	40013800 	.word	0x40013800

0800232c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <MX_USART2_UART_Init+0x5c>)
 8002334:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART2_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART2_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART2_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART2_UART_Init+0x58>)
 8002370:	f007 ff4e 	bl	800a210 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800237a:	f000 fba7 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000a64 	.word	0x20000a64
 8002388:	40004400 	.word	0x40004400

0800238c <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <MX_QUADSPI_Init+0x50>)
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <MX_QUADSPI_Init+0x54>)
 8002394:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_QUADSPI_Init+0x50>)
 8002398:	22ff      	movs	r2, #255	; 0xff
 800239a:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_QUADSPI_Init+0x50>)
 800239e:	2201      	movs	r2, #1
 80023a0:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_QUADSPI_Init+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_QUADSPI_Init+0x50>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_QUADSPI_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_QUADSPI_Init+0x50>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_QUADSPI_Init+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_QUADSPI_Init+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_QUADSPI_Init+0x50>)
 80023c8:	f004 fd66 	bl	8006e98 <HAL_QSPI_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_QUADSPI_Init+0x4a>
		Error_Handler();
 80023d2:	f000 fb7b 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000b1c 	.word	0x20000b1c
 80023e0:	a0001000 	.word	0xa0001000

080023e4 <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
 80023e8:	4b4d      	ldr	r3, [pc, #308]	; (8002520 <MX_SAI1_Init+0x13c>)
 80023ea:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <MX_SAI1_Init+0x140>)
 80023ec:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80023ee:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <MX_SAI1_Init+0x13c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80023f4:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <MX_SAI1_Init+0x13c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80023fa:	4b49      	ldr	r3, [pc, #292]	; (8002520 <MX_SAI1_Init+0x13c>)
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002400:	4b47      	ldr	r3, [pc, #284]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002402:	2200      	movs	r2, #0
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002408:	2200      	movs	r2, #0
 800240a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <MX_SAI1_Init+0x13c>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
	hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <MX_SAI1_Init+0x13c>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002426:	4a40      	ldr	r2, [pc, #256]	; (8002528 <MX_SAI1_Init+0x144>)
 8002428:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <MX_SAI1_Init+0x13c>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002438:	2200      	movs	r2, #0
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <MX_SAI1_Init+0x13c>)
 800243e:	2200      	movs	r2, #0
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA1.FrameInit.FrameLength = 8;
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002444:	2208      	movs	r2, #8
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <MX_SAI1_Init+0x13c>)
 800244a:	2201      	movs	r2, #1
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002450:	2200      	movs	r2, #0
 8002452:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002456:	2200      	movs	r2, #0
 8002458:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <MX_SAI1_Init+0x13c>)
 800245c:	2200      	movs	r2, #0
 800245e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002468:	2200      	movs	r2, #0
 800246a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA1.SlotInit.SlotNumber = 1;
 800246c:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <MX_SAI1_Init+0x13c>)
 800246e:	2201      	movs	r2, #1
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <MX_SAI1_Init+0x13c>)
 8002474:	2200      	movs	r2, #0
 8002476:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK) {
 8002478:	4829      	ldr	r0, [pc, #164]	; (8002520 <MX_SAI1_Init+0x13c>)
 800247a:	f006 fe9f 	bl	80091bc <HAL_SAI_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_SAI1_Init+0xa4>
		Error_Handler();
 8002484:	f000 fb22 	bl	8002acc <Error_Handler>
	}
	hsai_BlockB1.Instance = SAI1_Block_B;
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <MX_SAI1_Init+0x148>)
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <MX_SAI1_Init+0x14c>)
 800248c:	601a      	str	r2, [r3, #0]
	hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <MX_SAI1_Init+0x148>)
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <MX_SAI1_Init+0x148>)
 8002496:	2203      	movs	r2, #3
 8002498:	605a      	str	r2, [r3, #4]
	hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <MX_SAI1_Init+0x148>)
 800249c:	2240      	movs	r2, #64	; 0x40
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <MX_SAI1_Init+0x148>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <MX_SAI1_Init+0x148>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <MX_SAI1_Init+0x148>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	609a      	str	r2, [r3, #8]
	hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <MX_SAI1_Init+0x148>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
	hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <MX_SAI1_Init+0x148>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
	hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <MX_SAI1_Init+0x148>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
	hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <MX_SAI1_Init+0x148>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_SAI1_Init+0x148>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <MX_SAI1_Init+0x148>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB1.FrameInit.FrameLength = 8;
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <MX_SAI1_Init+0x148>)
 80024d8:	2208      	movs	r2, #8
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <MX_SAI1_Init+0x148>)
 80024de:	2201      	movs	r2, #1
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_SAI1_Init+0x148>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_SAI1_Init+0x148>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_SAI1_Init+0x148>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <MX_SAI1_Init+0x148>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_SAI1_Init+0x148>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <MX_SAI1_Init+0x148>)
 8002502:	2201      	movs	r2, #1
 8002504:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_SAI1_Init+0x148>)
 8002508:	2200      	movs	r2, #0
 800250a:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK) {
 800250c:	4807      	ldr	r0, [pc, #28]	; (800252c <MX_SAI1_Init+0x148>)
 800250e:	f006 fe55 	bl	80091bc <HAL_SAI_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_SAI1_Init+0x138>
		Error_Handler();
 8002518:	f000 fad8 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200009e0 	.word	0x200009e0
 8002524:	40015404 	.word	0x40015404
 8002528:	0002ee00 	.word	0x0002ee00
 800252c:	20000764 	.word	0x20000764
 8002530:	40015424 	.word	0x40015424

08002534 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <MX_SDMMC1_SD_Init+0x5c>)
 800253c:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8002562:	480a      	ldr	r0, [pc, #40]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 8002564:	f006 ffce 	bl	8009504 <HAL_SD_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_SDMMC1_SD_Init+0x3e>
		Error_Handler();
 800256e:	f000 faad 	bl	8002acc <Error_Handler>
	}
	if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK) {
 8002572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002576:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_SDMMC1_SD_Init+0x58>)
 8002578:	f007 fa26 	bl	80099c8 <HAL_SD_ConfigWideBusOperation>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_SDMMC1_SD_Init+0x52>
		Error_Handler();
 8002582:	f000 faa3 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000610 	.word	0x20000610
 8002590:	40012800 	.word	0x40012800

08002594 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <MX_SPI2_Init+0x74>)
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <MX_SPI2_Init+0x78>)
 800259c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_SPI2_Init+0x74>)
 80025a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025a4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <MX_SPI2_Init+0x74>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_SPI2_Init+0x74>)
 80025ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80025b2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_SPI2_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_SPI2_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_SPI2_Init+0x74>)
 80025c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c6:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_SPI2_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_SPI2_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_SPI2_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_SPI2_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_SPI2_Init+0x74>)
 80025e2:	2207      	movs	r2, #7
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_SPI2_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_SPI2_Init+0x74>)
 80025ee:	2208      	movs	r2, #8
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_SPI2_Init+0x74>)
 80025f4:	f007 fd3a 	bl	800a06c <HAL_SPI_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_SPI2_Init+0x6e>
		Error_Handler();
 80025fe:	f000 fa65 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200004ac 	.word	0x200004ac
 800260c:	40003800 	.word	0x40003800

08002610 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = { 0 };
 8002616:	463b      	mov	r3, r7
 8002618:	2220      	movs	r2, #32
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f00c fca7 	bl	800ef70 <memset>

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002622:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <MX_FMC_Init+0x150>)
 8002624:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002628:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800262a:	4b4d      	ldr	r3, [pc, #308]	; (8002760 <MX_FMC_Init+0x150>)
 800262c:	4a4d      	ldr	r2, [pc, #308]	; (8002764 <MX_FMC_Init+0x154>)
 800262e:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <MX_FMC_Init+0x150>)
 8002632:	2202      	movs	r2, #2
 8002634:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <MX_FMC_Init+0x150>)
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800263c:	4b48      	ldr	r3, [pc, #288]	; (8002760 <MX_FMC_Init+0x150>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <MX_FMC_Init+0x150>)
 8002644:	2210      	movs	r2, #16
 8002646:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8002648:	4b45      	ldr	r3, [pc, #276]	; (8002760 <MX_FMC_Init+0x150>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800264e:	4b44      	ldr	r3, [pc, #272]	; (8002760 <MX_FMC_Init+0x150>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <MX_FMC_Init+0x150>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <MX_FMC_Init+0x150>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002660:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <MX_FMC_Init+0x150>)
 8002662:	2200      	movs	r2, #0
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002666:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <MX_FMC_Init+0x150>)
 8002668:	2200      	movs	r2, #0
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800266c:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <MX_FMC_Init+0x150>)
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <MX_FMC_Init+0x150>)
 8002674:	2200      	movs	r2, #0
 8002676:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002678:	4b39      	ldr	r3, [pc, #228]	; (8002760 <MX_FMC_Init+0x150>)
 800267a:	2200      	movs	r2, #0
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <MX_FMC_Init+0x150>)
 8002680:	2200      	movs	r2, #0
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <MX_FMC_Init+0x150>)
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 15;
 800268a:	230f      	movs	r3, #15
 800268c:	603b      	str	r3, [r7, #0]
	Timing.AddressHoldTime = 15;
 800268e:	230f      	movs	r3, #15
 8002690:	607b      	str	r3, [r7, #4]
	Timing.DataSetupTime = 255;
 8002692:	23ff      	movs	r3, #255	; 0xff
 8002694:	60bb      	str	r3, [r7, #8]
	Timing.BusTurnAroundDuration = 15;
 8002696:	230f      	movs	r3, #15
 8002698:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 800269a:	2310      	movs	r3, #16
 800269c:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 800269e:	2311      	movs	r3, #17
 80026a0:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 80026a6:	463b      	mov	r3, r7
 80026a8:	2200      	movs	r2, #0
 80026aa:	4619      	mov	r1, r3
 80026ac:	482c      	ldr	r0, [pc, #176]	; (8002760 <MX_FMC_Init+0x150>)
 80026ae:	f007 fd67 	bl	800a180 <HAL_SRAM_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_FMC_Init+0xac>
		Error_Handler();
 80026b8:	f000 fa08 	bl	8002acc <Error_Handler>
	}

	/** Perform the SRAM2 memory initialization sequence
	 */
	hsram2.Instance = FMC_NORSRAM_DEVICE;
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <MX_FMC_Init+0x158>)
 80026be:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80026c2:	601a      	str	r2, [r3, #0]
	hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <MX_FMC_Init+0x158>)
 80026c6:	4a27      	ldr	r2, [pc, #156]	; (8002764 <MX_FMC_Init+0x154>)
 80026c8:	605a      	str	r2, [r3, #4]
	/* hsram2.Init */
	hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <MX_FMC_Init+0x158>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
	hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <MX_FMC_Init+0x158>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
	hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <MX_FMC_Init+0x158>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
	hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <MX_FMC_Init+0x158>)
 80026de:	2210      	movs	r2, #16
 80026e0:	615a      	str	r2, [r3, #20]
	hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <MX_FMC_Init+0x158>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
	hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80026e8:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <MX_FMC_Init+0x158>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
	hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <MX_FMC_Init+0x158>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
	hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <MX_FMC_Init+0x158>)
 80026f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
	hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <MX_FMC_Init+0x158>)
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
	hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <MX_FMC_Init+0x158>)
 8002704:	2200      	movs	r2, #0
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <MX_FMC_Init+0x158>)
 800270a:	2200      	movs	r2, #0
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
	hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_FMC_Init+0x158>)
 8002710:	2200      	movs	r2, #0
 8002712:	635a      	str	r2, [r3, #52]	; 0x34
	hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <MX_FMC_Init+0x158>)
 8002716:	2200      	movs	r2, #0
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
	hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <MX_FMC_Init+0x158>)
 800271c:	2200      	movs	r2, #0
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_FMC_Init+0x158>)
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 15;
 8002726:	230f      	movs	r3, #15
 8002728:	603b      	str	r3, [r7, #0]
	Timing.AddressHoldTime = 15;
 800272a:	230f      	movs	r3, #15
 800272c:	607b      	str	r3, [r7, #4]
	Timing.DataSetupTime = 255;
 800272e:	23ff      	movs	r3, #255	; 0xff
 8002730:	60bb      	str	r3, [r7, #8]
	Timing.BusTurnAroundDuration = 15;
 8002732:	230f      	movs	r3, #15
 8002734:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 8002736:	2310      	movs	r3, #16
 8002738:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 800273a:	2311      	movs	r3, #17
 800273c:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK) {
 8002742:	463b      	mov	r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_FMC_Init+0x158>)
 800274a:	f007 fd19 	bl	800a180 <HAL_SRAM_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_FMC_Init+0x148>
		Error_Handler();
 8002754:	f000 f9ba 	bl	8002acc <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8002758:	bf00      	nop
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000694 	.word	0x20000694
 8002764:	a0000104 	.word	0xa0000104
 8002768:	20000990 	.word	0x20000990

0800276c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002782:	4bb2      	ldr	r3, [pc, #712]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4ab1      	ldr	r2, [pc, #708]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278e:	4baf      	ldr	r3, [pc, #700]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800279a:	4bac      	ldr	r3, [pc, #688]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4aab      	ldr	r2, [pc, #684]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4ba9      	ldr	r3, [pc, #676]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80027b2:	4ba6      	ldr	r3, [pc, #664]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	4aa5      	ldr	r2, [pc, #660]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027b8:	f043 0310 	orr.w	r3, r3, #16
 80027bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027be:	4ba3      	ldr	r3, [pc, #652]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80027ca:	4ba0      	ldr	r3, [pc, #640]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	4a9f      	ldr	r2, [pc, #636]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d6:	4b9d      	ldr	r3, [pc, #628]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	4b9a      	ldr	r3, [pc, #616]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4a99      	ldr	r2, [pc, #612]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ee:	4b97      	ldr	r3, [pc, #604]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80027fa:	4b94      	ldr	r3, [pc, #592]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4a93      	ldr	r2, [pc, #588]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002806:	4b91      	ldr	r3, [pc, #580]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
	HAL_PWREx_EnableVddIO2();
 8002812:	f004 fb31 	bl	8006e78 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002816:	4b8d      	ldr	r3, [pc, #564]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	4a8c      	ldr	r2, [pc, #560]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002822:	4b8a      	ldr	r3, [pc, #552]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800282e:	4b87      	ldr	r3, [pc, #540]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a86      	ldr	r2, [pc, #536]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283a:	4b84      	ldr	r3, [pc, #528]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002846:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	4a80      	ldr	r2, [pc, #512]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002852:	4b7e      	ldr	r3, [pc, #504]	; (8002a4c <MX_GPIO_Init+0x2e0>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	2101      	movs	r1, #1
 8002862:	487b      	ldr	r0, [pc, #492]	; (8002a50 <MX_GPIO_Init+0x2e4>)
 8002864:	f002 fbbc 	bl	8004fe0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin | LCD_PWR_ON_Pin | MIC_VDD_Pin,
 8002868:	2200      	movs	r2, #0
 800286a:	2143      	movs	r1, #67	; 0x43
 800286c:	4879      	ldr	r0, [pc, #484]	; (8002a54 <MX_GPIO_Init+0x2e8>)
 800286e:	f002 fbb7 	bl	8004fe0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	2140      	movs	r1, #64	; 0x40
 8002876:	4878      	ldr	r0, [pc, #480]	; (8002a58 <MX_GPIO_Init+0x2ec>)
 8002878:	f002 fbb2 	bl	8004fe0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800287c:	2201      	movs	r2, #1
 800287e:	2120      	movs	r1, #32
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f002 fbac 	bl	8004fe0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002888:	2200      	movs	r2, #0
 800288a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800288e:	4873      	ldr	r0, [pc, #460]	; (8002a5c <MX_GPIO_Init+0x2f0>)
 8002890:	f002 fba6 	bl	8004fe0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
	GPIO_InitStruct.Pin = JOY_DOWN_Pin | JOY_LEFT_Pin | JOY_UP_Pin;
 8002894:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800289e:	2302      	movs	r3, #2
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	4869      	ldr	r0, [pc, #420]	; (8002a50 <MX_GPIO_Init+0x2e4>)
 80028aa:	f002 fa07 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : STMOD_INT_Pin */
	GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80028ae:	2304      	movs	r3, #4
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028b2:	4b6b      	ldr	r3, [pc, #428]	; (8002a60 <MX_GPIO_Init+0x2f4>)
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80028ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028be:	4619      	mov	r1, r3
 80028c0:	4864      	ldr	r0, [pc, #400]	; (8002a54 <MX_GPIO_Init+0x2e8>)
 80028c2:	f002 f9fb 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D12_Pin | ARD_D11_Pin;
 80028c6:	2330      	movs	r3, #48	; 0x30
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028d6:	2305      	movs	r3, #5
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028de:	4619      	mov	r1, r3
 80028e0:	485e      	ldr	r0, [pc, #376]	; (8002a5c <MX_GPIO_Init+0x2f0>)
 80028e2:	f002 f9eb 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D10_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin;
 80028e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f8:	2305      	movs	r3, #5
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	4619      	mov	r1, r3
 8002902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002906:	f002 f9d9 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_Pin;
 800290a:	2301      	movs	r3, #1
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291e:	4619      	mov	r1, r3
 8002920:	484b      	ldr	r0, [pc, #300]	; (8002a50 <MX_GPIO_Init+0x2e4>)
 8002922:	f002 f9cb 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002926:	2340      	movs	r3, #64	; 0x40
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002936:	2303      	movs	r3, #3
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293e:	4619      	mov	r1, r3
 8002940:	4843      	ldr	r0, [pc, #268]	; (8002a50 <MX_GPIO_Init+0x2e4>)
 8002942:	f002 f9bb 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin | ARD_D9_Pin;
 8002946:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002958:	2303      	movs	r3, #3
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	4619      	mov	r1, r3
 8002962:	483c      	ldr	r0, [pc, #240]	; (8002a54 <MX_GPIO_Init+0x2e8>)
 8002964:	f002 f9aa 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D5_Pin */
	GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800297a:	2302      	movs	r3, #2
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800297e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002982:	4619      	mov	r1, r3
 8002984:	4835      	ldr	r0, [pc, #212]	; (8002a5c <MX_GPIO_Init+0x2f0>)
 8002986:	f002 f999 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_TE_Pin */
	GPIO_InitStruct.Pin = LCD_TE_Pin;
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299a:	4619      	mov	r1, r3
 800299c:	482d      	ldr	r0, [pc, #180]	; (8002a54 <MX_GPIO_Init+0x2e8>)
 800299e:	f002 f98d 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
	GPIO_InitStruct.Pin = MFX_WAKEUP_Pin | LCD_PWR_ON_Pin | MIC_VDD_Pin;
 80029a2:	2343      	movs	r3, #67	; 0x43
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	2301      	movs	r3, #1
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b6:	4619      	mov	r1, r3
 80029b8:	4826      	ldr	r0, [pc, #152]	; (8002a54 <MX_GPIO_Init+0x2e8>)
 80029ba:	f002 f97f 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_RST_Pin */
	GPIO_InitStruct.Pin = Audio_RST_Pin;
 80029be:	2340      	movs	r3, #64	; 0x40
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d2:	4619      	mov	r1, r3
 80029d4:	4820      	ldr	r0, [pc, #128]	; (8002a58 <MX_GPIO_Init+0x2ec>)
 80029d6:	f002 f971 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : CTP_INT_Pin */
	GPIO_InitStruct.Pin = CTP_INT_Pin;
 80029da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <MX_GPIO_Init+0x2f4>)
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	481d      	ldr	r0, [pc, #116]	; (8002a64 <MX_GPIO_Init+0x2f8>)
 80029f0:	f002 f964 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_CLK_Pin */
	GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80029f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8002a06:	230e      	movs	r3, #14
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a14:	f002 f952 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : MFX_IRQ_OUT_Pin */
	GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <MX_GPIO_Init+0x2f4>)
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <MX_GPIO_Init+0x2ec>)
 8002a2c:	f002 f946 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 8002a30:	2320      	movs	r3, #32
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a34:	2301      	movs	r3, #1
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a44:	4619      	mov	r1, r3
 8002a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4a:	e00d      	b.n	8002a68 <MX_GPIO_Init+0x2fc>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	48002000 	.word	0x48002000
 8002a54:	48001c00 	.word	0x48001c00
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	48000400 	.word	0x48000400
 8002a60:	10110000 	.word	0x10110000
 8002a64:	48001800 	.word	0x48001800
 8002a68:	f002 f928 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : JOY_RIGHT_Pin */
	GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8002a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a76:	2302      	movs	r3, #2
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <MX_GPIO_Init+0x358>)
 8002a82:	f002 f91b 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : STMOD_RESET_Pin */
	GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8002a86:	2304      	movs	r3, #4
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	4619      	mov	r1, r3
 8002a98:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <MX_GPIO_Init+0x35c>)
 8002a9a:	f002 f90f 	bl	8004cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8002a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002aa4:	2311      	movs	r3, #17
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4804      	ldr	r0, [pc, #16]	; (8002ac8 <MX_GPIO_Init+0x35c>)
 8002ab8:	f002 f900 	bl	8004cbc <HAL_GPIO_Init>

}
 8002abc:	bf00      	nop
 8002abe:	3738      	adds	r7, #56	; 0x38
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	48001400 	.word	0x48001400
 8002ac8:	48000400 	.word	0x48000400

08002acc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_MspInit+0x44>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_MspInit+0x44>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6613      	str	r3, [r2, #96]	; 0x60
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_MspInit+0x44>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_MspInit+0x44>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_MspInit+0x44>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_MspInit+0x44>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a59      	ldr	r2, [pc, #356]	; (8002ca8 <HAL_ADC_MspInit+0x184>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d12d      	bne.n	8002ba2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002b46:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002b4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002b50:	4b56      	ldr	r3, [pc, #344]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10b      	bne.n	8002b70 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002b58:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	4a54      	ldr	r2, [pc, #336]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002b5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b64:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6c:	623b      	str	r3, [r7, #32]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8002b88:	2318      	movs	r3, #24
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b8c:	230b      	movs	r3, #11
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4846      	ldr	r0, [pc, #280]	; (8002cb4 <HAL_ADC_MspInit+0x190>)
 8002b9c:	f002 f88e 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ba0:	e07e      	b.n	8002ca0 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a44      	ldr	r2, [pc, #272]	; (8002cb8 <HAL_ADC_MspInit+0x194>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d146      	bne.n	8002c3a <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	4a3e      	ldr	r2, [pc, #248]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002bb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	4a3b      	ldr	r2, [pc, #236]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	4a2f      	ldr	r2, [pc, #188]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8002c06:	2303      	movs	r3, #3
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c0a:	230b      	movs	r3, #11
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	4826      	ldr	r0, [pc, #152]	; (8002cb4 <HAL_ADC_MspInit+0x190>)
 8002c1a:	f002 f84f 	bl	8004cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8002c1e:	2312      	movs	r3, #18
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c22:	230b      	movs	r3, #11
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c34:	f002 f842 	bl	8004cbc <HAL_GPIO_Init>
}
 8002c38:	e032      	b.n	8002ca0 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_ADC_MspInit+0x198>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d12d      	bne.n	8002ca0 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a18      	ldr	r2, [pc, #96]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002c4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_ADC_MspInit+0x188>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10b      	bne.n	8002c6e <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002c74:	f043 0320 	orr.w	r3, r3, #32
 8002c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_ADC_MspInit+0x18c>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8002c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c8c:	230b      	movs	r3, #11
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <HAL_ADC_MspInit+0x19c>)
 8002c9c:	f002 f80e 	bl	8004cbc <HAL_GPIO_Init>
}
 8002ca0:	bf00      	nop
 8002ca2:	3738      	adds	r7, #56	; 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	50040000 	.word	0x50040000
 8002cac:	20000210 	.word	0x20000210
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	48000800 	.word	0x48000800
 8002cb8:	50040100 	.word	0x50040100
 8002cbc:	50040200 	.word	0x50040200
 8002cc0:	48001400 	.word	0x48001400

08002cc4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	; 0x30
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <HAL_DCMI_MspInit+0xec>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d160      	bne.n	8002da8 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002ce6:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	4a32      	ldr	r2, [pc, #200]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4a2c      	ldr	r2, [pc, #176]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d16:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d34:	f043 0310 	orr.w	r3, r3, #16
 8002d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_DCMI_MspInit+0xf0>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 8002d46:	f645 7320 	movw	r3, #24352	; 0x5f20
 8002d4a:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002d58:	230a      	movs	r3, #10
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	4619      	mov	r1, r3
 8002d62:	4815      	ldr	r0, [pc, #84]	; (8002db8 <HAL_DCMI_MspInit+0xf4>)
 8002d64:	f001 ffaa 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8002d68:	23b0      	movs	r3, #176	; 0xb0
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002d78:	230a      	movs	r3, #10
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d7c:	f107 031c 	add.w	r3, r7, #28
 8002d80:	4619      	mov	r1, r3
 8002d82:	480e      	ldr	r0, [pc, #56]	; (8002dbc <HAL_DCMI_MspInit+0xf8>)
 8002d84:	f001 ff9a 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002d98:	230a      	movs	r3, #10
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	4619      	mov	r1, r3
 8002da2:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <HAL_DCMI_MspInit+0xfc>)
 8002da4:	f001 ff8a 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002da8:	bf00      	nop
 8002daa:	3730      	adds	r7, #48	; 0x30
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	50050000 	.word	0x50050000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	48001c00 	.word	0x48001c00
 8002dbc:	48002000 	.word	0x48002000
 8002dc0:	48001000 	.word	0x48001000

08002dc4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d144      	bne.n	8002e6e <HAL_DFSDM_ChannelMspInit+0xaa>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dee:	6613      	str	r3, [r2, #96]	; 0x60
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_DFSDM_ChannelMspInit+0xb8>)
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8002e2c:	2384      	movs	r3, #132	; 0x84
 8002e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002e3c:	2306      	movs	r3, #6
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	480e      	ldr	r0, [pc, #56]	; (8002e80 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002e48:	f001 ff38 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8002e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002e5e:	2306      	movs	r3, #6
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	4806      	ldr	r0, [pc, #24]	; (8002e84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002e6a:	f001 ff27 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8002e6e:	bf00      	nop
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000214 	.word	0x20000214
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	48000800 	.word	0x48000800
 8002e84:	48000400 	.word	0x48000400

08002e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a3d      	ldr	r2, [pc, #244]	; (8002f9c <HAL_I2C_MspInit+0x114>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d129      	bne.n	8002efe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a3c      	ldr	r2, [pc, #240]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002ec2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec8:	2312      	movs	r3, #18
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4619      	mov	r1, r3
 8002ede:	4831      	ldr	r0, [pc, #196]	; (8002fa4 <HAL_I2C_MspInit+0x11c>)
 8002ee0:	f001 feec 	bl	8004cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002efc:	e049      	b.n	8002f92 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a29      	ldr	r2, [pc, #164]	; (8002fa8 <HAL_I2C_MspInit+0x120>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d144      	bne.n	8002f92 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8002f38:	2310      	movs	r3, #16
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3c:	2312      	movs	r3, #18
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f48:	2304      	movs	r3, #4
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4816      	ldr	r0, [pc, #88]	; (8002fac <HAL_I2C_MspInit+0x124>)
 8002f54:	f001 feb2 	bl	8004cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8002f58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f5e:	2312      	movs	r3, #18
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	4619      	mov	r1, r3
 8002f74:	480b      	ldr	r0, [pc, #44]	; (8002fa4 <HAL_I2C_MspInit+0x11c>)
 8002f76:	f001 fea1 	bl	8004cbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f84:	6593      	str	r3, [r2, #88]	; 0x58
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_I2C_MspInit+0x118>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
}
 8002f92:	bf00      	nop
 8002f94:	3730      	adds	r7, #48	; 0x30
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40005400 	.word	0x40005400
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	48000400 	.word	0x48000400
 8002fa8:	40005800 	.word	0x40005800
 8002fac:	48001c00 	.word	0x48001c00

08002fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b090      	sub	sp, #64	; 0x40
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a64      	ldr	r2, [pc, #400]	; (8003160 <HAL_UART_MspInit+0x1b0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d12b      	bne.n	800302a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002fd2:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	4a63      	ldr	r2, [pc, #396]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002fde:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fea:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4a5d      	ldr	r2, [pc, #372]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8002ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ff6:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 8003002:	f003 ff39 	bl	8006e78 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003006:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003014:	2303      	movs	r3, #3
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003018:	2308      	movs	r3, #8
 800301a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800301c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003020:	4619      	mov	r1, r3
 8003022:	4851      	ldr	r0, [pc, #324]	; (8003168 <HAL_UART_MspInit+0x1b8>)
 8003024:	f001 fe4a 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003028:	e096      	b.n	8003158 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4f      	ldr	r2, [pc, #316]	; (800316c <HAL_UART_MspInit+0x1bc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d147      	bne.n	80030c4 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8003036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003038:	4a4a      	ldr	r2, [pc, #296]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303e:	6613      	str	r3, [r2, #96]	; 0x60
 8003040:	4b48      	ldr	r3, [pc, #288]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304c:	4b45      	ldr	r3, [pc, #276]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003050:	4a44      	ldr	r2, [pc, #272]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003064:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	4a3e      	ldr	r2, [pc, #248]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 800306a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003070:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800307c:	f003 fefc 	bl	8006e78 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8003080:	2340      	movs	r3, #64	; 0x40
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003090:	2307      	movs	r3, #7
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003098:	4619      	mov	r1, r3
 800309a:	4835      	ldr	r0, [pc, #212]	; (8003170 <HAL_UART_MspInit+0x1c0>)
 800309c:	f001 fe0e 	bl	8004cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80030a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a6:	2302      	movs	r3, #2
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ae:	2303      	movs	r3, #3
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030b2:	2307      	movs	r3, #7
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ba:	4619      	mov	r1, r3
 80030bc:	482a      	ldr	r0, [pc, #168]	; (8003168 <HAL_UART_MspInit+0x1b8>)
 80030be:	f001 fdfd 	bl	8004cbc <HAL_GPIO_Init>
}
 80030c2:	e049      	b.n	8003158 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <HAL_UART_MspInit+0x1c4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d144      	bne.n	8003158 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030ce:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	6593      	str	r3, [r2, #88]	; 0x58
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e6:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 80030ec:	f043 0308 	orr.w	r3, r3, #8
 80030f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_UART_MspInit+0x1b4>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8003116:	2340      	movs	r3, #64	; 0x40
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003122:	2303      	movs	r3, #3
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003126:	2307      	movs	r3, #7
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800312a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800312e:	4619      	mov	r1, r3
 8003130:	4811      	ldr	r0, [pc, #68]	; (8003178 <HAL_UART_MspInit+0x1c8>)
 8003132:	f001 fdc3 	bl	8004cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8003136:	2304      	movs	r3, #4
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003146:	2307      	movs	r3, #7
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800314e:	4619      	mov	r1, r3
 8003150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003154:	f001 fdb2 	bl	8004cbc <HAL_GPIO_Init>
}
 8003158:	bf00      	nop
 800315a:	3740      	adds	r7, #64	; 0x40
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40008000 	.word	0x40008000
 8003164:	40021000 	.word	0x40021000
 8003168:	48001800 	.word	0x48001800
 800316c:	40013800 	.word	0x40013800
 8003170:	48000400 	.word	0x48000400
 8003174:	40004400 	.word	0x40004400
 8003178:	48000c00 	.word	0x48000c00

0800317c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a26      	ldr	r2, [pc, #152]	; (8003234 <HAL_QSPI_MspInit+0xb8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d145      	bne.n	800322a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6513      	str	r3, [r2, #80]	; 0x50
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_QSPI_MspInit+0xbc>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80031e6:	f640 0303 	movw	r3, #2051	; 0x803
 80031ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80031f8:	230a      	movs	r3, #10
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4619      	mov	r1, r3
 8003202:	480e      	ldr	r0, [pc, #56]	; (800323c <HAL_QSPI_MspInit+0xc0>)
 8003204:	f001 fd5a 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8003208:	23c8      	movs	r3, #200	; 0xc8
 800320a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003218:	230a      	movs	r3, #10
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003226:	f001 fd49 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800322a:	bf00      	nop
 800322c:	3728      	adds	r7, #40	; 0x28
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	a0001000 	.word	0xa0001000
 8003238:	40021000 	.word	0x40021000
 800323c:	48000400 	.word	0x48000400

08003240 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <HAL_SD_MspInit+0xb4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d144      	bne.n	80032ec <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 8003268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326c:	6613      	str	r3, [r2, #96]	; 0x60
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003286:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_SD_MspInit+0xb8>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80032aa:	2304      	movs	r3, #4
 80032ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b6:	2303      	movs	r3, #3
 80032b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80032ba:	230c      	movs	r3, #12
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4619      	mov	r1, r3
 80032c4:	480d      	ldr	r0, [pc, #52]	; (80032fc <HAL_SD_MspInit+0xbc>)
 80032c6:	f001 fcf9 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 80032ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80032ce:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80032dc:	230c      	movs	r3, #12
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4619      	mov	r1, r3
 80032e6:	4806      	ldr	r0, [pc, #24]	; (8003300 <HAL_SD_MspInit+0xc0>)
 80032e8:	f001 fce8 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80032ec:	bf00      	nop
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40012800 	.word	0x40012800
 80032f8:	40021000 	.word	0x40021000
 80032fc:	48000c00 	.word	0x48000c00
 8003300:	48000800 	.word	0x48000800

08003304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <HAL_SPI_MspInit+0xb4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d144      	bne.n	80033b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	4a24      	ldr	r2, [pc, #144]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6593      	str	r3, [r2, #88]	; 0x58
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_SPI_MspInit+0xb8>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800336e:	2306      	movs	r3, #6
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800337e:	2305      	movs	r3, #5
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	480d      	ldr	r0, [pc, #52]	; (80033c0 <HAL_SPI_MspInit+0xbc>)
 800338a:	f001 fc97 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800338e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033a0:	2305      	movs	r3, #5
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	4619      	mov	r1, r3
 80033aa:	4806      	ldr	r0, [pc, #24]	; (80033c4 <HAL_SPI_MspInit+0xc0>)
 80033ac:	f001 fc86 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033b0:	bf00      	nop
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40003800 	.word	0x40003800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	48002000 	.word	0x48002000
 80033c4:	48000400 	.word	0x48000400

080033c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_FMC_MspInit+0xc4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d14f      	bne.n	8003484 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_FMC_MspInit+0xc4>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033ea:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_FMC_MspInit+0xc8>)
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	4a28      	ldr	r2, [pc, #160]	; (8003490 <HAL_FMC_MspInit+0xc8>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6513      	str	r3, [r2, #80]	; 0x50
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <HAL_FMC_MspInit+0xc8>)
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 8003402:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003406:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003410:	2303      	movs	r3, #3
 8003412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003414:	230c      	movs	r3, #12
 8003416:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	4619      	mov	r1, r3
 800341c:	481d      	ldr	r0, [pc, #116]	; (8003494 <HAL_FMC_MspInit+0xcc>)
 800341e:	f001 fc4d 	bl	8004cbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 8003422:	f240 233f 	movw	r3, #575	; 0x23f
 8003426:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	2303      	movs	r3, #3
 8003432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003434:	230c      	movs	r3, #12
 8003436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4816      	ldr	r0, [pc, #88]	; (8003498 <HAL_FMC_MspInit+0xd0>)
 800343e:	f001 fc3d 	bl	8004cbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 8003442:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8003446:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003450:	2303      	movs	r3, #3
 8003452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003454:	230c      	movs	r3, #12
 8003456:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	4619      	mov	r1, r3
 800345c:	480f      	ldr	r0, [pc, #60]	; (800349c <HAL_FMC_MspInit+0xd4>)
 800345e:	f001 fc2d 	bl	8004cbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 8003462:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003466:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003474:	230c      	movs	r3, #12
 8003476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	4619      	mov	r1, r3
 800347c:	4808      	ldr	r0, [pc, #32]	; (80034a0 <HAL_FMC_MspInit+0xd8>)
 800347e:	f001 fc1d 	bl	8004cbc <HAL_GPIO_Init>
 8003482:	e000      	b.n	8003486 <HAL_FMC_MspInit+0xbe>
    return;
 8003484:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000218 	.word	0x20000218
 8003490:	40021000 	.word	0x40021000
 8003494:	48001000 	.word	0x48001000
 8003498:	48001800 	.word	0x48001800
 800349c:	48000c00 	.word	0x48000c00
 80034a0:	48001400 	.word	0x48001400

080034a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80034ac:	f7ff ff8c 	bl	80033c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a33      	ldr	r2, [pc, #204]	; (8003594 <HAL_SAI_MspInit+0xdc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d135      	bne.n	8003536 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80034ca:	4b33      	ldr	r3, [pc, #204]	; (8003598 <HAL_SAI_MspInit+0xe0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80034d2:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_SAI_MspInit+0xe4>)
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	4a31      	ldr	r2, [pc, #196]	; (800359c <HAL_SAI_MspInit+0xe4>)
 80034d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034dc:	6613      	str	r3, [r2, #96]	; 0x60
 80034de:	4b2f      	ldr	r3, [pc, #188]	; (800359c <HAL_SAI_MspInit+0xe4>)
 80034e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_SAI_MspInit+0xe0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <HAL_SAI_MspInit+0xe0>)
 80034f2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80034f4:	2354      	movs	r3, #84	; 0x54
 80034f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	2300      	movs	r3, #0
 8003502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003504:	230d      	movs	r3, #13
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	4619      	mov	r1, r3
 800350e:	4824      	ldr	r0, [pc, #144]	; (80035a0 <HAL_SAI_MspInit+0xe8>)
 8003510:	f001 fbd4 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003526:	230d      	movs	r3, #13
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	481c      	ldr	r0, [pc, #112]	; (80035a4 <HAL_SAI_MspInit+0xec>)
 8003532:	f001 fbc3 	bl	8004cbc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_SAI_MspInit+0xf0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d124      	bne.n	800358a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8003540:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_SAI_MspInit+0xe0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_SAI_MspInit+0xe4>)
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	4a13      	ldr	r2, [pc, #76]	; (800359c <HAL_SAI_MspInit+0xe4>)
 800354e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003552:	6613      	str	r3, [r2, #96]	; 0x60
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_SAI_MspInit+0xe4>)
 8003556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003560:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <HAL_SAI_MspInit+0xe0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <HAL_SAI_MspInit+0xe0>)
 8003568:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800356a:	2308      	movs	r3, #8
 800356c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800357a:	230d      	movs	r3, #13
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4619      	mov	r1, r3
 8003584:	4806      	ldr	r0, [pc, #24]	; (80035a0 <HAL_SAI_MspInit+0xe8>)
 8003586:	f001 fb99 	bl	8004cbc <HAL_GPIO_Init>

    }
}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40015404 	.word	0x40015404
 8003598:	2000021c 	.word	0x2000021c
 800359c:	40021000 	.word	0x40021000
 80035a0:	48001000 	.word	0x48001000
 80035a4:	48000400 	.word	0x48000400
 80035a8:	40015424 	.word	0x40015424

080035ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035be:	e7fe      	b.n	80035be <HardFault_Handler+0x4>

080035c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <MemManage_Handler+0x4>

080035c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ca:	e7fe      	b.n	80035ca <BusFault_Handler+0x4>

080035cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <UsageFault_Handler+0x4>

080035d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003600:	f000 f93c 	bl	800387c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}

08003608 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <OTG_FS_IRQHandler+0x10>)
 800360e:	f002 fc63 	bl	8005ed8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20002030 	.word	0x20002030

0800361c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e00a      	b.n	8003644 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800362e:	f3af 8000 	nop.w
 8003632:	4601      	mov	r1, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	60ba      	str	r2, [r7, #8]
 800363a:	b2ca      	uxtb	r2, r1
 800363c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	dbf0      	blt.n	800362e <_read+0x12>
	}

return len;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
	return -1;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800367e:	605a      	str	r2, [r3, #4]
	return 0;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_isatty>:

int _isatty(int file)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	return 1;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
	return 0;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <_sbrk+0x50>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <_sbrk+0x16>
		heap_end = &end;
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <_sbrk+0x50>)
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <_sbrk+0x54>)
 80036d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <_sbrk+0x50>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <_sbrk+0x50>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	466a      	mov	r2, sp
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d907      	bls.n	80036fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80036ea:	f00b fc17 	bl	800ef1c <__errno>
 80036ee:	4602      	mov	r2, r0
 80036f0:	230c      	movs	r3, #12
 80036f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80036f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036f8:	e006      	b.n	8003708 <_sbrk+0x48>
	}

	heap_end += incr;
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <_sbrk+0x50>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	4a03      	ldr	r2, [pc, #12]	; (8003710 <_sbrk+0x50>)
 8003704:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000220 	.word	0x20000220
 8003714:	20002440 	.word	0x20002440

08003718 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800371c:	4b17      	ldr	r3, [pc, #92]	; (800377c <SystemInit+0x64>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <SystemInit+0x64>)
 8003724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <SystemInit+0x68>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <SystemInit+0x68>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <SystemInit+0x68>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <SystemInit+0x68>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <SystemInit+0x68>)
 8003744:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003748:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800374c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <SystemInit+0x68>)
 8003750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003754:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <SystemInit+0x68>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <SystemInit+0x68>)
 800375c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <SystemInit+0x68>)
 8003764:	2200      	movs	r2, #0
 8003766:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <SystemInit+0x64>)
 800376a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800376e:	609a      	str	r2, [r3, #8]
#endif
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000ed00 	.word	0xe000ed00
 8003780:	40021000 	.word	0x40021000

08003784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800378a:	e003      	b.n	8003794 <LoopCopyDataInit>

0800378c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800378e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003792:	3104      	adds	r1, #4

08003794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003794:	480b      	ldr	r0, [pc, #44]	; (80037c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800379a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800379c:	d3f6      	bcc.n	800378c <CopyDataInit>
	ldr	r2, =_sbss
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80037a0:	e002      	b.n	80037a8 <LoopFillZerobss>

080037a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80037a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80037a4:	f842 3b04 	str.w	r3, [r2], #4

080037a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <LoopForever+0x16>)
	cmp	r2, r3
 80037aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80037ac:	d3f9      	bcc.n	80037a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037ae:	f7ff ffb3 	bl	8003718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b2:	f00b fbb9 	bl	800ef28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037b6:	f7fe f915 	bl	80019e4 <main>

080037ba <LoopForever>:

LoopForever:
    b LoopForever
 80037ba:	e7fe      	b.n	80037ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037bc:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80037c0:	08011a18 	.word	0x08011a18
	ldr	r0, =_sdata
 80037c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80037c8:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80037cc:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80037d0:	2000243c 	.word	0x2000243c

080037d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC1_2_IRQHandler>

080037d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e0:	2003      	movs	r0, #3
 80037e2:	f001 f897 	bl	8004914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037e6:	2000      	movs	r0, #0
 80037e8:	f000 f80e 	bl	8003808 <HAL_InitTick>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	71fb      	strb	r3, [r7, #7]
 80037f6:	e001      	b.n	80037fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037f8:	f7ff f970 	bl	8002adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037fc:	79fb      	ldrb	r3, [r7, #7]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003814:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_InitTick+0x68>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_InitTick+0x6c>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <HAL_InitTick+0x68>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f8a4 	bl	800497e <HAL_SYSTICK_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d809      	bhi.n	8003856 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003842:	2200      	movs	r2, #0
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800384a:	f001 f86e 	bl	800492a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <HAL_InitTick+0x70>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e007      	b.n	8003866 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e004      	b.n	8003866 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e001      	b.n	8003866 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000008 	.word	0x20000008
 8003874:	20000000 	.word	0x20000000
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_IncTick+0x1c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_IncTick+0x20>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4413      	add	r3, r2
 800388a:	4a03      	ldr	r2, [pc, #12]	; (8003898 <HAL_IncTick+0x1c>)
 800388c:	6013      	str	r3, [r2, #0]
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000b68 	.word	0x20000b68
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return uwTick;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_GetTick+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000b68 	.word	0x20000b68

080038b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff ffee 	bl	80038a0 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d0:	d004      	beq.n	80038dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_Delay+0x40>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038dc:	bf00      	nop
 80038de:	f7ff ffdf 	bl	80038a0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d8f7      	bhi.n	80038de <HAL_Delay+0x26>
  {
  }
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000008 	.word	0x20000008

080038fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003964:	b490      	push	{r4, r7}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3360      	adds	r3, #96	; 0x60
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <LL_ADC_SetOffset+0x40>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003996:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bc90      	pop	{r4, r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	03fff000 	.word	0x03fff000

080039a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80039a8:	b490      	push	{r4, r7}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	461a      	mov	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc90      	pop	{r4, r7}
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80039d0:	b490      	push	{r4, r7}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3360      	adds	r3, #96	; 0x60
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc90      	pop	{r4, r7}
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	615a      	str	r2, [r3, #20]
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a26:	b490      	push	{r4, r7}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3330      	adds	r3, #48	; 0x30
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	4413      	add	r3, r2
 8003a44:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	211f      	movs	r1, #31
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	401a      	ands	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0e9b      	lsrs	r3, r3, #26
 8003a5c:	f003 011f 	and.w	r1, r3, #31
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc90      	pop	{r4, r7}
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a78:	b490      	push	{r4, r7}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3314      	adds	r3, #20
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	0e5b      	lsrs	r3, r3, #25
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	4413      	add	r3, r2
 8003a96:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2107      	movs	r1, #7
 8003aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	401a      	ands	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	0d1b      	lsrs	r3, r3, #20
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	4313      	orrs	r3, r2
 8003abc:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc90      	pop	{r4, r7}
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0318 	and.w	r3, r3, #24
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003aec:	40d9      	lsrs	r1, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	400b      	ands	r3, r1
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	0007ffff 	.word	0x0007ffff

08003b10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6093      	str	r3, [r2, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d101      	bne.n	8003b4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b98:	d101      	bne.n	8003b9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <LL_ADC_IsEnabled+0x18>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <LL_ADC_IsEnabled+0x1a>
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d101      	bne.n	8003bea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d101      	bne.n	8003c10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e137      	b.n	8003eaa <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fe ff6b 	bl	8002b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff67 	bl	8003b34 <LL_ADC_IsDeepPowerDownEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff4d 	bl	8003b10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff ff82 	bl	8003b84 <LL_ADC_IsInternalRegulatorEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d113      	bne.n	8003cae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff66 	bl	8003b5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c90:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_ADC_Init+0x294>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	4a88      	ldr	r2, [pc, #544]	; (8003eb8 <HAL_ADC_Init+0x298>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ca0:	e002      	b.n	8003ca8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f9      	bne.n	8003ca2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff66 	bl	8003b84 <LL_ADC_IsInternalRegulatorEnabled>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ff77 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003ce4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 80d2 	bne.w	8003e98 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 80ce 	bne.w	8003e98 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d04:	f043 0202 	orr.w	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff ff4b 	bl	8003bac <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d115      	bne.n	8003d48 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d1c:	4867      	ldr	r0, [pc, #412]	; (8003ebc <HAL_ADC_Init+0x29c>)
 8003d1e:	f7ff ff45 	bl	8003bac <LL_ADC_IsEnabled>
 8003d22:	4604      	mov	r4, r0
 8003d24:	4866      	ldr	r0, [pc, #408]	; (8003ec0 <HAL_ADC_Init+0x2a0>)
 8003d26:	f7ff ff41 	bl	8003bac <LL_ADC_IsEnabled>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	431c      	orrs	r4, r3
 8003d2e:	4865      	ldr	r0, [pc, #404]	; (8003ec4 <HAL_ADC_Init+0x2a4>)
 8003d30:	f7ff ff3c 	bl	8003bac <LL_ADC_IsEnabled>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4323      	orrs	r3, r4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4619      	mov	r1, r3
 8003d42:	4861      	ldr	r0, [pc, #388]	; (8003ec8 <HAL_ADC_Init+0x2a8>)
 8003d44:	f7ff fdda 	bl	80038fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7e5b      	ldrb	r3, [r3, #25]
 8003d4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003d58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003d5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d106      	bne.n	8003d84 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	045b      	lsls	r3, r3, #17
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <HAL_ADC_Init+0x2ac>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff0a 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003dbe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff17 	bl	8003bf8 <LL_ADC_INJ_IsConversionOngoing>
 8003dca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d140      	bne.n	8003e54 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d13d      	bne.n	8003e54 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7e1b      	ldrb	r3, [r3, #24]
 8003de0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003de2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dfa:	f023 0306 	bic.w	r3, r3, #6
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	69b9      	ldr	r1, [r7, #24]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d118      	bne.n	8003e44 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e1c:	f023 0304 	bic.w	r3, r3, #4
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e28:	4311      	orrs	r1, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e34:	430a      	orrs	r2, r1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	611a      	str	r2, [r3, #16]
 8003e42:	e007      	b.n	8003e54 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10c      	bne.n	8003e76 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f023 010f 	bic.w	r1, r3, #15
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	1e5a      	subs	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
 8003e74:	e007      	b.n	8003e86 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 020f 	bic.w	r2, r2, #15
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	659a      	str	r2, [r3, #88]	; 0x58
 8003e96:	e007      	b.n	8003ea8 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	f043 0210 	orr.w	r2, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd90      	pop	{r4, r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	053e2d63 	.word	0x053e2d63
 8003ebc:	50040000 	.word	0x50040000
 8003ec0:	50040100 	.word	0x50040100
 8003ec4:	50040200 	.word	0x50040200
 8003ec8:	50040300 	.word	0x50040300
 8003ecc:	fff0c007 	.word	0xfff0c007

08003ed0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0a6      	sub	sp, #152	; 0x98
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x22>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e364      	b.n	80045bc <HAL_ADC_ConfigChannel+0x6ec>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fe67 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 8345 	bne.w	8004596 <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	d824      	bhi.n	8003f5e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	3b02      	subs	r3, #2
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d81b      	bhi.n	8003f56 <HAL_ADC_ConfigChannel+0x86>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <HAL_ADC_ConfigChannel+0x54>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f3d 	.word	0x08003f3d
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f4d 	.word	0x08003f4d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	220c      	movs	r2, #12
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	e011      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2212      	movs	r2, #18
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e00d      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2218      	movs	r2, #24
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	e009      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	e004      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2206      	movs	r2, #6
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	e000      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003f5e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	6859      	ldr	r1, [r3, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f7ff fd5a 	bl	8003a26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fe2b 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003f7c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fe37 	bl	8003bf8 <LL_ADC_INJ_IsConversionOngoing>
 8003f8a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 8163 	bne.w	800425e <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 815e 	bne.w	800425e <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003faa:	d10f      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f7ff fd5e 	bl	8003a78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fd1b 	bl	8003a00 <LL_ADC_SetSamplingTimeCommonConfig>
 8003fca:	e00e      	b.n	8003fea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f7ff fd4d 	bl	8003a78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fd0b 	bl	8003a00 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d00a      	beq.n	8004022 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6919      	ldr	r1, [r3, #16]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800401c:	f7ff fca2 	bl	8003964 <LL_ADC_SetOffset>
 8004020:	e11d      	b.n	800425e <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fcbd 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <HAL_ADC_ConfigChannel+0x17e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fcb2 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	0e9b      	lsrs	r3, r3, #26
 8004048:	f003 021f 	and.w	r2, r3, #31
 800404c:	e012      	b.n	8004074 <HAL_ADC_ConfigChannel+0x1a4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fca7 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 800405a:	4603      	mov	r3, r0
 800405c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004064:	fa93 f3a3 	rbit	r3, r3
 8004068:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800406a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_ADC_ConfigChannel+0x1bc>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	e00a      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x1d2>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800409a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d106      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fc8e 	bl	80039d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fc74 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x210>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fc69 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 80040d6:	4603      	mov	r3, r0
 80040d8:	0e9b      	lsrs	r3, r3, #26
 80040da:	f003 021f 	and.w	r2, r3, #31
 80040de:	e010      	b.n	8004102 <HAL_ADC_ConfigChannel+0x232>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fc5e 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 80040ec:	4603      	mov	r3, r0
 80040ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <HAL_ADC_ConfigChannel+0x24a>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	0e9b      	lsrs	r3, r3, #26
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	e00a      	b.n	8004130 <HAL_ADC_ConfigChannel+0x260>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	429a      	cmp	r2, r3
 8004132:	d106      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	2101      	movs	r1, #1
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fc47 	bl	80039d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fc2d 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 800414e:	4603      	mov	r3, r0
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <HAL_ADC_ConfigChannel+0x29e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2102      	movs	r1, #2
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fc22 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 8004164:	4603      	mov	r3, r0
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	e010      	b.n	8004190 <HAL_ADC_ConfigChannel+0x2c0>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fc17 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8004186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x2d8>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0e9b      	lsrs	r3, r3, #26
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	e00a      	b.n	80041be <HAL_ADC_ConfigChannel+0x2ee>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	429a      	cmp	r2, r3
 80041c0:	d106      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	2102      	movs	r1, #2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fc00 	bl	80039d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2103      	movs	r1, #3
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fbe6 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x32c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2103      	movs	r1, #3
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fbdb 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	f003 021f 	and.w	r2, r3, #31
 80041fa:	e010      	b.n	800421e <HAL_ADC_ConfigChannel+0x34e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2103      	movs	r1, #3
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fbd0 	bl	80039a8 <LL_ADC_GetOffsetChannel>
 8004208:	4603      	mov	r3, r0
 800420a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	2b00      	cmp	r3, #0
 8004228:	d105      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x366>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0e9b      	lsrs	r3, r3, #26
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	e00a      	b.n	800424c <HAL_ADC_ConfigChannel+0x37c>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8004244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	429a      	cmp	r2, r3
 800424e:	d106      	bne.n	800425e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2200      	movs	r2, #0
 8004256:	2103      	movs	r1, #3
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fbb9 	bl	80039d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fca2 	bl	8003bac <LL_ADC_IsEnabled>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 810c 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	461a      	mov	r2, r3
 800427e:	f7ff fc23 	bl	8003ac8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4aae      	ldr	r2, [pc, #696]	; (8004540 <HAL_ADC_ConfigChannel+0x670>)
 8004288:	4293      	cmp	r3, r2
 800428a:	f040 80fd 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x3e6>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	0e9b      	lsrs	r3, r3, #26
 80042a4:	3301      	adds	r3, #1
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	bf94      	ite	ls
 80042ae:	2301      	movls	r3, #1
 80042b0:	2300      	movhi	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e012      	b.n	80042dc <HAL_ADC_ConfigChannel+0x40c>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	bf94      	ite	ls
 80042d6:	2301      	movls	r3, #1
 80042d8:	2300      	movhi	r3, #0
 80042da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d064      	beq.n	80043aa <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x42c>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0e9b      	lsrs	r3, r3, #26
 80042f2:	3301      	adds	r3, #1
 80042f4:	069b      	lsls	r3, r3, #26
 80042f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042fa:	e00e      	b.n	800431a <HAL_ADC_ConfigChannel+0x44a>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800430a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430c:	fab3 f383 	clz	r3, r3
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3301      	adds	r3, #1
 8004314:	069b      	lsls	r3, r3, #26
 8004316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_ADC_ConfigChannel+0x46a>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	0e9b      	lsrs	r3, r3, #26
 800432c:	3301      	adds	r3, #1
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	e010      	b.n	800435c <HAL_ADC_ConfigChannel+0x48c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	3301      	adds	r3, #1
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	ea42 0103 	orr.w	r1, r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x4b2>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	3301      	adds	r3, #1
 8004374:	f003 021f 	and.w	r2, r3, #31
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	051b      	lsls	r3, r3, #20
 8004380:	e011      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x4d6>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3301      	adds	r3, #1
 800439a:	f003 021f 	and.w	r2, r3, #31
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043a6:	430b      	orrs	r3, r1
 80043a8:	e069      	b.n	800447e <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d107      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x4f6>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0e9b      	lsrs	r3, r3, #26
 80043bc:	3301      	adds	r3, #1
 80043be:	069b      	lsls	r3, r3, #26
 80043c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043c4:	e00e      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x514>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	61fb      	str	r3, [r7, #28]
  return result;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	fab3 f383 	clz	r3, r3
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	3301      	adds	r3, #1
 80043de:	069b      	lsls	r3, r3, #26
 80043e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x534>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	0e9b      	lsrs	r3, r3, #26
 80043f6:	3301      	adds	r3, #1
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	e010      	b.n	8004426 <HAL_ADC_ConfigChannel+0x556>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	617b      	str	r3, [r7, #20]
  return result;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	fab3 f383 	clz	r3, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	ea42 0103 	orr.w	r1, r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x582>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	0e9b      	lsrs	r3, r3, #26
 800443c:	3301      	adds	r3, #1
 800443e:	f003 021f 	and.w	r2, r3, #31
 8004442:	4613      	mov	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4413      	add	r3, r2
 8004448:	3b1e      	subs	r3, #30
 800444a:	051b      	lsls	r3, r3, #20
 800444c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004450:	e014      	b.n	800447c <HAL_ADC_ConfigChannel+0x5ac>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	60fb      	str	r3, [r7, #12]
  return result;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f003 021f 	and.w	r2, r3, #31
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	3b1e      	subs	r3, #30
 8004476:	051b      	lsls	r3, r3, #20
 8004478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447c:	430b      	orrs	r3, r1
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	6892      	ldr	r2, [r2, #8]
 8004482:	4619      	mov	r1, r3
 8004484:	f7ff faf8 	bl	8003a78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_ADC_ConfigChannel+0x674>)
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 808d 	beq.w	80045b0 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004496:	482c      	ldr	r0, [pc, #176]	; (8004548 <HAL_ADC_ConfigChannel+0x678>)
 8004498:	f7ff fa56 	bl	8003948 <LL_ADC_GetCommonPathInternalCh>
 800449c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a29      	ldr	r2, [pc, #164]	; (800454c <HAL_ADC_ConfigChannel+0x67c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d12b      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x632>
 80044aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d125      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a25      	ldr	r2, [pc, #148]	; (8004550 <HAL_ADC_ConfigChannel+0x680>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_ADC_ConfigChannel+0x5fa>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <HAL_ADC_ConfigChannel+0x684>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d16f      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044d2:	4619      	mov	r1, r3
 80044d4:	481c      	ldr	r0, [pc, #112]	; (8004548 <HAL_ADC_ConfigChannel+0x678>)
 80044d6:	f7ff fa24 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <HAL_ADC_ConfigChannel+0x688>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_ADC_ConfigChannel+0x68c>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099a      	lsrs	r2, r3, #6
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80044f2:	e002      	b.n	80044fa <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f9      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004500:	e053      	b.n	80045aa <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a16      	ldr	r2, [pc, #88]	; (8004560 <HAL_ADC_ConfigChannel+0x690>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d12b      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x694>
 800450c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d125      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <HAL_ADC_ConfigChannel+0x680>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_ADC_ConfigChannel+0x65c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <HAL_ADC_ConfigChannel+0x684>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d140      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800452c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004534:	4619      	mov	r1, r3
 8004536:	4804      	ldr	r0, [pc, #16]	; (8004548 <HAL_ADC_ConfigChannel+0x678>)
 8004538:	f7ff f9f3 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800453c:	e037      	b.n	80045ae <HAL_ADC_ConfigChannel+0x6de>
 800453e:	bf00      	nop
 8004540:	407f0000 	.word	0x407f0000
 8004544:	80080000 	.word	0x80080000
 8004548:	50040300 	.word	0x50040300
 800454c:	c7520000 	.word	0xc7520000
 8004550:	50040000 	.word	0x50040000
 8004554:	50040200 	.word	0x50040200
 8004558:	20000000 	.word	0x20000000
 800455c:	053e2d63 	.word	0x053e2d63
 8004560:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_ADC_ConfigChannel+0x6f4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d120      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800456e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d11a      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <HAL_ADC_ConfigChannel+0x6f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d115      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800458c:	4619      	mov	r1, r3
 800458e:	480f      	ldr	r0, [pc, #60]	; (80045cc <HAL_ADC_ConfigChannel+0x6fc>)
 8004590:	f7ff f9c7 	bl	8003922 <LL_ADC_SetCommonPathInternalCh>
 8004594:	e00c      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f043 0220 	orr.w	r2, r3, #32
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80045a8:	e002      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80045b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3798      	adds	r7, #152	; 0x98
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	80000001 	.word	0x80000001
 80045c8:	50040000 	.word	0x50040000
 80045cc:	50040300 	.word	0x50040300

080045d0 <LL_ADC_IsEnabled>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <LL_ADC_IsEnabled+0x18>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <LL_ADC_IsEnabled+0x1a>
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d101      	bne.n	800460e <LL_ADC_REG_IsConversionOngoing+0x18>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b0a1      	sub	sp, #132	; 0x84
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004636:	2302      	movs	r3, #2
 8004638:	e08f      	b.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a47      	ldr	r2, [pc, #284]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d102      	bne.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800464c:	4b46      	ldr	r3, [pc, #280]	; (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e001      	b.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e072      	b.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ffbd 	bl	80045f6 <LL_ADC_REG_IsConversionOngoing>
 800467c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ffb7 	bl	80045f6 <LL_ADC_REG_IsConversionOngoing>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d154      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800468e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004690:	2b00      	cmp	r3, #0
 8004692:	d151      	bne.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004696:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02c      	beq.n	80046fa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046b2:	035b      	lsls	r3, r3, #13
 80046b4:	430b      	orrs	r3, r1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046bc:	4829      	ldr	r0, [pc, #164]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80046be:	f7ff ff87 	bl	80045d0 <LL_ADC_IsEnabled>
 80046c2:	4604      	mov	r4, r0
 80046c4:	4828      	ldr	r0, [pc, #160]	; (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80046c6:	f7ff ff83 	bl	80045d0 <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	431c      	orrs	r4, r3
 80046ce:	4828      	ldr	r0, [pc, #160]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046d0:	f7ff ff7e 	bl	80045d0 <LL_ADC_IsEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4323      	orrs	r3, r4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d137      	bne.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046e4:	f023 030f 	bic.w	r3, r3, #15
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	6811      	ldr	r1, [r2, #0]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	6892      	ldr	r2, [r2, #8]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	431a      	orrs	r2, r3
 80046f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046f8:	e028      	b.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004704:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004706:	4817      	ldr	r0, [pc, #92]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004708:	f7ff ff62 	bl	80045d0 <LL_ADC_IsEnabled>
 800470c:	4604      	mov	r4, r0
 800470e:	4816      	ldr	r0, [pc, #88]	; (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004710:	f7ff ff5e 	bl	80045d0 <LL_ADC_IsEnabled>
 8004714:	4603      	mov	r3, r0
 8004716:	431c      	orrs	r4, r3
 8004718:	4815      	ldr	r0, [pc, #84]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800471a:	f7ff ff59 	bl	80045d0 <LL_ADC_IsEnabled>
 800471e:	4603      	mov	r3, r0
 8004720:	4323      	orrs	r3, r4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d112      	bne.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800472e:	f023 030f 	bic.w	r3, r3, #15
 8004732:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004734:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004736:	e009      	b.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800474a:	e000      	b.n	800474e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800474c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004756:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800475a:	4618      	mov	r0, r3
 800475c:	3784      	adds	r7, #132	; 0x84
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}
 8004762:	bf00      	nop
 8004764:	50040000 	.word	0x50040000
 8004768:	50040100 	.word	0x50040100
 800476c:	50040300 	.word	0x50040300
 8004770:	50040200 	.word	0x50040200

08004774 <__NVIC_SetPriorityGrouping>:
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800479c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	60d3      	str	r3, [r2, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_GetPriorityGrouping>:
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <__NVIC_GetPriorityGrouping+0x18>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0307 	and.w	r3, r3, #7
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_EnableIRQ>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	4907      	ldr	r1, [pc, #28]	; (8004810 <__NVIC_EnableIRQ+0x38>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_SetPriority>:
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db0a      	blt.n	800483e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	490c      	ldr	r1, [pc, #48]	; (8004860 <__NVIC_SetPriority+0x4c>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	440b      	add	r3, r1
 8004838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800483c:	e00a      	b.n	8004854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4908      	ldr	r1, [pc, #32]	; (8004864 <__NVIC_SetPriority+0x50>)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3b04      	subs	r3, #4
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	440b      	add	r3, r1
 8004852:	761a      	strb	r2, [r3, #24]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <NVIC_EncodePriority>:
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf28      	it	cs
 8004886:	2304      	movcs	r3, #4
 8004888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3304      	adds	r3, #4
 800488e:	2b06      	cmp	r3, #6
 8004890:	d902      	bls.n	8004898 <NVIC_EncodePriority+0x30>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3b03      	subs	r3, #3
 8004896:	e000      	b.n	800489a <NVIC_EncodePriority+0x32>
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	4313      	orrs	r3, r2
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <SysTick_Config>:
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e0:	d301      	bcc.n	80048e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80048e2:	2301      	movs	r3, #1
 80048e4:	e00f      	b.n	8004906 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048e6:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <SysTick_Config+0x40>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ee:	210f      	movs	r1, #15
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f4:	f7ff ff8e 	bl	8004814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <SysTick_Config+0x40>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048fe:	4b04      	ldr	r3, [pc, #16]	; (8004910 <SysTick_Config+0x40>)
 8004900:	2207      	movs	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000e010 	.word	0xe000e010

08004914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff29 	bl	8004774 <__NVIC_SetPriorityGrouping>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800493c:	f7ff ff3e 	bl	80047bc <__NVIC_GetPriorityGrouping>
 8004940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	6978      	ldr	r0, [r7, #20]
 8004948:	f7ff ff8e 	bl	8004868 <NVIC_EncodePriority>
 800494c:	4602      	mov	r2, r0
 800494e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff5d 	bl	8004814 <__NVIC_SetPriority>
}
 800495a:	bf00      	nop
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff31 	bl	80047d8 <__NVIC_EnableIRQ>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ffa2 	bl	80048d0 <SysTick_Config>
 800498c:	4603      	mov	r3, r0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e075      	b.n	8004a96 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fe f980 	bl	8002cc4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049da:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <HAL_DCMI_Init+0x108>)
 80049f6:	400b      	ands	r3, r1
 80049f8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004a0e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004a1a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004a26:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004a32:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004a3e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d112      	bne.n	8004a76 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	7f1b      	ldrb	r3, [r3, #28]
 8004a54:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7f5b      	ldrb	r3, [r3, #29]
 8004a5a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004a5c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	7f9b      	ldrb	r3, [r3, #30]
 8004a62:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	7fdb      	ldrb	r3, [r3, #31]
 8004a6c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004a72:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004a74:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 021f 	orr.w	r2, r2, #31
 8004a84:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	ffe0f007 	.word	0xffe0f007

08004aa4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0ac      	b.n	8004c10 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f8b2 	bl	8004c24 <DFSDM_GetChannelFromInstance>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <HAL_DFSDM_ChannelInit+0x174>)
 8004ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e09f      	b.n	8004c10 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fe f977 	bl	8002dc4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004ad6:	4b51      	ldr	r3, [pc, #324]	; (8004c1c <HAL_DFSDM_ChannelInit+0x178>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a4f      	ldr	r2, [pc, #316]	; (8004c1c <HAL_DFSDM_ChannelInit+0x178>)
 8004ade:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004ae0:	4b4e      	ldr	r3, [pc, #312]	; (8004c1c <HAL_DFSDM_ChannelInit+0x178>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d125      	bne.n	8004b34 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004ae8:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4c      	ldr	r2, [pc, #304]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004aee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004af2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004af4:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4948      	ldr	r1, [pc, #288]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004b02:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a46      	ldr	r2, [pc, #280]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b08:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004b0c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	791b      	ldrb	r3, [r3, #4]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d108      	bne.n	8004b28 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004b16:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	493f      	ldr	r1, [pc, #252]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004b28:	4b3d      	ldr	r3, [pc, #244]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b32:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004b42:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b52:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004b58:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 020f 	bic.w	r2, r2, #15
 8004b70:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004b98:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f002 0207 	and.w	r2, r2, #7
 8004bc4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f810 	bl	8004c24 <DFSDM_GetChannelFromInstance>
 8004c04:	4601      	mov	r1, r0
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <HAL_DFSDM_ChannelInit+0x174>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000228 	.word	0x20000228
 8004c1c:	20000224 	.word	0x20000224
 8004c20:	40016000 	.word	0x40016000

08004c24 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <DFSDM_GetChannelFromInstance+0x7c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d102      	bne.n	8004c3a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e02b      	b.n	8004c92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <DFSDM_GetChannelFromInstance+0x80>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d102      	bne.n	8004c48 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004c42:	2301      	movs	r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e024      	b.n	8004c92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <DFSDM_GetChannelFromInstance+0x84>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d102      	bne.n	8004c56 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004c50:	2302      	movs	r3, #2
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e01d      	b.n	8004c92 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a14      	ldr	r2, [pc, #80]	; (8004cac <DFSDM_GetChannelFromInstance+0x88>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d102      	bne.n	8004c64 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004c5e:	2304      	movs	r3, #4
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e016      	b.n	8004c92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a12      	ldr	r2, [pc, #72]	; (8004cb0 <DFSDM_GetChannelFromInstance+0x8c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d102      	bne.n	8004c72 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004c6c:	2305      	movs	r3, #5
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e00f      	b.n	8004c92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a0f      	ldr	r2, [pc, #60]	; (8004cb4 <DFSDM_GetChannelFromInstance+0x90>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d102      	bne.n	8004c80 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004c7a:	2306      	movs	r3, #6
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e008      	b.n	8004c92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <DFSDM_GetChannelFromInstance+0x94>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d102      	bne.n	8004c8e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004c88:	2307      	movs	r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e001      	b.n	8004c92 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40016000 	.word	0x40016000
 8004ca4:	40016020 	.word	0x40016020
 8004ca8:	40016040 	.word	0x40016040
 8004cac:	40016080 	.word	0x40016080
 8004cb0:	400160a0 	.word	0x400160a0
 8004cb4:	400160c0 	.word	0x400160c0
 8004cb8:	400160e0 	.word	0x400160e0

08004cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cca:	e166      	b.n	8004f9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8158 	beq.w	8004f94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d00b      	beq.n	8004d04 <HAL_GPIO_Init+0x48>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d007      	beq.n	8004d04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf8:	2b11      	cmp	r3, #17
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b12      	cmp	r3, #18
 8004d02:	d130      	bne.n	8004d66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	2203      	movs	r2, #3
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4013      	ands	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	f003 0201 	and.w	r2, r3, #1
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	2203      	movs	r2, #3
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0xea>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b12      	cmp	r3, #18
 8004da4:	d123      	bne.n	8004dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	6939      	ldr	r1, [r7, #16]
 8004dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2203      	movs	r2, #3
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80b2 	beq.w	8004f94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e30:	4b61      	ldr	r3, [pc, #388]	; (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	4a60      	ldr	r2, [pc, #384]	; (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8004e3c:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e48:	4a5c      	ldr	r2, [pc, #368]	; (8004fbc <HAL_GPIO_Init+0x300>)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	3302      	adds	r3, #2
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	220f      	movs	r2, #15
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e72:	d02b      	beq.n	8004ecc <HAL_GPIO_Init+0x210>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a52      	ldr	r2, [pc, #328]	; (8004fc0 <HAL_GPIO_Init+0x304>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d025      	beq.n	8004ec8 <HAL_GPIO_Init+0x20c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a51      	ldr	r2, [pc, #324]	; (8004fc4 <HAL_GPIO_Init+0x308>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01f      	beq.n	8004ec4 <HAL_GPIO_Init+0x208>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a50      	ldr	r2, [pc, #320]	; (8004fc8 <HAL_GPIO_Init+0x30c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d019      	beq.n	8004ec0 <HAL_GPIO_Init+0x204>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a4f      	ldr	r2, [pc, #316]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <HAL_GPIO_Init+0x200>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a4e      	ldr	r2, [pc, #312]	; (8004fd0 <HAL_GPIO_Init+0x314>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_GPIO_Init+0x1fc>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a4d      	ldr	r2, [pc, #308]	; (8004fd4 <HAL_GPIO_Init+0x318>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <HAL_GPIO_Init+0x1f8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a4c      	ldr	r2, [pc, #304]	; (8004fd8 <HAL_GPIO_Init+0x31c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d101      	bne.n	8004eb0 <HAL_GPIO_Init+0x1f4>
 8004eac:	2307      	movs	r3, #7
 8004eae:	e00e      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	e00c      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004eb4:	2306      	movs	r3, #6
 8004eb6:	e00a      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004eb8:	2305      	movs	r3, #5
 8004eba:	e008      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	e006      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e004      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e002      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	f002 0203 	and.w	r2, r2, #3
 8004ed4:	0092      	lsls	r2, r2, #2
 8004ed6:	4093      	lsls	r3, r2
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ede:	4937      	ldr	r1, [pc, #220]	; (8004fbc <HAL_GPIO_Init+0x300>)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eec:	4b3b      	ldr	r3, [pc, #236]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f10:	4a32      	ldr	r2, [pc, #200]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004f16:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f3a:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f40:	4b26      	ldr	r3, [pc, #152]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f8e:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f47f ae91 	bne.w	8004ccc <HAL_GPIO_Init+0x10>
  }
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	48000400 	.word	0x48000400
 8004fc4:	48000800 	.word	0x48000800
 8004fc8:	48000c00 	.word	0x48000c00
 8004fcc:	48001000 	.word	0x48001000
 8004fd0:	48001400 	.word	0x48001400
 8004fd4:	48001800 	.word	0x48001800
 8004fd8:	48001c00 	.word	0x48001c00
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	807b      	strh	r3, [r7, #2]
 8004fec:	4613      	mov	r3, r2
 8004fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ff0:	787b      	ldrb	r3, [r7, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ffc:	e002      	b.n	8005004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005028:	887a      	ldrh	r2, [r7, #2]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800502e:	e002      	b.n	8005036 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005030:	887a      	ldrh	r2, [r7, #2]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	619a      	str	r2, [r3, #24]
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e081      	b.n	8005158 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fd ff0d 	bl	8002e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2224      	movs	r2, #36	; 0x24
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005092:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d107      	bne.n	80050bc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050b8:	609a      	str	r2, [r3, #8]
 80050ba:	e006      	b.n	80050ca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d104      	bne.n	80050dc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	ea42 0103 	orr.w	r1, r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	021a      	lsls	r2, r3, #8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69d9      	ldr	r1, [r3, #28]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	461a      	mov	r2, r3
 800516c:	460b      	mov	r3, r1
 800516e:	817b      	strh	r3, [r7, #10]
 8005170:	4613      	mov	r3, r2
 8005172:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b20      	cmp	r3, #32
 800517e:	f040 80da 	bne.w	8005336 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_I2C_Master_Transmit+0x30>
 800518c:	2302      	movs	r3, #2
 800518e:	e0d3      	b.n	8005338 <HAL_I2C_Master_Transmit+0x1d8>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005198:	f7fe fb82 	bl	80038a0 <HAL_GetTick>
 800519c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2319      	movs	r3, #25
 80051a4:	2201      	movs	r2, #1
 80051a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 faed 	bl	800578a <I2C_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e0be      	b.n	8005338 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2221      	movs	r2, #33	; 0x21
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2210      	movs	r2, #16
 80051c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	893a      	ldrh	r2, [r7, #8]
 80051da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d90e      	bls.n	800520a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	22ff      	movs	r2, #255	; 0xff
 80051f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	8979      	ldrh	r1, [r7, #10]
 80051fa:	4b51      	ldr	r3, [pc, #324]	; (8005340 <HAL_I2C_Master_Transmit+0x1e0>)
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fc50 	bl	8005aa8 <I2C_TransferConfig>
 8005208:	e06c      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	b2da      	uxtb	r2, r3
 800521a:	8979      	ldrh	r1, [r7, #10]
 800521c:	4b48      	ldr	r3, [pc, #288]	; (8005340 <HAL_I2C_Master_Transmit+0x1e0>)
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fc3f 	bl	8005aa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800522a:	e05b      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	6a39      	ldr	r1, [r7, #32]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 faea 	bl	800580a <I2C_WaitOnTXISFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e07b      	b.n	8005338 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d034      	beq.n	80052e4 <HAL_I2C_Master_Transmit+0x184>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d130      	bne.n	80052e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2200      	movs	r2, #0
 800528a:	2180      	movs	r1, #128	; 0x80
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fa7c 	bl	800578a <I2C_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e04d      	b.n	8005338 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2bff      	cmp	r3, #255	; 0xff
 80052a4:	d90e      	bls.n	80052c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	22ff      	movs	r2, #255	; 0xff
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	8979      	ldrh	r1, [r7, #10]
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fbf3 	bl	8005aa8 <I2C_TransferConfig>
 80052c2:	e00f      	b.n	80052e4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	8979      	ldrh	r1, [r7, #10]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fbe2 	bl	8005aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d19e      	bne.n	800522c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	6a39      	ldr	r1, [r7, #32]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fac9 	bl	800588a <I2C_WaitOnSTOPFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e01a      	b.n	8005338 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2220      	movs	r2, #32
 8005308:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6859      	ldr	r1, [r3, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_I2C_Master_Transmit+0x1e4>)
 8005316:	400b      	ands	r3, r1
 8005318:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	80002000 	.word	0x80002000
 8005344:	fe00e800 	.word	0xfe00e800

08005348 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	461a      	mov	r2, r3
 8005354:	460b      	mov	r3, r1
 8005356:	817b      	strh	r3, [r7, #10]
 8005358:	4613      	mov	r3, r2
 800535a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b20      	cmp	r3, #32
 8005366:	f040 80db 	bne.w	8005520 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_I2C_Master_Receive+0x30>
 8005374:	2302      	movs	r3, #2
 8005376:	e0d4      	b.n	8005522 <HAL_I2C_Master_Receive+0x1da>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005380:	f7fe fa8e 	bl	80038a0 <HAL_GetTick>
 8005384:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	2319      	movs	r3, #25
 800538c:	2201      	movs	r2, #1
 800538e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f9f9 	bl	800578a <I2C_WaitOnFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e0bf      	b.n	8005522 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2222      	movs	r2, #34	; 0x22
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2210      	movs	r2, #16
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	893a      	ldrh	r2, [r7, #8]
 80053c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2bff      	cmp	r3, #255	; 0xff
 80053d2:	d90e      	bls.n	80053f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	8979      	ldrh	r1, [r7, #10]
 80053e2:	4b52      	ldr	r3, [pc, #328]	; (800552c <HAL_I2C_Master_Receive+0x1e4>)
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fb5c 	bl	8005aa8 <I2C_TransferConfig>
 80053f0:	e06d      	b.n	80054ce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	b2da      	uxtb	r2, r3
 8005402:	8979      	ldrh	r1, [r7, #10]
 8005404:	4b49      	ldr	r3, [pc, #292]	; (800552c <HAL_I2C_Master_Receive+0x1e4>)
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fb4b 	bl	8005aa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005412:	e05c      	b.n	80054ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	6a39      	ldr	r1, [r7, #32]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fa73 	bl	8005904 <I2C_WaitOnRXNEFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e07c      	b.n	8005522 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d034      	beq.n	80054ce <HAL_I2C_Master_Receive+0x186>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	2b00      	cmp	r3, #0
 800546a:	d130      	bne.n	80054ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2200      	movs	r2, #0
 8005474:	2180      	movs	r1, #128	; 0x80
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f987 	bl	800578a <I2C_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e04d      	b.n	8005522 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	2bff      	cmp	r3, #255	; 0xff
 800548e:	d90e      	bls.n	80054ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	22ff      	movs	r2, #255	; 0xff
 8005494:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	b2da      	uxtb	r2, r3
 800549c:	8979      	ldrh	r1, [r7, #10]
 800549e:	2300      	movs	r3, #0
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fafe 	bl	8005aa8 <I2C_TransferConfig>
 80054ac:	e00f      	b.n	80054ce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	8979      	ldrh	r1, [r7, #10]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 faed 	bl	8005aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d19d      	bne.n	8005414 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	6a39      	ldr	r1, [r7, #32]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f9d4 	bl	800588a <I2C_WaitOnSTOPFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e01a      	b.n	8005522 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2220      	movs	r2, #32
 80054f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <HAL_I2C_Master_Receive+0x1e8>)
 8005500:	400b      	ands	r3, r1
 8005502:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	80002400 	.word	0x80002400
 8005530:	fe00e800 	.word	0xfe00e800

08005534 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	460b      	mov	r3, r1
 8005542:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b20      	cmp	r3, #32
 8005552:	f040 80f1 	bne.w	8005738 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005564:	d101      	bne.n	800556a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
 8005568:	e0e7      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_I2C_IsDeviceReady+0x44>
 8005574:	2302      	movs	r3, #2
 8005576:	e0e0      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2224      	movs	r2, #36	; 0x24
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d107      	bne.n	80055a6 <HAL_I2C_IsDeviceReady+0x72>
 8005596:	897b      	ldrh	r3, [r7, #10]
 8005598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800559c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055a4:	e004      	b.n	80055b0 <HAL_I2C_IsDeviceReady+0x7c>
 80055a6:	897b      	ldrh	r3, [r7, #10]
 80055a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80055b6:	f7fe f973 	bl	80038a0 <HAL_GetTick>
 80055ba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b10      	cmp	r3, #16
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055e8:	e034      	b.n	8005654 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f0:	d01a      	beq.n	8005628 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fe f955 	bl	80038a0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <HAL_I2C_IsDeviceReady+0xd4>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10f      	bne.n	8005628 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e088      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b20      	cmp	r3, #32
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b10      	cmp	r3, #16
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005654:	7ffb      	ldrb	r3, [r7, #31]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <HAL_I2C_IsDeviceReady+0x12c>
 800565a:	7fbb      	ldrb	r3, [r7, #30]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0c4      	beq.n	80055ea <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b10      	cmp	r3, #16
 800566c:	d01a      	beq.n	80056a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	2120      	movs	r1, #32
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f886 	bl	800578a <I2C_WaitOnFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e058      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2220      	movs	r2, #32
 800568e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e04a      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	2120      	movs	r1, #32
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f86b 	bl	800578a <I2C_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e03d      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2210      	movs	r2, #16
 80056c4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2220      	movs	r2, #32
 80056cc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d118      	bne.n	8005708 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2120      	movs	r1, #32
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f84a 	bl	800578a <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e01c      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2220      	movs	r2, #32
 8005706:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3301      	adds	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	f63f af3b 	bhi.w	800558e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b02      	cmp	r3, #2
 8005756:	d103      	bne.n	8005760 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d007      	beq.n	800577e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	619a      	str	r2, [r3, #24]
  }
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800579a:	e022      	b.n	80057e2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a2:	d01e      	beq.n	80057e2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7fe f87c 	bl	80038a0 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d302      	bcc.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x30>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d113      	bne.n	80057e2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e00f      	b.n	8005802 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d0cd      	beq.n	800579c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005816:	e02c      	b.n	8005872 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f8dd 	bl	80059dc <I2C_IsAcknowledgeFailed>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e02a      	b.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005832:	d01e      	beq.n	8005872 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005834:	f7fe f834 	bl	80038a0 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d113      	bne.n	8005872 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	f043 0220 	orr.w	r2, r3, #32
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e007      	b.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d1cb      	bne.n	8005818 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005896:	e028      	b.n	80058ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f89d 	bl	80059dc <I2C_IsAcknowledgeFailed>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e026      	b.n	80058fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fd fff8 	bl	80038a0 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d113      	bne.n	80058ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e007      	b.n	80058fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d1cf      	bne.n	8005898 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005910:	e055      	b.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f860 	bl	80059dc <I2C_IsAcknowledgeFailed>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e053      	b.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b20      	cmp	r3, #32
 8005932:	d129      	bne.n	8005988 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d105      	bne.n	800594e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e03f      	b.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2220      	movs	r2, #32
 8005954:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005962:	400b      	ands	r3, r1
 8005964:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e022      	b.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005988:	f7fd ff8a 	bl	80038a0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e007      	b.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d1a2      	bne.n	8005912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	fe00e800 	.word	0xfe00e800

080059dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d151      	bne.n	8005a9a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059f6:	e022      	b.n	8005a3e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059fe:	d01e      	beq.n	8005a3e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a00:	f7fd ff4e 	bl	80038a0 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <I2C_IsAcknowledgeFailed+0x3a>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d113      	bne.n	8005a3e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e02e      	b.n	8005a9c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d1d5      	bne.n	80059f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2210      	movs	r2, #16
 8005a52:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff fe70 	bl	8005742 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6859      	ldr	r1, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <I2C_IsAcknowledgeFailed+0xc8>)
 8005a6e:	400b      	ands	r3, r1
 8005a70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	fe00e800 	.word	0xfe00e800

08005aa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	817b      	strh	r3, [r7, #10]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	0d5b      	lsrs	r3, r3, #21
 8005ac4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <I2C_TransferConfig+0x58>)
 8005aca:	430b      	orrs	r3, r1
 8005acc:	43db      	mvns	r3, r3
 8005ace:	ea02 0103 	and.w	r1, r2, r3
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ad8:	7a7b      	ldrb	r3, [r7, #9]
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	03ff63ff 	.word	0x03ff63ff

08005b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d138      	bne.n	8005b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e032      	b.n	8005b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	; 0x24
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d139      	bne.n	8005c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e033      	b.n	8005c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2224      	movs	r2, #36	; 0x24
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c34:	b08f      	sub	sp, #60	; 0x3c
 8005c36:	af0a      	add	r7, sp, #40	; 0x28
 8005c38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e116      	b.n	8005e72 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f008 fd40 	bl	800e6e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2203      	movs	r2, #3
 8005c68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f005 fe87 	bl	800b996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	687e      	ldr	r6, [r7, #4]
 8005c90:	466d      	mov	r5, sp
 8005c92:	f106 0410 	add.w	r4, r6, #16
 8005c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ca2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ca6:	1d33      	adds	r3, r6, #4
 8005ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005caa:	6838      	ldr	r0, [r7, #0]
 8005cac:	f005 fd74 	bl	800b798 <USB_CoreInit>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e0d7      	b.n	8005e72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f005 fe75 	bl	800b9b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
 8005cd2:	e04a      	b.n	8005d6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cd4:	7bfa      	ldrb	r2, [r7, #15]
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	333d      	adds	r3, #61	; 0x3d
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ce8:	7bfa      	ldrb	r2, [r7, #15]
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	333c      	adds	r3, #60	; 0x3c
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cfc:	7bfa      	ldrb	r2, [r7, #15]
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	b298      	uxth	r0, r3
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3342      	adds	r3, #66	; 0x42
 8005d10:	4602      	mov	r2, r0
 8005d12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d14:	7bfa      	ldrb	r2, [r7, #15]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	333f      	adds	r3, #63	; 0x3f
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d28:	7bfa      	ldrb	r2, [r7, #15]
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3344      	adds	r3, #68	; 0x44
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d3c:	7bfa      	ldrb	r2, [r7, #15]
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3348      	adds	r3, #72	; 0x48
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d50:	7bfa      	ldrb	r2, [r7, #15]
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3350      	adds	r3, #80	; 0x50
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	3301      	adds	r3, #1
 8005d68:	73fb      	strb	r3, [r7, #15]
 8005d6a:	7bfa      	ldrb	r2, [r7, #15]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d3af      	bcc.n	8005cd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d74:	2300      	movs	r3, #0
 8005d76:	73fb      	strb	r3, [r7, #15]
 8005d78:	e044      	b.n	8005e04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d7a:	7bfa      	ldrb	r2, [r7, #15]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d90:	7bfa      	ldrb	r2, [r7, #15]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005da2:	7bfa      	ldrb	r2, [r7, #15]
 8005da4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005da6:	7bfa      	ldrb	r2, [r7, #15]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005dbc:	7bfa      	ldrb	r2, [r7, #15]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dd2:	7bfa      	ldrb	r2, [r7, #15]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005de8:	7bfa      	ldrb	r2, [r7, #15]
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	3301      	adds	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
 8005e04:	7bfa      	ldrb	r2, [r7, #15]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d3b5      	bcc.n	8005d7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	687e      	ldr	r6, [r7, #4]
 8005e16:	466d      	mov	r5, sp
 8005e18:	f106 0410 	add.w	r4, r6, #16
 8005e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e2c:	1d33      	adds	r3, r6, #4
 8005e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e30:	6838      	ldr	r0, [r7, #0]
 8005e32:	f005 fdeb 	bl	800ba0c <USB_DevInit>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e014      	b.n	8005e72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 ff61 	bl	8006d28 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f006 fd64 	bl	800c938 <USB_DevDisconnect>

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_PCD_Start+0x1c>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e01c      	b.n	8005ed0 <HAL_PCD_Start+0x56>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d105      	bne.n	8005eb2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f006 fd26 	bl	800c908 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f005 fd57 	bl	800b974 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b08d      	sub	sp, #52	; 0x34
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f006 fdcd 	bl	800ca8e <USB_GetMode>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 838f 	bne.w	800661a <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f006 fd31 	bl	800c968 <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8385 	beq.w	8006618 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f006 fd28 	bl	800c968 <USB_ReadInterrupts>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d107      	bne.n	8005f32 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f002 0202 	and.w	r2, r2, #2
 8005f30:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f006 fd16 	bl	800c968 <USB_ReadInterrupts>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d161      	bne.n	800600a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0210 	bic.w	r2, r2, #16
 8005f54:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f003 020f 	and.w	r2, r3, #15
 8005f62:	4613      	mov	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	3304      	adds	r3, #4
 8005f74:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	0c5b      	lsrs	r3, r3, #17
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d124      	bne.n	8005fcc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d035      	beq.n	8005ffa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6a38      	ldr	r0, [r7, #32]
 8005fa2:	f006 fb8e 	bl	800c6c2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb2:	441a      	add	r2, r3
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	091b      	lsrs	r3, r3, #4
 8005fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fc4:	441a      	add	r2, r3
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	619a      	str	r2, [r3, #24]
 8005fca:	e016      	b.n	8005ffa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	0c5b      	lsrs	r3, r3, #17
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d110      	bne.n	8005ffa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fde:	2208      	movs	r2, #8
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6a38      	ldr	r0, [r7, #32]
 8005fe4:	f006 fb6d 	bl	800c6c2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	091b      	lsrs	r3, r3, #4
 8005ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff4:	441a      	add	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0210 	orr.w	r2, r2, #16
 8006008:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f006 fcaa 	bl	800c968 <USB_ReadInterrupts>
 8006014:	4603      	mov	r3, r0
 8006016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800601a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800601e:	d16e      	bne.n	80060fe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f006 fcb0 	bl	800c98e <USB_ReadDevAllOutEpInterrupt>
 800602e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006030:	e062      	b.n	80060f8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d057      	beq.n	80060ec <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f006 fcd5 	bl	800c9f6 <USB_ReadDevOutEPInterrupt>
 800604c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00c      	beq.n	8006072 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	461a      	mov	r2, r3
 8006066:	2301      	movs	r3, #1
 8006068:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800606a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fd81 	bl	8006b74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	461a      	mov	r2, r3
 800608a:	2308      	movs	r3, #8
 800608c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800608e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fdbd 	bl	8006c10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	461a      	mov	r2, r3
 80060ae:	2310      	movs	r3, #16
 80060b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	461a      	mov	r2, r3
 80060ca:	2320      	movs	r3, #32
 80060cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e4:	461a      	mov	r2, r3
 80060e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d199      	bne.n	8006032 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f006 fc30 	bl	800c968 <USB_ReadInterrupts>
 8006108:	4603      	mov	r3, r0
 800610a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800610e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006112:	f040 8087 	bne.w	8006224 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f006 fc51 	bl	800c9c2 <USB_ReadDevAllInEpInterrupt>
 8006120:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006126:	e07a      	b.n	800621e <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d06f      	beq.n	8006212 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f006 fc78 	bl	800ca32 <USB_ReadDevInEPInterrupt>
 8006142:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	2201      	movs	r2, #1
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	43db      	mvns	r3, r3
 8006168:	69f9      	ldr	r1, [r7, #28]
 800616a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800616e:	4013      	ands	r3, r2
 8006170:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	461a      	mov	r2, r3
 8006180:	2301      	movs	r3, #1
 8006182:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	b2db      	uxtb	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f008 fb3d 	bl	800e80a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a6:	461a      	mov	r2, r3
 80061a8:	2308      	movs	r3, #8
 80061aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	461a      	mov	r2, r3
 80061c4:	2310      	movs	r3, #16
 80061c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061de:	461a      	mov	r2, r3
 80061e0:	2340      	movs	r3, #64	; 0x40
 80061e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fa:	461a      	mov	r2, r3
 80061fc:	2302      	movs	r3, #2
 80061fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800620a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fc29 	bl	8006a64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	3301      	adds	r3, #1
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d181      	bne.n	8006128 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f006 fb9d 	bl	800c968 <USB_ReadInterrupts>
 800622e:	4603      	mov	r3, r0
 8006230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006238:	d122      	bne.n	8006280 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006254:	2b01      	cmp	r3, #1
 8006256:	d108      	bne.n	800626a <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f008 fdee 	bl	800ee44 <HAL_PCDEx_LPM_Callback>
 8006268:	e002      	b.n	8006270 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f008 fb3a 	bl	800e8e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695a      	ldr	r2, [r3, #20]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800627e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f006 fb6f 	bl	800c968 <USB_ReadInterrupts>
 800628a:	4603      	mov	r3, r0
 800628c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006294:	d112      	bne.n	80062bc <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d102      	bne.n	80062ac <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f008 faf6 	bl	800e898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80062ba:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f006 fb51 	bl	800c968 <USB_ReadInterrupts>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d0:	d121      	bne.n	8006316 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80062e0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d111      	bne.n	8006310 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	f003 020f 	and.w	r2, r3, #15
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006306:	2101      	movs	r1, #1
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f008 fd9b 	bl	800ee44 <HAL_PCDEx_LPM_Callback>
 800630e:	e002      	b.n	8006316 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f008 fac1 	bl	800e898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f006 fb24 	bl	800c968 <USB_ReadInterrupts>
 8006320:	4603      	mov	r3, r0
 8006322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632a:	f040 80c5 	bne.w	80064b8 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2110      	movs	r1, #16
 8006348:	4618      	mov	r0, r3
 800634a:	f005 fcab 	bl	800bca4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800634e:	2300      	movs	r3, #0
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006352:	e056      	b.n	8006402 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	461a      	mov	r2, r3
 8006362:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006366:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006386:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	3301      	adds	r3, #1
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006408:	429a      	cmp	r2, r3
 800640a:	d3a3      	bcc.n	8006354 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800641a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800641e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	2b00      	cmp	r3, #0
 8006426:	d016      	beq.n	8006456 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006438:	f043 030b 	orr.w	r3, r3, #11
 800643c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800644e:	f043 030b 	orr.w	r3, r3, #11
 8006452:	6453      	str	r3, [r2, #68]	; 0x44
 8006454:	e015      	b.n	8006482 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006464:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006468:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800646c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647c:	f043 030b 	orr.w	r3, r3, #11
 8006480:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006490:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006494:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f006 fb24 	bl	800caf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695a      	ldr	r2, [r3, #20]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80064b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f006 fa53 	bl	800c968 <USB_ReadInterrupts>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064cc:	d124      	bne.n	8006518 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f006 fae9 	bl	800caaa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f005 fc42 	bl	800bd66 <USB_GetDevSpeed>
 80064e2:	4603      	mov	r3, r0
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681c      	ldr	r4, [r3, #0]
 80064ee:	f001 fb33 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 80064f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	4620      	mov	r0, r4
 80064fe:	f005 f99d 	bl	800b83c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f008 f9a9 	bl	800e85a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006516:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f006 fa23 	bl	800c968 <USB_ReadInterrupts>
 8006522:	4603      	mov	r3, r0
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d10a      	bne.n	8006542 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f008 f986 	bl	800e83e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695a      	ldr	r2, [r3, #20]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f002 0208 	and.w	r2, r2, #8
 8006540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f006 fa0e 	bl	800c968 <USB_ReadInterrupts>
 800654c:	4603      	mov	r3, r0
 800654e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006556:	d10f      	bne.n	8006578 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	b2db      	uxtb	r3, r3
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f008 f9f8 	bl	800e958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695a      	ldr	r2, [r3, #20]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f006 f9f3 	bl	800c968 <USB_ReadInterrupts>
 8006582:	4603      	mov	r3, r0
 8006584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800658c:	d10f      	bne.n	80065ae <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	b2db      	uxtb	r3, r3
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f008 f9cb 	bl	800e934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80065ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f006 f9d8 	bl	800c968 <USB_ReadInterrupts>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d10a      	bne.n	80065da <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f008 f9d9 	bl	800e97c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80065d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f006 f9c2 	bl	800c968 <USB_ReadInterrupts>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d115      	bne.n	800661a <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f008 f9c9 	bl	800e998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	e000      	b.n	800661a <HAL_PCD_IRQHandler+0x742>
      return;
 8006618:	bf00      	nop
    }
  }
}
 800661a:	3734      	adds	r7, #52	; 0x34
 800661c:	46bd      	mov	sp, r7
 800661e:	bd90      	pop	{r4, r7, pc}

08006620 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_PCD_SetAddress+0x1a>
 8006636:	2302      	movs	r3, #2
 8006638:	e013      	b.n	8006662 <HAL_PCD_SetAddress+0x42>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f006 f932 	bl	800c8bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	4608      	mov	r0, r1
 8006674:	4611      	mov	r1, r2
 8006676:	461a      	mov	r2, r3
 8006678:	4603      	mov	r3, r0
 800667a:	70fb      	strb	r3, [r7, #3]
 800667c:	460b      	mov	r3, r1
 800667e:	803b      	strh	r3, [r7, #0]
 8006680:	4613      	mov	r3, r2
 8006682:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da0f      	bge.n	80066b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	f003 020f 	and.w	r2, r3, #15
 8006696:	4613      	mov	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	3338      	adds	r3, #56	; 0x38
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	3304      	adds	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	705a      	strb	r2, [r3, #1]
 80066ae:	e00f      	b.n	80066d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	f003 020f 	and.w	r2, r3, #15
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	3304      	adds	r3, #4
 80066c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80066dc:	883a      	ldrh	r2, [r7, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	78ba      	ldrb	r2, [r7, #2]
 80066e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80066fa:	78bb      	ldrb	r3, [r7, #2]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d102      	bne.n	8006706 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_PCD_EP_Open+0xaa>
 8006710:	2302      	movs	r3, #2
 8006712:	e00e      	b.n	8006732 <HAL_PCD_EP_Open+0xc8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	4618      	mov	r0, r3
 8006724:	f005 fb3e 	bl	800bda4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006730:	7afb      	ldrb	r3, [r7, #11]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800674a:	2b00      	cmp	r3, #0
 800674c:	da0f      	bge.n	800676e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	f003 020f 	and.w	r2, r3, #15
 8006754:	4613      	mov	r3, r2
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	3338      	adds	r3, #56	; 0x38
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	3304      	adds	r3, #4
 8006764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	705a      	strb	r2, [r3, #1]
 800676c:	e00f      	b.n	800678e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	4613      	mov	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	4413      	add	r3, r2
 8006784:	3304      	adds	r3, #4
 8006786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	b2da      	uxtb	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_PCD_EP_Close+0x6e>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e00e      	b.n	80067c6 <HAL_PCD_EP_Close+0x8c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f005 fb7c 	bl	800beb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	460b      	mov	r3, r1
 80067dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	f003 020f 	and.w	r2, r3, #15
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	3304      	adds	r3, #4
 80067f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	b2da      	uxtb	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6979      	ldr	r1, [r7, #20]
 800682c:	4618      	mov	r0, r3
 800682e:	f005 fdf9 	bl	800c424 <USB_EP0StartXfer>
 8006832:	e005      	b.n	8006840 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6979      	ldr	r1, [r7, #20]
 800683a:	4618      	mov	r0, r3
 800683c:	f005 fc16 	bl	800c06c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	f003 020f 	and.w	r2, r3, #15
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800686c:	681b      	ldr	r3, [r3, #0]
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	460b      	mov	r3, r1
 8006888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	3338      	adds	r3, #56	; 0x38
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	3304      	adds	r3, #4
 80068a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2201      	movs	r2, #1
 80068b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f005 fda4 	bl	800c424 <USB_EP0StartXfer>
 80068dc:	e005      	b.n	80068ea <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6979      	ldr	r1, [r7, #20]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f005 fbc1 	bl	800c06c <USB_EPStartXfer>
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d901      	bls.n	8006912 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e04e      	b.n	80069b0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006916:	2b00      	cmp	r3, #0
 8006918:	da0f      	bge.n	800693a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	4613      	mov	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	3338      	adds	r3, #56	; 0x38
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	3304      	adds	r3, #4
 8006930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	705a      	strb	r2, [r3, #1]
 8006938:	e00d      	b.n	8006956 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	3304      	adds	r3, #4
 800694e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	b2da      	uxtb	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_PCD_EP_SetStall+0x82>
 8006972:	2302      	movs	r3, #2
 8006974:	e01c      	b.n	80069b0 <HAL_PCD_EP_SetStall+0xbc>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	4618      	mov	r0, r3
 8006986:	f005 fec5 	bl	800c714 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	2b00      	cmp	r3, #0
 8006992:	d108      	bne.n	80069a6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f006 f8a5 	bl	800caf0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	f003 020f 	and.w	r2, r3, #15
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d901      	bls.n	80069d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e042      	b.n	8006a5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	da0f      	bge.n	80069fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	3338      	adds	r3, #56	; 0x38
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	4413      	add	r3, r2
 80069f2:	3304      	adds	r3, #4
 80069f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	705a      	strb	r2, [r3, #1]
 80069fc:	e00f      	b.n	8006a1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	f003 020f 	and.w	r2, r3, #15
 8006a04:	4613      	mov	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_PCD_EP_ClrStall+0x86>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e00e      	b.n	8006a5c <HAL_PCD_EP_ClrStall+0xa4>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f005 fecf 	bl	800c7f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	1a9b      	subs	r3, r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	3338      	adds	r3, #56	; 0x38
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	3304      	adds	r3, #4
 8006a8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	699a      	ldr	r2, [r3, #24]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d901      	bls.n	8006a9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e067      	b.n	8006b6c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d902      	bls.n	8006ab8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	3303      	adds	r3, #3
 8006abc:	089b      	lsrs	r3, r3, #2
 8006abe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ac0:	e026      	b.n	8006b10 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d902      	bls.n	8006ade <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	3303      	adds	r3, #3
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68d9      	ldr	r1, [r3, #12]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	6978      	ldr	r0, [r7, #20]
 8006af4:	f005 fdb4 	bl	800c660 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	441a      	add	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	699a      	ldr	r2, [r3, #24]
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	441a      	add	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d809      	bhi.n	8006b3a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d203      	bcs.n	8006b3a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1c3      	bne.n	8006ac2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d811      	bhi.n	8006b6a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	6939      	ldr	r1, [r7, #16]
 8006b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b66:	4013      	ands	r3, r2
 8006b68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	333c      	adds	r3, #60	; 0x3c
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4a19      	ldr	r2, [pc, #100]	; (8006c0c <PCD_EP_OutXfrComplete_int+0x98>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d124      	bne.n	8006bf4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc6:	6093      	str	r3, [r2, #8]
 8006bc8:	e01a      	b.n	8006c00 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	461a      	mov	r2, r3
 8006be2:	2320      	movs	r3, #32
 8006be4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f007 fdf1 	bl	800e7d4 <HAL_PCD_DataOutStageCallback>
 8006bf2:	e005      	b.n	8006c00 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f007 fdea 	bl	800e7d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	4f54310a 	.word	0x4f54310a

08006c10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	333c      	adds	r3, #60	; 0x3c
 8006c28:	3304      	adds	r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <PCD_EP_OutSetupPacket_int+0x64>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d90e      	bls.n	8006c64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f007 fda3 	bl	800e7b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	4f54300a 	.word	0x4f54300a

08006c78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
 8006c84:	4613      	mov	r3, r2
 8006c86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c96:	883b      	ldrh	r3, [r7, #0]
 8006c98:	0419      	lsls	r1, r3, #16
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ca4:	e028      	b.n	8006cf8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
 8006cb8:	e00d      	b.n	8006cd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	3340      	adds	r3, #64	; 0x40
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	73fb      	strb	r3, [r7, #15]
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3ec      	bcc.n	8006cba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ce0:	883b      	ldrh	r3, [r7, #0]
 8006ce2:	0418      	lsls	r0, r3, #16
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6819      	ldr	r1, [r3, #0]
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	4302      	orrs	r2, r0
 8006cf0:	3340      	adds	r3, #64	; 0x40
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	887a      	ldrh	r2, [r7, #2]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	f043 0303 	orr.w	r3, r3, #3
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a04      	ldr	r2, [pc, #16]	; (8006d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7e:	6013      	str	r3, [r2, #0]
}
 8006d80:	bf00      	nop
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40007000 	.word	0x40007000

08006d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006d94:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40007000 	.word	0x40007000

08006dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dba:	d130      	bne.n	8006e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dbc:	4b23      	ldr	r3, [pc, #140]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc8:	d038      	beq.n	8006e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dca:	4b20      	ldr	r3, [pc, #128]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006dda:	4b1d      	ldr	r3, [pc, #116]	; (8006e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2232      	movs	r2, #50	; 0x32
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
 8006de4:	4a1b      	ldr	r2, [pc, #108]	; (8006e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	0c9b      	lsrs	r3, r3, #18
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006df0:	e002      	b.n	8006df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e04:	d102      	bne.n	8006e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f2      	bne.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e18:	d110      	bne.n	8006e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e00f      	b.n	8006e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2a:	d007      	beq.n	8006e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e34:	4a05      	ldr	r2, [pc, #20]	; (8006e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40007000 	.word	0x40007000
 8006e50:	20000000 	.word	0x20000000
 8006e54:	431bde83 	.word	0x431bde83

08006e58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e66:	6053      	str	r3, [r2, #4]
}
 8006e68:	bf00      	nop
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40007000 	.word	0x40007000

08006e78 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e86:	6053      	str	r3, [r2, #4]
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40007000 	.word	0x40007000

08006e98 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006ea0:	f7fc fcfe 	bl	80038a0 <HAL_GetTick>
 8006ea4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e075      	b.n	8006f9c <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_QSPI_Init+0x28>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e06d      	b.n	8006f9c <HAL_QSPI_Init+0x104>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fc f94d 	bl	800317c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006ee2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f85e 	bl	8006fa8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	021a      	lsls	r2, r3, #8
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2120      	movs	r1, #32
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f856 	bl	8006fc4 <QSPI_WaitFlagStateUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d137      	bne.n	8006f92 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6852      	ldr	r2, [r2, #4]
 8006f34:	0611      	lsls	r1, r2, #24
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68d2      	ldr	r2, [r2, #12]
 8006f3a:	4311      	orrs	r1, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	69d2      	ldr	r2, [r2, #28]
 8006f40:	4311      	orrs	r1, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6a12      	ldr	r2, [r2, #32]
 8006f46:	4311      	orrs	r1, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <HAL_QSPI_Init+0x10c>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6912      	ldr	r2, [r2, #16]
 8006f5e:	0411      	lsls	r1, r2, #16
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6952      	ldr	r2, [r2, #20]
 8006f64:	4311      	orrs	r1, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6992      	ldr	r2, [r2, #24]
 8006f6a:	4311      	orrs	r1, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	ffe0f8fe 	.word	0xffe0f8fe

08006fa8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006fd4:	e01a      	b.n	800700c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fdc:	d016      	beq.n	800700c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fde:	f7fc fc5f 	bl	80038a0 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	f043 0201 	orr.w	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e00e      	b.n	800702a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf14      	ite	ne
 800701a:	2301      	movne	r3, #1
 800701c:	2300      	moveq	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	429a      	cmp	r2, r3
 8007026:	d1d6      	bne.n	8006fd6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f000 bc16 	b.w	8007874 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007048:	4ba0      	ldr	r3, [pc, #640]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 030c 	and.w	r3, r3, #12
 8007050:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007052:	4b9e      	ldr	r3, [pc, #632]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80e4 	beq.w	8007232 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <HAL_RCC_OscConfig+0x4c>
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	2b0c      	cmp	r3, #12
 8007074:	f040 808b 	bne.w	800718e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b01      	cmp	r3, #1
 800707c:	f040 8087 	bne.w	800718e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007080:	4b92      	ldr	r3, [pc, #584]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_OscConfig+0x64>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e3ed      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	4b8b      	ldr	r3, [pc, #556]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <HAL_RCC_OscConfig+0x7e>
 80070a8:	4b88      	ldr	r3, [pc, #544]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070b0:	e005      	b.n	80070be <HAL_RCC_OscConfig+0x8a>
 80070b2:	4b86      	ldr	r3, [pc, #536]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80070b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b8:	091b      	lsrs	r3, r3, #4
 80070ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070be:	4293      	cmp	r3, r2
 80070c0:	d223      	bcs.n	800710a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fd7e 	bl	8007bc8 <RCC_SetFlashLatencyFromMSIRange>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e3ce      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070d6:	4b7d      	ldr	r3, [pc, #500]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a7c      	ldr	r2, [pc, #496]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80070dc:	f043 0308 	orr.w	r3, r3, #8
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	4b7a      	ldr	r3, [pc, #488]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	4977      	ldr	r1, [pc, #476]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070f4:	4b75      	ldr	r3, [pc, #468]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	4972      	ldr	r1, [pc, #456]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007104:	4313      	orrs	r3, r2
 8007106:	604b      	str	r3, [r1, #4]
 8007108:	e025      	b.n	8007156 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800710a:	4b70      	ldr	r3, [pc, #448]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a6f      	ldr	r2, [pc, #444]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007110:	f043 0308 	orr.w	r3, r3, #8
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4b6d      	ldr	r3, [pc, #436]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	496a      	ldr	r1, [pc, #424]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007124:	4313      	orrs	r3, r2
 8007126:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007128:	4b68      	ldr	r3, [pc, #416]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	4965      	ldr	r1, [pc, #404]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007138:	4313      	orrs	r3, r2
 800713a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fd3e 	bl	8007bc8 <RCC_SetFlashLatencyFromMSIRange>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e38e      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007156:	f000 fc75 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 800715a:	4601      	mov	r1, r0
 800715c:	4b5b      	ldr	r3, [pc, #364]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	091b      	lsrs	r3, r3, #4
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	4a5a      	ldr	r2, [pc, #360]	; (80072d0 <HAL_RCC_OscConfig+0x29c>)
 8007168:	5cd3      	ldrb	r3, [r2, r3]
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	fa21 f303 	lsr.w	r3, r1, r3
 8007172:	4a58      	ldr	r2, [pc, #352]	; (80072d4 <HAL_RCC_OscConfig+0x2a0>)
 8007174:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007176:	4b58      	ldr	r3, [pc, #352]	; (80072d8 <HAL_RCC_OscConfig+0x2a4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f7fc fb44 	bl	8003808 <HAL_InitTick>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d052      	beq.n	8007230 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	e372      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d032      	beq.n	80071fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007196:	4b4d      	ldr	r3, [pc, #308]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a4c      	ldr	r2, [pc, #304]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800719c:	f043 0301 	orr.w	r3, r3, #1
 80071a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80071a2:	f7fc fb7d 	bl	80038a0 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071aa:	f7fc fb79 	bl	80038a0 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e35b      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071bc:	4b43      	ldr	r3, [pc, #268]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071c8:	4b40      	ldr	r3, [pc, #256]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a3f      	ldr	r2, [pc, #252]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071ce:	f043 0308 	orr.w	r3, r3, #8
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	4b3d      	ldr	r3, [pc, #244]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	493a      	ldr	r1, [pc, #232]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071e6:	4b39      	ldr	r3, [pc, #228]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	4935      	ldr	r1, [pc, #212]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	604b      	str	r3, [r1, #4]
 80071fa:	e01a      	b.n	8007232 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80071fc:	4b33      	ldr	r3, [pc, #204]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a32      	ldr	r2, [pc, #200]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007208:	f7fc fb4a 	bl	80038a0 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007210:	f7fc fb46 	bl	80038a0 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e328      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007222:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f0      	bne.n	8007210 <HAL_RCC_OscConfig+0x1dc>
 800722e:	e000      	b.n	8007232 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d073      	beq.n	8007326 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d005      	beq.n	8007250 <HAL_RCC_OscConfig+0x21c>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	2b0c      	cmp	r3, #12
 8007248:	d10e      	bne.n	8007268 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d10b      	bne.n	8007268 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007250:	4b1e      	ldr	r3, [pc, #120]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d063      	beq.n	8007324 <HAL_RCC_OscConfig+0x2f0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d15f      	bne.n	8007324 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e305      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007270:	d106      	bne.n	8007280 <HAL_RCC_OscConfig+0x24c>
 8007272:	4b16      	ldr	r3, [pc, #88]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a15      	ldr	r2, [pc, #84]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e01d      	b.n	80072bc <HAL_RCC_OscConfig+0x288>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007288:	d10c      	bne.n	80072a4 <HAL_RCC_OscConfig+0x270>
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a0f      	ldr	r2, [pc, #60]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a0c      	ldr	r2, [pc, #48]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 800729c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	e00b      	b.n	80072bc <HAL_RCC_OscConfig+0x288>
 80072a4:	4b09      	ldr	r3, [pc, #36]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a08      	ldr	r2, [pc, #32]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80072aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a05      	ldr	r2, [pc, #20]	; (80072cc <HAL_RCC_OscConfig+0x298>)
 80072b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01b      	beq.n	80072fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fc faec 	bl	80038a0 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072ca:	e010      	b.n	80072ee <HAL_RCC_OscConfig+0x2ba>
 80072cc:	40021000 	.word	0x40021000
 80072d0:	080118bc 	.word	0x080118bc
 80072d4:	20000000 	.word	0x20000000
 80072d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072dc:	f7fc fae0 	bl	80038a0 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b64      	cmp	r3, #100	; 0x64
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e2c2      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072ee:	4baf      	ldr	r3, [pc, #700]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f0      	beq.n	80072dc <HAL_RCC_OscConfig+0x2a8>
 80072fa:	e014      	b.n	8007326 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fc fad0 	bl	80038a0 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007304:	f7fc facc 	bl	80038a0 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b64      	cmp	r3, #100	; 0x64
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e2ae      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007316:	4ba5      	ldr	r3, [pc, #660]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0x2d0>
 8007322:	e000      	b.n	8007326 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d060      	beq.n	80073f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b04      	cmp	r3, #4
 8007336:	d005      	beq.n	8007344 <HAL_RCC_OscConfig+0x310>
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b0c      	cmp	r3, #12
 800733c:	d119      	bne.n	8007372 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d116      	bne.n	8007372 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007344:	4b99      	ldr	r3, [pc, #612]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <HAL_RCC_OscConfig+0x328>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e28b      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735c:	4b93      	ldr	r3, [pc, #588]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	4990      	ldr	r1, [pc, #576]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007370:	e040      	b.n	80073f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d023      	beq.n	80073c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800737a:	4b8c      	ldr	r3, [pc, #560]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a8b      	ldr	r2, [pc, #556]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007386:	f7fc fa8b 	bl	80038a0 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800738e:	f7fc fa87 	bl	80038a0 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e269      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073a0:	4b82      	ldr	r3, [pc, #520]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0f0      	beq.n	800738e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ac:	4b7f      	ldr	r3, [pc, #508]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	061b      	lsls	r3, r3, #24
 80073ba:	497c      	ldr	r1, [pc, #496]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	604b      	str	r3, [r1, #4]
 80073c0:	e018      	b.n	80073f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073c2:	4b7a      	ldr	r3, [pc, #488]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a79      	ldr	r2, [pc, #484]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80073c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ce:	f7fc fa67 	bl	80038a0 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073d4:	e008      	b.n	80073e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073d6:	f7fc fa63 	bl	80038a0 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e245      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073e8:	4b70      	ldr	r3, [pc, #448]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f0      	bne.n	80073d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d03c      	beq.n	800747a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01c      	beq.n	8007442 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007408:	4b68      	ldr	r3, [pc, #416]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800740a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800740e:	4a67      	ldr	r2, [pc, #412]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007410:	f043 0301 	orr.w	r3, r3, #1
 8007414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007418:	f7fc fa42 	bl	80038a0 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007420:	f7fc fa3e 	bl	80038a0 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e220      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007432:	4b5e      	ldr	r3, [pc, #376]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0ef      	beq.n	8007420 <HAL_RCC_OscConfig+0x3ec>
 8007440:	e01b      	b.n	800747a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007442:	4b5a      	ldr	r3, [pc, #360]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007448:	4a58      	ldr	r2, [pc, #352]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fc fa25 	bl	80038a0 <HAL_GetTick>
 8007456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007458:	e008      	b.n	800746c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800745a:	f7fc fa21 	bl	80038a0 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e203      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800746c:	4b4f      	ldr	r3, [pc, #316]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800746e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1ef      	bne.n	800745a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80a6 	beq.w	80075d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007488:	2300      	movs	r3, #0
 800748a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800748c:	4b47      	ldr	r3, [pc, #284]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800748e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10d      	bne.n	80074b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007498:	4b44      	ldr	r3, [pc, #272]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800749a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749c:	4a43      	ldr	r2, [pc, #268]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800749e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a2:	6593      	str	r3, [r2, #88]	; 0x58
 80074a4:	4b41      	ldr	r3, [pc, #260]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074b0:	2301      	movs	r3, #1
 80074b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074b4:	4b3e      	ldr	r3, [pc, #248]	; (80075b0 <HAL_RCC_OscConfig+0x57c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d118      	bne.n	80074f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074c0:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <HAL_RCC_OscConfig+0x57c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a3a      	ldr	r2, [pc, #232]	; (80075b0 <HAL_RCC_OscConfig+0x57c>)
 80074c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074cc:	f7fc f9e8 	bl	80038a0 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074d4:	f7fc f9e4 	bl	80038a0 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e1c6      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074e6:	4b32      	ldr	r3, [pc, #200]	; (80075b0 <HAL_RCC_OscConfig+0x57c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d108      	bne.n	800750c <HAL_RCC_OscConfig+0x4d8>
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007502:	f043 0301 	orr.w	r3, r3, #1
 8007506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800750a:	e024      	b.n	8007556 <HAL_RCC_OscConfig+0x522>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b05      	cmp	r3, #5
 8007512:	d110      	bne.n	8007536 <HAL_RCC_OscConfig+0x502>
 8007514:	4b25      	ldr	r3, [pc, #148]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	4a24      	ldr	r2, [pc, #144]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800751c:	f043 0304 	orr.w	r3, r3, #4
 8007520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007524:	4b21      	ldr	r3, [pc, #132]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	4a20      	ldr	r2, [pc, #128]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007534:	e00f      	b.n	8007556 <HAL_RCC_OscConfig+0x522>
 8007536:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800753e:	f023 0301 	bic.w	r3, r3, #1
 8007542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007546:	4b19      	ldr	r3, [pc, #100]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	4a17      	ldr	r2, [pc, #92]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800754e:	f023 0304 	bic.w	r3, r3, #4
 8007552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d016      	beq.n	800758c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755e:	f7fc f99f 	bl	80038a0 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007564:	e00a      	b.n	800757c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007566:	f7fc f99b 	bl	80038a0 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f241 3288 	movw	r2, #5000	; 0x1388
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e17b      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <HAL_RCC_OscConfig+0x578>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0ed      	beq.n	8007566 <HAL_RCC_OscConfig+0x532>
 800758a:	e01a      	b.n	80075c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758c:	f7fc f988 	bl	80038a0 <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007592:	e00f      	b.n	80075b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007594:	f7fc f984 	bl	80038a0 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d906      	bls.n	80075b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e164      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
 80075aa:	bf00      	nop
 80075ac:	40021000 	.word	0x40021000
 80075b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075b4:	4ba8      	ldr	r3, [pc, #672]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e8      	bne.n	8007594 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075c2:	7ffb      	ldrb	r3, [r7, #31]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c8:	4ba3      	ldr	r3, [pc, #652]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80075ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075cc:	4aa2      	ldr	r2, [pc, #648]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80075ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d03c      	beq.n	800765a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01c      	beq.n	8007622 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075e8:	4b9b      	ldr	r3, [pc, #620]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80075ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ee:	4a9a      	ldr	r2, [pc, #616]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f8:	f7fc f952 	bl	80038a0 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007600:	f7fc f94e 	bl	80038a0 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e130      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007612:	4b91      	ldr	r3, [pc, #580]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0ef      	beq.n	8007600 <HAL_RCC_OscConfig+0x5cc>
 8007620:	e01b      	b.n	800765a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007622:	4b8d      	ldr	r3, [pc, #564]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007628:	4a8b      	ldr	r2, [pc, #556]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007632:	f7fc f935 	bl	80038a0 <HAL_GetTick>
 8007636:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007638:	e008      	b.n	800764c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800763a:	f7fc f931 	bl	80038a0 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b02      	cmp	r3, #2
 8007646:	d901      	bls.n	800764c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e113      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800764c:	4b82      	ldr	r3, [pc, #520]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 800764e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1ef      	bne.n	800763a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 8107 	beq.w	8007872 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	2b02      	cmp	r3, #2
 800766a:	f040 80cb 	bne.w	8007804 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800766e:	4b7a      	ldr	r3, [pc, #488]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f003 0203 	and.w	r2, r3, #3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	429a      	cmp	r2, r3
 8007680:	d12c      	bne.n	80076dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	3b01      	subs	r3, #1
 800768e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007690:	429a      	cmp	r2, r3
 8007692:	d123      	bne.n	80076dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d11b      	bne.n	80076dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d113      	bne.n	80076dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	3b01      	subs	r3, #1
 80076c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d109      	bne.n	80076dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	3b01      	subs	r3, #1
 80076d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076d8:	429a      	cmp	r2, r3
 80076da:	d06d      	beq.n	80077b8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2b0c      	cmp	r3, #12
 80076e0:	d068      	beq.n	80077b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80076e2:	4b5d      	ldr	r3, [pc, #372]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80076ee:	4b5a      	ldr	r3, [pc, #360]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e0ba      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80076fe:	4b56      	ldr	r3, [pc, #344]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a55      	ldr	r2, [pc, #340]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007708:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800770a:	f7fc f8c9 	bl	80038a0 <HAL_GetTick>
 800770e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007710:	e008      	b.n	8007724 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007712:	f7fc f8c5 	bl	80038a0 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e0a7      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007724:	4b4c      	ldr	r3, [pc, #304]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1f0      	bne.n	8007712 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007730:	4b49      	ldr	r3, [pc, #292]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	4b49      	ldr	r3, [pc, #292]	; (800785c <HAL_RCC_OscConfig+0x828>)
 8007736:	4013      	ands	r3, r2
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007740:	3a01      	subs	r2, #1
 8007742:	0112      	lsls	r2, r2, #4
 8007744:	4311      	orrs	r1, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800774a:	0212      	lsls	r2, r2, #8
 800774c:	4311      	orrs	r1, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007752:	0852      	lsrs	r2, r2, #1
 8007754:	3a01      	subs	r2, #1
 8007756:	0552      	lsls	r2, r2, #21
 8007758:	4311      	orrs	r1, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800775e:	0852      	lsrs	r2, r2, #1
 8007760:	3a01      	subs	r2, #1
 8007762:	0652      	lsls	r2, r2, #25
 8007764:	4311      	orrs	r1, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800776a:	06d2      	lsls	r2, r2, #27
 800776c:	430a      	orrs	r2, r1
 800776e:	493a      	ldr	r1, [pc, #232]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007770:	4313      	orrs	r3, r2
 8007772:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007774:	4b38      	ldr	r3, [pc, #224]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a37      	ldr	r2, [pc, #220]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 800777a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800777e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007780:	4b35      	ldr	r3, [pc, #212]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	4a34      	ldr	r2, [pc, #208]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800778a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800778c:	f7fc f888 	bl	80038a0 <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007794:	f7fc f884 	bl	80038a0 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e066      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077a6:	4b2c      	ldr	r3, [pc, #176]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0f0      	beq.n	8007794 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077b2:	e05e      	b.n	8007872 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e05d      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077b8:	4b27      	ldr	r3, [pc, #156]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d156      	bne.n	8007872 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80077c4:	4b24      	ldr	r3, [pc, #144]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a23      	ldr	r2, [pc, #140]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80077ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077d0:	4b21      	ldr	r3, [pc, #132]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	4a20      	ldr	r2, [pc, #128]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80077d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077dc:	f7fc f860 	bl	80038a0 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077e4:	f7fc f85c 	bl	80038a0 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e03e      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077f6:	4b18      	ldr	r3, [pc, #96]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x7b0>
 8007802:	e036      	b.n	8007872 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2b0c      	cmp	r3, #12
 8007808:	d031      	beq.n	800786e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780a:	4b13      	ldr	r3, [pc, #76]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a12      	ldr	r2, [pc, #72]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007814:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007816:	4b10      	ldr	r3, [pc, #64]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007822:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	4a0c      	ldr	r2, [pc, #48]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007828:	f023 0303 	bic.w	r3, r3, #3
 800782c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	4a09      	ldr	r2, [pc, #36]	; (8007858 <HAL_RCC_OscConfig+0x824>)
 8007834:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fc f82f 	bl	80038a0 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007844:	e00c      	b.n	8007860 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007846:	f7fc f82b 	bl	80038a0 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d905      	bls.n	8007860 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e00d      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
 8007858:	40021000 	.word	0x40021000
 800785c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_RCC_OscConfig+0x848>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1ec      	bne.n	8007846 <HAL_RCC_OscConfig+0x812>
 800786c:	e001      	b.n	8007872 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40021000 	.word	0x40021000

08007880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e0c8      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007894:	4b66      	ldr	r3, [pc, #408]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d910      	bls.n	80078c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078a2:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f023 0207 	bic.w	r2, r3, #7
 80078aa:	4961      	ldr	r1, [pc, #388]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b2:	4b5f      	ldr	r3, [pc, #380]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d001      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0b0      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d04c      	beq.n	800796a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d107      	bne.n	80078e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078d8:	4b56      	ldr	r3, [pc, #344]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d121      	bne.n	8007928 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e09e      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d107      	bne.n	8007900 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078f0:	4b50      	ldr	r3, [pc, #320]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d115      	bne.n	8007928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e092      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d107      	bne.n	8007918 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007908:	4b4a      	ldr	r3, [pc, #296]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e086      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007918:	4b46      	ldr	r3, [pc, #280]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e07e      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f023 0203 	bic.w	r2, r3, #3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	493f      	ldr	r1, [pc, #252]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793a:	f7fb ffb1 	bl	80038a0 <HAL_GetTick>
 800793e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007940:	e00a      	b.n	8007958 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007942:	f7fb ffad 	bl	80038a0 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e066      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007958:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 020c 	and.w	r2, r3, #12
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	429a      	cmp	r2, r3
 8007968:	d1eb      	bne.n	8007942 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007976:	4b2f      	ldr	r3, [pc, #188]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	492c      	ldr	r1, [pc, #176]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 8007984:	4313      	orrs	r3, r2
 8007986:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007988:	4b29      	ldr	r3, [pc, #164]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d210      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007996:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 0207 	bic.w	r2, r3, #7
 800799e:	4924      	ldr	r1, [pc, #144]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a6:	4b22      	ldr	r3, [pc, #136]	; (8007a30 <HAL_RCC_ClockConfig+0x1b0>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e036      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079c4:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4918      	ldr	r1, [pc, #96]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079e2:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4910      	ldr	r1, [pc, #64]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079f6:	f000 f825 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 80079fa:	4601      	mov	r1, r0
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <HAL_RCC_ClockConfig+0x1b4>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	091b      	lsrs	r3, r3, #4
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <HAL_RCC_ClockConfig+0x1b8>)
 8007a08:	5cd3      	ldrb	r3, [r2, r3]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8007a12:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a16:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <HAL_RCC_ClockConfig+0x1c0>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fb fef4 	bl	8003808 <HAL_InitTick>
 8007a20:	4603      	mov	r3, r0
 8007a22:	72fb      	strb	r3, [r7, #11]

  return status;
 8007a24:	7afb      	ldrb	r3, [r7, #11]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40022000 	.word	0x40022000
 8007a34:	40021000 	.word	0x40021000
 8007a38:	080118bc 	.word	0x080118bc
 8007a3c:	20000000 	.word	0x20000000
 8007a40:	20000004 	.word	0x20000004

08007a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a52:	4b3d      	ldr	r3, [pc, #244]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 030c 	and.w	r3, r3, #12
 8007a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a5c:	4b3a      	ldr	r3, [pc, #232]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <HAL_RCC_GetSysClockFreq+0x34>
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b0c      	cmp	r3, #12
 8007a70:	d121      	bne.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d11e      	bne.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007a78:	4b33      	ldr	r3, [pc, #204]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d107      	bne.n	8007a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007a84:	4b30      	ldr	r3, [pc, #192]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a8a:	0a1b      	lsrs	r3, r3, #8
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	e005      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007a94:	4b2c      	ldr	r3, [pc, #176]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	091b      	lsrs	r3, r3, #4
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007aa0:	4a2a      	ldr	r2, [pc, #168]	; (8007b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10d      	bne.n	8007acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ab4:	e00a      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d102      	bne.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007abc:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007abe:	61bb      	str	r3, [r7, #24]
 8007ac0:	e004      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d101      	bne.n	8007acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ac8:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8007aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b0c      	cmp	r3, #12
 8007ad0:	d133      	bne.n	8007b3a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ad2:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d002      	beq.n	8007ae8 <HAL_RCC_GetSysClockFreq+0xa4>
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d003      	beq.n	8007aee <HAL_RCC_GetSysClockFreq+0xaa>
 8007ae6:	e005      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007ae8:	4b19      	ldr	r3, [pc, #100]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007aea:	617b      	str	r3, [r7, #20]
      break;
 8007aec:	e005      	b.n	8007afa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007aee:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8007af0:	617b      	str	r3, [r7, #20]
      break;
 8007af2:	e002      	b.n	8007afa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	617b      	str	r3, [r7, #20]
      break;
 8007af8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007afa:	4b13      	ldr	r3, [pc, #76]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	091b      	lsrs	r3, r3, #4
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	3301      	adds	r3, #1
 8007b06:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b08:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	0a1b      	lsrs	r3, r3, #8
 8007b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	fb02 f203 	mul.w	r2, r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b20:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <HAL_RCC_GetSysClockFreq+0x104>)
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	0e5b      	lsrs	r3, r3, #25
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b38:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3724      	adds	r7, #36	; 0x24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40021000 	.word	0x40021000
 8007b4c:	080118d4 	.word	0x080118d4
 8007b50:	00f42400 	.word	0x00f42400
 8007b54:	007a1200 	.word	0x007a1200

08007b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	; (8007b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20000000 	.word	0x20000000

08007b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b74:	f7ff fff0 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 8007b78:	4601      	mov	r1, r0
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b86:	5cd3      	ldrb	r3, [r2, r3]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40021000 	.word	0x40021000
 8007b98:	080118cc 	.word	0x080118cc

08007b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ba0:	f7ff ffda 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 8007ba4:	4601      	mov	r1, r0
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	0adb      	lsrs	r3, r3, #11
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bb2:	5cd3      	ldrb	r3, [r2, r3]
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	080118cc 	.word	0x080118cc

08007bc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007bd4:	4b2a      	ldr	r3, [pc, #168]	; (8007c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007be0:	f7ff f8d6 	bl	8006d90 <HAL_PWREx_GetVoltageRange>
 8007be4:	6178      	str	r0, [r7, #20]
 8007be6:	e014      	b.n	8007c12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007be8:	4b25      	ldr	r3, [pc, #148]	; (8007c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bec:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8007bf4:	4b22      	ldr	r3, [pc, #136]	; (8007c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007c00:	f7ff f8c6 	bl	8006d90 <HAL_PWREx_GetVoltageRange>
 8007c04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007c06:	4b1e      	ldr	r3, [pc, #120]	; (8007c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0a:	4a1d      	ldr	r2, [pc, #116]	; (8007c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c18:	d10b      	bne.n	8007c32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b80      	cmp	r3, #128	; 0x80
 8007c1e:	d919      	bls.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2ba0      	cmp	r3, #160	; 0xa0
 8007c24:	d902      	bls.n	8007c2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c26:	2302      	movs	r3, #2
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	e013      	b.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	e010      	b.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b80      	cmp	r3, #128	; 0x80
 8007c36:	d902      	bls.n	8007c3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007c38:	2303      	movs	r3, #3
 8007c3a:	613b      	str	r3, [r7, #16]
 8007c3c:	e00a      	b.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d102      	bne.n	8007c4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c44:	2302      	movs	r3, #2
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e004      	b.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b70      	cmp	r3, #112	; 0x70
 8007c4e:	d101      	bne.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c50:	2301      	movs	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c54:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f023 0207 	bic.w	r2, r3, #7
 8007c5c:	4909      	ldr	r1, [pc, #36]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c64:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d001      	beq.n	8007c76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40021000 	.word	0x40021000
 8007c84:	40022000 	.word	0x40022000

08007c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c90:	2300      	movs	r3, #0
 8007c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c94:	2300      	movs	r3, #0
 8007c96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d03f      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cac:	d01c      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cb2:	d802      	bhi.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007cb8:	e01f      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007cc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007cc4:	d01c      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007cc6:	e018      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007cc8:	4b85      	ldr	r3, [pc, #532]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4a84      	ldr	r2, [pc, #528]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007cd4:	e015      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 ffa1 	bl	8008c24 <RCCEx_PLLSAI1_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ce6:	e00c      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3320      	adds	r3, #32
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 f888 	bl	8008e04 <RCCEx_PLLSAI2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007cf8:	e003      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8007cfe:	e000      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d02:	7cfb      	ldrb	r3, [r7, #19]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10b      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d08:	4b75      	ldr	r3, [pc, #468]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d16:	4972      	ldr	r1, [pc, #456]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007d1e:	e001      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d20:	7cfb      	ldrb	r3, [r7, #19]
 8007d22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d03f      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d38:	d01c      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007d3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d3e:	d802      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00e      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8007d44:	e01f      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d4a:	d003      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007d4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d50:	d01c      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007d52:	e018      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d54:	4b62      	ldr	r3, [pc, #392]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	4a61      	ldr	r2, [pc, #388]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d60:	e015      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3304      	adds	r3, #4
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 ff5b 	bl	8008c24 <RCCEx_PLLSAI1_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d72:	e00c      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3320      	adds	r3, #32
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 f842 	bl	8008e04 <RCCEx_PLLSAI2_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d84:	e003      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	74fb      	strb	r3, [r7, #19]
      break;
 8007d8a:	e000      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d8e:	7cfb      	ldrb	r3, [r7, #19]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10b      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007d94:	4b52      	ldr	r3, [pc, #328]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da2:	494f      	ldr	r1, [pc, #316]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007daa:	e001      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	7cfb      	ldrb	r3, [r7, #19]
 8007dae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 80a0 	beq.w	8007efe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007dc2:	4b47      	ldr	r3, [pc, #284]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00d      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dd8:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ddc:	4a40      	ldr	r2, [pc, #256]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de2:	6593      	str	r3, [r2, #88]	; 0x58
 8007de4:	4b3e      	ldr	r3, [pc, #248]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007df0:	2301      	movs	r3, #1
 8007df2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007df4:	4b3b      	ldr	r3, [pc, #236]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a3a      	ldr	r2, [pc, #232]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e00:	f7fb fd4e 	bl	80038a0 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e06:	e009      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e08:	f7fb fd4a 	bl	80038a0 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d902      	bls.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	74fb      	strb	r3, [r7, #19]
        break;
 8007e1a:	e005      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e1c:	4b31      	ldr	r3, [pc, #196]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0ef      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8007e28:	7cfb      	ldrb	r3, [r7, #19]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d15c      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e2e:	4b2c      	ldr	r3, [pc, #176]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01f      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d019      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e4c:	4b24      	ldr	r3, [pc, #144]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e58:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5e:	4a20      	ldr	r2, [pc, #128]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e68:	4b1d      	ldr	r3, [pc, #116]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e78:	4a19      	ldr	r2, [pc, #100]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d016      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8a:	f7fb fd09 	bl	80038a0 <HAL_GetTick>
 8007e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e90:	e00b      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e92:	f7fb fd05 	bl	80038a0 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d902      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8007ea8:	e006      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0ec      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007eb8:	7cfb      	ldrb	r3, [r7, #19]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10c      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ece:	4904      	ldr	r1, [pc, #16]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007ed6:	e009      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ed8:	7cfb      	ldrb	r3, [r7, #19]
 8007eda:	74bb      	strb	r3, [r7, #18]
 8007edc:	e006      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x264>
 8007ede:	bf00      	nop
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	7cfb      	ldrb	r3, [r7, #19]
 8007eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007eec:	7c7b      	ldrb	r3, [r7, #17]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d105      	bne.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ef2:	4ba6      	ldr	r3, [pc, #664]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef6:	4aa5      	ldr	r2, [pc, #660]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007efc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f0a:	4ba0      	ldr	r3, [pc, #640]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f10:	f023 0203 	bic.w	r2, r3, #3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	499c      	ldr	r1, [pc, #624]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f2c:	4b97      	ldr	r3, [pc, #604]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	f023 020c 	bic.w	r2, r3, #12
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3a:	4994      	ldr	r1, [pc, #592]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f4e:	4b8f      	ldr	r3, [pc, #572]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	498b      	ldr	r1, [pc, #556]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f70:	4b86      	ldr	r3, [pc, #536]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7e:	4983      	ldr	r1, [pc, #524]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0310 	and.w	r3, r3, #16
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f92:	4b7e      	ldr	r3, [pc, #504]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa0:	497a      	ldr	r1, [pc, #488]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fb4:	4b75      	ldr	r3, [pc, #468]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc2:	4972      	ldr	r1, [pc, #456]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fd6:	4b6d      	ldr	r3, [pc, #436]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe4:	4969      	ldr	r1, [pc, #420]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ff8:	4b64      	ldr	r3, [pc, #400]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008006:	4961      	ldr	r1, [pc, #388]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800801a:	4b5c      	ldr	r3, [pc, #368]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008020:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008028:	4958      	ldr	r1, [pc, #352]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800803c:	4b53      	ldr	r3, [pc, #332]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804a:	4950      	ldr	r1, [pc, #320]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800804c:	4313      	orrs	r3, r2
 800804e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800805e:	4b4b      	ldr	r3, [pc, #300]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806c:	4947      	ldr	r1, [pc, #284]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008080:	4b42      	ldr	r3, [pc, #264]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008086:	f023 0203 	bic.w	r2, r3, #3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808e:	493f      	ldr	r1, [pc, #252]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008090:	4313      	orrs	r3, r2
 8008092:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d028      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080a2:	4b3a      	ldr	r3, [pc, #232]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b0:	4936      	ldr	r1, [pc, #216]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080c0:	d106      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080c2:	4b32      	ldr	r3, [pc, #200]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	4a31      	ldr	r2, [pc, #196]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080cc:	60d3      	str	r3, [r2, #12]
 80080ce:	e011      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080d8:	d10c      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3304      	adds	r3, #4
 80080de:	2101      	movs	r1, #1
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fd9f 	bl	8008c24 <RCCEx_PLLSAI1_Config>
 80080e6:	4603      	mov	r3, r0
 80080e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80080ea:	7cfb      	ldrb	r3, [r7, #19]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80080f0:	7cfb      	ldrb	r3, [r7, #19]
 80080f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d028      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008100:	4b22      	ldr	r3, [pc, #136]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008106:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800810e:	491f      	ldr	r1, [pc, #124]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800811a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800811e:	d106      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008120:	4b1a      	ldr	r3, [pc, #104]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	4a19      	ldr	r2, [pc, #100]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800812a:	60d3      	str	r3, [r2, #12]
 800812c:	e011      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008136:	d10c      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3304      	adds	r3, #4
 800813c:	2101      	movs	r1, #1
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fd70 	bl	8008c24 <RCCEx_PLLSAI1_Config>
 8008144:	4603      	mov	r3, r0
 8008146:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008148:	7cfb      	ldrb	r3, [r7, #19]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800814e:	7cfb      	ldrb	r3, [r7, #19]
 8008150:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d02a      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008164:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800816c:	4907      	ldr	r1, [pc, #28]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800816e:	4313      	orrs	r3, r2
 8008170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800817c:	d108      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800817e:	4b03      	ldr	r3, [pc, #12]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4a02      	ldr	r2, [pc, #8]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008188:	60d3      	str	r3, [r2, #12]
 800818a:	e013      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800818c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008198:	d10c      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3304      	adds	r3, #4
 800819e:	2101      	movs	r1, #1
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fd3f 	bl	8008c24 <RCCEx_PLLSAI1_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80081aa:	7cfb      	ldrb	r3, [r7, #19]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80081b0:	7cfb      	ldrb	r3, [r7, #19]
 80081b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d02f      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081c0:	4b2c      	ldr	r3, [pc, #176]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80081c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ce:	4929      	ldr	r1, [pc, #164]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081de:	d10d      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	2102      	movs	r1, #2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fd1c 	bl	8008c24 <RCCEx_PLLSAI1_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80081f0:	7cfb      	ldrb	r3, [r7, #19]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d014      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80081f6:	7cfb      	ldrb	r3, [r7, #19]
 80081f8:	74bb      	strb	r3, [r7, #18]
 80081fa:	e011      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008204:	d10c      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3320      	adds	r3, #32
 800820a:	2102      	movs	r1, #2
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fdf9 	bl	8008e04 <RCCEx_PLLSAI2_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008216:	7cfb      	ldrb	r3, [r7, #19]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800821c:	7cfb      	ldrb	r3, [r7, #19]
 800821e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800822c:	4b11      	ldr	r3, [pc, #68]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800822e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008232:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800823c:	490d      	ldr	r1, [pc, #52]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008260:	4904      	ldr	r1, [pc, #16]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008268:	7cbb      	ldrb	r3, [r7, #18]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40021000 	.word	0x40021000

08008278 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800828a:	d137      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800828c:	4ba9      	ldr	r3, [pc, #676]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800828e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008296:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829e:	d014      	beq.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80082a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082a4:	d01e      	beq.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082aa:	d001      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80082ac:	f000 bca0 	b.w	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082b0:	4ba0      	ldr	r3, [pc, #640]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80082b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	f040 8493 	bne.w	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
        frequency = LSE_VALUE;
 80082c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c4:	61fb      	str	r3, [r7, #28]
      break;
 80082c6:	f000 bc8e 	b.w	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80082ca:	4b9a      	ldr	r3, [pc, #616]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80082cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	f040 8488 	bne.w	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = LSI_VALUE;
 80082da:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80082de:	61fb      	str	r3, [r7, #28]
      break;
 80082e0:	f000 bc83 	b.w	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x972>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082e4:	4b93      	ldr	r3, [pc, #588]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082f0:	f040 847d 	bne.w	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x976>
        frequency = HSE_VALUE / 32U;
 80082f4:	4b90      	ldr	r3, [pc, #576]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80082f6:	61fb      	str	r3, [r7, #28]
      break;
 80082f8:	f000 bc79 	b.w	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x976>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082fc:	4b8d      	ldr	r3, [pc, #564]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d023      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800830c:	2b03      	cmp	r3, #3
 800830e:	d02e      	beq.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008310:	2b01      	cmp	r3, #1
 8008312:	d139      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008314:	4b87      	ldr	r3, [pc, #540]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b02      	cmp	r3, #2
 800831e:	d116      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008320:	4b84      	ldr	r3, [pc, #528]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800832c:	4b81      	ldr	r3, [pc, #516]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	e005      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8008338:	4b7e      	ldr	r3, [pc, #504]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800833a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	4a7d      	ldr	r2, [pc, #500]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800834a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800834c:	e01f      	b.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]
      break;
 8008352:	e01c      	b.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008354:	4b77      	ldr	r3, [pc, #476]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800835c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008360:	d102      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8008362:	4b77      	ldr	r3, [pc, #476]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008364:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008366:	e012      	b.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	61bb      	str	r3, [r7, #24]
      break;
 800836c:	e00f      	b.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800836e:	4b71      	ldr	r3, [pc, #452]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800837a:	d102      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 800837c:	4b71      	ldr	r3, [pc, #452]	; (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800837e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008380:	e005      	b.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	61bb      	str	r3, [r7, #24]
      break;
 8008386:	e002      	b.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	61bb      	str	r3, [r7, #24]
      break;
 800838c:	bf00      	nop
    }

    switch(PeriphClk)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008394:	f000 8384 	beq.w	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800839c:	d828      	bhi.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 800839e:	2b10      	cmp	r3, #16
 80083a0:	f000 81fb 	beq.w	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d811      	bhi.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	f000 8144 	beq.w	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d804      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	f000 8107 	beq.w	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80083b8:	f000 bc1a 	b.w	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 80083bc:	2b04      	cmp	r3, #4
 80083be:	f000 8184 	beq.w	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80083c2:	2b08      	cmp	r3, #8
 80083c4:	f000 81b5 	beq.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
      break;
 80083c8:	f000 bc12 	b.w	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	f000 82dd 	beq.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80083d2:	2b40      	cmp	r3, #64	; 0x40
 80083d4:	d804      	bhi.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80083d6:	2b20      	cmp	r3, #32
 80083d8:	f000 821e 	beq.w	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
      break;
 80083dc:	f000 bc08 	b.w	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 80083e0:	2b80      	cmp	r3, #128	; 0x80
 80083e2:	f000 82f6 	beq.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80083e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ea:	f000 8315 	beq.w	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      break;
 80083ee:	e3ff      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 80083f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f4:	f000 8248 	beq.w	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 80083f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083fc:	d811      	bhi.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80083fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008402:	d025      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008408:	d804      	bhi.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800840a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840e:	f000 838d 	beq.w	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
      break;
 8008412:	e3ed      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8008414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008418:	d021      	beq.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800841a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800841e:	d025      	beq.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
      break;
 8008420:	e3e6      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8008422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008426:	d021      	beq.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800842c:	d808      	bhi.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800842e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008432:	f000 83bc 	beq.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800843a:	f000 8296 	beq.w	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
      break;
 800843e:	e3d7      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8008440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008444:	d012      	beq.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844a:	f000 8308 	beq.w	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      break;
 800844e:	e3cf      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008450:	69b9      	ldr	r1, [r7, #24]
 8008452:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008456:	f000 fdaf 	bl	8008fb8 <RCCEx_GetSAIxPeriphCLKFreq>
 800845a:	61f8      	str	r0, [r7, #28]
      break;
 800845c:	e3c8      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800845e:	69b9      	ldr	r1, [r7, #24]
 8008460:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008464:	f000 fda8 	bl	8008fb8 <RCCEx_GetSAIxPeriphCLKFreq>
 8008468:	61f8      	str	r0, [r7, #28]
      break;
 800846a:	e3c1      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800846c:	4b31      	ldr	r3, [pc, #196]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008472:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008476:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800847e:	d063      	beq.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8008480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008484:	d803      	bhi.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 808b 	beq.w	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
          break;
 800848c:	e09a      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        switch(srcclk)
 800848e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008492:	d021      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008494:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008498:	d000      	beq.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          break;
 800849a:	e093      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800849c:	4b25      	ldr	r3, [pc, #148]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	f040 8086 	bne.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80084aa:	4b22      	ldr	r3, [pc, #136]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d005      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 80084b6:	4b1f      	ldr	r3, [pc, #124]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	091b      	lsrs	r3, r3, #4
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	e005      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c8:	0a1b      	lsrs	r3, r3, #8
 80084ca:	f003 030f 	and.w	r3, r3, #15
 80084ce:	4a1b      	ldr	r2, [pc, #108]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80084d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d4:	61fb      	str	r3, [r7, #28]
          break;
 80084d6:	e06e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80084d8:	4b16      	ldr	r3, [pc, #88]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084e4:	d169      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80084e6:	4b13      	ldr	r3, [pc, #76]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f2:	d162      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80084f4:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	0a1b      	lsrs	r3, r3, #8
 80084fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084fe:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	fb02 f203 	mul.w	r2, r2, r3
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	091b      	lsrs	r3, r3, #4
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	3301      	adds	r3, #1
 8008514:	fbb2 f3f3 	udiv	r3, r2, r3
 8008518:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	0d5b      	lsrs	r3, r3, #21
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	3301      	adds	r3, #1
 8008526:	005b      	lsls	r3, r3, #1
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	fbb2 f3f3 	udiv	r3, r2, r3
 800852e:	61fb      	str	r3, [r7, #28]
          break;
 8008530:	e043      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008532:	bf00      	nop
 8008534:	40021000 	.word	0x40021000
 8008538:	0003d090 	.word	0x0003d090
 800853c:	080118d4 	.word	0x080118d4
 8008540:	00f42400 	.word	0x00f42400
 8008544:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008548:	4bb0      	ldr	r3, [pc, #704]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008554:	d133      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008556:	4bad      	ldr	r3, [pc, #692]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800855e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008562:	d12c      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x346>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008564:	4ba9      	ldr	r3, [pc, #676]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	0a1b      	lsrs	r3, r3, #8
 800856a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800856e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	fb02 f203 	mul.w	r2, r2, r3
 8008578:	4ba4      	ldr	r3, [pc, #656]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	3301      	adds	r3, #1
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800858a:	4ba0      	ldr	r3, [pc, #640]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	0d5b      	lsrs	r3, r3, #21
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	3301      	adds	r3, #1
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	fbb2 f3f3 	udiv	r3, r2, r3
 800859e:	61fb      	str	r3, [r7, #28]
          break;
 80085a0:	e00d      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80085a2:	4b9a      	ldr	r3, [pc, #616]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80085a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d108      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
            frequency = HSI48_VALUE;
 80085b0:	4b97      	ldr	r3, [pc, #604]	; (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80085b2:	61fb      	str	r3, [r7, #28]
          break;
 80085b4:	e005      	b.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          break;
 80085b6:	bf00      	nop
 80085b8:	e31a      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80085ba:	bf00      	nop
 80085bc:	e318      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80085be:	bf00      	nop
 80085c0:	e316      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80085c2:	bf00      	nop
        break;
 80085c4:	e314      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80085c6:	4b91      	ldr	r3, [pc, #580]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085cc:	f003 0303 	and.w	r3, r3, #3
 80085d0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d828      	bhi.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80085d8:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	080085f1 	.word	0x080085f1
 80085e4:	080085f9 	.word	0x080085f9
 80085e8:	08008601 	.word	0x08008601
 80085ec:	08008615 	.word	0x08008615
          frequency = HAL_RCC_GetPCLK2Freq();
 80085f0:	f7ff fad4 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 80085f4:	61f8      	str	r0, [r7, #28]
          break;
 80085f6:	e01d      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          frequency = HAL_RCC_GetSysClockFreq();
 80085f8:	f7ff fa24 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 80085fc:	61f8      	str	r0, [r7, #28]
          break;
 80085fe:	e019      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008600:	4b82      	ldr	r3, [pc, #520]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800860c:	d10f      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = HSI_VALUE;
 800860e:	4b81      	ldr	r3, [pc, #516]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008610:	61fb      	str	r3, [r7, #28]
          break;
 8008612:	e00c      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008614:	4b7d      	ldr	r3, [pc, #500]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b02      	cmp	r3, #2
 8008620:	d107      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            frequency = LSE_VALUE;
 8008622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008626:	61fb      	str	r3, [r7, #28]
          break;
 8008628:	e003      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          break;
 800862a:	bf00      	nop
 800862c:	e2e0      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800862e:	bf00      	nop
 8008630:	e2de      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008632:	bf00      	nop
        break;
 8008634:	e2dc      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008636:	4b75      	ldr	r3, [pc, #468]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863c:	f003 030c 	and.w	r3, r3, #12
 8008640:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b0c      	cmp	r3, #12
 8008646:	d83a      	bhi.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008685 	.word	0x08008685
 8008654:	080086bf 	.word	0x080086bf
 8008658:	080086bf 	.word	0x080086bf
 800865c:	080086bf 	.word	0x080086bf
 8008660:	0800868d 	.word	0x0800868d
 8008664:	080086bf 	.word	0x080086bf
 8008668:	080086bf 	.word	0x080086bf
 800866c:	080086bf 	.word	0x080086bf
 8008670:	08008695 	.word	0x08008695
 8008674:	080086bf 	.word	0x080086bf
 8008678:	080086bf 	.word	0x080086bf
 800867c:	080086bf 	.word	0x080086bf
 8008680:	080086a9 	.word	0x080086a9
          frequency = HAL_RCC_GetPCLK1Freq();
 8008684:	f7ff fa74 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8008688:	61f8      	str	r0, [r7, #28]
          break;
 800868a:	e01d      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          frequency = HAL_RCC_GetSysClockFreq();
 800868c:	f7ff f9da 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 8008690:	61f8      	str	r0, [r7, #28]
          break;
 8008692:	e019      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008694:	4b5d      	ldr	r3, [pc, #372]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a0:	d10f      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = HSI_VALUE;
 80086a2:	4b5c      	ldr	r3, [pc, #368]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80086a4:	61fb      	str	r3, [r7, #28]
          break;
 80086a6:	e00c      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086a8:	4b58      	ldr	r3, [pc, #352]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80086aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d107      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = LSE_VALUE;
 80086b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ba:	61fb      	str	r3, [r7, #28]
          break;
 80086bc:	e003      	b.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          break;
 80086be:	bf00      	nop
 80086c0:	e296      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80086c2:	bf00      	nop
 80086c4:	e294      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80086c6:	bf00      	nop
        break;
 80086c8:	e292      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80086ca:	4b50      	ldr	r3, [pc, #320]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80086cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d00d      	beq.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d802      	bhi.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          break;
 80086e4:	e024      	b.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
        switch(srcclk)
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d00a      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 80086ea:	2b30      	cmp	r3, #48	; 0x30
 80086ec:	d012      	beq.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          break;
 80086ee:	e01f      	b.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80086f0:	f7ff fa3e 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 80086f4:	61f8      	str	r0, [r7, #28]
          break;
 80086f6:	e01b      	b.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetSysClockFreq();
 80086f8:	f7ff f9a4 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 80086fc:	61f8      	str	r0, [r7, #28]
          break;
 80086fe:	e017      	b.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008700:	4b42      	ldr	r3, [pc, #264]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870c:	d10d      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = HSI_VALUE;
 800870e:	4b41      	ldr	r3, [pc, #260]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008710:	61fb      	str	r3, [r7, #28]
          break;
 8008712:	e00a      	b.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008714:	4b3d      	ldr	r3, [pc, #244]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b02      	cmp	r3, #2
 8008720:	d105      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
            frequency = LSE_VALUE;
 8008722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008726:	61fb      	str	r3, [r7, #28]
          break;
 8008728:	e001      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 800872a:	bf00      	nop
 800872c:	e260      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800872e:	bf00      	nop
        break;
 8008730:	e25e      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008732:	4b36      	ldr	r3, [pc, #216]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008738:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800873c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b40      	cmp	r3, #64	; 0x40
 8008742:	d00d      	beq.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8008744:	2b40      	cmp	r3, #64	; 0x40
 8008746:	d802      	bhi.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 800874c:	e024      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        switch(srcclk)
 800874e:	2b80      	cmp	r3, #128	; 0x80
 8008750:	d00a      	beq.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 8008752:	2bc0      	cmp	r3, #192	; 0xc0
 8008754:	d012      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          break;
 8008756:	e01f      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008758:	f7ff fa0a 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800875c:	61f8      	str	r0, [r7, #28]
          break;
 800875e:	e01b      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8008760:	f7ff f970 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 8008764:	61f8      	str	r0, [r7, #28]
          break;
 8008766:	e017      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008768:	4b28      	ldr	r3, [pc, #160]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008774:	d10d      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8008776:	4b27      	ldr	r3, [pc, #156]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008778:	61fb      	str	r3, [r7, #28]
          break;
 800877a:	e00a      	b.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800877c:	4b23      	ldr	r3, [pc, #140]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b02      	cmp	r3, #2
 8008788:	d105      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800878a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800878e:	61fb      	str	r3, [r7, #28]
          break;
 8008790:	e001      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8008792:	bf00      	nop
 8008794:	e22c      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008796:	bf00      	nop
        break;
 8008798:	e22a      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800879a:	4b1c      	ldr	r3, [pc, #112]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ac:	d010      	beq.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 80087ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b2:	d802      	bhi.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          break;
 80087b8:	e026      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        switch(srcclk)
 80087ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087be:	d00b      	beq.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 80087c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c4:	d012      	beq.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x574>
          break;
 80087c6:	e01f      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetPCLK1Freq();
 80087c8:	f7ff f9d2 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 80087cc:	61f8      	str	r0, [r7, #28]
          break;
 80087ce:	e01b      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetSysClockFreq();
 80087d0:	f7ff f938 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 80087d4:	61f8      	str	r0, [r7, #28]
          break;
 80087d6:	e017      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087d8:	4b0c      	ldr	r3, [pc, #48]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e4:	d10d      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = HSI_VALUE;
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80087e8:	61fb      	str	r3, [r7, #28]
          break;
 80087ea:	e00a      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80087ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d105      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = LSE_VALUE;
 80087fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087fe:	61fb      	str	r3, [r7, #28]
          break;
 8008800:	e001      	b.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          break;
 8008802:	bf00      	nop
 8008804:	e1f4      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008806:	bf00      	nop
        break;
 8008808:	e1f2      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800880a:	bf00      	nop
 800880c:	40021000 	.word	0x40021000
 8008810:	02dc6c00 	.word	0x02dc6c00
 8008814:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008818:	4bad      	ldr	r3, [pc, #692]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008822:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800882a:	d010      	beq.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800882c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008830:	d802      	bhi.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d007      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          break;
 8008836:	e026      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        switch(srcclk)
 8008838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800883c:	d00b      	beq.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 800883e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008842:	d012      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8008844:	e01f      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008846:	f7ff f993 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800884a:	61f8      	str	r0, [r7, #28]
          break;
 800884c:	e01b      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetSysClockFreq();
 800884e:	f7ff f8f9 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 8008852:	61f8      	str	r0, [r7, #28]
          break;
 8008854:	e017      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008856:	4b9e      	ldr	r3, [pc, #632]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800885e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008862:	d10d      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = HSI_VALUE;
 8008864:	4b9b      	ldr	r3, [pc, #620]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008866:	61fb      	str	r3, [r7, #28]
          break;
 8008868:	e00a      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800886a:	4b99      	ldr	r3, [pc, #612]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b02      	cmp	r3, #2
 8008876:	d105      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = LSE_VALUE;
 8008878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887c:	61fb      	str	r3, [r7, #28]
          break;
 800887e:	e001      	b.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          break;
 8008880:	bf00      	nop
 8008882:	e1b5      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008884:	bf00      	nop
        break;
 8008886:	e1b3      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008888:	4b91      	ldr	r3, [pc, #580]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800888a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008892:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800889a:	d036      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800889c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088a0:	d003      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 80088a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a6:	d004      	beq.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
          break;
 80088a8:	e05e      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80088aa:	f7ff f8cb 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 80088ae:	61f8      	str	r0, [r7, #28]
          break;
 80088b0:	e05a      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80088b2:	4b87      	ldr	r3, [pc, #540]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088be:	d150      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 80088c0:	4b83      	ldr	r3, [pc, #524]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d04a      	beq.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80088cc:	4b80      	ldr	r3, [pc, #512]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	0a1b      	lsrs	r3, r3, #8
 80088d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	fb02 f203 	mul.w	r2, r2, r3
 80088e0:	4b7b      	ldr	r3, [pc, #492]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	091b      	lsrs	r3, r3, #4
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	3301      	adds	r3, #1
 80088ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80088f2:	4b77      	ldr	r3, [pc, #476]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	0e5b      	lsrs	r3, r3, #25
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	3301      	adds	r3, #1
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	fbb2 f3f3 	udiv	r3, r2, r3
 8008906:	61fb      	str	r3, [r7, #28]
          break;
 8008908:	e02b      	b.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800890a:	4b71      	ldr	r3, [pc, #452]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008916:	d126      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8008918:	4b6d      	ldr	r3, [pc, #436]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d020      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008924:	4b6a      	ldr	r3, [pc, #424]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	0a1b      	lsrs	r3, r3, #8
 800892a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800892e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	fb02 f203 	mul.w	r2, r2, r3
 8008938:	4b65      	ldr	r3, [pc, #404]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	3301      	adds	r3, #1
 8008944:	fbb2 f3f3 	udiv	r3, r2, r3
 8008948:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800894a:	4b61      	ldr	r3, [pc, #388]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	0e5b      	lsrs	r3, r3, #25
 8008950:	f003 0303 	and.w	r3, r3, #3
 8008954:	3301      	adds	r3, #1
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	fbb2 f3f3 	udiv	r3, r2, r3
 800895e:	61fb      	str	r3, [r7, #28]
          break;
 8008960:	e001      	b.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
          break;
 8008962:	bf00      	nop
 8008964:	e144      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008966:	bf00      	nop
        break;
 8008968:	e142      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800896a:	4b59      	ldr	r3, [pc, #356]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800896c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008974:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK2Freq();
 800897c:	f7ff f90e 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 8008980:	61f8      	str	r0, [r7, #28]
        break;
 8008982:	e135      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8008984:	f7ff f85e 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 8008988:	61f8      	str	r0, [r7, #28]
        break;
 800898a:	e131      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800898c:	4b50      	ldr	r3, [pc, #320]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800898e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008992:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008996:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899e:	d009      	beq.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80089a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a4:	d00a      	beq.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d000      	beq.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x734>
          break;
 80089aa:	e011      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 80089ac:	f7ff f8e0 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 80089b0:	61f8      	str	r0, [r7, #28]
          break;
 80089b2:	e00d      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetSysClockFreq();
 80089b4:	f7ff f846 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 80089b8:	61f8      	str	r0, [r7, #28]
          break;
 80089ba:	e009      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089bc:	4b44      	ldr	r3, [pc, #272]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c8:	d101      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x756>
            frequency = HSI_VALUE;
 80089ca:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80089cc:	61fb      	str	r3, [r7, #28]
          break;
 80089ce:	bf00      	nop
        break;
 80089d0:	e10e      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80089d2:	4b3f      	ldr	r3, [pc, #252]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089dc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e4:	d009      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80089e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ea:	d00a      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d000      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 80089f0:	e011      	b.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80089f2:	f7ff f8bd 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 80089f6:	61f8      	str	r0, [r7, #28]
          break;
 80089f8:	e00d      	b.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetSysClockFreq();
 80089fa:	f7ff f823 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 80089fe:	61f8      	str	r0, [r7, #28]
          break;
 8008a00:	e009      	b.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a02:	4b33      	ldr	r3, [pc, #204]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a0e:	d101      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
            frequency = HSI_VALUE;
 8008a10:	4b30      	ldr	r3, [pc, #192]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008a12:	61fb      	str	r3, [r7, #28]
          break;
 8008a14:	bf00      	nop
        break;
 8008a16:	e0eb      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008a18:	4b2d      	ldr	r3, [pc, #180]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a22:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a2a:	d009      	beq.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8008a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a30:	d00a      	beq.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d000      	beq.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          break;
 8008a36:	e011      	b.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a38:	f7ff f89a 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8008a3c:	61f8      	str	r0, [r7, #28]
          break;
 8008a3e:	e00d      	b.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a40:	f7ff f800 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 8008a44:	61f8      	str	r0, [r7, #28]
          break;
 8008a46:	e009      	b.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a48:	4b21      	ldr	r3, [pc, #132]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a54:	d101      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 8008a56:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008a58:	61fb      	str	r3, [r7, #28]
          break;
 8008a5a:	bf00      	nop
        break;
 8008a5c:	e0c8      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008a5e:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a64:	f003 0303 	and.w	r3, r3, #3
 8008a68:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d008      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d302      	bcc.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d008      	beq.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8008a78:	e011      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a7a:	f7ff f879 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8008a7e:	61f8      	str	r0, [r7, #28]
          break;
 8008a80:	e00d      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fe ffdf 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 8008a86:	61f8      	str	r0, [r7, #28]
          break;
 8008a88:	e009      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a96:	d101      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 8008a98:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008a9a:	61fb      	str	r3, [r7, #28]
          break;
 8008a9c:	bf00      	nop
        break;
 8008a9e:	e0a7      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008aaa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ab2:	d015      	beq.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ab8:	d802      	bhi.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00c      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8008abe:	e034      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
        switch(srcclk)
 8008ac0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ac4:	d017      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8008ac6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008aca:	d01e      	beq.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 8008acc:	e02d      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008ace:	bf00      	nop
 8008ad0:	40021000 	.word	0x40021000
 8008ad4:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ad8:	f7ff f84a 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8008adc:	61f8      	str	r0, [r7, #28]
          break;
 8008ade:	e024      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008ae0:	4b46      	ldr	r3, [pc, #280]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d118      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
              frequency = LSI_VALUE;
 8008aee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008af2:	61fb      	str	r3, [r7, #28]
          break;
 8008af4:	e014      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008af6:	4b41      	ldr	r3, [pc, #260]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b02:	d10f      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
            frequency = HSI_VALUE;
 8008b04:	4b3e      	ldr	r3, [pc, #248]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8008b06:	61fb      	str	r3, [r7, #28]
          break;
 8008b08:	e00c      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b0a:	4b3c      	ldr	r3, [pc, #240]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d107      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
            frequency = LSE_VALUE;
 8008b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1c:	61fb      	str	r3, [r7, #28]
          break;
 8008b1e:	e003      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
          break;
 8008b20:	bf00      	nop
 8008b22:	e065      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008b24:	bf00      	nop
 8008b26:	e063      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008b28:	bf00      	nop
        break;
 8008b2a:	e061      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008b2c:	4b33      	ldr	r3, [pc, #204]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008b36:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3e:	d010      	beq.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b44:	d802      	bhi.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d007      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 8008b4a:	e02f      	b.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        switch(srcclk)
 8008b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b50:	d012      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 8008b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b56:	d019      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 8008b58:	e028      	b.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b5a:	f7ff f809 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8008b5e:	61f8      	str	r0, [r7, #28]
          break;
 8008b60:	e024      	b.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008b62:	4b26      	ldr	r3, [pc, #152]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d118      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
              frequency = LSI_VALUE;
 8008b70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008b74:	61fb      	str	r3, [r7, #28]
          break;
 8008b76:	e014      	b.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b78:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b84:	d10f      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
            frequency = HSI_VALUE;
 8008b86:	4b1e      	ldr	r3, [pc, #120]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8008b88:	61fb      	str	r3, [r7, #28]
          break;
 8008b8a:	e00c      	b.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b8c:	4b1b      	ldr	r3, [pc, #108]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d107      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = LSE_VALUE;
 8008b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b9e:	61fb      	str	r3, [r7, #28]
          break;
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8008ba2:	bf00      	nop
 8008ba4:	e024      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008ba6:	bf00      	nop
 8008ba8:	e022      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008baa:	bf00      	nop
        break;
 8008bac:	e020      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008bae:	4b13      	ldr	r3, [pc, #76]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bb8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8008bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc4:	d004      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 8008bc6:	e00d      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bc8:	f7fe ffd2 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8008bcc:	61f8      	str	r0, [r7, #28]
          break;
 8008bce:	e009      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bdc:	d101      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            frequency = HSI_VALUE;
 8008bde:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8008be0:	61fb      	str	r3, [r7, #28]
          break;
 8008be2:	bf00      	nop
        break;
 8008be4:	e004      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8008be6:	bf00      	nop
 8008be8:	e002      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8008bea:	bf00      	nop
 8008bec:	e000      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 8008bee:	bf00      	nop
    }
  }

  return(frequency);
 8008bf0:	69fb      	ldr	r3, [r7, #28]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	00f42400 	.word	0x00f42400

08008c04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008c08:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a04      	ldr	r2, [pc, #16]	; (8008c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008c0e:	f043 0304 	orr.w	r3, r3, #4
 8008c12:	6013      	str	r3, [r2, #0]
}
 8008c14:	bf00      	nop
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40021000 	.word	0x40021000

08008c24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c32:	4b73      	ldr	r3, [pc, #460]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f003 0303 	and.w	r3, r3, #3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d018      	beq.n	8008c70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008c3e:	4b70      	ldr	r3, [pc, #448]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f003 0203 	and.w	r2, r3, #3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d10d      	bne.n	8008c6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
       ||
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008c56:	4b6a      	ldr	r3, [pc, #424]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	091b      	lsrs	r3, r3, #4
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
       ||
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d044      	beq.n	8008cf4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	e041      	b.n	8008cf4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d00c      	beq.n	8008c92 <RCCEx_PLLSAI1_Config+0x6e>
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d013      	beq.n	8008ca4 <RCCEx_PLLSAI1_Config+0x80>
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d120      	bne.n	8008cc2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008c80:	4b5f      	ldr	r3, [pc, #380]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d11d      	bne.n	8008cc8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c90:	e01a      	b.n	8008cc8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c92:	4b5b      	ldr	r3, [pc, #364]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d116      	bne.n	8008ccc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ca2:	e013      	b.n	8008ccc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008ca4:	4b56      	ldr	r3, [pc, #344]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10f      	bne.n	8008cd0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008cb0:	4b53      	ldr	r3, [pc, #332]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d109      	bne.n	8008cd0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cc0:	e006      	b.n	8008cd0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc6:	e004      	b.n	8008cd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008cc8:	bf00      	nop
 8008cca:	e002      	b.n	8008cd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008ccc:	bf00      	nop
 8008cce:	e000      	b.n	8008cd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008cd0:	bf00      	nop
    }

    if(status == HAL_OK)
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10d      	bne.n	8008cf4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008cd8:	4b49      	ldr	r3, [pc, #292]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6819      	ldr	r1, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	430b      	orrs	r3, r1
 8008cee:	4944      	ldr	r1, [pc, #272]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d17c      	bne.n	8008df4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008cfa:	4b41      	ldr	r3, [pc, #260]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a40      	ldr	r2, [pc, #256]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d06:	f7fa fdcb 	bl	80038a0 <HAL_GetTick>
 8008d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d0c:	e009      	b.n	8008d22 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d0e:	f7fa fdc7 	bl	80038a0 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d902      	bls.n	8008d22 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	73fb      	strb	r3, [r7, #15]
        break;
 8008d20:	e005      	b.n	8008d2e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d22:	4b37      	ldr	r3, [pc, #220]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1ef      	bne.n	8008d0e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d15f      	bne.n	8008df4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d110      	bne.n	8008d5c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d3a:	4b31      	ldr	r3, [pc, #196]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008d42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6892      	ldr	r2, [r2, #8]
 8008d4a:	0211      	lsls	r1, r2, #8
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	68d2      	ldr	r2, [r2, #12]
 8008d50:	06d2      	lsls	r2, r2, #27
 8008d52:	430a      	orrs	r2, r1
 8008d54:	492a      	ldr	r1, [pc, #168]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	610b      	str	r3, [r1, #16]
 8008d5a:	e027      	b.n	8008dac <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d112      	bne.n	8008d88 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d62:	4b27      	ldr	r3, [pc, #156]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008d6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6892      	ldr	r2, [r2, #8]
 8008d72:	0211      	lsls	r1, r2, #8
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6912      	ldr	r2, [r2, #16]
 8008d78:	0852      	lsrs	r2, r2, #1
 8008d7a:	3a01      	subs	r2, #1
 8008d7c:	0552      	lsls	r2, r2, #21
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	491f      	ldr	r1, [pc, #124]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	610b      	str	r3, [r1, #16]
 8008d86:	e011      	b.n	8008dac <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d88:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6892      	ldr	r2, [r2, #8]
 8008d98:	0211      	lsls	r1, r2, #8
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6952      	ldr	r2, [r2, #20]
 8008d9e:	0852      	lsrs	r2, r2, #1
 8008da0:	3a01      	subs	r2, #1
 8008da2:	0652      	lsls	r2, r2, #25
 8008da4:	430a      	orrs	r2, r1
 8008da6:	4916      	ldr	r1, [pc, #88]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008dac:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008db2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008db6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db8:	f7fa fd72 	bl	80038a0 <HAL_GetTick>
 8008dbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008dbe:	e009      	b.n	8008dd4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008dc0:	f7fa fd6e 	bl	80038a0 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d902      	bls.n	8008dd4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	73fb      	strb	r3, [r7, #15]
          break;
 8008dd2:	e005      	b.n	8008de0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008dd4:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0ef      	beq.n	8008dc0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d106      	bne.n	8008df4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008de6:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008de8:	691a      	ldr	r2, [r3, #16]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	4904      	ldr	r1, [pc, #16]	; (8008e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	40021000 	.word	0x40021000

08008e04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008e12:	4b68      	ldr	r3, [pc, #416]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d018      	beq.n	8008e50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008e1e:	4b65      	ldr	r3, [pc, #404]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f003 0203 	and.w	r2, r3, #3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d10d      	bne.n	8008e4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
       ||
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008e36:	4b5f      	ldr	r3, [pc, #380]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	091b      	lsrs	r3, r3, #4
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
       ||
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d044      	beq.n	8008ed4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	e041      	b.n	8008ed4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d00c      	beq.n	8008e72 <RCCEx_PLLSAI2_Config+0x6e>
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d013      	beq.n	8008e84 <RCCEx_PLLSAI2_Config+0x80>
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d120      	bne.n	8008ea2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008e60:	4b54      	ldr	r3, [pc, #336]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0302 	and.w	r3, r3, #2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d11d      	bne.n	8008ea8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e70:	e01a      	b.n	8008ea8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008e72:	4b50      	ldr	r3, [pc, #320]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d116      	bne.n	8008eac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e82:	e013      	b.n	8008eac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e84:	4b4b      	ldr	r3, [pc, #300]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10f      	bne.n	8008eb0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e90:	4b48      	ldr	r3, [pc, #288]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d109      	bne.n	8008eb0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ea0:	e006      	b.n	8008eb0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea6:	e004      	b.n	8008eb2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008ea8:	bf00      	nop
 8008eaa:	e002      	b.n	8008eb2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008eac:	bf00      	nop
 8008eae:	e000      	b.n	8008eb2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008eb0:	bf00      	nop
    }

    if(status == HAL_OK)
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10d      	bne.n	8008ed4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008eb8:	4b3e      	ldr	r3, [pc, #248]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6819      	ldr	r1, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	430b      	orrs	r3, r1
 8008ece:	4939      	ldr	r1, [pc, #228]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d166      	bne.n	8008fa8 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008eda:	4b36      	ldr	r3, [pc, #216]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a35      	ldr	r2, [pc, #212]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ee6:	f7fa fcdb 	bl	80038a0 <HAL_GetTick>
 8008eea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008eec:	e009      	b.n	8008f02 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008eee:	f7fa fcd7 	bl	80038a0 <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d902      	bls.n	8008f02 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	73fb      	strb	r3, [r7, #15]
        break;
 8008f00:	e005      	b.n	8008f0e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f02:	4b2c      	ldr	r3, [pc, #176]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1ef      	bne.n	8008eee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d149      	bne.n	8008fa8 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d110      	bne.n	8008f3c <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f1a:	4b26      	ldr	r3, [pc, #152]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008f22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6892      	ldr	r2, [r2, #8]
 8008f2a:	0211      	lsls	r1, r2, #8
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	68d2      	ldr	r2, [r2, #12]
 8008f30:	06d2      	lsls	r2, r2, #27
 8008f32:	430a      	orrs	r2, r1
 8008f34:	491f      	ldr	r1, [pc, #124]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	614b      	str	r3, [r1, #20]
 8008f3a:	e011      	b.n	8008f60 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f3c:	4b1d      	ldr	r3, [pc, #116]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008f44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	6892      	ldr	r2, [r2, #8]
 8008f4c:	0211      	lsls	r1, r2, #8
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6912      	ldr	r2, [r2, #16]
 8008f52:	0852      	lsrs	r2, r2, #1
 8008f54:	3a01      	subs	r2, #1
 8008f56:	0652      	lsls	r2, r2, #25
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	4916      	ldr	r1, [pc, #88]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008f60:	4b14      	ldr	r3, [pc, #80]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a13      	ldr	r2, [pc, #76]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f6c:	f7fa fc98 	bl	80038a0 <HAL_GetTick>
 8008f70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f72:	e009      	b.n	8008f88 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f74:	f7fa fc94 	bl	80038a0 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d902      	bls.n	8008f88 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	73fb      	strb	r3, [r7, #15]
          break;
 8008f86:	e005      	b.n	8008f94 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f88:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0ef      	beq.n	8008f74 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008f9a:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	4904      	ldr	r1, [pc, #16]	; (8008fb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40021000 	.word	0x40021000

08008fb8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b089      	sub	sp, #36	; 0x24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fd4:	d10c      	bne.n	8008ff0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008fd6:	4b77      	ldr	r3, [pc, #476]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008fe0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fe8:	d112      	bne.n	8009010 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008fea:	4b73      	ldr	r3, [pc, #460]	; (80091b8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	e00f      	b.n	8009010 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff6:	d10b      	bne.n	8009010 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008ff8:	4b6e      	ldr	r3, [pc, #440]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffe:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009002:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800900a:	d101      	bne.n	8009010 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800900c:	4b6a      	ldr	r3, [pc, #424]	; (80091b8 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800900e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	f040 80c6 	bne.w	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009022:	d003      	beq.n	800902c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800902a:	d13b      	bne.n	80090a4 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800902c:	4b61      	ldr	r3, [pc, #388]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009038:	f040 80b3 	bne.w	80091a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800903c:	4b5d      	ldr	r3, [pc, #372]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80ac 	beq.w	80091a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800904a:	4b5a      	ldr	r3, [pc, #360]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	091b      	lsrs	r3, r3, #4
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	3301      	adds	r3, #1
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	fbb2 f3f3 	udiv	r3, r2, r3
 800905c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800905e:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	0a1b      	lsrs	r3, r3, #8
 8009064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009068:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800906a:	4b52      	ldr	r3, [pc, #328]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	0edb      	lsrs	r3, r3, #27
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800907c:	4b4d      	ldr	r3, [pc, #308]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8009088:	2311      	movs	r3, #17
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e001      	b.n	8009092 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800908e:	2307      	movs	r3, #7
 8009090:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	fb02 f203 	mul.w	r2, r2, r3
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80090a2:	e07e      	b.n	80091a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d139      	bne.n	800911e <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80090aa:	4b42      	ldr	r3, [pc, #264]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090b6:	d175      	bne.n	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80090b8:	4b3e      	ldr	r3, [pc, #248]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d06f      	beq.n	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80090c4:	4b3b      	ldr	r3, [pc, #236]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	091b      	lsrs	r3, r3, #4
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	3301      	adds	r3, #1
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80090d8:	4b36      	ldr	r3, [pc, #216]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80090e4:	4b33      	ldr	r3, [pc, #204]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	0edb      	lsrs	r3, r3, #27
 80090ea:	f003 031f 	and.w	r3, r3, #31
 80090ee:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10a      	bne.n	800910c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80090f6:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8009102:	2311      	movs	r3, #17
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	e001      	b.n	800910c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8009108:	2307      	movs	r3, #7
 800910a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	fb02 f203 	mul.w	r2, r2, r3
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	fbb2 f3f3 	udiv	r3, r2, r3
 800911a:	61fb      	str	r3, [r7, #28]
 800911c:	e042      	b.n	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009124:	d003      	beq.n	800912e <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800912c:	d13a      	bne.n	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913a:	d133      	bne.n	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d02d      	beq.n	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009148:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	091b      	lsrs	r3, r3, #4
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	3301      	adds	r3, #1
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	fbb2 f3f3 	udiv	r3, r2, r3
 800915a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	0a1b      	lsrs	r3, r3, #8
 8009162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009166:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	0edb      	lsrs	r3, r3, #27
 800916e:	f003 031f 	and.w	r3, r3, #31
 8009172:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8009186:	2311      	movs	r3, #17
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e001      	b.n	8009190 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800918c:	2307      	movs	r3, #7
 800918e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	fb02 f203 	mul.w	r2, r2, r3
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	fbb2 f3f3 	udiv	r3, r2, r3
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	e000      	b.n	80091a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80091a2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80091a4:	69fb      	ldr	r3, [r7, #28]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3724      	adds	r7, #36	; 0x24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	40021000 	.word	0x40021000
 80091b8:	001fff68 	.word	0x001fff68

080091bc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e153      	b.n	8009476 <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7fa f968 	bl	80034b8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f957 	bl	800949c <SAI_Disable>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e13e      	b.n	8009476 <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d007      	beq.n	8009218 <HAL_SAI_Init+0x5c>
 8009208:	2b01      	cmp	r3, #1
 800920a:	d302      	bcc.n	8009212 <HAL_SAI_Init+0x56>
 800920c:	2b02      	cmp	r3, #2
 800920e:	d006      	beq.n	800921e <HAL_SAI_Init+0x62>
 8009210:	e008      	b.n	8009224 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]
      break;
 8009216:	e008      	b.n	800922a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009218:	2310      	movs	r3, #16
 800921a:	61fb      	str	r3, [r7, #28]
      break;
 800921c:	e005      	b.n	800922a <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800921e:	2320      	movs	r3, #32
 8009220:	61fb      	str	r3, [r7, #28]
      break;
 8009222:	e002      	b.n	800922a <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	61fb      	str	r3, [r7, #28]
      break;
 8009228:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	2b03      	cmp	r3, #3
 8009230:	d81d      	bhi.n	800926e <HAL_SAI_Init+0xb2>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <HAL_SAI_Init+0x7c>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009249 	.word	0x08009249
 800923c:	0800924f 	.word	0x0800924f
 8009240:	08009257 	.word	0x08009257
 8009244:	0800925f 	.word	0x0800925f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]
      break;
 800924c:	e012      	b.n	8009274 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800924e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009252:	617b      	str	r3, [r7, #20]
      break;
 8009254:	e00e      	b.n	8009274 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800925a:	617b      	str	r3, [r7, #20]
      break;
 800925c:	e00a      	b.n	8009274 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800925e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009262:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	61fb      	str	r3, [r7, #28]
      break;
 800926c:	e002      	b.n	8009274 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
      break;
 8009272:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a81      	ldr	r2, [pc, #516]	; (8009480 <HAL_SAI_Init+0x2c4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d004      	beq.n	8009288 <HAL_SAI_Init+0xcc>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a80      	ldr	r2, [pc, #512]	; (8009484 <HAL_SAI_Init+0x2c8>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d103      	bne.n	8009290 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009288:	4a7f      	ldr	r2, [pc, #508]	; (8009488 <HAL_SAI_Init+0x2cc>)
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	e002      	b.n	8009296 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009290:	4a7e      	ldr	r2, [pc, #504]	; (800948c <HAL_SAI_Init+0x2d0>)
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d041      	beq.n	8009322 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a77      	ldr	r2, [pc, #476]	; (8009480 <HAL_SAI_Init+0x2c4>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d004      	beq.n	80092b2 <HAL_SAI_Init+0xf6>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a75      	ldr	r2, [pc, #468]	; (8009484 <HAL_SAI_Init+0x2c8>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d105      	bne.n	80092be <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80092b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80092b6:	f7fe ffdf 	bl	8008278 <HAL_RCCEx_GetPeriphCLKFreq>
 80092ba:	6138      	str	r0, [r7, #16]
 80092bc:	e004      	b.n	80092c8 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80092be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80092c2:	f7fe ffd9 	bl	8008278 <HAL_RCCEx_GetPeriphCLKFreq>
 80092c6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	461a      	mov	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	025b      	lsls	r3, r3, #9
 80092da:	fbb2 f3f3 	udiv	r3, r2, r3
 80092de:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a6b      	ldr	r2, [pc, #428]	; (8009490 <HAL_SAI_Init+0x2d4>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	08da      	lsrs	r2, r3, #3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	4b67      	ldr	r3, [pc, #412]	; (8009490 <HAL_SAI_Init+0x2d4>)
 80092f2:	fba3 2301 	umull	r2, r3, r3, r1
 80092f6:	08da      	lsrs	r2, r3, #3
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	1aca      	subs	r2, r1, r3
 8009302:	2a08      	cmp	r2, #8
 8009304:	d904      	bls.n	8009310 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	2b04      	cmp	r3, #4
 8009316:	d104      	bne.n	8009322 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	085a      	lsrs	r2, r3, #1
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_SAI_Init+0x176>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d109      	bne.n	8009346 <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009336:	2b01      	cmp	r3, #1
 8009338:	d101      	bne.n	800933e <HAL_SAI_Init+0x182>
 800933a:	2300      	movs	r3, #0
 800933c:	e001      	b.n	8009342 <HAL_SAI_Init+0x186>
 800933e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009342:	61bb      	str	r3, [r7, #24]
 8009344:	e008      	b.n	8009358 <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934a:	2b01      	cmp	r3, #1
 800934c:	d102      	bne.n	8009354 <HAL_SAI_Init+0x198>
 800934e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009352:	e000      	b.n	8009356 <HAL_SAI_Init+0x19a>
 8009354:	2300      	movs	r3, #0
 8009356:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6819      	ldr	r1, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b4c      	ldr	r3, [pc, #304]	; (8009494 <HAL_SAI_Init+0x2d8>)
 8009364:	400b      	ands	r3, r1
 8009366:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6819      	ldr	r1, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800937c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	431a      	orrs	r2, r3
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8009390:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800939c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	051b      	lsls	r3, r3, #20
 80093a4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6812      	ldr	r2, [r2, #0]
 80093b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80093bc:	f023 030f 	bic.w	r3, r3, #15
 80093c0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6859      	ldr	r1, [r3, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699a      	ldr	r2, [r3, #24]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d0:	431a      	orrs	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	431a      	orrs	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	430a      	orrs	r2, r1
 80093de:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6899      	ldr	r1, [r3, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4b2b      	ldr	r3, [pc, #172]	; (8009498 <HAL_SAI_Init+0x2dc>)
 80093ec:	400b      	ands	r3, r1
 80093ee:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6899      	ldr	r1, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009400:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009406:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800940c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009412:	3b01      	subs	r3, #1
 8009414:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009416:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68d9      	ldr	r1, [r3, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800942e:	400b      	ands	r3, r1
 8009430:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68d9      	ldr	r1, [r3, #12]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009440:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009446:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009448:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800944e:	3b01      	subs	r3, #1
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40015404 	.word	0x40015404
 8009484:	40015424 	.word	0x40015424
 8009488:	40015400 	.word	0x40015400
 800948c:	40015800 	.word	0x40015800
 8009490:	cccccccd 	.word	0xcccccccd
 8009494:	ff05c010 	.word	0xff05c010
 8009498:	fff88000 	.word	0xfff88000

0800949c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800949c:	b490      	push	{r4, r7}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80094a4:	4b15      	ldr	r3, [pc, #84]	; (80094fc <SAI_Disable+0x60>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a15      	ldr	r2, [pc, #84]	; (8009500 <SAI_Disable+0x64>)
 80094aa:	fba2 2303 	umull	r2, r3, r2, r3
 80094ae:	0b1b      	lsrs	r3, r3, #12
 80094b0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80094c4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80094c6:	2c00      	cmp	r4, #0
 80094c8:	d10a      	bne.n	80094e0 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	73fb      	strb	r3, [r7, #15]
      break;
 80094de:	e007      	b.n	80094f0 <SAI_Disable+0x54>
    }
    count--;
 80094e0:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1ea      	bne.n	80094c6 <SAI_Disable+0x2a>

  return status;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bc90      	pop	{r4, r7}
 80094fa:	4770      	bx	lr
 80094fc:	20000000 	.word	0x20000000
 8009500:	95cbec1b 	.word	0x95cbec1b

08009504 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e022      	b.n	800955c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7f9 fe89 	bl	8003240 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2203      	movs	r2, #3
 8009532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f814 	bl	8009564 <HAL_SD_InitCard>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e00a      	b.n	800955c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009564:	b5b0      	push	{r4, r5, r7, lr}
 8009566:	b08e      	sub	sp, #56	; 0x38
 8009568:	af04      	add	r7, sp, #16
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800956c:	2300      	movs	r3, #0
 800956e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009570:	2300      	movs	r3, #0
 8009572:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009574:	2300      	movs	r3, #0
 8009576:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800957c:	2300      	movs	r3, #0
 800957e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009580:	2376      	movs	r3, #118	; 0x76
 8009582:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681d      	ldr	r5, [r3, #0]
 8009588:	466c      	mov	r4, sp
 800958a:	f107 0314 	add.w	r3, r7, #20
 800958e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009596:	f107 0308 	add.w	r3, r7, #8
 800959a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800959c:	4628      	mov	r0, r5
 800959e:	f001 fc71 	bl	800ae84 <SDMMC_Init>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80095a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e05f      	b.n	8009674 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095c2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 fc95 	bl	800aef8 <SDMMC_PowerState_ON>
 80095ce:	4603      	mov	r3, r0
 80095d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80095d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e049      	b.n	8009674 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095ee:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fb4d 	bl	8009c90 <SD_PowerON>
 80095f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	431a      	orrs	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e02e      	b.n	8009674 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fa6c 	bl	8009af4 <SD_InitCard>
 800961c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e01b      	b.n	8009674 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009644:	4618      	mov	r0, r3
 8009646:	f001 fcea 	bl	800b01e <SDMMC_CmdBlockLength>
 800964a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00f      	beq.n	8009672 <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a09      	ldr	r2, [pc, #36]	; (800967c <HAL_SD_InitCard+0x118>)
 8009658:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	431a      	orrs	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e000      	b.n	8009674 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3728      	adds	r7, #40	; 0x28
 8009678:	46bd      	mov	sp, r7
 800967a:	bdb0      	pop	{r4, r5, r7, pc}
 800967c:	004005ff 	.word	0x004005ff

08009680 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800968e:	0f9b      	lsrs	r3, r3, #30
 8009690:	b2da      	uxtb	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800969a:	0e9b      	lsrs	r3, r3, #26
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 030f 	and.w	r3, r3, #15
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ac:	0e1b      	lsrs	r3, r3, #24
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 0303 	and.w	r3, r3, #3
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096be:	0c1b      	lsrs	r3, r3, #16
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ca:	0a1b      	lsrs	r3, r3, #8
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096e0:	0d1b      	lsrs	r3, r3, #20
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ec:	0c1b      	lsrs	r3, r3, #16
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096fe:	0bdb      	lsrs	r3, r3, #15
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	b2da      	uxtb	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009710:	0b9b      	lsrs	r3, r3, #14
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 0301 	and.w	r3, r3, #1
 8009718:	b2da      	uxtb	r2, r3
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009722:	0b5b      	lsrs	r3, r3, #13
 8009724:	b2db      	uxtb	r3, r3
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	b2da      	uxtb	r2, r3
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009734:	0b1b      	lsrs	r3, r3, #12
 8009736:	b2db      	uxtb	r3, r3
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	b2da      	uxtb	r2, r3
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2200      	movs	r2, #0
 8009746:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800974c:	2b00      	cmp	r3, #0
 800974e:	d163      	bne.n	8009818 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009754:	009a      	lsls	r2, r3, #2
 8009756:	f640 73fc 	movw	r3, #4092	; 0xffc
 800975a:	4013      	ands	r3, r2
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009760:	0f92      	lsrs	r2, r2, #30
 8009762:	431a      	orrs	r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800976c:	0edb      	lsrs	r3, r3, #27
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	b2da      	uxtb	r2, r3
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977e:	0e1b      	lsrs	r3, r3, #24
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	b2da      	uxtb	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009790:	0d5b      	lsrs	r3, r3, #21
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	b2da      	uxtb	r2, r3
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a2:	0c9b      	lsrs	r3, r3, #18
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b4:	0bdb      	lsrs	r3, r3, #15
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	7e1b      	ldrb	r3, [r3, #24]
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	3302      	adds	r3, #2
 80097d8:	2201      	movs	r2, #1
 80097da:	fa02 f303 	lsl.w	r3, r2, r3
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80097e2:	fb02 f203 	mul.w	r2, r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	7a1b      	ldrb	r3, [r3, #8]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	f003 030f 	and.w	r3, r3, #15
 80097f4:	2201      	movs	r2, #1
 80097f6:	409a      	lsls	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009804:	0a52      	lsrs	r2, r2, #9
 8009806:	fb02 f203 	mul.w	r2, r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009814:	661a      	str	r2, [r3, #96]	; 0x60
 8009816:	e031      	b.n	800987c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981c:	2b01      	cmp	r3, #1
 800981e:	d11d      	bne.n	800985c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009824:	041b      	lsls	r3, r3, #16
 8009826:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800982e:	0c1b      	lsrs	r3, r3, #16
 8009830:	431a      	orrs	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	3301      	adds	r3, #1
 800983c:	029a      	lsls	r2, r3, #10
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009850:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	661a      	str	r2, [r3, #96]	; 0x60
 800985a:	e00f      	b.n	800987c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a58      	ldr	r2, [pc, #352]	; (80099c4 <HAL_SD_GetCardCSD+0x344>)
 8009862:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009868:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e09d      	b.n	80099b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009880:	0b9b      	lsrs	r3, r3, #14
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	b2da      	uxtb	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009892:	09db      	lsrs	r3, r3, #7
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989a:	b2da      	uxtb	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b4:	0fdb      	lsrs	r3, r3, #31
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c0:	0f5b      	lsrs	r3, r3, #29
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	0e9b      	lsrs	r3, r3, #26
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e4:	0d9b      	lsrs	r3, r3, #22
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 030f 	and.w	r3, r3, #15
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f6:	0d5b      	lsrs	r3, r3, #21
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	0c1b      	lsrs	r3, r3, #16
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009926:	0bdb      	lsrs	r3, r3, #15
 8009928:	b2db      	uxtb	r3, r3
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993a:	0b9b      	lsrs	r3, r3, #14
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994e:	0b5b      	lsrs	r3, r3, #13
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	b2da      	uxtb	r2, r3
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	0b1b      	lsrs	r3, r3, #12
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	b2da      	uxtb	r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	0a9b      	lsrs	r3, r3, #10
 8009978:	b2db      	uxtb	r3, r3
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	0a1b      	lsrs	r3, r3, #8
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	b2da      	uxtb	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	085b      	lsrs	r3, r3, #1
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	004005ff 	.word	0x004005ff

080099c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80099c8:	b5b0      	push	{r4, r5, r7, lr}
 80099ca:	b08e      	sub	sp, #56	; 0x38
 80099cc:	af04      	add	r7, sp, #16
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2203      	movs	r2, #3
 80099dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d02e      	beq.n	8009a46 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ee:	d106      	bne.n	80099fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	639a      	str	r2, [r3, #56]	; 0x38
 80099fc:	e029      	b.n	8009a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a04:	d10a      	bne.n	8009a1c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9d0 	bl	8009dac <SD_WideBus_Enable>
 8009a0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	639a      	str	r2, [r3, #56]	; 0x38
 8009a1a:	e01a      	b.n	8009a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa0d 	bl	8009e42 <SD_WideBus_Disable>
 8009a28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38
 8009a36:	e00c      	b.n	8009a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
 8009a44:	e005      	b.n	8009a52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a24      	ldr	r2, [pc, #144]	; (8009af0 <HAL_SD_ConfigWideBusOperation+0x128>)
 8009a60:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a68:	e01f      	b.n	8009aaa <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681d      	ldr	r5, [r3, #0]
 8009a90:	466c      	mov	r4, sp
 8009a92:	f107 0314 	add.w	r3, r7, #20
 8009a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f001 f9ed 	bl	800ae84 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 fab3 	bl	800b01e <SDMMC_CmdBlockLength>
 8009ab8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00c      	beq.n	8009ada <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a0a      	ldr	r2, [pc, #40]	; (8009af0 <HAL_SD_ConfigWideBusOperation+0x128>)
 8009ac6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3728      	adds	r7, #40	; 0x28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bdb0      	pop	{r4, r5, r7, pc}
 8009aee:	bf00      	nop
 8009af0:	004005ff 	.word	0x004005ff

08009af4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009af4:	b5b0      	push	{r4, r5, r7, lr}
 8009af6:	b094      	sub	sp, #80	; 0x50
 8009af8:	af04      	add	r7, sp, #16
 8009afa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009afc:	2301      	movs	r3, #1
 8009afe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fa06 	bl	800af16 <SDMMC_GetPowerState>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b14:	e0b7      	b.n	8009c86 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d02f      	beq.n	8009b7e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fb85 	bl	800b232 <SDMMC_CmdSendCID>
 8009b28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b32:	e0a8      	b.n	8009c86 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fa30 	bl	800afa0 <SDMMC_GetResponse>
 8009b40:	4602      	mov	r2, r0
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2104      	movs	r1, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 fa27 	bl	800afa0 <SDMMC_GetResponse>
 8009b52:	4602      	mov	r2, r0
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2108      	movs	r1, #8
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 fa1e 	bl	800afa0 <SDMMC_GetResponse>
 8009b64:	4602      	mov	r2, r0
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	210c      	movs	r1, #12
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 fa15 	bl	800afa0 <SDMMC_GetResponse>
 8009b76:	4602      	mov	r2, r0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d00d      	beq.n	8009ba2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f107 020e 	add.w	r2, r7, #14
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fb8b 	bl	800b2ac <SDMMC_CmdSetRelAdd>
 8009b96:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <SD_InitCard+0xae>
    {
      return errorstate;
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba0:	e071      	b.n	8009c86 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d036      	beq.n	8009c18 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009baa:	89fb      	ldrh	r3, [r7, #14]
 8009bac:	461a      	mov	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bba:	041b      	lsls	r3, r3, #16
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f001 fb55 	bl	800b26e <SDMMC_CmdSendCSD>
 8009bc4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bce:	e05a      	b.n	8009c86 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 f9e2 	bl	800afa0 <SDMMC_GetResponse>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2104      	movs	r1, #4
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 f9d9 	bl	800afa0 <SDMMC_GetResponse>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2108      	movs	r1, #8
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 f9d0 	bl	800afa0 <SDMMC_GetResponse>
 8009c00:	4602      	mov	r2, r0
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	210c      	movs	r1, #12
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f001 f9c7 	bl	800afa0 <SDMMC_GetResponse>
 8009c12:	4602      	mov	r2, r0
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2104      	movs	r1, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 f9be 	bl	800afa0 <SDMMC_GetResponse>
 8009c24:	4603      	mov	r3, r0
 8009c26:	0d1a      	lsrs	r2, r3, #20
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c2c:	f107 0310 	add.w	r3, r7, #16
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff fd24 	bl	8009680 <HAL_SD_GetCardCSD>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c42:	e020      	b.n	8009c86 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6819      	ldr	r1, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c4c:	041b      	lsls	r3, r3, #16
 8009c4e:	f04f 0400 	mov.w	r4, #0
 8009c52:	461a      	mov	r2, r3
 8009c54:	4623      	mov	r3, r4
 8009c56:	4608      	mov	r0, r1
 8009c58:	f001 fa03 	bl	800b062 <SDMMC_CmdSelDesel>
 8009c5c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <SD_InitCard+0x174>
  {
    return errorstate;
 8009c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c66:	e00e      	b.n	8009c86 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681d      	ldr	r5, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	466c      	mov	r4, sp
 8009c70:	f103 0210 	add.w	r2, r3, #16
 8009c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f001 f900 	bl	800ae84 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3740      	adds	r7, #64	; 0x40
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f001 f9fd 	bl	800b0a8 <SDMMC_CmdGoIdleState>
 8009cae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <SD_PowerON+0x2a>
  {
    return errorstate;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	e072      	b.n	8009da0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 fa10 	bl	800b0e4 <SDMMC_CmdOperCond>
 8009cc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00d      	beq.n	8009ce8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 f9e6 	bl	800b0a8 <SDMMC_CmdGoIdleState>
 8009cdc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	e05b      	b.n	8009da0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d137      	bne.n	8009d66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fa10 	bl	800b122 <SDMMC_CmdAppCommand>
 8009d02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d02d      	beq.n	8009d66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d0e:	e047      	b.n	8009da0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2100      	movs	r1, #0
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fa03 	bl	800b122 <SDMMC_CmdAppCommand>
 8009d1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	e03b      	b.n	8009da0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	491e      	ldr	r1, [pc, #120]	; (8009da8 <SD_PowerON+0x118>)
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fa19 	bl	800b166 <SDMMC_CmdAppOperCommand>
 8009d34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d40:	e02e      	b.n	8009da0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2100      	movs	r1, #0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 f929 	bl	800afa0 <SDMMC_GetResponse>
 8009d4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	0fdb      	lsrs	r3, r3, #31
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <SD_PowerON+0xcc>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e000      	b.n	8009d5e <SD_PowerON+0xce>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	613b      	str	r3, [r7, #16]

    count++;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	3301      	adds	r3, #1
 8009d64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d802      	bhi.n	8009d76 <SD_PowerON+0xe6>
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0cc      	beq.n	8009d10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d902      	bls.n	8009d86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d84:	e00c      	b.n	8009da0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	645a      	str	r2, [r3, #68]	; 0x44
 8009d96:	e002      	b.n	8009d9e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	c1100000 	.word	0xc1100000

08009dac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	2300      	movs	r3, #0
 8009dba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f001 f8ec 	bl	800afa0 <SDMMC_GetResponse>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dd2:	d102      	bne.n	8009dda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dd8:	e02f      	b.n	8009e3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009dda:	f107 030c 	add.w	r3, r7, #12
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f879 	bl	8009ed8 <SD_FindSCR>
 8009de6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	e023      	b.n	8009e3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01c      	beq.n	8009e36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e04:	041b      	lsls	r3, r3, #16
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f001 f98a 	bl	800b122 <SDMMC_CmdAppCommand>
 8009e0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	e00f      	b.n	8009e3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2102      	movs	r1, #2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f001 f9c3 	bl	800b1ac <SDMMC_CmdBusWidth>
 8009e26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	e003      	b.n	8009e3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	e001      	b.n	8009e3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b086      	sub	sp, #24
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2100      	movs	r1, #0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 f8a1 	bl	800afa0 <SDMMC_GetResponse>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e68:	d102      	bne.n	8009e70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e6e:	e02f      	b.n	8009ed0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e70:	f107 030c 	add.w	r3, r7, #12
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f82e 	bl	8009ed8 <SD_FindSCR>
 8009e7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	e023      	b.n	8009ed0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01c      	beq.n	8009ecc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	f001 f93f 	bl	800b122 <SDMMC_CmdAppCommand>
 8009ea4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	e00f      	b.n	8009ed0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 f978 	bl	800b1ac <SDMMC_CmdBusWidth>
 8009ebc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	e003      	b.n	8009ed0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e001      	b.n	8009ed0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ecc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b08f      	sub	sp, #60	; 0x3c
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ee2:	f7f9 fcdd 	bl	80038a0 <HAL_GetTick>
 8009ee6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009eec:	2300      	movs	r3, #0
 8009eee:	60bb      	str	r3, [r7, #8]
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2108      	movs	r1, #8
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 f88d 	bl	800b01e <SDMMC_CmdBlockLength>
 8009f04:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	e0a9      	b.n	800a064 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f001 f900 	bl	800b122 <SDMMC_CmdAppCommand>
 8009f22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	e09a      	b.n	800a064 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f34:	2308      	movs	r3, #8
 8009f36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f38:	2330      	movs	r3, #48	; 0x30
 8009f3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f44:	2301      	movs	r3, #1
 8009f46:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f107 0210 	add.w	r2, r7, #16
 8009f50:	4611      	mov	r1, r2
 8009f52:	4618      	mov	r0, r3
 8009f54:	f001 f837 	bl	800afc6 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 f947 	bl	800b1f0 <SDMMC_CmdSendSCR>
 8009f62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d022      	beq.n	8009fb0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	e07a      	b.n	800a064 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00e      	beq.n	8009f9a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6819      	ldr	r1, [r3, #0]
 8009f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	f107 0208 	add.w	r2, r7, #8
 8009f88:	18d4      	adds	r4, r2, r3
 8009f8a:	4608      	mov	r0, r1
 8009f8c:	f000 ffa7 	bl	800aede <SDMMC_ReadFIFO>
 8009f90:	4603      	mov	r3, r0
 8009f92:	6023      	str	r3, [r4, #0]
      index++;
 8009f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f96:	3301      	adds	r3, #1
 8009f98:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f9a:	f7f9 fc81 	bl	80038a0 <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa8:	d102      	bne.n	8009fb0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009faa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fae:	e059      	b.n	800a064 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fb6:	f240 432a 	movw	r3, #1066	; 0x42a
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d0d6      	beq.n	8009f6e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc6:	f003 0308 	and.w	r3, r3, #8
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009fd6:	2308      	movs	r3, #8
 8009fd8:	e044      	b.n	800a064 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2202      	movs	r2, #2
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e037      	b.n	800a064 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2220      	movs	r2, #32
 800a008:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a00a:	2320      	movs	r3, #32
 800a00c:	e02a      	b.n	800a064 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f240 523a 	movw	r2, #1338	; 0x53a
 800a016:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	061a      	lsls	r2, r3, #24
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a024:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	0a1b      	lsrs	r3, r3, #8
 800a02a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a02e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	0e1b      	lsrs	r3, r3, #24
 800a034:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	601a      	str	r2, [r3, #0]
    scr++;
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	3304      	adds	r3, #4
 800a03e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	061a      	lsls	r2, r3, #24
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a04c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	0a1b      	lsrs	r3, r3, #8
 800a052:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a056:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	0e1b      	lsrs	r3, r3, #24
 800a05c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	373c      	adds	r7, #60	; 0x3c
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd90      	pop	{r4, r7, pc}

0800a06c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e07c      	b.n	800a178 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d106      	bne.n	800a09e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7f9 f933 	bl	8003304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0be:	d902      	bls.n	800a0c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e002      	b.n	800a0cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a0c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a0d4:	d007      	beq.n	800a0e6 <HAL_SPI_Init+0x7a>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0de:	d002      	beq.n	800a0e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10b      	bne.n	800a106 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0f6:	d903      	bls.n	800a100 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	631a      	str	r2, [r3, #48]	; 0x30
 800a0fe:	e002      	b.n	800a106 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	431a      	orrs	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a124:	431a      	orrs	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	431a      	orrs	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	ea42 0103 	orr.w	r1, r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	0c1b      	lsrs	r3, r3, #16
 800a146:	f003 0204 	and.w	r2, r3, #4
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	431a      	orrs	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a154:	431a      	orrs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	ea42 0103 	orr.w	r1, r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	430a      	orrs	r2, r1
 800a166:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e038      	b.n	800a208 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7f9 f97a 	bl	80034a4 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f000 fd4a 	bl	800ac54 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	f000 fdd2 	bl	800ad74 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6858      	ldr	r0, [r3, #4]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689a      	ldr	r2, [r3, #8]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	f000 fe19 	bl	800ae14 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	6892      	ldr	r2, [r2, #8]
 800a1ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	6892      	ldr	r2, [r2, #8]
 800a1f6:	f041 0101 	orr.w	r1, r1, #1
 800a1fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e040      	b.n	800a2a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7f8 febc 	bl	8002fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2224      	movs	r2, #36	; 0x24
 800a23c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0201 	bic.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f82c 	bl	800a2ac <UART_SetConfig>
 800a254:	4603      	mov	r3, r0
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e022      	b.n	800a2a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fb92 	bl	800a990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a27a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a28a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0201 	orr.w	r2, r2, #1
 800a29a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fc19 	bl	800aad4 <UART_CheckIdleState>
 800a2a2:	4603      	mov	r3, r0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a2b0:	b08a      	sub	sp, #40	; 0x28
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689a      	ldr	r2, [r3, #8]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	4bb8      	ldr	r3, [pc, #736]	; (800a5c4 <UART_SetConfig+0x318>)
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	6812      	ldr	r2, [r2, #0]
 800a2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2ea:	430b      	orrs	r3, r1
 800a2ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68da      	ldr	r2, [r3, #12]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4aae      	ldr	r2, [pc, #696]	; (800a5c8 <UART_SetConfig+0x31c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d004      	beq.n	800a31e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31a:	4313      	orrs	r3, r2
 800a31c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32e:	430a      	orrs	r2, r1
 800a330:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4aa5      	ldr	r2, [pc, #660]	; (800a5cc <UART_SetConfig+0x320>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d126      	bne.n	800a38a <UART_SetConfig+0xde>
 800a33c:	4ba4      	ldr	r3, [pc, #656]	; (800a5d0 <UART_SetConfig+0x324>)
 800a33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a342:	f003 0303 	and.w	r3, r3, #3
 800a346:	2b03      	cmp	r3, #3
 800a348:	d81a      	bhi.n	800a380 <UART_SetConfig+0xd4>
 800a34a:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <UART_SetConfig+0xa4>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a361 	.word	0x0800a361
 800a354:	0800a371 	.word	0x0800a371
 800a358:	0800a369 	.word	0x0800a369
 800a35c:	0800a379 	.word	0x0800a379
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a366:	e105      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a368:	2302      	movs	r3, #2
 800a36a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a36e:	e101      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a370:	2304      	movs	r3, #4
 800a372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a376:	e0fd      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a378:	2308      	movs	r3, #8
 800a37a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a37e:	e0f9      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a380:	2310      	movs	r3, #16
 800a382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a386:	bf00      	nop
 800a388:	e0f4      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a91      	ldr	r2, [pc, #580]	; (800a5d4 <UART_SetConfig+0x328>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d138      	bne.n	800a406 <UART_SetConfig+0x15a>
 800a394:	4b8e      	ldr	r3, [pc, #568]	; (800a5d0 <UART_SetConfig+0x324>)
 800a396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39a:	f003 030c 	and.w	r3, r3, #12
 800a39e:	2b0c      	cmp	r3, #12
 800a3a0:	d82c      	bhi.n	800a3fc <UART_SetConfig+0x150>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <UART_SetConfig+0xfc>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3dd 	.word	0x0800a3dd
 800a3ac:	0800a3fd 	.word	0x0800a3fd
 800a3b0:	0800a3fd 	.word	0x0800a3fd
 800a3b4:	0800a3fd 	.word	0x0800a3fd
 800a3b8:	0800a3ed 	.word	0x0800a3ed
 800a3bc:	0800a3fd 	.word	0x0800a3fd
 800a3c0:	0800a3fd 	.word	0x0800a3fd
 800a3c4:	0800a3fd 	.word	0x0800a3fd
 800a3c8:	0800a3e5 	.word	0x0800a3e5
 800a3cc:	0800a3fd 	.word	0x0800a3fd
 800a3d0:	0800a3fd 	.word	0x0800a3fd
 800a3d4:	0800a3fd 	.word	0x0800a3fd
 800a3d8:	0800a3f5 	.word	0x0800a3f5
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3e2:	e0c7      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3ea:	e0c3      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3f2:	e0bf      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a3f4:	2308      	movs	r3, #8
 800a3f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3fa:	e0bb      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a402:	bf00      	nop
 800a404:	e0b6      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a73      	ldr	r2, [pc, #460]	; (800a5d8 <UART_SetConfig+0x32c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d125      	bne.n	800a45c <UART_SetConfig+0x1b0>
 800a410:	4b6f      	ldr	r3, [pc, #444]	; (800a5d0 <UART_SetConfig+0x324>)
 800a412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a416:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d011      	beq.n	800a442 <UART_SetConfig+0x196>
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d802      	bhi.n	800a428 <UART_SetConfig+0x17c>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d005      	beq.n	800a432 <UART_SetConfig+0x186>
 800a426:	e014      	b.n	800a452 <UART_SetConfig+0x1a6>
 800a428:	2b20      	cmp	r3, #32
 800a42a:	d006      	beq.n	800a43a <UART_SetConfig+0x18e>
 800a42c:	2b30      	cmp	r3, #48	; 0x30
 800a42e:	d00c      	beq.n	800a44a <UART_SetConfig+0x19e>
 800a430:	e00f      	b.n	800a452 <UART_SetConfig+0x1a6>
 800a432:	2300      	movs	r3, #0
 800a434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a438:	e09c      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a43a:	2302      	movs	r3, #2
 800a43c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a440:	e098      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a442:	2304      	movs	r3, #4
 800a444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a448:	e094      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a44a:	2308      	movs	r3, #8
 800a44c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a450:	e090      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a452:	2310      	movs	r3, #16
 800a454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a458:	bf00      	nop
 800a45a:	e08b      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a5e      	ldr	r2, [pc, #376]	; (800a5dc <UART_SetConfig+0x330>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d125      	bne.n	800a4b2 <UART_SetConfig+0x206>
 800a466:	4b5a      	ldr	r3, [pc, #360]	; (800a5d0 <UART_SetConfig+0x324>)
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a470:	2b40      	cmp	r3, #64	; 0x40
 800a472:	d011      	beq.n	800a498 <UART_SetConfig+0x1ec>
 800a474:	2b40      	cmp	r3, #64	; 0x40
 800a476:	d802      	bhi.n	800a47e <UART_SetConfig+0x1d2>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <UART_SetConfig+0x1dc>
 800a47c:	e014      	b.n	800a4a8 <UART_SetConfig+0x1fc>
 800a47e:	2b80      	cmp	r3, #128	; 0x80
 800a480:	d006      	beq.n	800a490 <UART_SetConfig+0x1e4>
 800a482:	2bc0      	cmp	r3, #192	; 0xc0
 800a484:	d00c      	beq.n	800a4a0 <UART_SetConfig+0x1f4>
 800a486:	e00f      	b.n	800a4a8 <UART_SetConfig+0x1fc>
 800a488:	2300      	movs	r3, #0
 800a48a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a48e:	e071      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a490:	2302      	movs	r3, #2
 800a492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a496:	e06d      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a49e:	e069      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4a6:	e065      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4ae:	bf00      	nop
 800a4b0:	e060      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a4a      	ldr	r2, [pc, #296]	; (800a5e0 <UART_SetConfig+0x334>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d129      	bne.n	800a510 <UART_SetConfig+0x264>
 800a4bc:	4b44      	ldr	r3, [pc, #272]	; (800a5d0 <UART_SetConfig+0x324>)
 800a4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ca:	d014      	beq.n	800a4f6 <UART_SetConfig+0x24a>
 800a4cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d0:	d802      	bhi.n	800a4d8 <UART_SetConfig+0x22c>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d007      	beq.n	800a4e6 <UART_SetConfig+0x23a>
 800a4d6:	e016      	b.n	800a506 <UART_SetConfig+0x25a>
 800a4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4dc:	d007      	beq.n	800a4ee <UART_SetConfig+0x242>
 800a4de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4e2:	d00c      	beq.n	800a4fe <UART_SetConfig+0x252>
 800a4e4:	e00f      	b.n	800a506 <UART_SetConfig+0x25a>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4ec:	e042      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4f4:	e03e      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a4f6:	2304      	movs	r3, #4
 800a4f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4fc:	e03a      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a4fe:	2308      	movs	r3, #8
 800a500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a504:	e036      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a506:	2310      	movs	r3, #16
 800a508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a50c:	bf00      	nop
 800a50e:	e031      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a2c      	ldr	r2, [pc, #176]	; (800a5c8 <UART_SetConfig+0x31c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d129      	bne.n	800a56e <UART_SetConfig+0x2c2>
 800a51a:	4b2d      	ldr	r3, [pc, #180]	; (800a5d0 <UART_SetConfig+0x324>)
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a528:	d014      	beq.n	800a554 <UART_SetConfig+0x2a8>
 800a52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a52e:	d802      	bhi.n	800a536 <UART_SetConfig+0x28a>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <UART_SetConfig+0x298>
 800a534:	e016      	b.n	800a564 <UART_SetConfig+0x2b8>
 800a536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a53a:	d007      	beq.n	800a54c <UART_SetConfig+0x2a0>
 800a53c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a540:	d00c      	beq.n	800a55c <UART_SetConfig+0x2b0>
 800a542:	e00f      	b.n	800a564 <UART_SetConfig+0x2b8>
 800a544:	2300      	movs	r3, #0
 800a546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a54a:	e013      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a54c:	2302      	movs	r3, #2
 800a54e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a552:	e00f      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a554:	2304      	movs	r3, #4
 800a556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a55a:	e00b      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a55c:	2308      	movs	r3, #8
 800a55e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a562:	e007      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a564:	2310      	movs	r3, #16
 800a566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a56a:	bf00      	nop
 800a56c:	e002      	b.n	800a574 <UART_SetConfig+0x2c8>
 800a56e:	2310      	movs	r3, #16
 800a570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a13      	ldr	r2, [pc, #76]	; (800a5c8 <UART_SetConfig+0x31c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	f040 80fe 	bne.w	800a77c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a584:	2b08      	cmp	r3, #8
 800a586:	d837      	bhi.n	800a5f8 <UART_SetConfig+0x34c>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <UART_SetConfig+0x2e4>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5b5 	.word	0x0800a5b5
 800a594:	0800a5f9 	.word	0x0800a5f9
 800a598:	0800a5bd 	.word	0x0800a5bd
 800a59c:	0800a5f9 	.word	0x0800a5f9
 800a5a0:	0800a5e9 	.word	0x0800a5e9
 800a5a4:	0800a5f9 	.word	0x0800a5f9
 800a5a8:	0800a5f9 	.word	0x0800a5f9
 800a5ac:	0800a5f9 	.word	0x0800a5f9
 800a5b0:	0800a5f1 	.word	0x0800a5f1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a5b4:	f7fd fadc 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800a5b8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5ba:	e020      	b.n	800a5fe <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a5bc:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <UART_SetConfig+0x338>)
 800a5be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5c0:	e01d      	b.n	800a5fe <UART_SetConfig+0x352>
 800a5c2:	bf00      	nop
 800a5c4:	efff69f3 	.word	0xefff69f3
 800a5c8:	40008000 	.word	0x40008000
 800a5cc:	40013800 	.word	0x40013800
 800a5d0:	40021000 	.word	0x40021000
 800a5d4:	40004400 	.word	0x40004400
 800a5d8:	40004800 	.word	0x40004800
 800a5dc:	40004c00 	.word	0x40004c00
 800a5e0:	40005000 	.word	0x40005000
 800a5e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a5e8:	f7fd fa2c 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 800a5ec:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5ee:	e006      	b.n	800a5fe <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a5f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5f6:	e002      	b.n	800a5fe <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	76fb      	strb	r3, [r7, #27]
        break;
 800a5fc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 81b9 	beq.w	800a978 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	4613      	mov	r3, r2
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	4413      	add	r3, r2
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	429a      	cmp	r2, r3
 800a614:	d305      	bcc.n	800a622 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d902      	bls.n	800a628 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	76fb      	strb	r3, [r7, #27]
 800a626:	e1a7      	b.n	800a978 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800a628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	f200 8092 	bhi.w	800a756 <UART_SetConfig+0x4aa>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <UART_SetConfig+0x38c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a65d 	.word	0x0800a65d
 800a63c:	0800a757 	.word	0x0800a757
 800a640:	0800a6ab 	.word	0x0800a6ab
 800a644:	0800a757 	.word	0x0800a757
 800a648:	0800a6df 	.word	0x0800a6df
 800a64c:	0800a757 	.word	0x0800a757
 800a650:	0800a757 	.word	0x0800a757
 800a654:	0800a757 	.word	0x0800a757
 800a658:	0800a72d 	.word	0x0800a72d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a65c:	f7fd fa88 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800a660:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	4619      	mov	r1, r3
 800a666:	f04f 0200 	mov.w	r2, #0
 800a66a:	f04f 0300 	mov.w	r3, #0
 800a66e:	f04f 0400 	mov.w	r4, #0
 800a672:	0214      	lsls	r4, r2, #8
 800a674:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a678:	020b      	lsls	r3, r1, #8
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	6852      	ldr	r2, [r2, #4]
 800a67e:	0852      	lsrs	r2, r2, #1
 800a680:	4611      	mov	r1, r2
 800a682:	f04f 0200 	mov.w	r2, #0
 800a686:	eb13 0b01 	adds.w	fp, r3, r1
 800a68a:	eb44 0c02 	adc.w	ip, r4, r2
 800a68e:	4658      	mov	r0, fp
 800a690:	4661      	mov	r1, ip
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f04f 0400 	mov.w	r4, #0
 800a69a:	461a      	mov	r2, r3
 800a69c:	4623      	mov	r3, r4
 800a69e:	f7f6 fae3 	bl	8000c68 <__aeabi_uldivmod>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a6a8:	e058      	b.n	800a75c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	f04f 0400 	mov.w	r4, #0
 800a6b4:	49ae      	ldr	r1, [pc, #696]	; (800a970 <UART_SetConfig+0x6c4>)
 800a6b6:	f04f 0200 	mov.w	r2, #0
 800a6ba:	eb13 0b01 	adds.w	fp, r3, r1
 800a6be:	eb44 0c02 	adc.w	ip, r4, r2
 800a6c2:	4658      	mov	r0, fp
 800a6c4:	4661      	mov	r1, ip
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f04f 0400 	mov.w	r4, #0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	f7f6 fac9 	bl	8000c68 <__aeabi_uldivmod>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	460c      	mov	r4, r1
 800a6da:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a6dc:	e03e      	b.n	800a75c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800a6de:	f7fd f9b1 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 800a6e2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	f04f 0200 	mov.w	r2, #0
 800a6ec:	f04f 0300 	mov.w	r3, #0
 800a6f0:	f04f 0400 	mov.w	r4, #0
 800a6f4:	0214      	lsls	r4, r2, #8
 800a6f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a6fa:	020b      	lsls	r3, r1, #8
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6852      	ldr	r2, [r2, #4]
 800a700:	0852      	lsrs	r2, r2, #1
 800a702:	4611      	mov	r1, r2
 800a704:	f04f 0200 	mov.w	r2, #0
 800a708:	eb13 0b01 	adds.w	fp, r3, r1
 800a70c:	eb44 0c02 	adc.w	ip, r4, r2
 800a710:	4658      	mov	r0, fp
 800a712:	4661      	mov	r1, ip
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f04f 0400 	mov.w	r4, #0
 800a71c:	461a      	mov	r2, r3
 800a71e:	4623      	mov	r3, r4
 800a720:	f7f6 faa2 	bl	8000c68 <__aeabi_uldivmod>
 800a724:	4603      	mov	r3, r0
 800a726:	460c      	mov	r4, r1
 800a728:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a72a:	e017      	b.n	800a75c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	085b      	lsrs	r3, r3, #1
 800a732:	f04f 0400 	mov.w	r4, #0
 800a736:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800a73a:	f144 0100 	adc.w	r1, r4, #0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f04f 0400 	mov.w	r4, #0
 800a746:	461a      	mov	r2, r3
 800a748:	4623      	mov	r3, r4
 800a74a:	f7f6 fa8d 	bl	8000c68 <__aeabi_uldivmod>
 800a74e:	4603      	mov	r3, r0
 800a750:	460c      	mov	r4, r1
 800a752:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a754:	e002      	b.n	800a75c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	76fb      	strb	r3, [r7, #27]
            break;
 800a75a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a762:	d308      	bcc.n	800a776 <UART_SetConfig+0x4ca>
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a76a:	d204      	bcs.n	800a776 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	69fa      	ldr	r2, [r7, #28]
 800a772:	60da      	str	r2, [r3, #12]
 800a774:	e100      	b.n	800a978 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	76fb      	strb	r3, [r7, #27]
 800a77a:	e0fd      	b.n	800a978 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a784:	f040 8084 	bne.w	800a890 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800a788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a78c:	2b08      	cmp	r3, #8
 800a78e:	d85f      	bhi.n	800a850 <UART_SetConfig+0x5a4>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <UART_SetConfig+0x4ec>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7bd 	.word	0x0800a7bd
 800a79c:	0800a7dd 	.word	0x0800a7dd
 800a7a0:	0800a7fd 	.word	0x0800a7fd
 800a7a4:	0800a851 	.word	0x0800a851
 800a7a8:	0800a819 	.word	0x0800a819
 800a7ac:	0800a851 	.word	0x0800a851
 800a7b0:	0800a851 	.word	0x0800a851
 800a7b4:	0800a851 	.word	0x0800a851
 800a7b8:	0800a839 	.word	0x0800a839
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7bc:	f7fd f9d8 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800a7c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	005a      	lsls	r2, r3, #1
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	085b      	lsrs	r3, r3, #1
 800a7cc:	441a      	add	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a7da:	e03c      	b.n	800a856 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7dc:	f7fd f9de 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800a7e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	005a      	lsls	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a7fa:	e02c      	b.n	800a856 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a806:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	6852      	ldr	r2, [r2, #4]
 800a80e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a812:	b29b      	uxth	r3, r3
 800a814:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a816:	e01e      	b.n	800a856 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a818:	f7fd f914 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 800a81c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	005a      	lsls	r2, r3, #1
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	085b      	lsrs	r3, r3, #1
 800a828:	441a      	add	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a832:	b29b      	uxth	r3, r3
 800a834:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a836:	e00e      	b.n	800a856 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	085b      	lsrs	r3, r3, #1
 800a83e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	fbb2 f3f3 	udiv	r3, r2, r3
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a84e:	e002      	b.n	800a856 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	76fb      	strb	r3, [r7, #27]
        break;
 800a854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	2b0f      	cmp	r3, #15
 800a85a:	d916      	bls.n	800a88a <UART_SetConfig+0x5de>
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a862:	d212      	bcs.n	800a88a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	b29b      	uxth	r3, r3
 800a868:	f023 030f 	bic.w	r3, r3, #15
 800a86c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	085b      	lsrs	r3, r3, #1
 800a872:	b29b      	uxth	r3, r3
 800a874:	f003 0307 	and.w	r3, r3, #7
 800a878:	b29a      	uxth	r2, r3
 800a87a:	89fb      	ldrh	r3, [r7, #14]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	89fa      	ldrh	r2, [r7, #14]
 800a886:	60da      	str	r2, [r3, #12]
 800a888:	e076      	b.n	800a978 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	76fb      	strb	r3, [r7, #27]
 800a88e:	e073      	b.n	800a978 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800a890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a894:	2b08      	cmp	r3, #8
 800a896:	d85c      	bhi.n	800a952 <UART_SetConfig+0x6a6>
 800a898:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <UART_SetConfig+0x5f4>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a8c5 	.word	0x0800a8c5
 800a8a4:	0800a8e3 	.word	0x0800a8e3
 800a8a8:	0800a901 	.word	0x0800a901
 800a8ac:	0800a953 	.word	0x0800a953
 800a8b0:	0800a91d 	.word	0x0800a91d
 800a8b4:	0800a953 	.word	0x0800a953
 800a8b8:	0800a953 	.word	0x0800a953
 800a8bc:	0800a953 	.word	0x0800a953
 800a8c0:	0800a93b 	.word	0x0800a93b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8c4:	f7fd f954 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800a8c8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	085a      	lsrs	r2, r3, #1
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	441a      	add	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8e0:	e03a      	b.n	800a958 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8e2:	f7fd f95b 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800a8e6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	085a      	lsrs	r2, r3, #1
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	441a      	add	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8fe:	e02b      	b.n	800a958 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	085b      	lsrs	r3, r3, #1
 800a906:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a90a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	6852      	ldr	r2, [r2, #4]
 800a912:	fbb3 f3f2 	udiv	r3, r3, r2
 800a916:	b29b      	uxth	r3, r3
 800a918:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a91a:	e01d      	b.n	800a958 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a91c:	f7fd f892 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 800a920:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	085a      	lsrs	r2, r3, #1
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	441a      	add	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	fbb2 f3f3 	udiv	r3, r2, r3
 800a934:	b29b      	uxth	r3, r3
 800a936:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a938:	e00e      	b.n	800a958 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	085b      	lsrs	r3, r3, #1
 800a940:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a950:	e002      	b.n	800a958 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	76fb      	strb	r3, [r7, #27]
        break;
 800a956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b0f      	cmp	r3, #15
 800a95c:	d90a      	bls.n	800a974 <UART_SetConfig+0x6c8>
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a964:	d206      	bcs.n	800a974 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	60da      	str	r2, [r3, #12]
 800a96e:	e003      	b.n	800a978 <UART_SetConfig+0x6cc>
 800a970:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a984:	7efb      	ldrb	r3, [r7, #27]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3728      	adds	r7, #40	; 0x28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	f003 0301 	and.w	r3, r3, #1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00a      	beq.n	800a9ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9be:	f003 0302 	and.w	r3, r3, #2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00a      	beq.n	800a9dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00a      	beq.n	800a9fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	f003 0308 	and.w	r3, r3, #8
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00a      	beq.n	800aa20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	f003 0310 	and.w	r3, r3, #16
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00a      	beq.n	800aa42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01a      	beq.n	800aaa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa8e:	d10a      	bne.n	800aaa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00a      	beq.n	800aac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	605a      	str	r2, [r3, #4]
  }
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af02      	add	r7, sp, #8
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aae2:	f7f8 fedd 	bl	80038a0 <HAL_GetTick>
 800aae6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0308 	and.w	r3, r3, #8
 800aaf2:	2b08      	cmp	r3, #8
 800aaf4:	d10e      	bne.n	800ab14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f82a 	bl	800ab5e <UART_WaitOnFlagUntilTimeout>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e020      	b.n	800ab56 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d10e      	bne.n	800ab40 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f814 	bl	800ab5e <UART_WaitOnFlagUntilTimeout>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e00a      	b.n	800ab56 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2220      	movs	r2, #32
 800ab44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	603b      	str	r3, [r7, #0]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab6e:	e05d      	b.n	800ac2c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab76:	d059      	beq.n	800ac2c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab78:	f7f8 fe92 	bl	80038a0 <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <UART_WaitOnFlagUntilTimeout+0x30>
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d11b      	bne.n	800abc6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab9c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0201 	bic.w	r2, r2, #1
 800abac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e042      	b.n	800ac4c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d02b      	beq.n	800ac2c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abe2:	d123      	bne.n	800ac2c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abfc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f022 0201 	bic.w	r2, r2, #1
 800ac0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2220      	movs	r2, #32
 800ac12:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2220      	movs	r2, #32
 800ac18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2220      	movs	r2, #32
 800ac1e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e00f      	b.n	800ac4c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	69da      	ldr	r2, [r3, #28]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	4013      	ands	r3, r2
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2301      	moveq	r3, #1
 800ac3e:	2300      	movne	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	461a      	mov	r2, r3
 800ac44:	79fb      	ldrb	r3, [r7, #7]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d092      	beq.n	800ab70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	f023 0101 	bic.w	r1, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d102      	bne.n	800ac84 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ac7e:	2340      	movs	r3, #64	; 0x40
 800ac80:	617b      	str	r3, [r7, #20]
 800ac82:	e001      	b.n	800ac88 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800ac84:	2300      	movs	r3, #0
 800ac86:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800ac94:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800ac9a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800aca0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800aca6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800acac:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800acb2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800acb8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800acbe:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800acc4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800acca:	4313      	orrs	r3, r2
 800accc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	4313      	orrs	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800acec:	4b20      	ldr	r3, [pc, #128]	; (800ad70 <FMC_NORSRAM_Init+0x11c>)
 800acee:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acf6:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acfe:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800ad06:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	43db      	mvns	r3, r3
 800ad16:	ea02 0103 	and.w	r1, r2, r3
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	4319      	orrs	r1, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad30:	d10c      	bne.n	800ad4c <FMC_NORSRAM_Init+0xf8>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d008      	beq.n	800ad4c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	431a      	orrs	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d006      	beq.n	800ad62 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5c:	431a      	orrs	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	371c      	adds	r7, #28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	0008fb7f 	.word	0x0008fb7f

0800ad74 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	011b      	lsls	r3, r3, #4
 800ad98:	431a      	orrs	r2, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	021b      	lsls	r3, r3, #8
 800ada0:	431a      	orrs	r2, r3
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	041b      	lsls	r3, r3, #16
 800ada8:	431a      	orrs	r2, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	3b01      	subs	r3, #1
 800adb0:	051b      	lsls	r3, r3, #20
 800adb2:	431a      	orrs	r2, r3
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	3b02      	subs	r3, #2
 800adba:	061b      	lsls	r3, r3, #24
 800adbc:	431a      	orrs	r2, r3
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	3201      	adds	r2, #1
 800adc8:	4319      	orrs	r1, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800add8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800addc:	d113      	bne.n	800ae06 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ade6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	3b01      	subs	r3, #1
 800adee:	051b      	lsls	r3, r3, #20
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	431a      	orrs	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae28:	d11d      	bne.n	800ae66 <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800ae34:	4013      	ands	r3, r2
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	6811      	ldr	r1, [r2, #0]
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	6852      	ldr	r2, [r2, #4]
 800ae3e:	0112      	lsls	r2, r2, #4
 800ae40:	4311      	orrs	r1, r2
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	6892      	ldr	r2, [r2, #8]
 800ae46:	0212      	lsls	r2, r2, #8
 800ae48:	4311      	orrs	r1, r2
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	69d2      	ldr	r2, [r2, #28]
 800ae4e:	4311      	orrs	r1, r2
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	6912      	ldr	r2, [r2, #16]
 800ae54:	0412      	lsls	r2, r2, #16
 800ae56:	430a      	orrs	r2, r1
 800ae58:	ea43 0102 	orr.w	r1, r3, r2
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ae64:	e005      	b.n	800ae72 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ae6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	cff00000 	.word	0xcff00000

0800ae84 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ae84:	b084      	sub	sp, #16
 800ae86:	b480      	push	{r7}
 800ae88:	b085      	sub	sp, #20
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	f107 001c 	add.w	r0, r7, #28
 800ae92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800aea2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800aea6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aeaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aeae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aeb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aec2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	b004      	add	sp, #16
 800aedc:	4770      	bx	lr

0800aede <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2203      	movs	r2, #3
 800af04:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800af06:	2002      	movs	r0, #2
 800af08:	f7f8 fcd6 	bl	80038b8 <HAL_Delay>

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0303 	and.w	r3, r3, #3
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800af32:	b480      	push	{r7}
 800af34:	b085      	sub	sp, #20
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af50:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800af56:	431a      	orrs	r2, r3
                       Command->CPSM);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800af5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	4313      	orrs	r3, r2
 800af62:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800af6c:	f023 030f 	bic.w	r3, r3, #15
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	431a      	orrs	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	b2db      	uxtb	r3, r3
}
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3314      	adds	r3, #20
 800afae:	461a      	mov	r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	4413      	add	r3, r2
 800afb4:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b085      	sub	sp, #20
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aff2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aff8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	4313      	orrs	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b004:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	431a      	orrs	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b010:	2300      	movs	r3, #0

}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b088      	sub	sp, #32
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b02c:	2310      	movs	r3, #16
 800b02e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b030:	2340      	movs	r3, #64	; 0x40
 800b032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b034:	2300      	movs	r3, #0
 800b036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b03e:	f107 0308 	add.w	r3, r7, #8
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff ff74 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b04a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b04e:	2110      	movs	r1, #16
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f975 	bl	800b340 <SDMMC_GetCmdResp1>
 800b056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b058:	69fb      	ldr	r3, [r7, #28]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b08a      	sub	sp, #40	; 0x28
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b072:	2307      	movs	r3, #7
 800b074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b076:	2340      	movs	r3, #64	; 0x40
 800b078:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b07a:	2300      	movs	r3, #0
 800b07c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b082:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b084:	f107 0310 	add.w	r3, r7, #16
 800b088:	4619      	mov	r1, r3
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7ff ff51 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b090:	f241 3288 	movw	r2, #5000	; 0x1388
 800b094:	2107      	movs	r1, #7
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f000 f952 	bl	800b340 <SDMMC_GetCmdResp1>
 800b09c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3728      	adds	r7, #40	; 0x28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c6:	f107 0308 	add.w	r3, r7, #8
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ff30 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f90c 	bl	800b2f0 <SDMMC_GetCmdError>
 800b0d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0da:	69fb      	ldr	r3, [r7, #28]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b0ec:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b0f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b0f2:	2308      	movs	r3, #8
 800b0f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0f6:	2340      	movs	r3, #64	; 0x40
 800b0f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b104:	f107 0308 	add.w	r3, r7, #8
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff ff11 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 faf5 	bl	800b700 <SDMMC_GetCmdResp7>
 800b116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b118:	69fb      	ldr	r3, [r7, #28]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3720      	adds	r7, #32
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b088      	sub	sp, #32
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b130:	2337      	movs	r3, #55	; 0x37
 800b132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b134:	2340      	movs	r3, #64	; 0x40
 800b136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b138:	2300      	movs	r3, #0
 800b13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b142:	f107 0308 	add.w	r3, r7, #8
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fef2 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b14e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b152:	2137      	movs	r1, #55	; 0x37
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f8f3 	bl	800b340 <SDMMC_GetCmdResp1>
 800b15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b15c:	69fb      	ldr	r3, [r7, #28]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b088      	sub	sp, #32
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b17a:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b17c:	2329      	movs	r3, #41	; 0x29
 800b17e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b180:	2340      	movs	r3, #64	; 0x40
 800b182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fecc 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa02 	bl	800b5a4 <SDMMC_GetCmdResp3>
 800b1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a2:	69fb      	ldr	r3, [r7, #28]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3720      	adds	r7, #32
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b1ba:	2306      	movs	r3, #6
 800b1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1be:	2340      	movs	r3, #64	; 0x40
 800b1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1cc:	f107 0308 	add.w	r3, r7, #8
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff fead 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1dc:	2106      	movs	r1, #6
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f8ae 	bl	800b340 <SDMMC_GetCmdResp1>
 800b1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3720      	adds	r7, #32
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b088      	sub	sp, #32
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b1fc:	2333      	movs	r3, #51	; 0x33
 800b1fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b200:	2340      	movs	r3, #64	; 0x40
 800b202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b204:	2300      	movs	r3, #0
 800b206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b20c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b20e:	f107 0308 	add.w	r3, r7, #8
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff fe8c 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21e:	2133      	movs	r1, #51	; 0x33
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f88d 	bl	800b340 <SDMMC_GetCmdResp1>
 800b226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b228:	69fb      	ldr	r3, [r7, #28]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3720      	adds	r7, #32
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b088      	sub	sp, #32
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b23e:	2302      	movs	r3, #2
 800b240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b242:	23c0      	movs	r3, #192	; 0xc0
 800b244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff fe6b 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f95b 	bl	800b518 <SDMMC_GetCmdResp2>
 800b262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b264:	69fb      	ldr	r3, [r7, #28]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3720      	adds	r7, #32
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b088      	sub	sp, #32
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b27c:	2309      	movs	r3, #9
 800b27e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b280:	23c0      	movs	r3, #192	; 0xc0
 800b282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b284:	2300      	movs	r3, #0
 800b286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b28c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b28e:	f107 0308 	add.w	r3, r7, #8
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7ff fe4c 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f93c 	bl	800b518 <SDMMC_GetCmdResp2>
 800b2a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2a2:	69fb      	ldr	r3, [r7, #28]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3720      	adds	r7, #32
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2be:	2340      	movs	r3, #64	; 0x40
 800b2c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2cc:	f107 0308 	add.w	r3, r7, #8
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff fe2d 	bl	800af32 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	2103      	movs	r1, #3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f99b 	bl	800b618 <SDMMC_GetCmdResp6>
 800b2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b2f0:	b490      	push	{r4, r7}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2f8:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <SDMMC_GetCmdError+0x48>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a0f      	ldr	r2, [pc, #60]	; (800b33c <SDMMC_GetCmdError+0x4c>)
 800b2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b302:	0a5b      	lsrs	r3, r3, #9
 800b304:	f241 3288 	movw	r2, #5000	; 0x1388
 800b308:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b30c:	4623      	mov	r3, r4
 800b30e:	1e5c      	subs	r4, r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	d102      	bne.n	800b31a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b318:	e009      	b.n	800b32e <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b322:	2b00      	cmp	r3, #0
 800b324:	d0f2      	beq.n	800b30c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	22c5      	movs	r2, #197	; 0xc5
 800b32a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bc90      	pop	{r4, r7}
 800b336:	4770      	bx	lr
 800b338:	20000000 	.word	0x20000000
 800b33c:	10624dd3 	.word	0x10624dd3

0800b340 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b340:	b590      	push	{r4, r7, lr}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	460b      	mov	r3, r1
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b34e:	4b6f      	ldr	r3, [pc, #444]	; (800b50c <SDMMC_GetCmdResp1+0x1cc>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a6f      	ldr	r2, [pc, #444]	; (800b510 <SDMMC_GetCmdResp1+0x1d0>)
 800b354:	fba2 2303 	umull	r2, r3, r2, r3
 800b358:	0a5b      	lsrs	r3, r3, #9
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b360:	4623      	mov	r3, r4
 800b362:	1e5c      	subs	r4, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b36c:	e0c9      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b372:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0f0      	beq.n	800b360 <SDMMC_GetCmdResp1+0x20>
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1eb      	bne.n	800b360 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2204      	movs	r2, #4
 800b398:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b39a:	2304      	movs	r3, #4
 800b39c:	e0b1      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e0a6      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	22c5      	movs	r2, #197	; 0xc5
 800b3b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7ff fde3 	bl	800af86 <SDMMC_GetCommandResponse>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	7afb      	ldrb	r3, [r7, #11]
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d001      	beq.n	800b3ce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e099      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff fde5 	bl	800afa0 <SDMMC_GetResponse>
 800b3d6:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	4b4e      	ldr	r3, [pc, #312]	; (800b514 <SDMMC_GetCmdResp1+0x1d4>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e08d      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	da02      	bge.n	800b3f2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b3ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3f0:	e087      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b3fc:	2340      	movs	r3, #64	; 0x40
 800b3fe:	e080      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b40a:	2380      	movs	r3, #128	; 0x80
 800b40c:	e079      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b41c:	e071      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b42c:	e069      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b43c:	e061      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b44c:	e059      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b45c:	e051      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b46c:	e049      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b47c:	e041      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b48c:	e039      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b49c:	e031      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b4a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4ac:	e029      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b4b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4bc:	e021      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b4c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b4cc:	e019      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b4d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b4dc:	e011      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b4e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b4ec:	e009      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	f003 0308 	and.w	r3, r3, #8
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b4f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b4fc:	e001      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b502:	4618      	mov	r0, r3
 800b504:	371c      	adds	r7, #28
 800b506:	46bd      	mov	sp, r7
 800b508:	bd90      	pop	{r4, r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20000000 	.word	0x20000000
 800b510:	10624dd3 	.word	0x10624dd3
 800b514:	fdffe008 	.word	0xfdffe008

0800b518 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b518:	b490      	push	{r4, r7}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <SDMMC_GetCmdResp2+0x84>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a1e      	ldr	r2, [pc, #120]	; (800b5a0 <SDMMC_GetCmdResp2+0x88>)
 800b526:	fba2 2303 	umull	r2, r3, r2, r3
 800b52a:	0a5b      	lsrs	r3, r3, #9
 800b52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b530:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b534:	4623      	mov	r3, r4
 800b536:	1e5c      	subs	r4, r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b53c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b540:	e026      	b.n	800b590 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b546:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0f0      	beq.n	800b534 <SDMMC_GetCmdResp2+0x1c>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1eb      	bne.n	800b534 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b00      	cmp	r3, #0
 800b566:	d004      	beq.n	800b572 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2204      	movs	r2, #4
 800b56c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b56e:	2304      	movs	r3, #4
 800b570:	e00e      	b.n	800b590 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d004      	beq.n	800b588 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b584:	2301      	movs	r3, #1
 800b586:	e003      	b.n	800b590 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	22c5      	movs	r2, #197	; 0xc5
 800b58c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bc90      	pop	{r4, r7}
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20000000 	.word	0x20000000
 800b5a0:	10624dd3 	.word	0x10624dd3

0800b5a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b5a4:	b490      	push	{r4, r7}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5ac:	4b18      	ldr	r3, [pc, #96]	; (800b610 <SDMMC_GetCmdResp3+0x6c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a18      	ldr	r2, [pc, #96]	; (800b614 <SDMMC_GetCmdResp3+0x70>)
 800b5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b6:	0a5b      	lsrs	r3, r3, #9
 800b5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5bc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	1e5c      	subs	r4, r3, #1
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d102      	bne.n	800b5ce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5cc:	e01b      	b.n	800b606 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0f0      	beq.n	800b5c0 <SDMMC_GetCmdResp3+0x1c>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1eb      	bne.n	800b5c0 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ec:	f003 0304 	and.w	r3, r3, #4
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d004      	beq.n	800b5fe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2204      	movs	r2, #4
 800b5f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5fa:	2304      	movs	r3, #4
 800b5fc:	e003      	b.n	800b606 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	22c5      	movs	r2, #197	; 0xc5
 800b602:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bc90      	pop	{r4, r7}
 800b60e:	4770      	bx	lr
 800b610:	20000000 	.word	0x20000000
 800b614:	10624dd3 	.word	0x10624dd3

0800b618 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	460b      	mov	r3, r1
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b626:	4b34      	ldr	r3, [pc, #208]	; (800b6f8 <SDMMC_GetCmdResp6+0xe0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a34      	ldr	r2, [pc, #208]	; (800b6fc <SDMMC_GetCmdResp6+0xe4>)
 800b62c:	fba2 2303 	umull	r2, r3, r2, r3
 800b630:	0a5b      	lsrs	r3, r3, #9
 800b632:	f241 3288 	movw	r2, #5000	; 0x1388
 800b636:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b63a:	4623      	mov	r3, r4
 800b63c:	1e5c      	subs	r4, r3, #1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d102      	bne.n	800b648 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b646:	e052      	b.n	800b6ee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <SDMMC_GetCmdResp6+0x22>
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1eb      	bne.n	800b63a <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b666:	f003 0304 	and.w	r3, r3, #4
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d004      	beq.n	800b678 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2204      	movs	r2, #4
 800b672:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b674:	2304      	movs	r3, #4
 800b676:	e03a      	b.n	800b6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67c:	f003 0301 	and.w	r3, r3, #1
 800b680:	2b00      	cmp	r3, #0
 800b682:	d004      	beq.n	800b68e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2201      	movs	r2, #1
 800b688:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e02f      	b.n	800b6ee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f7ff fc79 	bl	800af86 <SDMMC_GetCommandResponse>
 800b694:	4603      	mov	r3, r0
 800b696:	461a      	mov	r2, r3
 800b698:	7afb      	ldrb	r3, [r7, #11]
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d001      	beq.n	800b6a2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e025      	b.n	800b6ee <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	22c5      	movs	r2, #197	; 0xc5
 800b6a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fc78 	bl	800afa0 <SDMMC_GetResponse>
 800b6b0:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d106      	bne.n	800b6ca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	0c1b      	lsrs	r3, r3, #16
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e011      	b.n	800b6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b6d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6d8:	e009      	b.n	800b6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6e8:	e001      	b.n	800b6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	371c      	adds	r7, #28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd90      	pop	{r4, r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000000 	.word	0x20000000
 800b6fc:	10624dd3 	.word	0x10624dd3

0800b700 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b700:	b490      	push	{r4, r7}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b708:	4b21      	ldr	r3, [pc, #132]	; (800b790 <SDMMC_GetCmdResp7+0x90>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a21      	ldr	r2, [pc, #132]	; (800b794 <SDMMC_GetCmdResp7+0x94>)
 800b70e:	fba2 2303 	umull	r2, r3, r2, r3
 800b712:	0a5b      	lsrs	r3, r3, #9
 800b714:	f241 3288 	movw	r2, #5000	; 0x1388
 800b718:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b71c:	4623      	mov	r3, r4
 800b71e:	1e5c      	subs	r4, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	d102      	bne.n	800b72a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b728:	e02c      	b.n	800b784 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0f0      	beq.n	800b71c <SDMMC_GetCmdResp7+0x1c>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1eb      	bne.n	800b71c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b748:	f003 0304 	and.w	r3, r3, #4
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2204      	movs	r2, #4
 800b754:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b756:	2304      	movs	r3, #4
 800b758:	e014      	b.n	800b784 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d004      	beq.n	800b770 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e009      	b.n	800b784 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2240      	movs	r2, #64	; 0x40
 800b780:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b782:	2300      	movs	r3, #0

}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bc90      	pop	{r4, r7}
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	20000000 	.word	0x20000000
 800b794:	10624dd3 	.word	0x10624dd3

0800b798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b798:	b084      	sub	sp, #16
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	f107 001c 	add.w	r0, r7, #28
 800b7a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d122      	bne.n	800b7f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b7c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d105      	bne.n	800b7ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f001 f9c8 	bl	800cb80 <USB_CoreReset>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	73fb      	strb	r3, [r7, #15]
 800b7f4:	e01a      	b.n	800b82c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 f9bc 	bl	800cb80 <USB_CoreReset>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	639a      	str	r2, [r3, #56]	; 0x38
 800b81e:	e005      	b.n	800b82c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b838:	b004      	add	sp, #16
 800b83a:	4770      	bx	lr

0800b83c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b84a:	79fb      	ldrb	r3, [r7, #7]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d165      	bne.n	800b91c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	4a3e      	ldr	r2, [pc, #248]	; (800b94c <USB_SetTurnaroundTime+0x110>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d906      	bls.n	800b866 <USB_SetTurnaroundTime+0x2a>
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4a3d      	ldr	r2, [pc, #244]	; (800b950 <USB_SetTurnaroundTime+0x114>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d802      	bhi.n	800b866 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b860:	230f      	movs	r3, #15
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	e05c      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	4a39      	ldr	r2, [pc, #228]	; (800b950 <USB_SetTurnaroundTime+0x114>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d906      	bls.n	800b87c <USB_SetTurnaroundTime+0x40>
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4a38      	ldr	r2, [pc, #224]	; (800b954 <USB_SetTurnaroundTime+0x118>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d802      	bhi.n	800b87c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b876:	230e      	movs	r3, #14
 800b878:	617b      	str	r3, [r7, #20]
 800b87a:	e051      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	4a35      	ldr	r2, [pc, #212]	; (800b954 <USB_SetTurnaroundTime+0x118>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d906      	bls.n	800b892 <USB_SetTurnaroundTime+0x56>
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	4a34      	ldr	r2, [pc, #208]	; (800b958 <USB_SetTurnaroundTime+0x11c>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d802      	bhi.n	800b892 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b88c:	230d      	movs	r3, #13
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	e046      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	4a30      	ldr	r2, [pc, #192]	; (800b958 <USB_SetTurnaroundTime+0x11c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d906      	bls.n	800b8a8 <USB_SetTurnaroundTime+0x6c>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	4a2f      	ldr	r2, [pc, #188]	; (800b95c <USB_SetTurnaroundTime+0x120>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d802      	bhi.n	800b8a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b8a2:	230c      	movs	r3, #12
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	e03b      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4a2c      	ldr	r2, [pc, #176]	; (800b95c <USB_SetTurnaroundTime+0x120>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d906      	bls.n	800b8be <USB_SetTurnaroundTime+0x82>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	4a2b      	ldr	r2, [pc, #172]	; (800b960 <USB_SetTurnaroundTime+0x124>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d802      	bhi.n	800b8be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b8b8:	230b      	movs	r3, #11
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	e030      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4a27      	ldr	r2, [pc, #156]	; (800b960 <USB_SetTurnaroundTime+0x124>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d906      	bls.n	800b8d4 <USB_SetTurnaroundTime+0x98>
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	4a26      	ldr	r2, [pc, #152]	; (800b964 <USB_SetTurnaroundTime+0x128>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d802      	bhi.n	800b8d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b8ce:	230a      	movs	r3, #10
 800b8d0:	617b      	str	r3, [r7, #20]
 800b8d2:	e025      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	4a23      	ldr	r2, [pc, #140]	; (800b964 <USB_SetTurnaroundTime+0x128>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d906      	bls.n	800b8ea <USB_SetTurnaroundTime+0xae>
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	4a22      	ldr	r2, [pc, #136]	; (800b968 <USB_SetTurnaroundTime+0x12c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d802      	bhi.n	800b8ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b8e4:	2309      	movs	r3, #9
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	e01a      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	4a1e      	ldr	r2, [pc, #120]	; (800b968 <USB_SetTurnaroundTime+0x12c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d906      	bls.n	800b900 <USB_SetTurnaroundTime+0xc4>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	4a1d      	ldr	r2, [pc, #116]	; (800b96c <USB_SetTurnaroundTime+0x130>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d802      	bhi.n	800b900 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b8fa:	2308      	movs	r3, #8
 800b8fc:	617b      	str	r3, [r7, #20]
 800b8fe:	e00f      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	4a1a      	ldr	r2, [pc, #104]	; (800b96c <USB_SetTurnaroundTime+0x130>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d906      	bls.n	800b916 <USB_SetTurnaroundTime+0xda>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4a19      	ldr	r2, [pc, #100]	; (800b970 <USB_SetTurnaroundTime+0x134>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d802      	bhi.n	800b916 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b910:	2307      	movs	r3, #7
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e004      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b916:	2306      	movs	r3, #6
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	e001      	b.n	800b920 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b91c:	2309      	movs	r3, #9
 800b91e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	68da      	ldr	r2, [r3, #12]
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	029b      	lsls	r3, r3, #10
 800b934:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b938:	431a      	orrs	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	371c      	adds	r7, #28
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	00d8acbf 	.word	0x00d8acbf
 800b950:	00e4e1bf 	.word	0x00e4e1bf
 800b954:	00f423ff 	.word	0x00f423ff
 800b958:	0106737f 	.word	0x0106737f
 800b95c:	011a499f 	.word	0x011a499f
 800b960:	01312cff 	.word	0x01312cff
 800b964:	014ca43f 	.word	0x014ca43f
 800b968:	016e35ff 	.word	0x016e35ff
 800b96c:	01a6ab1f 	.word	0x01a6ab1f
 800b970:	01e847ff 	.word	0x01e847ff

0800b974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f043 0201 	orr.w	r2, r3, #1
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f023 0201 	bic.w	r2, r3, #1
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9d0:	78fb      	ldrb	r3, [r7, #3]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d106      	bne.n	800b9e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	60da      	str	r2, [r3, #12]
 800b9e2:	e00b      	b.n	800b9fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b9e4:	78fb      	ldrb	r3, [r7, #3]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d106      	bne.n	800b9f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	60da      	str	r2, [r3, #12]
 800b9f6:	e001      	b.n	800b9fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e003      	b.n	800ba04 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b9fc:	2032      	movs	r0, #50	; 0x32
 800b9fe:	f7f7 ff5b 	bl	80038b8 <HAL_Delay>

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b086      	sub	sp, #24
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ba1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba26:	2300      	movs	r3, #0
 800ba28:	613b      	str	r3, [r7, #16]
 800ba2a:	e009      	b.n	800ba40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	3340      	adds	r3, #64	; 0x40
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	2200      	movs	r2, #0
 800ba38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	613b      	str	r3, [r7, #16]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	2b0e      	cmp	r3, #14
 800ba44:	d9f2      	bls.n	800ba2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d11c      	bne.n	800ba86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba5a:	f043 0302 	orr.w	r3, r3, #2
 800ba5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	e005      	b.n	800ba92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba98:	461a      	mov	r2, r3
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa4:	4619      	mov	r1, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baac:	461a      	mov	r2, r3
 800baae:	680b      	ldr	r3, [r1, #0]
 800bab0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bab2:	2103      	movs	r1, #3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f93d 	bl	800bd34 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800baba:	2110      	movs	r1, #16
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f8f1 	bl	800bca4 <USB_FlushTxFifo>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f90f 	bl	800bcf0 <USB_FlushRxFifo>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae2:	461a      	mov	r2, r3
 800bae4:	2300      	movs	r3, #0
 800bae6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baee:	461a      	mov	r2, r3
 800baf0:	2300      	movs	r3, #0
 800baf2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bafa:	461a      	mov	r2, r3
 800bafc:	2300      	movs	r3, #0
 800bafe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb00:	2300      	movs	r3, #0
 800bb02:	613b      	str	r3, [r7, #16]
 800bb04:	e043      	b.n	800bb8e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	015a      	lsls	r2, r3, #5
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb1c:	d118      	bne.n	800bb50 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10a      	bne.n	800bb3a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	015a      	lsls	r2, r3, #5
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb30:	461a      	mov	r2, r3
 800bb32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	e013      	b.n	800bb62 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	015a      	lsls	r2, r3, #5
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	4413      	add	r3, r2
 800bb42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb46:	461a      	mov	r2, r3
 800bb48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	e008      	b.n	800bb62 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb6e:	461a      	mov	r2, r3
 800bb70:	2300      	movs	r3, #0
 800bb72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	015a      	lsls	r2, r3, #5
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb80:	461a      	mov	r2, r3
 800bb82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d3b7      	bcc.n	800bb06 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb96:	2300      	movs	r3, #0
 800bb98:	613b      	str	r3, [r7, #16]
 800bb9a:	e043      	b.n	800bc24 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbb2:	d118      	bne.n	800bbe6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10a      	bne.n	800bbd0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	015a      	lsls	r2, r3, #5
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	e013      	b.n	800bbf8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	015a      	lsls	r2, r3, #5
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbdc:	461a      	mov	r2, r3
 800bbde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bbe2:	6013      	str	r3, [r2, #0]
 800bbe4:	e008      	b.n	800bbf8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	015a      	lsls	r2, r3, #5
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	4413      	add	r3, r2
 800bbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc04:	461a      	mov	r2, r3
 800bc06:	2300      	movs	r3, #0
 800bc08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	015a      	lsls	r2, r3, #5
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4413      	add	r3, r2
 800bc12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc16:	461a      	mov	r2, r3
 800bc18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	3301      	adds	r3, #1
 800bc22:	613b      	str	r3, [r7, #16]
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d3b7      	bcc.n	800bb9c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bc4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	f043 0210 	orr.w	r2, r3, #16
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	699a      	ldr	r2, [r3, #24]
 800bc5e:	4b10      	ldr	r3, [pc, #64]	; (800bca0 <USB_DevInit+0x294>)
 800bc60:	4313      	orrs	r3, r2
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bc66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d005      	beq.n	800bc78 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	699b      	ldr	r3, [r3, #24]
 800bc70:	f043 0208 	orr.w	r2, r3, #8
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bc78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d107      	bne.n	800bc8e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc86:	f043 0304 	orr.w	r3, r3, #4
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc9a:	b004      	add	sp, #16
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	803c3800 	.word	0x803c3800

0800bca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	019b      	lsls	r3, r3, #6
 800bcb6:	f043 0220 	orr.w	r2, r3, #32
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4a09      	ldr	r2, [pc, #36]	; (800bcec <USB_FlushTxFifo+0x48>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d901      	bls.n	800bcd0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e006      	b.n	800bcde <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	f003 0320 	and.w	r3, r3, #32
 800bcd8:	2b20      	cmp	r3, #32
 800bcda:	d0f0      	beq.n	800bcbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	00030d40 	.word	0x00030d40

0800bcf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2210      	movs	r2, #16
 800bd00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3301      	adds	r3, #1
 800bd06:	60fb      	str	r3, [r7, #12]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <USB_FlushRxFifo+0x40>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d901      	bls.n	800bd14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e006      	b.n	800bd22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	f003 0310 	and.w	r3, r3, #16
 800bd1c:	2b10      	cmp	r3, #16
 800bd1e:	d0f0      	beq.n	800bd02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	00030d40 	.word	0x00030d40

0800bd34 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	68f9      	ldr	r1, [r7, #12]
 800bd50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd54:	4313      	orrs	r3, r2
 800bd56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b087      	sub	sp, #28
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	f003 0306 	and.w	r3, r3, #6
 800bd7e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d002      	beq.n	800bd8c <USB_GetDevSpeed+0x26>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b06      	cmp	r3, #6
 800bd8a:	d102      	bne.n	800bd92 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	75fb      	strb	r3, [r7, #23]
 800bd90:	e001      	b.n	800bd96 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800bd92:	230f      	movs	r3, #15
 800bd94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	371c      	adds	r7, #28
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	785b      	ldrb	r3, [r3, #1]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d13a      	bne.n	800be36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc6:	69da      	ldr	r2, [r3, #28]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	68f9      	ldr	r1, [r7, #12]
 800bdda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdde:	4313      	orrs	r3, r2
 800bde0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d155      	bne.n	800bea4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	78db      	ldrb	r3, [r3, #3]
 800be12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	059b      	lsls	r3, r3, #22
 800be1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be1c:	4313      	orrs	r3, r2
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	0151      	lsls	r1, r2, #5
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	440a      	add	r2, r1
 800be26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	e036      	b.n	800bea4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3c:	69da      	ldr	r2, [r3, #28]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	f003 030f 	and.w	r3, r3, #15
 800be46:	2101      	movs	r1, #1
 800be48:	fa01 f303 	lsl.w	r3, r1, r3
 800be4c:	041b      	lsls	r3, r3, #16
 800be4e:	68f9      	ldr	r1, [r7, #12]
 800be50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be54:	4313      	orrs	r3, r2
 800be56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d11a      	bne.n	800bea4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	015a      	lsls	r2, r3, #5
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	4413      	add	r3, r2
 800be76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	78db      	ldrb	r3, [r3, #3]
 800be88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be8a:	430b      	orrs	r3, r1
 800be8c:	4313      	orrs	r3, r2
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	0151      	lsls	r1, r2, #5
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	440a      	add	r2, r1
 800be96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bea2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
	...

0800beb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	785b      	ldrb	r3, [r3, #1]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d161      	bne.n	800bf94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	015a      	lsls	r2, r3, #5
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bee6:	d11f      	bne.n	800bf28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	015a      	lsls	r2, r3, #5
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	4413      	add	r3, r2
 800bef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	0151      	lsls	r1, r2, #5
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	440a      	add	r2, r1
 800befe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	0151      	lsls	r1, r2, #5
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	440a      	add	r2, r1
 800bf1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 030f 	and.w	r3, r3, #15
 800bf38:	2101      	movs	r1, #1
 800bf3a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	43db      	mvns	r3, r3
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf48:	4013      	ands	r3, r2
 800bf4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf52:	69da      	ldr	r2, [r3, #28]
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	43db      	mvns	r3, r3
 800bf66:	68f9      	ldr	r1, [r7, #12]
 800bf68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	0159      	lsls	r1, r3, #5
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	440b      	add	r3, r1
 800bf86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4b35      	ldr	r3, [pc, #212]	; (800c064 <USB_DeactivateEndpoint+0x1b0>)
 800bf8e:	4013      	ands	r3, r2
 800bf90:	600b      	str	r3, [r1, #0]
 800bf92:	e060      	b.n	800c056 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfaa:	d11f      	bne.n	800bfec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	015a      	lsls	r2, r3, #5
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	0151      	lsls	r1, r2, #5
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	440a      	add	r2, r1
 800bfc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bfca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	0151      	lsls	r1, r2, #5
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	440a      	add	r2, r1
 800bfe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	f003 030f 	and.w	r3, r3, #15
 800bffc:	2101      	movs	r1, #1
 800bffe:	fa01 f303 	lsl.w	r3, r1, r3
 800c002:	041b      	lsls	r3, r3, #16
 800c004:	43db      	mvns	r3, r3
 800c006:	68f9      	ldr	r1, [r7, #12]
 800c008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c00c:	4013      	ands	r3, r2
 800c00e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c016:	69da      	ldr	r2, [r3, #28]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	f003 030f 	and.w	r3, r3, #15
 800c020:	2101      	movs	r1, #1
 800c022:	fa01 f303 	lsl.w	r3, r1, r3
 800c026:	041b      	lsls	r3, r3, #16
 800c028:	43db      	mvns	r3, r3
 800c02a:	68f9      	ldr	r1, [r7, #12]
 800c02c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c030:	4013      	ands	r3, r2
 800c032:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	0159      	lsls	r1, r3, #5
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	440b      	add	r3, r1
 800c04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04e:	4619      	mov	r1, r3
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <USB_DeactivateEndpoint+0x1b4>)
 800c052:	4013      	ands	r3, r2
 800c054:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr
 800c064:	ec337800 	.word	0xec337800
 800c068:	eff37800 	.word	0xeff37800

0800c06c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	785b      	ldrb	r3, [r3, #1]
 800c084:	2b01      	cmp	r3, #1
 800c086:	f040 810a 	bne.w	800c29e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d132      	bne.n	800c0f8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	0151      	lsls	r1, r2, #5
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	440a      	add	r2, r1
 800c0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	0151      	lsls	r1, r2, #5
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	440a      	add	r2, r1
 800c0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	015a      	lsls	r2, r3, #5
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	4413      	add	r3, r2
 800c0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	0151      	lsls	r1, r2, #5
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	440a      	add	r2, r1
 800c0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0f0:	0cdb      	lsrs	r3, r3, #19
 800c0f2:	04db      	lsls	r3, r3, #19
 800c0f4:	6113      	str	r3, [r2, #16]
 800c0f6:	e074      	b.n	800c1e2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	015a      	lsls	r2, r3, #5
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	0151      	lsls	r1, r2, #5
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	440a      	add	r2, r1
 800c10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c112:	0cdb      	lsrs	r3, r3, #19
 800c114:	04db      	lsls	r3, r3, #19
 800c116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	0151      	lsls	r1, r2, #5
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	440a      	add	r2, r1
 800c12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c13a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	015a      	lsls	r2, r3, #5
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	4413      	add	r3, r2
 800c144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c148:	691a      	ldr	r2, [r3, #16]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	6959      	ldr	r1, [r3, #20]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	440b      	add	r3, r1
 800c154:	1e59      	subs	r1, r3, #1
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c15e:	04d9      	lsls	r1, r3, #19
 800c160:	4baf      	ldr	r3, [pc, #700]	; (800c420 <USB_EPStartXfer+0x3b4>)
 800c162:	400b      	ands	r3, r1
 800c164:	6939      	ldr	r1, [r7, #16]
 800c166:	0148      	lsls	r0, r1, #5
 800c168:	6979      	ldr	r1, [r7, #20]
 800c16a:	4401      	add	r1, r0
 800c16c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c170:	4313      	orrs	r3, r2
 800c172:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c180:	691a      	ldr	r2, [r3, #16]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c18a:	6939      	ldr	r1, [r7, #16]
 800c18c:	0148      	lsls	r0, r1, #5
 800c18e:	6979      	ldr	r1, [r7, #20]
 800c190:	4401      	add	r1, r0
 800c192:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c196:	4313      	orrs	r3, r2
 800c198:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	78db      	ldrb	r3, [r3, #3]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d11f      	bne.n	800c1e2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	0151      	lsls	r1, r2, #5
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	440a      	add	r2, r1
 800c1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c1c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	0151      	lsls	r1, r2, #5
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	440a      	add	r2, r1
 800c1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1e0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	015a      	lsls	r2, r3, #5
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	0151      	lsls	r1, r2, #5
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	440a      	add	r2, r1
 800c1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c200:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	78db      	ldrb	r3, [r3, #3]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d015      	beq.n	800c236 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 8100 	beq.w	800c414 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	f003 030f 	and.w	r3, r3, #15
 800c224:	2101      	movs	r1, #1
 800c226:	fa01 f303 	lsl.w	r3, r1, r3
 800c22a:	6979      	ldr	r1, [r7, #20]
 800c22c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c230:	4313      	orrs	r3, r2
 800c232:	634b      	str	r3, [r1, #52]	; 0x34
 800c234:	e0ee      	b.n	800c414 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c242:	2b00      	cmp	r3, #0
 800c244:	d110      	bne.n	800c268 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	015a      	lsls	r2, r3, #5
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	0151      	lsls	r1, r2, #5
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	440a      	add	r2, r1
 800c25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	e00f      	b.n	800c288 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	0151      	lsls	r1, r2, #5
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	440a      	add	r2, r1
 800c27e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c286:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	68d9      	ldr	r1, [r3, #12]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	b29b      	uxth	r3, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f9e2 	bl	800c660 <USB_WritePacket>
 800c29c:	e0ba      	b.n	800c414 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	015a      	lsls	r2, r3, #5
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	0151      	lsls	r1, r2, #5
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	440a      	add	r2, r1
 800c2b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2b8:	0cdb      	lsrs	r3, r3, #19
 800c2ba:	04db      	lsls	r3, r3, #19
 800c2bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	015a      	lsls	r2, r3, #5
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	0151      	lsls	r1, r2, #5
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	440a      	add	r2, r1
 800c2d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d123      	bne.n	800c332 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f6:	691a      	ldr	r2, [r3, #16]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c300:	6939      	ldr	r1, [r7, #16]
 800c302:	0148      	lsls	r0, r1, #5
 800c304:	6979      	ldr	r1, [r7, #20]
 800c306:	4401      	add	r1, r0
 800c308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c30c:	4313      	orrs	r3, r2
 800c30e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	693a      	ldr	r2, [r7, #16]
 800c320:	0151      	lsls	r1, r2, #5
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	440a      	add	r2, r1
 800c326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c32a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c32e:	6113      	str	r3, [r2, #16]
 800c330:	e033      	b.n	800c39a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	695a      	ldr	r2, [r3, #20]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	4413      	add	r3, r2
 800c33c:	1e5a      	subs	r2, r3, #1
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	fbb2 f3f3 	udiv	r3, r2, r3
 800c346:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	015a      	lsls	r2, r3, #5
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	4413      	add	r3, r2
 800c350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c354:	691a      	ldr	r2, [r3, #16]
 800c356:	89fb      	ldrh	r3, [r7, #14]
 800c358:	04d9      	lsls	r1, r3, #19
 800c35a:	4b31      	ldr	r3, [pc, #196]	; (800c420 <USB_EPStartXfer+0x3b4>)
 800c35c:	400b      	ands	r3, r1
 800c35e:	6939      	ldr	r1, [r7, #16]
 800c360:	0148      	lsls	r0, r1, #5
 800c362:	6979      	ldr	r1, [r7, #20]
 800c364:	4401      	add	r1, r0
 800c366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c36a:	4313      	orrs	r3, r2
 800c36c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	015a      	lsls	r2, r3, #5
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	4413      	add	r3, r2
 800c376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c37a:	691a      	ldr	r2, [r3, #16]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	89f9      	ldrh	r1, [r7, #14]
 800c382:	fb01 f303 	mul.w	r3, r1, r3
 800c386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c38a:	6939      	ldr	r1, [r7, #16]
 800c38c:	0148      	lsls	r0, r1, #5
 800c38e:	6979      	ldr	r1, [r7, #20]
 800c390:	4401      	add	r1, r0
 800c392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c396:	4313      	orrs	r3, r2
 800c398:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	78db      	ldrb	r3, [r3, #3]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d128      	bne.n	800c3f4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d110      	bne.n	800c3d4 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	0151      	lsls	r1, r2, #5
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	440a      	add	r2, r1
 800c3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	e00f      	b.n	800c3f4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	0151      	lsls	r1, r2, #5
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	440a      	add	r2, r1
 800c3ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	0151      	lsls	r1, r2, #5
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	440a      	add	r2, r1
 800c40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c40e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	1ff80000 	.word	0x1ff80000

0800c424 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	f040 80ab 	bne.w	800c598 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d132      	bne.n	800c4b0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c464:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c468:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c46c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	015a      	lsls	r2, r3, #5
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	4413      	add	r3, r2
 800c476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	0151      	lsls	r1, r2, #5
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	440a      	add	r2, r1
 800c484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c48c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	015a      	lsls	r2, r3, #5
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	4413      	add	r3, r2
 800c496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	0151      	lsls	r1, r2, #5
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	440a      	add	r2, r1
 800c4a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4a8:	0cdb      	lsrs	r3, r3, #19
 800c4aa:	04db      	lsls	r3, r3, #19
 800c4ac:	6113      	str	r3, [r2, #16]
 800c4ae:	e04e      	b.n	800c54e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	015a      	lsls	r2, r3, #5
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	0151      	lsls	r1, r2, #5
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	440a      	add	r2, r1
 800c4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ca:	0cdb      	lsrs	r3, r3, #19
 800c4cc:	04db      	lsls	r3, r3, #19
 800c4ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	0151      	lsls	r1, r2, #5
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	440a      	add	r2, r1
 800c4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	695a      	ldr	r2, [r3, #20]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d903      	bls.n	800c508 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	015a      	lsls	r2, r3, #5
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	4413      	add	r3, r2
 800c510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	0151      	lsls	r1, r2, #5
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	440a      	add	r2, r1
 800c51e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c534:	691a      	ldr	r2, [r3, #16]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	0148      	lsls	r0, r1, #5
 800c542:	68f9      	ldr	r1, [r7, #12]
 800c544:	4401      	add	r1, r0
 800c546:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c54a:	4313      	orrs	r3, r2
 800c54c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	015a      	lsls	r2, r3, #5
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	4413      	add	r3, r2
 800c556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	0151      	lsls	r1, r2, #5
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	440a      	add	r2, r1
 800c564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c56c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d06d      	beq.n	800c652 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	f003 030f 	and.w	r3, r3, #15
 800c586:	2101      	movs	r1, #1
 800c588:	fa01 f303 	lsl.w	r3, r1, r3
 800c58c:	68f9      	ldr	r1, [r7, #12]
 800c58e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c592:	4313      	orrs	r3, r2
 800c594:	634b      	str	r3, [r1, #52]	; 0x34
 800c596:	e05c      	b.n	800c652 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5b2:	0cdb      	lsrs	r3, r3, #19
 800c5b4:	04db      	lsls	r3, r3, #19
 800c5b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	0151      	lsls	r1, r2, #5
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	440a      	add	r2, r1
 800c5ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c5d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c5da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	695b      	ldr	r3, [r3, #20]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	689a      	ldr	r2, [r3, #8]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	0151      	lsls	r1, r2, #5
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	440a      	add	r2, r1
 800c602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c60a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	4413      	add	r3, r2
 800c614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c618:	691a      	ldr	r2, [r3, #16]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c622:	68b9      	ldr	r1, [r7, #8]
 800c624:	0148      	lsls	r0, r1, #5
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	4401      	add	r1, r0
 800c62a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c62e:	4313      	orrs	r3, r2
 800c630:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68ba      	ldr	r2, [r7, #8]
 800c642:	0151      	lsls	r1, r2, #5
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	440a      	add	r2, r1
 800c648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c64c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c650:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800c660:	b480      	push	{r7}
 800c662:	b089      	sub	sp, #36	; 0x24
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	4611      	mov	r1, r2
 800c66c:	461a      	mov	r2, r3
 800c66e:	460b      	mov	r3, r1
 800c670:	71fb      	strb	r3, [r7, #7]
 800c672:	4613      	mov	r3, r2
 800c674:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c67e:	88bb      	ldrh	r3, [r7, #4]
 800c680:	3303      	adds	r3, #3
 800c682:	089b      	lsrs	r3, r3, #2
 800c684:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c686:	2300      	movs	r3, #0
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	e00f      	b.n	800c6ac <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c68c:	79fb      	ldrb	r3, [r7, #7]
 800c68e:	031a      	lsls	r2, r3, #12
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	4413      	add	r3, r2
 800c694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c698:	461a      	mov	r2, r3
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	61bb      	str	r3, [r7, #24]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d3eb      	bcc.n	800c68c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3724      	adds	r7, #36	; 0x24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b089      	sub	sp, #36	; 0x24
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	60f8      	str	r0, [r7, #12]
 800c6ca:	60b9      	str	r1, [r7, #8]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c6d8:	88fb      	ldrh	r3, [r7, #6]
 800c6da:	3303      	adds	r3, #3
 800c6dc:	089b      	lsrs	r3, r3, #2
 800c6de:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	61bb      	str	r3, [r7, #24]
 800c6e4:	e00b      	b.n	800c6fe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	601a      	str	r2, [r3, #0]
    pDest++;
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	61bb      	str	r3, [r7, #24]
 800c6fe:	69ba      	ldr	r2, [r7, #24]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	429a      	cmp	r2, r3
 800c704:	d3ef      	bcc.n	800c6e6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c706:	69fb      	ldr	r3, [r7, #28]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3724      	adds	r7, #36	; 0x24
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	785b      	ldrb	r3, [r3, #1]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d12c      	bne.n	800c78a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	015a      	lsls	r2, r3, #5
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4413      	add	r3, r2
 800c738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	db12      	blt.n	800c768 <USB_EPSetStall+0x54>
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00f      	beq.n	800c768 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	015a      	lsls	r2, r3, #5
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	0151      	lsls	r1, r2, #5
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	440a      	add	r2, r1
 800c75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c762:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c766:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	015a      	lsls	r2, r3, #5
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	0151      	lsls	r1, r2, #5
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	440a      	add	r2, r1
 800c77e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c782:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c786:	6013      	str	r3, [r2, #0]
 800c788:	e02b      	b.n	800c7e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	4413      	add	r3, r2
 800c792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	db12      	blt.n	800c7c2 <USB_EPSetStall+0xae>
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00f      	beq.n	800c7c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	0151      	lsls	r1, r2, #5
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	440a      	add	r2, r1
 800c7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	0151      	lsls	r1, r2, #5
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	440a      	add	r2, r1
 800c7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c7e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	785b      	ldrb	r3, [r3, #1]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d128      	bne.n	800c85e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	0151      	lsls	r1, r2, #5
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	440a      	add	r2, r1
 800c822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c82a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	78db      	ldrb	r3, [r3, #3]
 800c830:	2b03      	cmp	r3, #3
 800c832:	d003      	beq.n	800c83c <USB_EPClearStall+0x4c>
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	78db      	ldrb	r3, [r3, #3]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d138      	bne.n	800c8ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	015a      	lsls	r2, r3, #5
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	4413      	add	r3, r2
 800c844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	0151      	lsls	r1, r2, #5
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	440a      	add	r2, r1
 800c852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	e027      	b.n	800c8ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	4413      	add	r3, r2
 800c866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	0151      	lsls	r1, r2, #5
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	440a      	add	r2, r1
 800c874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c878:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c87c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	78db      	ldrb	r3, [r3, #3]
 800c882:	2b03      	cmp	r3, #3
 800c884:	d003      	beq.n	800c88e <USB_EPClearStall+0x9e>
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	78db      	ldrb	r3, [r3, #3]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d10f      	bne.n	800c8ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	0151      	lsls	r1, r2, #5
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	440a      	add	r2, r1
 800c8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3714      	adds	r7, #20
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c8de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	78fb      	ldrb	r3, [r7, #3]
 800c8ea:	011b      	lsls	r3, r3, #4
 800c8ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c8f0:	68f9      	ldr	r1, [r7, #12]
 800c8f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c922:	f023 0302 	bic.w	r3, r3, #2
 800c926:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c928:	2003      	movs	r0, #3
 800c92a:	f7f6 ffc5 	bl	80038b8 <HAL_Delay>

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c952:	f043 0302 	orr.w	r3, r3, #2
 800c956:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c958:	2003      	movs	r0, #3
 800c95a:	f7f6 ffad 	bl	80038b8 <HAL_Delay>

  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	4013      	ands	r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c980:	68fb      	ldr	r3, [r7, #12]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c98e:	b480      	push	{r7}
 800c990:	b085      	sub	sp, #20
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9aa:	69db      	ldr	r3, [r3, #28]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	4013      	ands	r3, r2
 800c9b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	0c1b      	lsrs	r3, r3, #16
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b085      	sub	sp, #20
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9de:	69db      	ldr	r3, [r3, #28]
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	b29b      	uxth	r3, r3
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b085      	sub	sp, #20
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	460b      	mov	r3, r1
 800ca00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ca06:	78fb      	ldrb	r3, [r7, #3]
 800ca08:	015a      	lsls	r2, r3, #5
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca1c:	695b      	ldr	r3, [r3, #20]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	4013      	ands	r3, r2
 800ca22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca24:	68bb      	ldr	r3, [r7, #8]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca32:	b480      	push	{r7}
 800ca34:	b087      	sub	sp, #28
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ca56:	78fb      	ldrb	r3, [r7, #3]
 800ca58:	f003 030f 	and.w	r3, r3, #15
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca62:	01db      	lsls	r3, r3, #7
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ca6c:	78fb      	ldrb	r3, [r7, #3]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca80:	68bb      	ldr	r3, [r7, #8]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	371c      	adds	r7, #28
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b083      	sub	sp, #12
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800caaa:	b480      	push	{r7}
 800caac:	b085      	sub	sp, #20
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cac8:	f023 0307 	bic.w	r3, r3, #7
 800cacc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cadc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cae0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	333c      	adds	r3, #60	; 0x3c
 800cb02:	3304      	adds	r3, #4
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	4a1c      	ldr	r2, [pc, #112]	; (800cb7c <USB_EP0_OutStart+0x8c>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d90a      	bls.n	800cb26 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb20:	d101      	bne.n	800cb26 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	e024      	b.n	800cb70 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	2300      	movs	r3, #0
 800cb30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb54:	f043 0318 	orr.w	r3, r3, #24
 800cb58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cb6c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	4f54300a 	.word	0x4f54300a

0800cb80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	4a13      	ldr	r2, [pc, #76]	; (800cbe4 <USB_CoreReset+0x64>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d901      	bls.n	800cb9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	e01b      	b.n	800cbd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	daf2      	bge.n	800cb8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	f043 0201 	orr.w	r2, r3, #1
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	4a09      	ldr	r2, [pc, #36]	; (800cbe4 <USB_CoreReset+0x64>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d901      	bls.n	800cbc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	e006      	b.n	800cbd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d0f0      	beq.n	800cbb6 <USB_CoreReset+0x36>

  return HAL_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	00030d40 	.word	0x00030d40

0800cbe8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	7c1b      	ldrb	r3, [r3, #16]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d115      	bne.n	800cc2c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cc00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc04:	2202      	movs	r2, #2
 800cc06:	2181      	movs	r1, #129	; 0x81
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f001 ff51 	bl	800eab0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2201      	movs	r2, #1
 800cc12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc18:	2202      	movs	r2, #2
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f001 ff47 	bl	800eab0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800cc2a:	e012      	b.n	800cc52 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cc2c:	2340      	movs	r3, #64	; 0x40
 800cc2e:	2202      	movs	r2, #2
 800cc30:	2181      	movs	r1, #129	; 0x81
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f001 ff3c 	bl	800eab0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc3e:	2340      	movs	r3, #64	; 0x40
 800cc40:	2202      	movs	r2, #2
 800cc42:	2101      	movs	r1, #1
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f001 ff33 	bl	800eab0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc52:	2308      	movs	r3, #8
 800cc54:	2203      	movs	r2, #3
 800cc56:	2182      	movs	r1, #130	; 0x82
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f001 ff29 	bl	800eab0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2201      	movs	r2, #1
 800cc62:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cc64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cc68:	f002 f93a 	bl	800eee0 <USBD_static_malloc>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	73fb      	strb	r3, [r7, #15]
 800cc82:	e026      	b.n	800ccd2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc8a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	7c1b      	ldrb	r3, [r3, #16]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d109      	bne.n	800ccc2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccb8:	2101      	movs	r1, #1
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f002 f874 	bl	800eda8 <USBD_LL_PrepareReceive>
 800ccc0:	e007      	b.n	800ccd2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccc8:	2340      	movs	r3, #64	; 0x40
 800ccca:	2101      	movs	r1, #1
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f002 f86b 	bl	800eda8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cce8:	2300      	movs	r3, #0
 800ccea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ccec:	2181      	movs	r1, #129	; 0x81
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f001 ff1c 	bl	800eb2c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f001 ff15 	bl	800eb2c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cd0a:	2182      	movs	r1, #130	; 0x82
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f001 ff0d 	bl	800eb2c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00e      	beq.n	800cd40 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd32:	4618      	mov	r0, r3
 800cd34:	f002 f8e2 	bl	800eefc <USBD_static_free>
    pdev->pClassData = NULL;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b086      	sub	sp, #24
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd5a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800cd60:	2300      	movs	r3, #0
 800cd62:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d039      	beq.n	800cde8 <USBD_CDC_Setup+0x9e>
 800cd74:	2b20      	cmp	r3, #32
 800cd76:	d17c      	bne.n	800ce72 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	88db      	ldrh	r3, [r3, #6]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d029      	beq.n	800cdd4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	b25b      	sxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	da11      	bge.n	800cdae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800cd96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	88d2      	ldrh	r2, [r2, #6]
 800cd9c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cd9e:	6939      	ldr	r1, [r7, #16]
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	88db      	ldrh	r3, [r3, #6]
 800cda4:	461a      	mov	r2, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f001 fa3a 	bl	800e220 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800cdac:	e068      	b.n	800ce80 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	785a      	ldrb	r2, [r3, #1]
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	88db      	ldrh	r3, [r3, #6]
 800cdbc:	b2da      	uxtb	r2, r3
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cdc4:	6939      	ldr	r1, [r7, #16]
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	88db      	ldrh	r3, [r3, #6]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 fa55 	bl	800e27c <USBD_CtlPrepareRx>
      break;
 800cdd2:	e055      	b.n	800ce80 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	7850      	ldrb	r0, [r2, #1]
 800cde0:	2200      	movs	r2, #0
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	4798      	blx	r3
      break;
 800cde6:	e04b      	b.n	800ce80 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	785b      	ldrb	r3, [r3, #1]
 800cdec:	2b0a      	cmp	r3, #10
 800cdee:	d017      	beq.n	800ce20 <USBD_CDC_Setup+0xd6>
 800cdf0:	2b0b      	cmp	r3, #11
 800cdf2:	d029      	beq.n	800ce48 <USBD_CDC_Setup+0xfe>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d133      	bne.n	800ce60 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d107      	bne.n	800ce12 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ce02:	f107 030c 	add.w	r3, r7, #12
 800ce06:	2202      	movs	r2, #2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f001 fa08 	bl	800e220 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce10:	e02e      	b.n	800ce70 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f001 f998 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ce1e:	e027      	b.n	800ce70 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d107      	bne.n	800ce3a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce2a:	f107 030f 	add.w	r3, r7, #15
 800ce2e:	2201      	movs	r2, #1
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f001 f9f4 	bl	800e220 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce38:	e01a      	b.n	800ce70 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f001 f984 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800ce42:	2302      	movs	r3, #2
 800ce44:	75fb      	strb	r3, [r7, #23]
          break;
 800ce46:	e013      	b.n	800ce70 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d00d      	beq.n	800ce6e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800ce52:	6839      	ldr	r1, [r7, #0]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f001 f978 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce5e:	e006      	b.n	800ce6e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f001 f971 	bl	800e14a <USBD_CtlError>
          ret = USBD_FAIL;
 800ce68:	2302      	movs	r3, #2
 800ce6a:	75fb      	strb	r3, [r7, #23]
          break;
 800ce6c:	e000      	b.n	800ce70 <USBD_CDC_Setup+0x126>
          break;
 800ce6e:	bf00      	nop
      }
      break;
 800ce70:	e006      	b.n	800ce80 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 f968 	bl	800e14a <USBD_CtlError>
      ret = USBD_FAIL;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce7e:	bf00      	nop
  }

  return ret;
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	460b      	mov	r3, r1
 800ce94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce9c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cea4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d03a      	beq.n	800cf26 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ceb0:	78fa      	ldrb	r2, [r7, #3]
 800ceb2:	6879      	ldr	r1, [r7, #4]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	440b      	add	r3, r1
 800cebe:	331c      	adds	r3, #28
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d029      	beq.n	800cf1a <USBD_CDC_DataIn+0x90>
 800cec6:	78fa      	ldrb	r2, [r7, #3]
 800cec8:	6879      	ldr	r1, [r7, #4]
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	440b      	add	r3, r1
 800ced4:	331c      	adds	r3, #28
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	78f9      	ldrb	r1, [r7, #3]
 800ceda:	68b8      	ldr	r0, [r7, #8]
 800cedc:	460b      	mov	r3, r1
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	1a5b      	subs	r3, r3, r1
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	4403      	add	r3, r0
 800cee6:	3344      	adds	r3, #68	; 0x44
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	fbb2 f1f3 	udiv	r1, r2, r3
 800ceee:	fb03 f301 	mul.w	r3, r3, r1
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d110      	bne.n	800cf1a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cef8:	78fa      	ldrb	r2, [r7, #3]
 800cefa:	6879      	ldr	r1, [r7, #4]
 800cefc:	4613      	mov	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	440b      	add	r3, r1
 800cf06:	331c      	adds	r3, #28
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf0c:	78f9      	ldrb	r1, [r7, #3]
 800cf0e:	2300      	movs	r3, #0
 800cf10:	2200      	movs	r2, #0
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f001 ff0e 	bl	800ed34 <USBD_LL_Transmit>
 800cf18:	e003      	b.n	800cf22 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	e000      	b.n	800cf28 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800cf26:	2302      	movs	r3, #2
  }
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf42:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	4619      	mov	r1, r3
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f001 ff67 	bl	800ee1c <USBD_LL_GetRxDataSize>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00d      	beq.n	800cf7c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf74:	4611      	mov	r1, r2
 800cf76:	4798      	blx	r3

    return USBD_OK;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	e000      	b.n	800cf7e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800cf7c:	2302      	movs	r3, #2
  }
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf94:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d015      	beq.n	800cfcc <USBD_CDC_EP0_RxReady+0x46>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cfa6:	2bff      	cmp	r3, #255	; 0xff
 800cfa8:	d010      	beq.n	800cfcc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800cfb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cfc0:	b292      	uxth	r2, r2
 800cfc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	22ff      	movs	r2, #255	; 0xff
 800cfc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
	...

0800cfd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2243      	movs	r2, #67	; 0x43
 800cfe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800cfe6:	4b03      	ldr	r3, [pc, #12]	; (800cff4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	20000094 	.word	0x20000094

0800cff8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2243      	movs	r2, #67	; 0x43
 800d004:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d006:	4b03      	ldr	r3, [pc, #12]	; (800d014 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	20000050 	.word	0x20000050

0800d018 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2243      	movs	r2, #67	; 0x43
 800d024:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d026:	4b03      	ldr	r3, [pc, #12]	; (800d034 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d028:	4618      	mov	r0, r3
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	200000d8 	.word	0x200000d8

0800d038 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	220a      	movs	r2, #10
 800d044:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d046:	4b03      	ldr	r3, [pc, #12]	; (800d054 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d048:	4618      	mov	r0, r3
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	2000000c 	.word	0x2000000c

0800d058 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d062:	2302      	movs	r3, #2
 800d064:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d078:	7bfb      	ldrb	r3, [r7, #15]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d086:	b480      	push	{r7}
 800d088:	b087      	sub	sp, #28
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	4613      	mov	r3, r2
 800d092:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d09a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d0a4:	88fa      	ldrh	r2, [r7, #6]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b085      	sub	sp, #20
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b084      	sub	sp, #16
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d017      	beq.n	800d12c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	7c1b      	ldrb	r3, [r3, #16]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d109      	bne.n	800d118 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d10a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d10e:	2101      	movs	r1, #1
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f001 fe49 	bl	800eda8 <USBD_LL_PrepareReceive>
 800d116:	e007      	b.n	800d128 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d11e:	2340      	movs	r3, #64	; 0x40
 800d120:	2101      	movs	r1, #1
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 fe40 	bl	800eda8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	e000      	b.n	800d12e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d12c:	2302      	movs	r3, #2
  }
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b084      	sub	sp, #16
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	60f8      	str	r0, [r7, #12]
 800d13e:	60b9      	str	r1, [r7, #8]
 800d140:	4613      	mov	r3, r2
 800d142:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d14a:	2302      	movs	r3, #2
 800d14c:	e01a      	b.n	800d184 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	79fa      	ldrb	r2, [r7, #7]
 800d17a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f001 fc19 	bl	800e9b4 <USBD_LL_Init>

  return USBD_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d006      	beq.n	800d1ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]
 800d1ac:	e001      	b.n	800d1b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3714      	adds	r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f001 fc3f 	bl	800ea4c <USBD_LL_Start>

  return USBD_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d1e0:	2300      	movs	r3, #0
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00c      	beq.n	800d222 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	78fa      	ldrb	r2, [r7, #3]
 800d212:	4611      	mov	r1, r2
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	4798      	blx	r3
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d21e:	2300      	movs	r3, #0
 800d220:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d222:	7bfb      	ldrb	r3, [r7, #15]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	460b      	mov	r3, r1
 800d236:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	78fa      	ldrb	r2, [r7, #3]
 800d242:	4611      	mov	r1, r2
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	4798      	blx	r3

  return USBD_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3708      	adds	r7, #8
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f000 ff33 	bl	800e0d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d278:	461a      	mov	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d286:	f003 031f 	and.w	r3, r3, #31
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d00c      	beq.n	800d2a8 <USBD_LL_SetupStage+0x56>
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d302      	bcc.n	800d298 <USBD_LL_SetupStage+0x46>
 800d292:	2b02      	cmp	r3, #2
 800d294:	d010      	beq.n	800d2b8 <USBD_LL_SetupStage+0x66>
 800d296:	e017      	b.n	800d2c8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fa09 	bl	800d6b8 <USBD_StdDevReq>
      break;
 800d2a6:	e01a      	b.n	800d2de <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fa6b 	bl	800d78c <USBD_StdItfReq>
      break;
 800d2b6:	e012      	b.n	800d2de <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 faa9 	bl	800d818 <USBD_StdEPReq>
      break;
 800d2c6:	e00a      	b.n	800d2de <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d2ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f001 fc5e 	bl	800eb98 <USBD_LL_StallEP>
      break;
 800d2dc:	bf00      	nop
  }

  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d2f6:	7afb      	ldrb	r3, [r7, #11]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d14b      	bne.n	800d394 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d302:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d134      	bne.n	800d378 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	68da      	ldr	r2, [r3, #12]
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	429a      	cmp	r2, r3
 800d318:	d919      	bls.n	800d34e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	68da      	ldr	r2, [r3, #12]
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	1ad2      	subs	r2, r2, r3
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	68da      	ldr	r2, [r3, #12]
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d330:	429a      	cmp	r2, r3
 800d332:	d203      	bcs.n	800d33c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d338:	b29b      	uxth	r3, r3
 800d33a:	e002      	b.n	800d342 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d340:	b29b      	uxth	r3, r3
 800d342:	461a      	mov	r2, r3
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f000 ffb6 	bl	800e2b8 <USBD_CtlContinueRx>
 800d34c:	e038      	b.n	800d3c0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00a      	beq.n	800d370 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d360:	2b03      	cmp	r3, #3
 800d362:	d105      	bne.n	800d370 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 ffb3 	bl	800e2dc <USBD_CtlSendStatus>
 800d376:	e023      	b.n	800d3c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d37e:	2b05      	cmp	r3, #5
 800d380:	d11e      	bne.n	800d3c0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2200      	movs	r2, #0
 800d386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d38a:	2100      	movs	r1, #0
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f001 fc03 	bl	800eb98 <USBD_LL_StallEP>
 800d392:	e015      	b.n	800d3c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00d      	beq.n	800d3bc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d108      	bne.n	800d3bc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	7afa      	ldrb	r2, [r7, #11]
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	4798      	blx	r3
 800d3ba:	e001      	b.n	800d3c0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d3bc:	2302      	movs	r3, #2
 800d3be:	e000      	b.n	800d3c2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3718      	adds	r7, #24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b086      	sub	sp, #24
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	60f8      	str	r0, [r7, #12]
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	607a      	str	r2, [r7, #4]
 800d3d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d3d8:	7afb      	ldrb	r3, [r7, #11]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d17f      	bne.n	800d4de <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3314      	adds	r3, #20
 800d3e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d15c      	bne.n	800d4a8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d915      	bls.n	800d426 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	68da      	ldr	r2, [r3, #12]
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	1ad2      	subs	r2, r2, r3
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	461a      	mov	r2, r3
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f000 ff20 	bl	800e258 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d418:	2300      	movs	r3, #0
 800d41a:	2200      	movs	r2, #0
 800d41c:	2100      	movs	r1, #0
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f001 fcc2 	bl	800eda8 <USBD_LL_PrepareReceive>
 800d424:	e04e      	b.n	800d4c4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	697a      	ldr	r2, [r7, #20]
 800d42c:	6912      	ldr	r2, [r2, #16]
 800d42e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d432:	fb02 f201 	mul.w	r2, r2, r1
 800d436:	1a9b      	subs	r3, r3, r2
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d11c      	bne.n	800d476 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	689a      	ldr	r2, [r3, #8]
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d444:	429a      	cmp	r2, r3
 800d446:	d316      	bcc.n	800d476 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	689a      	ldr	r2, [r3, #8]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d452:	429a      	cmp	r2, r3
 800d454:	d20f      	bcs.n	800d476 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d456:	2200      	movs	r2, #0
 800d458:	2100      	movs	r1, #0
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f000 fefc 	bl	800e258 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2200      	movs	r2, #0
 800d464:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d468:	2300      	movs	r3, #0
 800d46a:	2200      	movs	r2, #0
 800d46c:	2100      	movs	r1, #0
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f001 fc9a 	bl	800eda8 <USBD_LL_PrepareReceive>
 800d474:	e026      	b.n	800d4c4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d00a      	beq.n	800d498 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d488:	2b03      	cmp	r3, #3
 800d48a:	d105      	bne.n	800d498 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d498:	2180      	movs	r1, #128	; 0x80
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f001 fb7c 	bl	800eb98 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f000 ff2e 	bl	800e302 <USBD_CtlReceiveStatus>
 800d4a6:	e00d      	b.n	800d4c4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4ae:	2b04      	cmp	r3, #4
 800d4b0:	d004      	beq.n	800d4bc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d103      	bne.n	800d4c4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d4bc:	2180      	movs	r1, #128	; 0x80
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f001 fb6a 	bl	800eb98 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d11d      	bne.n	800d50a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f7ff fe82 	bl	800d1d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d4dc:	e015      	b.n	800d50a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00d      	beq.n	800d506 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	d108      	bne.n	800d506 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4fa:	695b      	ldr	r3, [r3, #20]
 800d4fc:	7afa      	ldrb	r2, [r7, #11]
 800d4fe:	4611      	mov	r1, r2
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	4798      	blx	r3
 800d504:	e001      	b.n	800d50a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d506:	2302      	movs	r3, #2
 800d508:	e000      	b.n	800d50c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	2200      	movs	r2, #0
 800d520:	2100      	movs	r1, #0
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f001 fac4 	bl	800eab0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2240      	movs	r2, #64	; 0x40
 800d534:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d538:	2340      	movs	r3, #64	; 0x40
 800d53a:	2200      	movs	r2, #0
 800d53c:	2180      	movs	r1, #128	; 0x80
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 fab6 	bl	800eab0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2240      	movs	r2, #64	; 0x40
 800d54e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2200      	movs	r2, #0
 800d56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d574:	2b00      	cmp	r3, #0
 800d576:	d009      	beq.n	800d58c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	6852      	ldr	r2, [r2, #4]
 800d584:	b2d2      	uxtb	r2, r2
 800d586:	4611      	mov	r1, r2
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	4798      	blx	r3
  }

  return USBD_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d596:	b480      	push	{r7}
 800d598:	b083      	sub	sp, #12
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	460b      	mov	r3, r1
 800d5a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	78fa      	ldrb	r2, [r7, #3]
 800d5a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr

0800d5b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	b083      	sub	sp, #12
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2204      	movs	r2, #4
 800d5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ee:	2b04      	cmp	r3, #4
 800d5f0:	d105      	bne.n	800d5fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d10b      	bne.n	800d636 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d624:	69db      	ldr	r3, [r3, #28]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d005      	beq.n	800d636 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr

0800d65a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d65a:	b480      	push	{r7}
 800d65c:	b083      	sub	sp, #12
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	460b      	mov	r3, r1
 800d664:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2201      	movs	r2, #1
 800d696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	6852      	ldr	r2, [r2, #4]
 800d6a6:	b2d2      	uxtb	r2, r2
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	4798      	blx	r3

  return USBD_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6ce:	2b20      	cmp	r3, #32
 800d6d0:	d004      	beq.n	800d6dc <USBD_StdDevReq+0x24>
 800d6d2:	2b40      	cmp	r3, #64	; 0x40
 800d6d4:	d002      	beq.n	800d6dc <USBD_StdDevReq+0x24>
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d008      	beq.n	800d6ec <USBD_StdDevReq+0x34>
 800d6da:	e04c      	b.n	800d776 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	4798      	blx	r3
      break;
 800d6ea:	e049      	b.n	800d780 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	785b      	ldrb	r3, [r3, #1]
 800d6f0:	2b09      	cmp	r3, #9
 800d6f2:	d83a      	bhi.n	800d76a <USBD_StdDevReq+0xb2>
 800d6f4:	a201      	add	r2, pc, #4	; (adr r2, 800d6fc <USBD_StdDevReq+0x44>)
 800d6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fa:	bf00      	nop
 800d6fc:	0800d74d 	.word	0x0800d74d
 800d700:	0800d761 	.word	0x0800d761
 800d704:	0800d76b 	.word	0x0800d76b
 800d708:	0800d757 	.word	0x0800d757
 800d70c:	0800d76b 	.word	0x0800d76b
 800d710:	0800d72f 	.word	0x0800d72f
 800d714:	0800d725 	.word	0x0800d725
 800d718:	0800d76b 	.word	0x0800d76b
 800d71c:	0800d743 	.word	0x0800d743
 800d720:	0800d739 	.word	0x0800d739
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d724:	6839      	ldr	r1, [r7, #0]
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f9d4 	bl	800dad4 <USBD_GetDescriptor>
          break;
 800d72c:	e022      	b.n	800d774 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fb61 	bl	800ddf8 <USBD_SetAddress>
          break;
 800d736:	e01d      	b.n	800d774 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fb9e 	bl	800de7c <USBD_SetConfig>
          break;
 800d740:	e018      	b.n	800d774 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d742:	6839      	ldr	r1, [r7, #0]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fc27 	bl	800df98 <USBD_GetConfig>
          break;
 800d74a:	e013      	b.n	800d774 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 fc56 	bl	800e000 <USBD_GetStatus>
          break;
 800d754:	e00e      	b.n	800d774 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 fc84 	bl	800e066 <USBD_SetFeature>
          break;
 800d75e:	e009      	b.n	800d774 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fc93 	bl	800e08e <USBD_ClrFeature>
          break;
 800d768:	e004      	b.n	800d774 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 fcec 	bl	800e14a <USBD_CtlError>
          break;
 800d772:	bf00      	nop
      }
      break;
 800d774:	e004      	b.n	800d780 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 fce6 	bl	800e14a <USBD_CtlError>
      break;
 800d77e:	bf00      	nop
  }

  return ret;
 800d780:	7bfb      	ldrb	r3, [r7, #15]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop

0800d78c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d796:	2300      	movs	r3, #0
 800d798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7a2:	2b20      	cmp	r3, #32
 800d7a4:	d003      	beq.n	800d7ae <USBD_StdItfReq+0x22>
 800d7a6:	2b40      	cmp	r3, #64	; 0x40
 800d7a8:	d001      	beq.n	800d7ae <USBD_StdItfReq+0x22>
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d12a      	bne.n	800d804 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d81d      	bhi.n	800d7f6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	889b      	ldrh	r3, [r3, #4]
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d813      	bhi.n	800d7ec <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	6839      	ldr	r1, [r7, #0]
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	4798      	blx	r3
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	88db      	ldrh	r3, [r3, #6]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d110      	bne.n	800d800 <USBD_StdItfReq+0x74>
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10d      	bne.n	800d800 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f000 fd79 	bl	800e2dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d7ea:	e009      	b.n	800d800 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fcab 	bl	800e14a <USBD_CtlError>
          break;
 800d7f4:	e004      	b.n	800d800 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fca6 	bl	800e14a <USBD_CtlError>
          break;
 800d7fe:	e000      	b.n	800d802 <USBD_StdItfReq+0x76>
          break;
 800d800:	bf00      	nop
      }
      break;
 800d802:	e004      	b.n	800d80e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 fc9f 	bl	800e14a <USBD_CtlError>
      break;
 800d80c:	bf00      	nop
  }

  return USBD_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	889b      	ldrh	r3, [r3, #4]
 800d82a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d834:	2b20      	cmp	r3, #32
 800d836:	d004      	beq.n	800d842 <USBD_StdEPReq+0x2a>
 800d838:	2b40      	cmp	r3, #64	; 0x40
 800d83a:	d002      	beq.n	800d842 <USBD_StdEPReq+0x2a>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <USBD_StdEPReq+0x3a>
 800d840:	e13d      	b.n	800dabe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	4798      	blx	r3
      break;
 800d850:	e13a      	b.n	800dac8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d85a:	2b20      	cmp	r3, #32
 800d85c:	d10a      	bne.n	800d874 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	4798      	blx	r3
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	e12a      	b.n	800daca <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	785b      	ldrb	r3, [r3, #1]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d03e      	beq.n	800d8fa <USBD_StdEPReq+0xe2>
 800d87c:	2b03      	cmp	r3, #3
 800d87e:	d002      	beq.n	800d886 <USBD_StdEPReq+0x6e>
 800d880:	2b00      	cmp	r3, #0
 800d882:	d070      	beq.n	800d966 <USBD_StdEPReq+0x14e>
 800d884:	e115      	b.n	800dab2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d002      	beq.n	800d896 <USBD_StdEPReq+0x7e>
 800d890:	2b03      	cmp	r3, #3
 800d892:	d015      	beq.n	800d8c0 <USBD_StdEPReq+0xa8>
 800d894:	e02b      	b.n	800d8ee <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d896:	7bbb      	ldrb	r3, [r7, #14]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00c      	beq.n	800d8b6 <USBD_StdEPReq+0x9e>
 800d89c:	7bbb      	ldrb	r3, [r7, #14]
 800d89e:	2b80      	cmp	r3, #128	; 0x80
 800d8a0:	d009      	beq.n	800d8b6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f001 f976 	bl	800eb98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d8ac:	2180      	movs	r1, #128	; 0x80
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f001 f972 	bl	800eb98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8b4:	e020      	b.n	800d8f8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 fc46 	bl	800e14a <USBD_CtlError>
              break;
 800d8be:	e01b      	b.n	800d8f8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	885b      	ldrh	r3, [r3, #2]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10e      	bne.n	800d8e6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800d8c8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00b      	beq.n	800d8e6 <USBD_StdEPReq+0xce>
 800d8ce:	7bbb      	ldrb	r3, [r7, #14]
 800d8d0:	2b80      	cmp	r3, #128	; 0x80
 800d8d2:	d008      	beq.n	800d8e6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	88db      	ldrh	r3, [r3, #6]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d8dc:	7bbb      	ldrb	r3, [r7, #14]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f001 f959 	bl	800eb98 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fcf8 	bl	800e2dc <USBD_CtlSendStatus>

              break;
 800d8ec:	e004      	b.n	800d8f8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fc2a 	bl	800e14a <USBD_CtlError>
              break;
 800d8f6:	bf00      	nop
          }
          break;
 800d8f8:	e0e0      	b.n	800dabc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d900:	2b02      	cmp	r3, #2
 800d902:	d002      	beq.n	800d90a <USBD_StdEPReq+0xf2>
 800d904:	2b03      	cmp	r3, #3
 800d906:	d015      	beq.n	800d934 <USBD_StdEPReq+0x11c>
 800d908:	e026      	b.n	800d958 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d90a:	7bbb      	ldrb	r3, [r7, #14]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00c      	beq.n	800d92a <USBD_StdEPReq+0x112>
 800d910:	7bbb      	ldrb	r3, [r7, #14]
 800d912:	2b80      	cmp	r3, #128	; 0x80
 800d914:	d009      	beq.n	800d92a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d916:	7bbb      	ldrb	r3, [r7, #14]
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f001 f93c 	bl	800eb98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d920:	2180      	movs	r1, #128	; 0x80
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f001 f938 	bl	800eb98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d928:	e01c      	b.n	800d964 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fc0c 	bl	800e14a <USBD_CtlError>
              break;
 800d932:	e017      	b.n	800d964 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	885b      	ldrh	r3, [r3, #2]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d112      	bne.n	800d962 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d942:	2b00      	cmp	r3, #0
 800d944:	d004      	beq.n	800d950 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	4619      	mov	r1, r3
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f001 f95a 	bl	800ec04 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 fcc3 	bl	800e2dc <USBD_CtlSendStatus>
              }
              break;
 800d956:	e004      	b.n	800d962 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fbf5 	bl	800e14a <USBD_CtlError>
              break;
 800d960:	e000      	b.n	800d964 <USBD_StdEPReq+0x14c>
              break;
 800d962:	bf00      	nop
          }
          break;
 800d964:	e0aa      	b.n	800dabc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d002      	beq.n	800d976 <USBD_StdEPReq+0x15e>
 800d970:	2b03      	cmp	r3, #3
 800d972:	d032      	beq.n	800d9da <USBD_StdEPReq+0x1c2>
 800d974:	e097      	b.n	800daa6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d007      	beq.n	800d98c <USBD_StdEPReq+0x174>
 800d97c:	7bbb      	ldrb	r3, [r7, #14]
 800d97e:	2b80      	cmp	r3, #128	; 0x80
 800d980:	d004      	beq.n	800d98c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 fbe0 	bl	800e14a <USBD_CtlError>
                break;
 800d98a:	e091      	b.n	800dab0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d98c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d990:	2b00      	cmp	r3, #0
 800d992:	da0b      	bge.n	800d9ac <USBD_StdEPReq+0x194>
 800d994:	7bbb      	ldrb	r3, [r7, #14]
 800d996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	3310      	adds	r3, #16
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	e00b      	b.n	800d9c4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d9ac:	7bbb      	ldrb	r3, [r7, #14]
 800d9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fc24 	bl	800e220 <USBD_CtlSendData>
              break;
 800d9d8:	e06a      	b.n	800dab0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d9da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	da11      	bge.n	800da06 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d9e2:	7bbb      	ldrb	r3, [r7, #14]
 800d9e4:	f003 020f 	and.w	r2, r3, #15
 800d9e8:	6879      	ldr	r1, [r7, #4]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	440b      	add	r3, r1
 800d9f4:	3318      	adds	r3, #24
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d117      	bne.n	800da2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fba3 	bl	800e14a <USBD_CtlError>
                  break;
 800da04:	e054      	b.n	800dab0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800da06:	7bbb      	ldrb	r3, [r7, #14]
 800da08:	f003 020f 	and.w	r2, r3, #15
 800da0c:	6879      	ldr	r1, [r7, #4]
 800da0e:	4613      	mov	r3, r2
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	440b      	add	r3, r1
 800da18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d104      	bne.n	800da2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800da22:	6839      	ldr	r1, [r7, #0]
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 fb90 	bl	800e14a <USBD_CtlError>
                  break;
 800da2a:	e041      	b.n	800dab0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da30:	2b00      	cmp	r3, #0
 800da32:	da0b      	bge.n	800da4c <USBD_StdEPReq+0x234>
 800da34:	7bbb      	ldrb	r3, [r7, #14]
 800da36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da3a:	4613      	mov	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4413      	add	r3, r2
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	3310      	adds	r3, #16
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	4413      	add	r3, r2
 800da48:	3304      	adds	r3, #4
 800da4a:	e00b      	b.n	800da64 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da52:	4613      	mov	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	4413      	add	r3, r2
 800da62:	3304      	adds	r3, #4
 800da64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da66:	7bbb      	ldrb	r3, [r7, #14]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <USBD_StdEPReq+0x25a>
 800da6c:	7bbb      	ldrb	r3, [r7, #14]
 800da6e:	2b80      	cmp	r3, #128	; 0x80
 800da70:	d103      	bne.n	800da7a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	2200      	movs	r2, #0
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e00e      	b.n	800da98 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800da7a:	7bbb      	ldrb	r3, [r7, #14]
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f001 f8f6 	bl	800ec70 <USBD_LL_IsStallEP>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d003      	beq.n	800da92 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2201      	movs	r2, #1
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	e002      	b.n	800da98 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	2200      	movs	r2, #0
 800da96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2202      	movs	r2, #2
 800da9c:	4619      	mov	r1, r3
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fbbe 	bl	800e220 <USBD_CtlSendData>
              break;
 800daa4:	e004      	b.n	800dab0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fb4e 	bl	800e14a <USBD_CtlError>
              break;
 800daae:	bf00      	nop
          }
          break;
 800dab0:	e004      	b.n	800dabc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fb48 	bl	800e14a <USBD_CtlError>
          break;
 800daba:	bf00      	nop
      }
      break;
 800dabc:	e004      	b.n	800dac8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fb42 	bl	800e14a <USBD_CtlError>
      break;
 800dac6:	bf00      	nop
  }

  return ret;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dade:	2300      	movs	r3, #0
 800dae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dae2:	2300      	movs	r3, #0
 800dae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dae6:	2300      	movs	r3, #0
 800dae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	885b      	ldrh	r3, [r3, #2]
 800daee:	0a1b      	lsrs	r3, r3, #8
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	3b01      	subs	r3, #1
 800daf4:	2b0e      	cmp	r3, #14
 800daf6:	f200 8152 	bhi.w	800dd9e <USBD_GetDescriptor+0x2ca>
 800dafa:	a201      	add	r2, pc, #4	; (adr r2, 800db00 <USBD_GetDescriptor+0x2c>)
 800dafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db00:	0800db71 	.word	0x0800db71
 800db04:	0800db89 	.word	0x0800db89
 800db08:	0800dbc9 	.word	0x0800dbc9
 800db0c:	0800dd9f 	.word	0x0800dd9f
 800db10:	0800dd9f 	.word	0x0800dd9f
 800db14:	0800dd3f 	.word	0x0800dd3f
 800db18:	0800dd6b 	.word	0x0800dd6b
 800db1c:	0800dd9f 	.word	0x0800dd9f
 800db20:	0800dd9f 	.word	0x0800dd9f
 800db24:	0800dd9f 	.word	0x0800dd9f
 800db28:	0800dd9f 	.word	0x0800dd9f
 800db2c:	0800dd9f 	.word	0x0800dd9f
 800db30:	0800dd9f 	.word	0x0800dd9f
 800db34:	0800dd9f 	.word	0x0800dd9f
 800db38:	0800db3d 	.word	0x0800db3d
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db42:	69db      	ldr	r3, [r3, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00b      	beq.n	800db60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db4e:	69db      	ldr	r3, [r3, #28]
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	7c12      	ldrb	r2, [r2, #16]
 800db54:	f107 0108 	add.w	r1, r7, #8
 800db58:	4610      	mov	r0, r2
 800db5a:	4798      	blx	r3
 800db5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db5e:	e126      	b.n	800ddae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db60:	6839      	ldr	r1, [r7, #0]
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 faf1 	bl	800e14a <USBD_CtlError>
        err++;
 800db68:	7afb      	ldrb	r3, [r7, #11]
 800db6a:	3301      	adds	r3, #1
 800db6c:	72fb      	strb	r3, [r7, #11]
      break;
 800db6e:	e11e      	b.n	800ddae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	7c12      	ldrb	r2, [r2, #16]
 800db7c:	f107 0108 	add.w	r1, r7, #8
 800db80:	4610      	mov	r0, r2
 800db82:	4798      	blx	r3
 800db84:	60f8      	str	r0, [r7, #12]
      break;
 800db86:	e112      	b.n	800ddae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7c1b      	ldrb	r3, [r3, #16]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10d      	bne.n	800dbac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db98:	f107 0208 	add.w	r2, r7, #8
 800db9c:	4610      	mov	r0, r2
 800db9e:	4798      	blx	r3
 800dba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3301      	adds	r3, #1
 800dba6:	2202      	movs	r2, #2
 800dba8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dbaa:	e100      	b.n	800ddae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	f107 0208 	add.w	r2, r7, #8
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4798      	blx	r3
 800dbbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	2202      	movs	r2, #2
 800dbc4:	701a      	strb	r2, [r3, #0]
      break;
 800dbc6:	e0f2      	b.n	800ddae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	885b      	ldrh	r3, [r3, #2]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b05      	cmp	r3, #5
 800dbd0:	f200 80ac 	bhi.w	800dd2c <USBD_GetDescriptor+0x258>
 800dbd4:	a201      	add	r2, pc, #4	; (adr r2, 800dbdc <USBD_GetDescriptor+0x108>)
 800dbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbda:	bf00      	nop
 800dbdc:	0800dbf5 	.word	0x0800dbf5
 800dbe0:	0800dc29 	.word	0x0800dc29
 800dbe4:	0800dc5d 	.word	0x0800dc5d
 800dbe8:	0800dc91 	.word	0x0800dc91
 800dbec:	0800dcc5 	.word	0x0800dcc5
 800dbf0:	0800dcf9 	.word	0x0800dcf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00b      	beq.n	800dc18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	7c12      	ldrb	r2, [r2, #16]
 800dc0c:	f107 0108 	add.w	r1, r7, #8
 800dc10:	4610      	mov	r0, r2
 800dc12:	4798      	blx	r3
 800dc14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc16:	e091      	b.n	800dd3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc18:	6839      	ldr	r1, [r7, #0]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 fa95 	bl	800e14a <USBD_CtlError>
            err++;
 800dc20:	7afb      	ldrb	r3, [r7, #11]
 800dc22:	3301      	adds	r3, #1
 800dc24:	72fb      	strb	r3, [r7, #11]
          break;
 800dc26:	e089      	b.n	800dd3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00b      	beq.n	800dc4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	7c12      	ldrb	r2, [r2, #16]
 800dc40:	f107 0108 	add.w	r1, r7, #8
 800dc44:	4610      	mov	r0, r2
 800dc46:	4798      	blx	r3
 800dc48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc4a:	e077      	b.n	800dd3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fa7b 	bl	800e14a <USBD_CtlError>
            err++;
 800dc54:	7afb      	ldrb	r3, [r7, #11]
 800dc56:	3301      	adds	r3, #1
 800dc58:	72fb      	strb	r3, [r7, #11]
          break;
 800dc5a:	e06f      	b.n	800dd3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00b      	beq.n	800dc80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	7c12      	ldrb	r2, [r2, #16]
 800dc74:	f107 0108 	add.w	r1, r7, #8
 800dc78:	4610      	mov	r0, r2
 800dc7a:	4798      	blx	r3
 800dc7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc7e:	e05d      	b.n	800dd3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fa61 	bl	800e14a <USBD_CtlError>
            err++;
 800dc88:	7afb      	ldrb	r3, [r7, #11]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc8e:	e055      	b.n	800dd3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dc96:	691b      	ldr	r3, [r3, #16]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00b      	beq.n	800dcb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	7c12      	ldrb	r2, [r2, #16]
 800dca8:	f107 0108 	add.w	r1, r7, #8
 800dcac:	4610      	mov	r0, r2
 800dcae:	4798      	blx	r3
 800dcb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcb2:	e043      	b.n	800dd3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcb4:	6839      	ldr	r1, [r7, #0]
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fa47 	bl	800e14a <USBD_CtlError>
            err++;
 800dcbc:	7afb      	ldrb	r3, [r7, #11]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	72fb      	strb	r3, [r7, #11]
          break;
 800dcc2:	e03b      	b.n	800dd3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00b      	beq.n	800dce8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	7c12      	ldrb	r2, [r2, #16]
 800dcdc:	f107 0108 	add.w	r1, r7, #8
 800dce0:	4610      	mov	r0, r2
 800dce2:	4798      	blx	r3
 800dce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dce6:	e029      	b.n	800dd3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fa2d 	bl	800e14a <USBD_CtlError>
            err++;
 800dcf0:	7afb      	ldrb	r3, [r7, #11]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	72fb      	strb	r3, [r7, #11]
          break;
 800dcf6:	e021      	b.n	800dd3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00b      	beq.n	800dd1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dd0a:	699b      	ldr	r3, [r3, #24]
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	7c12      	ldrb	r2, [r2, #16]
 800dd10:	f107 0108 	add.w	r1, r7, #8
 800dd14:	4610      	mov	r0, r2
 800dd16:	4798      	blx	r3
 800dd18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd1a:	e00f      	b.n	800dd3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd1c:	6839      	ldr	r1, [r7, #0]
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fa13 	bl	800e14a <USBD_CtlError>
            err++;
 800dd24:	7afb      	ldrb	r3, [r7, #11]
 800dd26:	3301      	adds	r3, #1
 800dd28:	72fb      	strb	r3, [r7, #11]
          break;
 800dd2a:	e007      	b.n	800dd3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fa0b 	bl	800e14a <USBD_CtlError>
          err++;
 800dd34:	7afb      	ldrb	r3, [r7, #11]
 800dd36:	3301      	adds	r3, #1
 800dd38:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800dd3a:	e038      	b.n	800ddae <USBD_GetDescriptor+0x2da>
 800dd3c:	e037      	b.n	800ddae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	7c1b      	ldrb	r3, [r3, #16]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d109      	bne.n	800dd5a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	f107 0208 	add.w	r2, r7, #8
 800dd52:	4610      	mov	r0, r2
 800dd54:	4798      	blx	r3
 800dd56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd58:	e029      	b.n	800ddae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f9f4 	bl	800e14a <USBD_CtlError>
        err++;
 800dd62:	7afb      	ldrb	r3, [r7, #11]
 800dd64:	3301      	adds	r3, #1
 800dd66:	72fb      	strb	r3, [r7, #11]
      break;
 800dd68:	e021      	b.n	800ddae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	7c1b      	ldrb	r3, [r3, #16]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10d      	bne.n	800dd8e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7a:	f107 0208 	add.w	r2, r7, #8
 800dd7e:	4610      	mov	r0, r2
 800dd80:	4798      	blx	r3
 800dd82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	3301      	adds	r3, #1
 800dd88:	2207      	movs	r2, #7
 800dd8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd8c:	e00f      	b.n	800ddae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f9da 	bl	800e14a <USBD_CtlError>
        err++;
 800dd96:	7afb      	ldrb	r3, [r7, #11]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	72fb      	strb	r3, [r7, #11]
      break;
 800dd9c:	e007      	b.n	800ddae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f9d2 	bl	800e14a <USBD_CtlError>
      err++;
 800dda6:	7afb      	ldrb	r3, [r7, #11]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	72fb      	strb	r3, [r7, #11]
      break;
 800ddac:	bf00      	nop
  }

  if (err != 0U)
 800ddae:	7afb      	ldrb	r3, [r7, #11]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d11c      	bne.n	800ddee <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ddb4:	893b      	ldrh	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d011      	beq.n	800ddde <USBD_GetDescriptor+0x30a>
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	88db      	ldrh	r3, [r3, #6]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00d      	beq.n	800ddde <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	88da      	ldrh	r2, [r3, #6]
 800ddc6:	893b      	ldrh	r3, [r7, #8]
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	bf28      	it	cs
 800ddcc:	4613      	movcs	r3, r2
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ddd2:	893b      	ldrh	r3, [r7, #8]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	68f9      	ldr	r1, [r7, #12]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fa21 	bl	800e220 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	88db      	ldrh	r3, [r3, #6]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d104      	bne.n	800ddf0 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fa78 	bl	800e2dc <USBD_CtlSendStatus>
 800ddec:	e000      	b.n	800ddf0 <USBD_GetDescriptor+0x31c>
    return;
 800ddee:	bf00      	nop
    }
  }
}
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop

0800ddf8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	889b      	ldrh	r3, [r3, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d130      	bne.n	800de6c <USBD_SetAddress+0x74>
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	88db      	ldrh	r3, [r3, #6]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d12c      	bne.n	800de6c <USBD_SetAddress+0x74>
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	2b7f      	cmp	r3, #127	; 0x7f
 800de18:	d828      	bhi.n	800de6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	885b      	ldrh	r3, [r3, #2]
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de2c:	2b03      	cmp	r3, #3
 800de2e:	d104      	bne.n	800de3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 f989 	bl	800e14a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de38:	e01c      	b.n	800de74 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	7bfa      	ldrb	r2, [r7, #15]
 800de3e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 ff3e 	bl	800ecc8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 fa45 	bl	800e2dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d004      	beq.n	800de62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2202      	movs	r2, #2
 800de5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de60:	e008      	b.n	800de74 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2201      	movs	r2, #1
 800de66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de6a:	e003      	b.n	800de74 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de6c:	6839      	ldr	r1, [r7, #0]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 f96b 	bl	800e14a <USBD_CtlError>
  }
}
 800de74:	bf00      	nop
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	885b      	ldrh	r3, [r3, #2]
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	4b41      	ldr	r3, [pc, #260]	; (800df94 <USBD_SetConfig+0x118>)
 800de8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de90:	4b40      	ldr	r3, [pc, #256]	; (800df94 <USBD_SetConfig+0x118>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d904      	bls.n	800dea2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 f955 	bl	800e14a <USBD_CtlError>
 800dea0:	e075      	b.n	800df8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	d002      	beq.n	800deb2 <USBD_SetConfig+0x36>
 800deac:	2b03      	cmp	r3, #3
 800deae:	d023      	beq.n	800def8 <USBD_SetConfig+0x7c>
 800deb0:	e062      	b.n	800df78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800deb2:	4b38      	ldr	r3, [pc, #224]	; (800df94 <USBD_SetConfig+0x118>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d01a      	beq.n	800def0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800deba:	4b36      	ldr	r3, [pc, #216]	; (800df94 <USBD_SetConfig+0x118>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	461a      	mov	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2203      	movs	r2, #3
 800dec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800decc:	4b31      	ldr	r3, [pc, #196]	; (800df94 <USBD_SetConfig+0x118>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff f98b 	bl	800d1ee <USBD_SetClassConfig>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d104      	bne.n	800dee8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f932 	bl	800e14a <USBD_CtlError>
            return;
 800dee6:	e052      	b.n	800df8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f9f7 	bl	800e2dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800deee:	e04e      	b.n	800df8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 f9f3 	bl	800e2dc <USBD_CtlSendStatus>
        break;
 800def6:	e04a      	b.n	800df8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800def8:	4b26      	ldr	r3, [pc, #152]	; (800df94 <USBD_SetConfig+0x118>)
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d112      	bne.n	800df26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2202      	movs	r2, #2
 800df04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800df08:	4b22      	ldr	r3, [pc, #136]	; (800df94 <USBD_SetConfig+0x118>)
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	461a      	mov	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800df12:	4b20      	ldr	r3, [pc, #128]	; (800df94 <USBD_SetConfig+0x118>)
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	4619      	mov	r1, r3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7ff f987 	bl	800d22c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f9dc 	bl	800e2dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800df24:	e033      	b.n	800df8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800df26:	4b1b      	ldr	r3, [pc, #108]	; (800df94 <USBD_SetConfig+0x118>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	461a      	mov	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	429a      	cmp	r2, r3
 800df32:	d01d      	beq.n	800df70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	4619      	mov	r1, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff f975 	bl	800d22c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800df42:	4b14      	ldr	r3, [pc, #80]	; (800df94 <USBD_SetConfig+0x118>)
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	461a      	mov	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800df4c:	4b11      	ldr	r3, [pc, #68]	; (800df94 <USBD_SetConfig+0x118>)
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	4619      	mov	r1, r3
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f7ff f94b 	bl	800d1ee <USBD_SetClassConfig>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d104      	bne.n	800df68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 f8f2 	bl	800e14a <USBD_CtlError>
            return;
 800df66:	e012      	b.n	800df8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 f9b7 	bl	800e2dc <USBD_CtlSendStatus>
        break;
 800df6e:	e00e      	b.n	800df8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 f9b3 	bl	800e2dc <USBD_CtlSendStatus>
        break;
 800df76:	e00a      	b.n	800df8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f8e5 	bl	800e14a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800df80:	4b04      	ldr	r3, [pc, #16]	; (800df94 <USBD_SetConfig+0x118>)
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7ff f950 	bl	800d22c <USBD_ClrClassConfig>
        break;
 800df8c:	bf00      	nop
    }
  }
}
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	20000248 	.word	0x20000248

0800df98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	88db      	ldrh	r3, [r3, #6]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d004      	beq.n	800dfb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f8cc 	bl	800e14a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dfb2:	e021      	b.n	800dff8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	db17      	blt.n	800dfee <USBD_GetConfig+0x56>
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	dd02      	ble.n	800dfc8 <USBD_GetConfig+0x30>
 800dfc2:	2b03      	cmp	r3, #3
 800dfc4:	d00b      	beq.n	800dfde <USBD_GetConfig+0x46>
 800dfc6:	e012      	b.n	800dfee <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 f922 	bl	800e220 <USBD_CtlSendData>
        break;
 800dfdc:	e00c      	b.n	800dff8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f91a 	bl	800e220 <USBD_CtlSendData>
        break;
 800dfec:	e004      	b.n	800dff8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f8aa 	bl	800e14a <USBD_CtlError>
        break;
 800dff6:	bf00      	nop
}
 800dff8:	bf00      	nop
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e010:	3b01      	subs	r3, #1
 800e012:	2b02      	cmp	r3, #2
 800e014:	d81e      	bhi.n	800e054 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	88db      	ldrh	r3, [r3, #6]
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	d004      	beq.n	800e028 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f892 	bl	800e14a <USBD_CtlError>
        break;
 800e026:	e01a      	b.n	800e05e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e034:	2b00      	cmp	r3, #0
 800e036:	d005      	beq.n	800e044 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f043 0202 	orr.w	r2, r3, #2
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	330c      	adds	r3, #12
 800e048:	2202      	movs	r2, #2
 800e04a:	4619      	mov	r1, r3
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f8e7 	bl	800e220 <USBD_CtlSendData>
      break;
 800e052:	e004      	b.n	800e05e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f877 	bl	800e14a <USBD_CtlError>
      break;
 800e05c:	bf00      	nop
  }
}
 800e05e:	bf00      	nop
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b082      	sub	sp, #8
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	885b      	ldrh	r3, [r3, #2]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d106      	bne.n	800e086 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 f92b 	bl	800e2dc <USBD_CtlSendStatus>
  }
}
 800e086:	bf00      	nop
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b082      	sub	sp, #8
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d80b      	bhi.n	800e0bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	885b      	ldrh	r3, [r3, #2]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d10c      	bne.n	800e0c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f911 	bl	800e2dc <USBD_CtlSendStatus>
      }
      break;
 800e0ba:	e004      	b.n	800e0c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f843 	bl	800e14a <USBD_CtlError>
      break;
 800e0c4:	e000      	b.n	800e0c8 <USBD_ClrFeature+0x3a>
      break;
 800e0c6:	bf00      	nop
  }
}
 800e0c8:	bf00      	nop
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	781a      	ldrb	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	785a      	ldrb	r2, [r3, #1]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	3302      	adds	r3, #2
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	3303      	adds	r3, #3
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	021b      	lsls	r3, r3, #8
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	4413      	add	r3, r2
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	3304      	adds	r3, #4
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	3305      	adds	r3, #5
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	b29b      	uxth	r3, r3
 800e116:	021b      	lsls	r3, r3, #8
 800e118:	b29b      	uxth	r3, r3
 800e11a:	4413      	add	r3, r2
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	3306      	adds	r3, #6
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	b29a      	uxth	r2, r3
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	3307      	adds	r3, #7
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	b29b      	uxth	r3, r3
 800e132:	021b      	lsls	r3, r3, #8
 800e134:	b29b      	uxth	r3, r3
 800e136:	4413      	add	r3, r2
 800e138:	b29a      	uxth	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	80da      	strh	r2, [r3, #6]

}
 800e13e:	bf00      	nop
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b082      	sub	sp, #8
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e154:	2180      	movs	r1, #128	; 0x80
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fd1e 	bl	800eb98 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e15c:	2100      	movs	r1, #0
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fd1a 	bl	800eb98 <USBD_LL_StallEP>
}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d032      	beq.n	800e1e8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f000 f834 	bl	800e1f0 <USBD_GetLen>
 800e188:	4603      	mov	r3, r0
 800e18a:	3301      	adds	r3, #1
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	b29a      	uxth	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e196:	7dfb      	ldrb	r3, [r7, #23]
 800e198:	1c5a      	adds	r2, r3, #1
 800e19a:	75fa      	strb	r2, [r7, #23]
 800e19c:	461a      	mov	r2, r3
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	7812      	ldrb	r2, [r2, #0]
 800e1a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e1a8:	7dfb      	ldrb	r3, [r7, #23]
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	75fa      	strb	r2, [r7, #23]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	2203      	movs	r2, #3
 800e1b6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e1b8:	e012      	b.n	800e1e0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	1c5a      	adds	r2, r3, #1
 800e1be:	60fa      	str	r2, [r7, #12]
 800e1c0:	7dfa      	ldrb	r2, [r7, #23]
 800e1c2:	1c51      	adds	r1, r2, #1
 800e1c4:	75f9      	strb	r1, [r7, #23]
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	68ba      	ldr	r2, [r7, #8]
 800e1ca:	440a      	add	r2, r1
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e1d0:	7dfb      	ldrb	r3, [r7, #23]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	75fa      	strb	r2, [r7, #23]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	4413      	add	r3, r2
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1e8      	bne.n	800e1ba <USBD_GetString+0x4e>
    }
  }
}
 800e1e8:	bf00      	nop
 800e1ea:	3718      	adds	r7, #24
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e1fc:	e005      	b.n	800e20a <USBD_GetLen+0x1a>
  {
    len++;
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
 800e200:	3301      	adds	r3, #1
 800e202:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	3301      	adds	r3, #1
 800e208:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1f5      	bne.n	800e1fe <USBD_GetLen+0xe>
  }

  return len;
 800e212:	7bfb      	ldrb	r3, [r7, #15]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	4613      	mov	r3, r2
 800e22c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2202      	movs	r2, #2
 800e232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e236:	88fa      	ldrh	r2, [r7, #6]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e23c:	88fa      	ldrh	r2, [r7, #6]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e242:	88fb      	ldrh	r3, [r7, #6]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	2100      	movs	r1, #0
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f000 fd73 	bl	800ed34 <USBD_LL_Transmit>

  return USBD_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	4613      	mov	r3, r2
 800e264:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e266:	88fb      	ldrh	r3, [r7, #6]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	2100      	movs	r1, #0
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f000 fd61 	bl	800ed34 <USBD_LL_Transmit>

  return USBD_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	4613      	mov	r3, r2
 800e288:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2203      	movs	r2, #3
 800e28e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e292:	88fa      	ldrh	r2, [r7, #6]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e29a:	88fa      	ldrh	r2, [r7, #6]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2a2:	88fb      	ldrh	r3, [r7, #6]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f000 fd7d 	bl	800eda8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2c6:	88fb      	ldrh	r3, [r7, #6]
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f000 fd6b 	bl	800eda8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2204      	movs	r2, #4
 800e2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fd1e 	bl	800ed34 <USBD_LL_Transmit>

  return USBD_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e302:	b580      	push	{r7, lr}
 800e304:	b082      	sub	sp, #8
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2205      	movs	r2, #5
 800e30e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e312:	2300      	movs	r3, #0
 800e314:	2200      	movs	r2, #0
 800e316:	2100      	movs	r1, #0
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fd45 	bl	800eda8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e31e:	2300      	movs	r3, #0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e32c:	2200      	movs	r2, #0
 800e32e:	4912      	ldr	r1, [pc, #72]	; (800e378 <MX_USB_DEVICE_Init+0x50>)
 800e330:	4812      	ldr	r0, [pc, #72]	; (800e37c <MX_USB_DEVICE_Init+0x54>)
 800e332:	f7fe ff00 	bl	800d136 <USBD_Init>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e33c:	f7f4 fbc6 	bl	8002acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e340:	490f      	ldr	r1, [pc, #60]	; (800e380 <MX_USB_DEVICE_Init+0x58>)
 800e342:	480e      	ldr	r0, [pc, #56]	; (800e37c <MX_USB_DEVICE_Init+0x54>)
 800e344:	f7fe ff22 	bl	800d18c <USBD_RegisterClass>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e34e:	f7f4 fbbd 	bl	8002acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e352:	490c      	ldr	r1, [pc, #48]	; (800e384 <MX_USB_DEVICE_Init+0x5c>)
 800e354:	4809      	ldr	r0, [pc, #36]	; (800e37c <MX_USB_DEVICE_Init+0x54>)
 800e356:	f7fe fe7f 	bl	800d058 <USBD_CDC_RegisterInterface>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e360:	f7f4 fbb4 	bl	8002acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e364:	4805      	ldr	r0, [pc, #20]	; (800e37c <MX_USB_DEVICE_Init+0x54>)
 800e366:	f7fe ff2b 	bl	800d1c0 <USBD_Start>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e370:	f7f4 fbac 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e374:	bf00      	nop
 800e376:	bd80      	pop	{r7, pc}
 800e378:	2000012c 	.word	0x2000012c
 800e37c:	20000b6c 	.word	0x20000b6c
 800e380:	20000018 	.word	0x20000018
 800e384:	2000011c 	.word	0x2000011c

0800e388 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e38c:	2200      	movs	r2, #0
 800e38e:	4905      	ldr	r1, [pc, #20]	; (800e3a4 <CDC_Init_FS+0x1c>)
 800e390:	4805      	ldr	r0, [pc, #20]	; (800e3a8 <CDC_Init_FS+0x20>)
 800e392:	f7fe fe78 	bl	800d086 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e396:	4905      	ldr	r1, [pc, #20]	; (800e3ac <CDC_Init_FS+0x24>)
 800e398:	4803      	ldr	r0, [pc, #12]	; (800e3a8 <CDC_Init_FS+0x20>)
 800e39a:	f7fe fe8e 	bl	800d0ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e39e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	20001630 	.word	0x20001630
 800e3a8:	20000b6c 	.word	0x20000b6c
 800e3ac:	20000e30 	.word	0x20000e30

0800e3b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e3b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	6039      	str	r1, [r7, #0]
 800e3ca:	71fb      	strb	r3, [r7, #7]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e3d0:	79fb      	ldrb	r3, [r7, #7]
 800e3d2:	2b23      	cmp	r3, #35	; 0x23
 800e3d4:	d84a      	bhi.n	800e46c <CDC_Control_FS+0xac>
 800e3d6:	a201      	add	r2, pc, #4	; (adr r2, 800e3dc <CDC_Control_FS+0x1c>)
 800e3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3dc:	0800e46d 	.word	0x0800e46d
 800e3e0:	0800e46d 	.word	0x0800e46d
 800e3e4:	0800e46d 	.word	0x0800e46d
 800e3e8:	0800e46d 	.word	0x0800e46d
 800e3ec:	0800e46d 	.word	0x0800e46d
 800e3f0:	0800e46d 	.word	0x0800e46d
 800e3f4:	0800e46d 	.word	0x0800e46d
 800e3f8:	0800e46d 	.word	0x0800e46d
 800e3fc:	0800e46d 	.word	0x0800e46d
 800e400:	0800e46d 	.word	0x0800e46d
 800e404:	0800e46d 	.word	0x0800e46d
 800e408:	0800e46d 	.word	0x0800e46d
 800e40c:	0800e46d 	.word	0x0800e46d
 800e410:	0800e46d 	.word	0x0800e46d
 800e414:	0800e46d 	.word	0x0800e46d
 800e418:	0800e46d 	.word	0x0800e46d
 800e41c:	0800e46d 	.word	0x0800e46d
 800e420:	0800e46d 	.word	0x0800e46d
 800e424:	0800e46d 	.word	0x0800e46d
 800e428:	0800e46d 	.word	0x0800e46d
 800e42c:	0800e46d 	.word	0x0800e46d
 800e430:	0800e46d 	.word	0x0800e46d
 800e434:	0800e46d 	.word	0x0800e46d
 800e438:	0800e46d 	.word	0x0800e46d
 800e43c:	0800e46d 	.word	0x0800e46d
 800e440:	0800e46d 	.word	0x0800e46d
 800e444:	0800e46d 	.word	0x0800e46d
 800e448:	0800e46d 	.word	0x0800e46d
 800e44c:	0800e46d 	.word	0x0800e46d
 800e450:	0800e46d 	.word	0x0800e46d
 800e454:	0800e46d 	.word	0x0800e46d
 800e458:	0800e46d 	.word	0x0800e46d
 800e45c:	0800e46d 	.word	0x0800e46d
 800e460:	0800e46d 	.word	0x0800e46d
 800e464:	0800e46d 	.word	0x0800e46d
 800e468:	0800e46d 	.word	0x0800e46d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e46c:	bf00      	nop
  }

  return (USBD_OK);
 800e46e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e470:	4618      	mov	r0, r3
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e486:	6879      	ldr	r1, [r7, #4]
 800e488:	4805      	ldr	r0, [pc, #20]	; (800e4a0 <CDC_Receive_FS+0x24>)
 800e48a:	f7fe fe16 	bl	800d0ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e48e:	4804      	ldr	r0, [pc, #16]	; (800e4a0 <CDC_Receive_FS+0x24>)
 800e490:	f7fe fe27 	bl	800d0e2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e494:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	20000b6c 	.word	0x20000b6c

0800e4a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	6039      	str	r1, [r7, #0]
 800e4ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2212      	movs	r2, #18
 800e4b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e4b6:	4b03      	ldr	r3, [pc, #12]	; (800e4c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	2000014c 	.word	0x2000014c

0800e4c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	6039      	str	r1, [r7, #0]
 800e4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	2204      	movs	r2, #4
 800e4d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e4da:	4b03      	ldr	r3, [pc, #12]	; (800e4e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr
 800e4e8:	2000016c 	.word	0x2000016c

0800e4ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	6039      	str	r1, [r7, #0]
 800e4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d105      	bne.n	800e50a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	4907      	ldr	r1, [pc, #28]	; (800e520 <USBD_FS_ProductStrDescriptor+0x34>)
 800e502:	4808      	ldr	r0, [pc, #32]	; (800e524 <USBD_FS_ProductStrDescriptor+0x38>)
 800e504:	f7ff fe32 	bl	800e16c <USBD_GetString>
 800e508:	e004      	b.n	800e514 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	4904      	ldr	r1, [pc, #16]	; (800e520 <USBD_FS_ProductStrDescriptor+0x34>)
 800e50e:	4805      	ldr	r0, [pc, #20]	; (800e524 <USBD_FS_ProductStrDescriptor+0x38>)
 800e510:	f7ff fe2c 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e514:	4b02      	ldr	r3, [pc, #8]	; (800e520 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e516:	4618      	mov	r0, r3
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	20001e30 	.word	0x20001e30
 800e524:	08011874 	.word	0x08011874

0800e528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	4603      	mov	r3, r0
 800e530:	6039      	str	r1, [r7, #0]
 800e532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	4904      	ldr	r1, [pc, #16]	; (800e548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e538:	4804      	ldr	r0, [pc, #16]	; (800e54c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e53a:	f7ff fe17 	bl	800e16c <USBD_GetString>
  return USBD_StrDesc;
 800e53e:	4b02      	ldr	r3, [pc, #8]	; (800e548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e540:	4618      	mov	r0, r3
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	20001e30 	.word	0x20001e30
 800e54c:	0801188c 	.word	0x0801188c

0800e550 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	221a      	movs	r2, #26
 800e560:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e562:	f000 f855 	bl	800e610 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e566:	4b02      	ldr	r3, [pc, #8]	; (800e570 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20000170 	.word	0x20000170

0800e574 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	6039      	str	r1, [r7, #0]
 800e57e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e580:	79fb      	ldrb	r3, [r7, #7]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d105      	bne.n	800e592 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	4907      	ldr	r1, [pc, #28]	; (800e5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e58a:	4808      	ldr	r0, [pc, #32]	; (800e5ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e58c:	f7ff fdee 	bl	800e16c <USBD_GetString>
 800e590:	e004      	b.n	800e59c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	4904      	ldr	r1, [pc, #16]	; (800e5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e596:	4805      	ldr	r0, [pc, #20]	; (800e5ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e598:	f7ff fde8 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e59c:	4b02      	ldr	r3, [pc, #8]	; (800e5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20001e30 	.word	0x20001e30
 800e5ac:	080118a0 	.word	0x080118a0

0800e5b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	6039      	str	r1, [r7, #0]
 800e5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5bc:	79fb      	ldrb	r3, [r7, #7]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d105      	bne.n	800e5ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	4907      	ldr	r1, [pc, #28]	; (800e5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e5c6:	4808      	ldr	r0, [pc, #32]	; (800e5e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e5c8:	f7ff fdd0 	bl	800e16c <USBD_GetString>
 800e5cc:	e004      	b.n	800e5d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	4904      	ldr	r1, [pc, #16]	; (800e5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e5d2:	4805      	ldr	r0, [pc, #20]	; (800e5e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e5d4:	f7ff fdca 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5d8:	4b02      	ldr	r3, [pc, #8]	; (800e5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3708      	adds	r7, #8
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20001e30 	.word	0x20001e30
 800e5e8:	080118ac 	.word	0x080118ac

0800e5ec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	6039      	str	r1, [r7, #0]
 800e5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	220c      	movs	r2, #12
 800e5fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e5fe:	4b03      	ldr	r3, [pc, #12]	; (800e60c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	20000160 	.word	0x20000160

0800e610 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e616:	4b0f      	ldr	r3, [pc, #60]	; (800e654 <Get_SerialNum+0x44>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e61c:	4b0e      	ldr	r3, [pc, #56]	; (800e658 <Get_SerialNum+0x48>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e622:	4b0e      	ldr	r3, [pc, #56]	; (800e65c <Get_SerialNum+0x4c>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e628:	68fa      	ldr	r2, [r7, #12]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4413      	add	r3, r2
 800e62e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d009      	beq.n	800e64a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e636:	2208      	movs	r2, #8
 800e638:	4909      	ldr	r1, [pc, #36]	; (800e660 <Get_SerialNum+0x50>)
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 f814 	bl	800e668 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e640:	2204      	movs	r2, #4
 800e642:	4908      	ldr	r1, [pc, #32]	; (800e664 <Get_SerialNum+0x54>)
 800e644:	68b8      	ldr	r0, [r7, #8]
 800e646:	f000 f80f 	bl	800e668 <IntToUnicode>
  }
}
 800e64a:	bf00      	nop
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	1fff7590 	.word	0x1fff7590
 800e658:	1fff7594 	.word	0x1fff7594
 800e65c:	1fff7598 	.word	0x1fff7598
 800e660:	20000172 	.word	0x20000172
 800e664:	20000182 	.word	0x20000182

0800e668 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e668:	b480      	push	{r7}
 800e66a:	b087      	sub	sp, #28
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	4613      	mov	r3, r2
 800e674:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e67a:	2300      	movs	r3, #0
 800e67c:	75fb      	strb	r3, [r7, #23]
 800e67e:	e027      	b.n	800e6d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	0f1b      	lsrs	r3, r3, #28
 800e684:	2b09      	cmp	r3, #9
 800e686:	d80b      	bhi.n	800e6a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	0f1b      	lsrs	r3, r3, #28
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	7dfb      	ldrb	r3, [r7, #23]
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	4619      	mov	r1, r3
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	440b      	add	r3, r1
 800e698:	3230      	adds	r2, #48	; 0x30
 800e69a:	b2d2      	uxtb	r2, r2
 800e69c:	701a      	strb	r2, [r3, #0]
 800e69e:	e00a      	b.n	800e6b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	0f1b      	lsrs	r3, r3, #28
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	7dfb      	ldrb	r3, [r7, #23]
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	440b      	add	r3, r1
 800e6b0:	3237      	adds	r2, #55	; 0x37
 800e6b2:	b2d2      	uxtb	r2, r2
 800e6b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	011b      	lsls	r3, r3, #4
 800e6ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e6bc:	7dfb      	ldrb	r3, [r7, #23]
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	75fb      	strb	r3, [r7, #23]
 800e6d0:	7dfa      	ldrb	r2, [r7, #23]
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d3d3      	bcc.n	800e680 <IntToUnicode+0x18>
  }
}
 800e6d8:	bf00      	nop
 800e6da:	371c      	adds	r7, #28
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b08a      	sub	sp, #40	; 0x28
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6ec:	f107 0314 	add.w	r3, r7, #20
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	605a      	str	r2, [r3, #4]
 800e6f6:	609a      	str	r2, [r3, #8]
 800e6f8:	60da      	str	r2, [r3, #12]
 800e6fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e704:	d14e      	bne.n	800e7a4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e706:	4b29      	ldr	r3, [pc, #164]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e70a:	4a28      	ldr	r2, [pc, #160]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e70c:	f043 0301 	orr.w	r3, r3, #1
 800e710:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e712:	4b26      	ldr	r3, [pc, #152]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	613b      	str	r3, [r7, #16]
 800e71c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800e71e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e724:	2302      	movs	r3, #2
 800e726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e728:	2300      	movs	r3, #0
 800e72a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e72c:	2303      	movs	r3, #3
 800e72e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e730:	230a      	movs	r3, #10
 800e732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e734:	f107 0314 	add.w	r3, r7, #20
 800e738:	4619      	mov	r1, r3
 800e73a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e73e:	f7f6 fabd 	bl	8004cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e742:	4b1a      	ldr	r3, [pc, #104]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e746:	4a19      	ldr	r2, [pc, #100]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e74c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e74e:	4b17      	ldr	r3, [pc, #92]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e756:	60fb      	str	r3, [r7, #12]
 800e758:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e75a:	4b14      	ldr	r3, [pc, #80]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e75e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e762:	2b00      	cmp	r3, #0
 800e764:	d114      	bne.n	800e790 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e766:	4b11      	ldr	r3, [pc, #68]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e76a:	4a10      	ldr	r2, [pc, #64]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e76c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e770:	6593      	str	r3, [r2, #88]	; 0x58
 800e772:	4b0e      	ldr	r3, [pc, #56]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e77a:	60bb      	str	r3, [r7, #8]
 800e77c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800e77e:	f7f8 fb6b 	bl	8006e58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e782:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e786:	4a09      	ldr	r2, [pc, #36]	; (800e7ac <HAL_PCD_MspInit+0xc8>)
 800e788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e78c:	6593      	str	r3, [r2, #88]	; 0x58
 800e78e:	e001      	b.n	800e794 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e790:	f7f8 fb62 	bl	8006e58 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e794:	2200      	movs	r2, #0
 800e796:	2100      	movs	r1, #0
 800e798:	2043      	movs	r0, #67	; 0x43
 800e79a:	f7f6 f8c6 	bl	800492a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e79e:	2043      	movs	r0, #67	; 0x43
 800e7a0:	f7f6 f8df 	bl	8004962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e7a4:	bf00      	nop
 800e7a6:	3728      	adds	r7, #40	; 0x28
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	40021000 	.word	0x40021000

0800e7b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	f7fe fd43 	bl	800d252 <USBD_LL_SetupStage>
}
 800e7cc:	bf00      	nop
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e7e6:	78fa      	ldrb	r2, [r7, #3]
 800e7e8:	6879      	ldr	r1, [r7, #4]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	00db      	lsls	r3, r3, #3
 800e7ee:	1a9b      	subs	r3, r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	440b      	add	r3, r1
 800e7f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	78fb      	ldrb	r3, [r7, #3]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	f7fe fd73 	bl	800d2e8 <USBD_LL_DataOutStage>
}
 800e802:	bf00      	nop
 800e804:	3708      	adds	r7, #8
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b082      	sub	sp, #8
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
 800e812:	460b      	mov	r3, r1
 800e814:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e81c:	78fa      	ldrb	r2, [r7, #3]
 800e81e:	6879      	ldr	r1, [r7, #4]
 800e820:	4613      	mov	r3, r2
 800e822:	00db      	lsls	r3, r3, #3
 800e824:	1a9b      	subs	r3, r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	440b      	add	r3, r1
 800e82a:	3348      	adds	r3, #72	; 0x48
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	78fb      	ldrb	r3, [r7, #3]
 800e830:	4619      	mov	r1, r3
 800e832:	f7fe fdca 	bl	800d3ca <USBD_LL_DataInStage>
}
 800e836:	bf00      	nop
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b082      	sub	sp, #8
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fe fedd 	bl	800d60c <USBD_LL_SOF>
}
 800e852:	bf00      	nop
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b084      	sub	sp, #16
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e862:	2301      	movs	r3, #1
 800e864:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d001      	beq.n	800e872 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e86e:	f7f4 f92d 	bl	8002acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e878:	7bfa      	ldrb	r2, [r7, #15]
 800e87a:	4611      	mov	r1, r2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe fe8a 	bl	800d596 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fe fe43 	bl	800d514 <USBD_LL_Reset>
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
	...

0800e898 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	6812      	ldr	r2, [r2, #0]
 800e8ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8b2:	f043 0301 	orr.w	r3, r3, #1
 800e8b6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fe fe79 	bl	800d5b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6a1b      	ldr	r3, [r3, #32]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d005      	beq.n	800e8d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8cc:	4b04      	ldr	r3, [pc, #16]	; (800e8e0 <HAL_PCD_SuspendCallback+0x48>)
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	4a03      	ldr	r2, [pc, #12]	; (800e8e0 <HAL_PCD_SuspendCallback+0x48>)
 800e8d2:	f043 0306 	orr.w	r3, r3, #6
 800e8d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e8d8:	bf00      	nop
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	e000ed00 	.word	0xe000ed00

0800e8e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	6812      	ldr	r2, [r2, #0]
 800e8fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8fe:	f023 0301 	bic.w	r3, r3, #1
 800e902:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a1b      	ldr	r3, [r3, #32]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d007      	beq.n	800e91c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e90c:	4b08      	ldr	r3, [pc, #32]	; (800e930 <HAL_PCD_ResumeCallback+0x4c>)
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	4a07      	ldr	r2, [pc, #28]	; (800e930 <HAL_PCD_ResumeCallback+0x4c>)
 800e912:	f023 0306 	bic.w	r3, r3, #6
 800e916:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e918:	f000 fafa 	bl	800ef10 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e922:	4618      	mov	r0, r3
 800e924:	f7fe fe5c 	bl	800d5e0 <USBD_LL_Resume>
}
 800e928:	bf00      	nop
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	e000ed00 	.word	0xe000ed00

0800e934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	460b      	mov	r3, r1
 800e93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e946:	78fa      	ldrb	r2, [r7, #3]
 800e948:	4611      	mov	r1, r2
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe fe85 	bl	800d65a <USBD_LL_IsoOUTIncomplete>
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	460b      	mov	r3, r1
 800e962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e96a:	78fa      	ldrb	r2, [r7, #3]
 800e96c:	4611      	mov	r1, r2
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fe fe66 	bl	800d640 <USBD_LL_IsoINIncomplete>
}
 800e974:	bf00      	nop
 800e976:	3708      	adds	r7, #8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe fe72 	bl	800d674 <USBD_LL_DevConnected>
}
 800e990:	bf00      	nop
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fe fe6f 	bl	800d68a <USBD_LL_DevDisconnected>
}
 800e9ac:	bf00      	nop
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d13c      	bne.n	800ea3e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e9c4:	4a20      	ldr	r2, [pc, #128]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a1e      	ldr	r2, [pc, #120]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e9d4:	4b1c      	ldr	r3, [pc, #112]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e9da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9de:	2206      	movs	r2, #6
 800e9e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e9e2:	4b19      	ldr	r3, [pc, #100]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9e4:	2202      	movs	r2, #2
 800e9e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e9e8:	4b17      	ldr	r3, [pc, #92]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e9ee:	4b16      	ldr	r3, [pc, #88]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e9f4:	4b14      	ldr	r3, [pc, #80]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e9fa:	4b13      	ldr	r3, [pc, #76]	; (800ea48 <USBD_LL_Init+0x94>)
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ea00:	4b11      	ldr	r3, [pc, #68]	; (800ea48 <USBD_LL_Init+0x94>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ea06:	4b10      	ldr	r3, [pc, #64]	; (800ea48 <USBD_LL_Init+0x94>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ea0c:	4b0e      	ldr	r3, [pc, #56]	; (800ea48 <USBD_LL_Init+0x94>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ea12:	480d      	ldr	r0, [pc, #52]	; (800ea48 <USBD_LL_Init+0x94>)
 800ea14:	f7f7 f90d 	bl	8005c32 <HAL_PCD_Init>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d001      	beq.n	800ea22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ea1e:	f7f4 f855 	bl	8002acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ea22:	2180      	movs	r1, #128	; 0x80
 800ea24:	4808      	ldr	r0, [pc, #32]	; (800ea48 <USBD_LL_Init+0x94>)
 800ea26:	f7f8 f96e 	bl	8006d06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ea2a:	2240      	movs	r2, #64	; 0x40
 800ea2c:	2100      	movs	r1, #0
 800ea2e:	4806      	ldr	r0, [pc, #24]	; (800ea48 <USBD_LL_Init+0x94>)
 800ea30:	f7f8 f922 	bl	8006c78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ea34:	2280      	movs	r2, #128	; 0x80
 800ea36:	2101      	movs	r1, #1
 800ea38:	4803      	ldr	r0, [pc, #12]	; (800ea48 <USBD_LL_Init+0x94>)
 800ea3a:	f7f8 f91d 	bl	8006c78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20002030 	.word	0x20002030

0800ea4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea54:	2300      	movs	r3, #0
 800ea56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7f7 fa09 	bl	8005e7a <HAL_PCD_Start>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ea6c:	7bbb      	ldrb	r3, [r7, #14]
 800ea6e:	2b03      	cmp	r3, #3
 800ea70:	d816      	bhi.n	800eaa0 <USBD_LL_Start+0x54>
 800ea72:	a201      	add	r2, pc, #4	; (adr r2, 800ea78 <USBD_LL_Start+0x2c>)
 800ea74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea78:	0800ea89 	.word	0x0800ea89
 800ea7c:	0800ea8f 	.word	0x0800ea8f
 800ea80:	0800ea95 	.word	0x0800ea95
 800ea84:	0800ea9b 	.word	0x0800ea9b
    case HAL_OK :
      usb_status = USBD_OK;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea8c:	e00b      	b.n	800eaa6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea8e:	2302      	movs	r3, #2
 800ea90:	73fb      	strb	r3, [r7, #15]
    break;
 800ea92:	e008      	b.n	800eaa6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea94:	2301      	movs	r3, #1
 800ea96:	73fb      	strb	r3, [r7, #15]
    break;
 800ea98:	e005      	b.n	800eaa6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea9a:	2302      	movs	r3, #2
 800ea9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea9e:	e002      	b.n	800eaa6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa4:	bf00      	nop
  }
  return usb_status;
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	4608      	mov	r0, r1
 800eaba:	4611      	mov	r1, r2
 800eabc:	461a      	mov	r2, r3
 800eabe:	4603      	mov	r3, r0
 800eac0:	70fb      	strb	r3, [r7, #3]
 800eac2:	460b      	mov	r3, r1
 800eac4:	70bb      	strb	r3, [r7, #2]
 800eac6:	4613      	mov	r3, r2
 800eac8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaca:	2300      	movs	r3, #0
 800eacc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eace:	2300      	movs	r3, #0
 800ead0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ead8:	78bb      	ldrb	r3, [r7, #2]
 800eada:	883a      	ldrh	r2, [r7, #0]
 800eadc:	78f9      	ldrb	r1, [r7, #3]
 800eade:	f7f7 fdc4 	bl	800666a <HAL_PCD_EP_Open>
 800eae2:	4603      	mov	r3, r0
 800eae4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
 800eae8:	2b03      	cmp	r3, #3
 800eaea:	d817      	bhi.n	800eb1c <USBD_LL_OpenEP+0x6c>
 800eaec:	a201      	add	r2, pc, #4	; (adr r2, 800eaf4 <USBD_LL_OpenEP+0x44>)
 800eaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf2:	bf00      	nop
 800eaf4:	0800eb05 	.word	0x0800eb05
 800eaf8:	0800eb0b 	.word	0x0800eb0b
 800eafc:	0800eb11 	.word	0x0800eb11
 800eb00:	0800eb17 	.word	0x0800eb17
    case HAL_OK :
      usb_status = USBD_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	73fb      	strb	r3, [r7, #15]
    break;
 800eb08:	e00b      	b.n	800eb22 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb0e:	e008      	b.n	800eb22 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb10:	2301      	movs	r3, #1
 800eb12:	73fb      	strb	r3, [r7, #15]
    break;
 800eb14:	e005      	b.n	800eb22 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb16:	2302      	movs	r3, #2
 800eb18:	73fb      	strb	r3, [r7, #15]
    break;
 800eb1a:	e002      	b.n	800eb22 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb20:	bf00      	nop
  }
  return usb_status;
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb46:	78fa      	ldrb	r2, [r7, #3]
 800eb48:	4611      	mov	r1, r2
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7f7 fdf5 	bl	800673a <HAL_PCD_EP_Close>
 800eb50:	4603      	mov	r3, r0
 800eb52:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800eb54:	7bbb      	ldrb	r3, [r7, #14]
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d816      	bhi.n	800eb88 <USBD_LL_CloseEP+0x5c>
 800eb5a:	a201      	add	r2, pc, #4	; (adr r2, 800eb60 <USBD_LL_CloseEP+0x34>)
 800eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb60:	0800eb71 	.word	0x0800eb71
 800eb64:	0800eb77 	.word	0x0800eb77
 800eb68:	0800eb7d 	.word	0x0800eb7d
 800eb6c:	0800eb83 	.word	0x0800eb83
    case HAL_OK :
      usb_status = USBD_OK;
 800eb70:	2300      	movs	r3, #0
 800eb72:	73fb      	strb	r3, [r7, #15]
    break;
 800eb74:	e00b      	b.n	800eb8e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb76:	2302      	movs	r3, #2
 800eb78:	73fb      	strb	r3, [r7, #15]
    break;
 800eb7a:	e008      	b.n	800eb8e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb80:	e005      	b.n	800eb8e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb82:	2302      	movs	r3, #2
 800eb84:	73fb      	strb	r3, [r7, #15]
    break;
 800eb86:	e002      	b.n	800eb8e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb88:	2302      	movs	r3, #2
 800eb8a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb8c:	bf00      	nop
  }
  return usb_status;  
 800eb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebb2:	78fa      	ldrb	r2, [r7, #3]
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7f7 fe9c 	bl	80068f4 <HAL_PCD_EP_SetStall>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ebc0:	7bbb      	ldrb	r3, [r7, #14]
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	d816      	bhi.n	800ebf4 <USBD_LL_StallEP+0x5c>
 800ebc6:	a201      	add	r2, pc, #4	; (adr r2, 800ebcc <USBD_LL_StallEP+0x34>)
 800ebc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebcc:	0800ebdd 	.word	0x0800ebdd
 800ebd0:	0800ebe3 	.word	0x0800ebe3
 800ebd4:	0800ebe9 	.word	0x0800ebe9
 800ebd8:	0800ebef 	.word	0x0800ebef
    case HAL_OK :
      usb_status = USBD_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe0:	e00b      	b.n	800ebfa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebe2:	2302      	movs	r3, #2
 800ebe4:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe6:	e008      	b.n	800ebfa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	73fb      	strb	r3, [r7, #15]
    break;
 800ebec:	e005      	b.n	800ebfa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebee:	2302      	movs	r3, #2
 800ebf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf2:	e002      	b.n	800ebfa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf8:	bf00      	nop
  }
  return usb_status;  
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec10:	2300      	movs	r3, #0
 800ec12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec14:	2300      	movs	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec1e:	78fa      	ldrb	r2, [r7, #3]
 800ec20:	4611      	mov	r1, r2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f7 fec8 	bl	80069b8 <HAL_PCD_EP_ClrStall>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	d816      	bhi.n	800ec60 <USBD_LL_ClearStallEP+0x5c>
 800ec32:	a201      	add	r2, pc, #4	; (adr r2, 800ec38 <USBD_LL_ClearStallEP+0x34>)
 800ec34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec38:	0800ec49 	.word	0x0800ec49
 800ec3c:	0800ec4f 	.word	0x0800ec4f
 800ec40:	0800ec55 	.word	0x0800ec55
 800ec44:	0800ec5b 	.word	0x0800ec5b
    case HAL_OK :
      usb_status = USBD_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec4c:	e00b      	b.n	800ec66 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec4e:	2302      	movs	r3, #2
 800ec50:	73fb      	strb	r3, [r7, #15]
    break;
 800ec52:	e008      	b.n	800ec66 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec54:	2301      	movs	r3, #1
 800ec56:	73fb      	strb	r3, [r7, #15]
    break;
 800ec58:	e005      	b.n	800ec66 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec5a:	2302      	movs	r3, #2
 800ec5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5e:	e002      	b.n	800ec66 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ec60:	2302      	movs	r3, #2
 800ec62:	73fb      	strb	r3, [r7, #15]
    break;
 800ec64:	bf00      	nop
  }
  return usb_status; 
 800ec66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec82:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800ec84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	da0b      	bge.n	800eca4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec92:	68f9      	ldr	r1, [r7, #12]
 800ec94:	4613      	mov	r3, r2
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	1a9b      	subs	r3, r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	440b      	add	r3, r1
 800ec9e:	333e      	adds	r3, #62	; 0x3e
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	e00b      	b.n	800ecbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800eca4:	78fb      	ldrb	r3, [r7, #3]
 800eca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecaa:	68f9      	ldr	r1, [r7, #12]
 800ecac:	4613      	mov	r3, r2
 800ecae:	00db      	lsls	r3, r3, #3
 800ecb0:	1a9b      	subs	r3, r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	440b      	add	r3, r1
 800ecb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ecba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ece2:	78fa      	ldrb	r2, [r7, #3]
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7f7 fc9a 	bl	8006620 <HAL_PCD_SetAddress>
 800ecec:	4603      	mov	r3, r0
 800ecee:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ecf0:	7bbb      	ldrb	r3, [r7, #14]
 800ecf2:	2b03      	cmp	r3, #3
 800ecf4:	d816      	bhi.n	800ed24 <USBD_LL_SetUSBAddress+0x5c>
 800ecf6:	a201      	add	r2, pc, #4	; (adr r2, 800ecfc <USBD_LL_SetUSBAddress+0x34>)
 800ecf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfc:	0800ed0d 	.word	0x0800ed0d
 800ed00:	0800ed13 	.word	0x0800ed13
 800ed04:	0800ed19 	.word	0x0800ed19
 800ed08:	0800ed1f 	.word	0x0800ed1f
    case HAL_OK :
      usb_status = USBD_OK;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed10:	e00b      	b.n	800ed2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed12:	2302      	movs	r3, #2
 800ed14:	73fb      	strb	r3, [r7, #15]
    break;
 800ed16:	e008      	b.n	800ed2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed1c:	e005      	b.n	800ed2a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed1e:	2302      	movs	r3, #2
 800ed20:	73fb      	strb	r3, [r7, #15]
    break;
 800ed22:	e002      	b.n	800ed2a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed24:	2302      	movs	r3, #2
 800ed26:	73fb      	strb	r3, [r7, #15]
    break;
 800ed28:	bf00      	nop
  }
  return usb_status;  
 800ed2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	607a      	str	r2, [r7, #4]
 800ed3e:	461a      	mov	r2, r3
 800ed40:	460b      	mov	r3, r1
 800ed42:	72fb      	strb	r3, [r7, #11]
 800ed44:	4613      	mov	r3, r2
 800ed46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ed56:	893b      	ldrh	r3, [r7, #8]
 800ed58:	7af9      	ldrb	r1, [r7, #11]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	f7f7 fd8d 	bl	800687a <HAL_PCD_EP_Transmit>
 800ed60:	4603      	mov	r3, r0
 800ed62:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ed64:	7dbb      	ldrb	r3, [r7, #22]
 800ed66:	2b03      	cmp	r3, #3
 800ed68:	d816      	bhi.n	800ed98 <USBD_LL_Transmit+0x64>
 800ed6a:	a201      	add	r2, pc, #4	; (adr r2, 800ed70 <USBD_LL_Transmit+0x3c>)
 800ed6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed70:	0800ed81 	.word	0x0800ed81
 800ed74:	0800ed87 	.word	0x0800ed87
 800ed78:	0800ed8d 	.word	0x0800ed8d
 800ed7c:	0800ed93 	.word	0x0800ed93
    case HAL_OK :
      usb_status = USBD_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	75fb      	strb	r3, [r7, #23]
    break;
 800ed84:	e00b      	b.n	800ed9e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed86:	2302      	movs	r3, #2
 800ed88:	75fb      	strb	r3, [r7, #23]
    break;
 800ed8a:	e008      	b.n	800ed9e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	75fb      	strb	r3, [r7, #23]
    break;
 800ed90:	e005      	b.n	800ed9e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed92:	2302      	movs	r3, #2
 800ed94:	75fb      	strb	r3, [r7, #23]
    break;
 800ed96:	e002      	b.n	800ed9e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ed98:	2302      	movs	r3, #2
 800ed9a:	75fb      	strb	r3, [r7, #23]
    break;
 800ed9c:	bf00      	nop
  }
  return usb_status;    
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	607a      	str	r2, [r7, #4]
 800edb2:	461a      	mov	r2, r3
 800edb4:	460b      	mov	r3, r1
 800edb6:	72fb      	strb	r3, [r7, #11]
 800edb8:	4613      	mov	r3, r2
 800edba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edc0:	2300      	movs	r3, #0
 800edc2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800edca:	893b      	ldrh	r3, [r7, #8]
 800edcc:	7af9      	ldrb	r1, [r7, #11]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	f7f7 fcfd 	bl	80067ce <HAL_PCD_EP_Receive>
 800edd4:	4603      	mov	r3, r0
 800edd6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800edd8:	7dbb      	ldrb	r3, [r7, #22]
 800edda:	2b03      	cmp	r3, #3
 800eddc:	d816      	bhi.n	800ee0c <USBD_LL_PrepareReceive+0x64>
 800edde:	a201      	add	r2, pc, #4	; (adr r2, 800ede4 <USBD_LL_PrepareReceive+0x3c>)
 800ede0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede4:	0800edf5 	.word	0x0800edf5
 800ede8:	0800edfb 	.word	0x0800edfb
 800edec:	0800ee01 	.word	0x0800ee01
 800edf0:	0800ee07 	.word	0x0800ee07
    case HAL_OK :
      usb_status = USBD_OK;
 800edf4:	2300      	movs	r3, #0
 800edf6:	75fb      	strb	r3, [r7, #23]
    break;
 800edf8:	e00b      	b.n	800ee12 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edfa:	2302      	movs	r3, #2
 800edfc:	75fb      	strb	r3, [r7, #23]
    break;
 800edfe:	e008      	b.n	800ee12 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee00:	2301      	movs	r3, #1
 800ee02:	75fb      	strb	r3, [r7, #23]
    break;
 800ee04:	e005      	b.n	800ee12 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee06:	2302      	movs	r3, #2
 800ee08:	75fb      	strb	r3, [r7, #23]
    break;
 800ee0a:	e002      	b.n	800ee12 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	75fb      	strb	r3, [r7, #23]
    break;
 800ee10:	bf00      	nop
  }
  return usb_status; 
 800ee12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	460b      	mov	r3, r1
 800ee26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee2e:	78fa      	ldrb	r2, [r7, #3]
 800ee30:	4611      	mov	r1, r2
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7f7 fd09 	bl	800684a <HAL_PCD_EP_GetRxCount>
 800ee38:	4603      	mov	r3, r0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
	...

0800ee44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ee50:	78fb      	ldrb	r3, [r7, #3]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d002      	beq.n	800ee5c <HAL_PCDEx_LPM_Callback+0x18>
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d01f      	beq.n	800ee9a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800ee5a:	e03b      	b.n	800eed4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a1b      	ldr	r3, [r3, #32]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d007      	beq.n	800ee74 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ee64:	f000 f854 	bl	800ef10 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee68:	4b1c      	ldr	r3, [pc, #112]	; (800eedc <HAL_PCDEx_LPM_Callback+0x98>)
 800ee6a:	691b      	ldr	r3, [r3, #16]
 800ee6c:	4a1b      	ldr	r2, [pc, #108]	; (800eedc <HAL_PCDEx_LPM_Callback+0x98>)
 800ee6e:	f023 0306 	bic.w	r3, r3, #6
 800ee72:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	6812      	ldr	r2, [r2, #0]
 800ee82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee86:	f023 0301 	bic.w	r3, r3, #1
 800ee8a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe fba4 	bl	800d5e0 <USBD_LL_Resume>
    break;
 800ee98:	e01c      	b.n	800eed4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	6812      	ldr	r2, [r2, #0]
 800eea8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eeac:	f043 0301 	orr.w	r3, r3, #1
 800eeb0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fe fb7c 	bl	800d5b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d005      	beq.n	800eed2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eec6:	4b05      	ldr	r3, [pc, #20]	; (800eedc <HAL_PCDEx_LPM_Callback+0x98>)
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	4a04      	ldr	r2, [pc, #16]	; (800eedc <HAL_PCDEx_LPM_Callback+0x98>)
 800eecc:	f043 0306 	orr.w	r3, r3, #6
 800eed0:	6113      	str	r3, [r2, #16]
    break;   
 800eed2:	bf00      	nop
}
 800eed4:	bf00      	nop
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	e000ed00 	.word	0xe000ed00

0800eee0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eee8:	4b03      	ldr	r3, [pc, #12]	; (800eef8 <USBD_static_malloc+0x18>)
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	2000024c 	.word	0x2000024c

0800eefc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]

}
 800ef04:	bf00      	nop
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ef14:	f7f2 fe94 	bl	8001c40 <SystemClock_Config>
}
 800ef18:	bf00      	nop
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <__errno>:
 800ef1c:	4b01      	ldr	r3, [pc, #4]	; (800ef24 <__errno+0x8>)
 800ef1e:	6818      	ldr	r0, [r3, #0]
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	2000018c 	.word	0x2000018c

0800ef28 <__libc_init_array>:
 800ef28:	b570      	push	{r4, r5, r6, lr}
 800ef2a:	4e0d      	ldr	r6, [pc, #52]	; (800ef60 <__libc_init_array+0x38>)
 800ef2c:	4c0d      	ldr	r4, [pc, #52]	; (800ef64 <__libc_init_array+0x3c>)
 800ef2e:	1ba4      	subs	r4, r4, r6
 800ef30:	10a4      	asrs	r4, r4, #2
 800ef32:	2500      	movs	r5, #0
 800ef34:	42a5      	cmp	r5, r4
 800ef36:	d109      	bne.n	800ef4c <__libc_init_array+0x24>
 800ef38:	4e0b      	ldr	r6, [pc, #44]	; (800ef68 <__libc_init_array+0x40>)
 800ef3a:	4c0c      	ldr	r4, [pc, #48]	; (800ef6c <__libc_init_array+0x44>)
 800ef3c:	f002 fc64 	bl	8011808 <_init>
 800ef40:	1ba4      	subs	r4, r4, r6
 800ef42:	10a4      	asrs	r4, r4, #2
 800ef44:	2500      	movs	r5, #0
 800ef46:	42a5      	cmp	r5, r4
 800ef48:	d105      	bne.n	800ef56 <__libc_init_array+0x2e>
 800ef4a:	bd70      	pop	{r4, r5, r6, pc}
 800ef4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef50:	4798      	blx	r3
 800ef52:	3501      	adds	r5, #1
 800ef54:	e7ee      	b.n	800ef34 <__libc_init_array+0xc>
 800ef56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef5a:	4798      	blx	r3
 800ef5c:	3501      	adds	r5, #1
 800ef5e:	e7f2      	b.n	800ef46 <__libc_init_array+0x1e>
 800ef60:	08011a10 	.word	0x08011a10
 800ef64:	08011a10 	.word	0x08011a10
 800ef68:	08011a10 	.word	0x08011a10
 800ef6c:	08011a14 	.word	0x08011a14

0800ef70 <memset>:
 800ef70:	4402      	add	r2, r0
 800ef72:	4603      	mov	r3, r0
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d100      	bne.n	800ef7a <memset+0xa>
 800ef78:	4770      	bx	lr
 800ef7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef7e:	e7f9      	b.n	800ef74 <memset+0x4>

0800ef80 <iprintf>:
 800ef80:	b40f      	push	{r0, r1, r2, r3}
 800ef82:	4b0a      	ldr	r3, [pc, #40]	; (800efac <iprintf+0x2c>)
 800ef84:	b513      	push	{r0, r1, r4, lr}
 800ef86:	681c      	ldr	r4, [r3, #0]
 800ef88:	b124      	cbz	r4, 800ef94 <iprintf+0x14>
 800ef8a:	69a3      	ldr	r3, [r4, #24]
 800ef8c:	b913      	cbnz	r3, 800ef94 <iprintf+0x14>
 800ef8e:	4620      	mov	r0, r4
 800ef90:	f000 f856 	bl	800f040 <__sinit>
 800ef94:	ab05      	add	r3, sp, #20
 800ef96:	9a04      	ldr	r2, [sp, #16]
 800ef98:	68a1      	ldr	r1, [r4, #8]
 800ef9a:	9301      	str	r3, [sp, #4]
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f000 f95d 	bl	800f25c <_vfiprintf_r>
 800efa2:	b002      	add	sp, #8
 800efa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efa8:	b004      	add	sp, #16
 800efaa:	4770      	bx	lr
 800efac:	2000018c 	.word	0x2000018c

0800efb0 <strcpy>:
 800efb0:	4603      	mov	r3, r0
 800efb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efb6:	f803 2b01 	strb.w	r2, [r3], #1
 800efba:	2a00      	cmp	r2, #0
 800efbc:	d1f9      	bne.n	800efb2 <strcpy+0x2>
 800efbe:	4770      	bx	lr

0800efc0 <std>:
 800efc0:	2300      	movs	r3, #0
 800efc2:	b510      	push	{r4, lr}
 800efc4:	4604      	mov	r4, r0
 800efc6:	e9c0 3300 	strd	r3, r3, [r0]
 800efca:	6083      	str	r3, [r0, #8]
 800efcc:	8181      	strh	r1, [r0, #12]
 800efce:	6643      	str	r3, [r0, #100]	; 0x64
 800efd0:	81c2      	strh	r2, [r0, #14]
 800efd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efd6:	6183      	str	r3, [r0, #24]
 800efd8:	4619      	mov	r1, r3
 800efda:	2208      	movs	r2, #8
 800efdc:	305c      	adds	r0, #92	; 0x5c
 800efde:	f7ff ffc7 	bl	800ef70 <memset>
 800efe2:	4b05      	ldr	r3, [pc, #20]	; (800eff8 <std+0x38>)
 800efe4:	6263      	str	r3, [r4, #36]	; 0x24
 800efe6:	4b05      	ldr	r3, [pc, #20]	; (800effc <std+0x3c>)
 800efe8:	62a3      	str	r3, [r4, #40]	; 0x28
 800efea:	4b05      	ldr	r3, [pc, #20]	; (800f000 <std+0x40>)
 800efec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efee:	4b05      	ldr	r3, [pc, #20]	; (800f004 <std+0x44>)
 800eff0:	6224      	str	r4, [r4, #32]
 800eff2:	6323      	str	r3, [r4, #48]	; 0x30
 800eff4:	bd10      	pop	{r4, pc}
 800eff6:	bf00      	nop
 800eff8:	0800f7b9 	.word	0x0800f7b9
 800effc:	0800f7db 	.word	0x0800f7db
 800f000:	0800f813 	.word	0x0800f813
 800f004:	0800f837 	.word	0x0800f837

0800f008 <_cleanup_r>:
 800f008:	4901      	ldr	r1, [pc, #4]	; (800f010 <_cleanup_r+0x8>)
 800f00a:	f000 b885 	b.w	800f118 <_fwalk_reent>
 800f00e:	bf00      	nop
 800f010:	0800fb11 	.word	0x0800fb11

0800f014 <__sfmoreglue>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	1e4a      	subs	r2, r1, #1
 800f018:	2568      	movs	r5, #104	; 0x68
 800f01a:	4355      	muls	r5, r2
 800f01c:	460e      	mov	r6, r1
 800f01e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f022:	f000 f897 	bl	800f154 <_malloc_r>
 800f026:	4604      	mov	r4, r0
 800f028:	b140      	cbz	r0, 800f03c <__sfmoreglue+0x28>
 800f02a:	2100      	movs	r1, #0
 800f02c:	e9c0 1600 	strd	r1, r6, [r0]
 800f030:	300c      	adds	r0, #12
 800f032:	60a0      	str	r0, [r4, #8]
 800f034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f038:	f7ff ff9a 	bl	800ef70 <memset>
 800f03c:	4620      	mov	r0, r4
 800f03e:	bd70      	pop	{r4, r5, r6, pc}

0800f040 <__sinit>:
 800f040:	6983      	ldr	r3, [r0, #24]
 800f042:	b510      	push	{r4, lr}
 800f044:	4604      	mov	r4, r0
 800f046:	bb33      	cbnz	r3, 800f096 <__sinit+0x56>
 800f048:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f04c:	6503      	str	r3, [r0, #80]	; 0x50
 800f04e:	4b12      	ldr	r3, [pc, #72]	; (800f098 <__sinit+0x58>)
 800f050:	4a12      	ldr	r2, [pc, #72]	; (800f09c <__sinit+0x5c>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	6282      	str	r2, [r0, #40]	; 0x28
 800f056:	4298      	cmp	r0, r3
 800f058:	bf04      	itt	eq
 800f05a:	2301      	moveq	r3, #1
 800f05c:	6183      	streq	r3, [r0, #24]
 800f05e:	f000 f81f 	bl	800f0a0 <__sfp>
 800f062:	6060      	str	r0, [r4, #4]
 800f064:	4620      	mov	r0, r4
 800f066:	f000 f81b 	bl	800f0a0 <__sfp>
 800f06a:	60a0      	str	r0, [r4, #8]
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 f817 	bl	800f0a0 <__sfp>
 800f072:	2200      	movs	r2, #0
 800f074:	60e0      	str	r0, [r4, #12]
 800f076:	2104      	movs	r1, #4
 800f078:	6860      	ldr	r0, [r4, #4]
 800f07a:	f7ff ffa1 	bl	800efc0 <std>
 800f07e:	2201      	movs	r2, #1
 800f080:	2109      	movs	r1, #9
 800f082:	68a0      	ldr	r0, [r4, #8]
 800f084:	f7ff ff9c 	bl	800efc0 <std>
 800f088:	2202      	movs	r2, #2
 800f08a:	2112      	movs	r1, #18
 800f08c:	68e0      	ldr	r0, [r4, #12]
 800f08e:	f7ff ff97 	bl	800efc0 <std>
 800f092:	2301      	movs	r3, #1
 800f094:	61a3      	str	r3, [r4, #24]
 800f096:	bd10      	pop	{r4, pc}
 800f098:	08011904 	.word	0x08011904
 800f09c:	0800f009 	.word	0x0800f009

0800f0a0 <__sfp>:
 800f0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a2:	4b1b      	ldr	r3, [pc, #108]	; (800f110 <__sfp+0x70>)
 800f0a4:	681e      	ldr	r6, [r3, #0]
 800f0a6:	69b3      	ldr	r3, [r6, #24]
 800f0a8:	4607      	mov	r7, r0
 800f0aa:	b913      	cbnz	r3, 800f0b2 <__sfp+0x12>
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f7ff ffc7 	bl	800f040 <__sinit>
 800f0b2:	3648      	adds	r6, #72	; 0x48
 800f0b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	d503      	bpl.n	800f0c4 <__sfp+0x24>
 800f0bc:	6833      	ldr	r3, [r6, #0]
 800f0be:	b133      	cbz	r3, 800f0ce <__sfp+0x2e>
 800f0c0:	6836      	ldr	r6, [r6, #0]
 800f0c2:	e7f7      	b.n	800f0b4 <__sfp+0x14>
 800f0c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f0c8:	b16d      	cbz	r5, 800f0e6 <__sfp+0x46>
 800f0ca:	3468      	adds	r4, #104	; 0x68
 800f0cc:	e7f4      	b.n	800f0b8 <__sfp+0x18>
 800f0ce:	2104      	movs	r1, #4
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	f7ff ff9f 	bl	800f014 <__sfmoreglue>
 800f0d6:	6030      	str	r0, [r6, #0]
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d1f1      	bne.n	800f0c0 <__sfp+0x20>
 800f0dc:	230c      	movs	r3, #12
 800f0de:	603b      	str	r3, [r7, #0]
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0e6:	4b0b      	ldr	r3, [pc, #44]	; (800f114 <__sfp+0x74>)
 800f0e8:	6665      	str	r5, [r4, #100]	; 0x64
 800f0ea:	e9c4 5500 	strd	r5, r5, [r4]
 800f0ee:	60a5      	str	r5, [r4, #8]
 800f0f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f0f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f0f8:	2208      	movs	r2, #8
 800f0fa:	4629      	mov	r1, r5
 800f0fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f100:	f7ff ff36 	bl	800ef70 <memset>
 800f104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f10c:	e7e9      	b.n	800f0e2 <__sfp+0x42>
 800f10e:	bf00      	nop
 800f110:	08011904 	.word	0x08011904
 800f114:	ffff0001 	.word	0xffff0001

0800f118 <_fwalk_reent>:
 800f118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f11c:	4680      	mov	r8, r0
 800f11e:	4689      	mov	r9, r1
 800f120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f124:	2600      	movs	r6, #0
 800f126:	b914      	cbnz	r4, 800f12e <_fwalk_reent+0x16>
 800f128:	4630      	mov	r0, r6
 800f12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f12e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f132:	3f01      	subs	r7, #1
 800f134:	d501      	bpl.n	800f13a <_fwalk_reent+0x22>
 800f136:	6824      	ldr	r4, [r4, #0]
 800f138:	e7f5      	b.n	800f126 <_fwalk_reent+0xe>
 800f13a:	89ab      	ldrh	r3, [r5, #12]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d907      	bls.n	800f150 <_fwalk_reent+0x38>
 800f140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f144:	3301      	adds	r3, #1
 800f146:	d003      	beq.n	800f150 <_fwalk_reent+0x38>
 800f148:	4629      	mov	r1, r5
 800f14a:	4640      	mov	r0, r8
 800f14c:	47c8      	blx	r9
 800f14e:	4306      	orrs	r6, r0
 800f150:	3568      	adds	r5, #104	; 0x68
 800f152:	e7ee      	b.n	800f132 <_fwalk_reent+0x1a>

0800f154 <_malloc_r>:
 800f154:	b570      	push	{r4, r5, r6, lr}
 800f156:	1ccd      	adds	r5, r1, #3
 800f158:	f025 0503 	bic.w	r5, r5, #3
 800f15c:	3508      	adds	r5, #8
 800f15e:	2d0c      	cmp	r5, #12
 800f160:	bf38      	it	cc
 800f162:	250c      	movcc	r5, #12
 800f164:	2d00      	cmp	r5, #0
 800f166:	4606      	mov	r6, r0
 800f168:	db01      	blt.n	800f16e <_malloc_r+0x1a>
 800f16a:	42a9      	cmp	r1, r5
 800f16c:	d903      	bls.n	800f176 <_malloc_r+0x22>
 800f16e:	230c      	movs	r3, #12
 800f170:	6033      	str	r3, [r6, #0]
 800f172:	2000      	movs	r0, #0
 800f174:	bd70      	pop	{r4, r5, r6, pc}
 800f176:	f000 fd6b 	bl	800fc50 <__malloc_lock>
 800f17a:	4a21      	ldr	r2, [pc, #132]	; (800f200 <_malloc_r+0xac>)
 800f17c:	6814      	ldr	r4, [r2, #0]
 800f17e:	4621      	mov	r1, r4
 800f180:	b991      	cbnz	r1, 800f1a8 <_malloc_r+0x54>
 800f182:	4c20      	ldr	r4, [pc, #128]	; (800f204 <_malloc_r+0xb0>)
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	b91b      	cbnz	r3, 800f190 <_malloc_r+0x3c>
 800f188:	4630      	mov	r0, r6
 800f18a:	f000 fb05 	bl	800f798 <_sbrk_r>
 800f18e:	6020      	str	r0, [r4, #0]
 800f190:	4629      	mov	r1, r5
 800f192:	4630      	mov	r0, r6
 800f194:	f000 fb00 	bl	800f798 <_sbrk_r>
 800f198:	1c43      	adds	r3, r0, #1
 800f19a:	d124      	bne.n	800f1e6 <_malloc_r+0x92>
 800f19c:	230c      	movs	r3, #12
 800f19e:	6033      	str	r3, [r6, #0]
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	f000 fd56 	bl	800fc52 <__malloc_unlock>
 800f1a6:	e7e4      	b.n	800f172 <_malloc_r+0x1e>
 800f1a8:	680b      	ldr	r3, [r1, #0]
 800f1aa:	1b5b      	subs	r3, r3, r5
 800f1ac:	d418      	bmi.n	800f1e0 <_malloc_r+0x8c>
 800f1ae:	2b0b      	cmp	r3, #11
 800f1b0:	d90f      	bls.n	800f1d2 <_malloc_r+0x7e>
 800f1b2:	600b      	str	r3, [r1, #0]
 800f1b4:	50cd      	str	r5, [r1, r3]
 800f1b6:	18cc      	adds	r4, r1, r3
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f000 fd4a 	bl	800fc52 <__malloc_unlock>
 800f1be:	f104 000b 	add.w	r0, r4, #11
 800f1c2:	1d23      	adds	r3, r4, #4
 800f1c4:	f020 0007 	bic.w	r0, r0, #7
 800f1c8:	1ac3      	subs	r3, r0, r3
 800f1ca:	d0d3      	beq.n	800f174 <_malloc_r+0x20>
 800f1cc:	425a      	negs	r2, r3
 800f1ce:	50e2      	str	r2, [r4, r3]
 800f1d0:	e7d0      	b.n	800f174 <_malloc_r+0x20>
 800f1d2:	428c      	cmp	r4, r1
 800f1d4:	684b      	ldr	r3, [r1, #4]
 800f1d6:	bf16      	itet	ne
 800f1d8:	6063      	strne	r3, [r4, #4]
 800f1da:	6013      	streq	r3, [r2, #0]
 800f1dc:	460c      	movne	r4, r1
 800f1de:	e7eb      	b.n	800f1b8 <_malloc_r+0x64>
 800f1e0:	460c      	mov	r4, r1
 800f1e2:	6849      	ldr	r1, [r1, #4]
 800f1e4:	e7cc      	b.n	800f180 <_malloc_r+0x2c>
 800f1e6:	1cc4      	adds	r4, r0, #3
 800f1e8:	f024 0403 	bic.w	r4, r4, #3
 800f1ec:	42a0      	cmp	r0, r4
 800f1ee:	d005      	beq.n	800f1fc <_malloc_r+0xa8>
 800f1f0:	1a21      	subs	r1, r4, r0
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f000 fad0 	bl	800f798 <_sbrk_r>
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	d0cf      	beq.n	800f19c <_malloc_r+0x48>
 800f1fc:	6025      	str	r5, [r4, #0]
 800f1fe:	e7db      	b.n	800f1b8 <_malloc_r+0x64>
 800f200:	2000046c 	.word	0x2000046c
 800f204:	20000470 	.word	0x20000470

0800f208 <__sfputc_r>:
 800f208:	6893      	ldr	r3, [r2, #8]
 800f20a:	3b01      	subs	r3, #1
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	b410      	push	{r4}
 800f210:	6093      	str	r3, [r2, #8]
 800f212:	da08      	bge.n	800f226 <__sfputc_r+0x1e>
 800f214:	6994      	ldr	r4, [r2, #24]
 800f216:	42a3      	cmp	r3, r4
 800f218:	db01      	blt.n	800f21e <__sfputc_r+0x16>
 800f21a:	290a      	cmp	r1, #10
 800f21c:	d103      	bne.n	800f226 <__sfputc_r+0x1e>
 800f21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f222:	f000 bb0d 	b.w	800f840 <__swbuf_r>
 800f226:	6813      	ldr	r3, [r2, #0]
 800f228:	1c58      	adds	r0, r3, #1
 800f22a:	6010      	str	r0, [r2, #0]
 800f22c:	7019      	strb	r1, [r3, #0]
 800f22e:	4608      	mov	r0, r1
 800f230:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f234:	4770      	bx	lr

0800f236 <__sfputs_r>:
 800f236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f238:	4606      	mov	r6, r0
 800f23a:	460f      	mov	r7, r1
 800f23c:	4614      	mov	r4, r2
 800f23e:	18d5      	adds	r5, r2, r3
 800f240:	42ac      	cmp	r4, r5
 800f242:	d101      	bne.n	800f248 <__sfputs_r+0x12>
 800f244:	2000      	movs	r0, #0
 800f246:	e007      	b.n	800f258 <__sfputs_r+0x22>
 800f248:	463a      	mov	r2, r7
 800f24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24e:	4630      	mov	r0, r6
 800f250:	f7ff ffda 	bl	800f208 <__sfputc_r>
 800f254:	1c43      	adds	r3, r0, #1
 800f256:	d1f3      	bne.n	800f240 <__sfputs_r+0xa>
 800f258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f25c <_vfiprintf_r>:
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	460c      	mov	r4, r1
 800f262:	b09d      	sub	sp, #116	; 0x74
 800f264:	4617      	mov	r7, r2
 800f266:	461d      	mov	r5, r3
 800f268:	4606      	mov	r6, r0
 800f26a:	b118      	cbz	r0, 800f274 <_vfiprintf_r+0x18>
 800f26c:	6983      	ldr	r3, [r0, #24]
 800f26e:	b90b      	cbnz	r3, 800f274 <_vfiprintf_r+0x18>
 800f270:	f7ff fee6 	bl	800f040 <__sinit>
 800f274:	4b7c      	ldr	r3, [pc, #496]	; (800f468 <_vfiprintf_r+0x20c>)
 800f276:	429c      	cmp	r4, r3
 800f278:	d158      	bne.n	800f32c <_vfiprintf_r+0xd0>
 800f27a:	6874      	ldr	r4, [r6, #4]
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	0718      	lsls	r0, r3, #28
 800f280:	d55e      	bpl.n	800f340 <_vfiprintf_r+0xe4>
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d05b      	beq.n	800f340 <_vfiprintf_r+0xe4>
 800f288:	2300      	movs	r3, #0
 800f28a:	9309      	str	r3, [sp, #36]	; 0x24
 800f28c:	2320      	movs	r3, #32
 800f28e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f292:	2330      	movs	r3, #48	; 0x30
 800f294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f298:	9503      	str	r5, [sp, #12]
 800f29a:	f04f 0b01 	mov.w	fp, #1
 800f29e:	46b8      	mov	r8, r7
 800f2a0:	4645      	mov	r5, r8
 800f2a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2a6:	b10b      	cbz	r3, 800f2ac <_vfiprintf_r+0x50>
 800f2a8:	2b25      	cmp	r3, #37	; 0x25
 800f2aa:	d154      	bne.n	800f356 <_vfiprintf_r+0xfa>
 800f2ac:	ebb8 0a07 	subs.w	sl, r8, r7
 800f2b0:	d00b      	beq.n	800f2ca <_vfiprintf_r+0x6e>
 800f2b2:	4653      	mov	r3, sl
 800f2b4:	463a      	mov	r2, r7
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	f7ff ffbc 	bl	800f236 <__sfputs_r>
 800f2be:	3001      	adds	r0, #1
 800f2c0:	f000 80c2 	beq.w	800f448 <_vfiprintf_r+0x1ec>
 800f2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c6:	4453      	add	r3, sl
 800f2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ca:	f898 3000 	ldrb.w	r3, [r8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 80ba 	beq.w	800f448 <_vfiprintf_r+0x1ec>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2de:	9304      	str	r3, [sp, #16]
 800f2e0:	9307      	str	r3, [sp, #28]
 800f2e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2e6:	931a      	str	r3, [sp, #104]	; 0x68
 800f2e8:	46a8      	mov	r8, r5
 800f2ea:	2205      	movs	r2, #5
 800f2ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f2f0:	485e      	ldr	r0, [pc, #376]	; (800f46c <_vfiprintf_r+0x210>)
 800f2f2:	f7f0 ff85 	bl	8000200 <memchr>
 800f2f6:	9b04      	ldr	r3, [sp, #16]
 800f2f8:	bb78      	cbnz	r0, 800f35a <_vfiprintf_r+0xfe>
 800f2fa:	06d9      	lsls	r1, r3, #27
 800f2fc:	bf44      	itt	mi
 800f2fe:	2220      	movmi	r2, #32
 800f300:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f304:	071a      	lsls	r2, r3, #28
 800f306:	bf44      	itt	mi
 800f308:	222b      	movmi	r2, #43	; 0x2b
 800f30a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f30e:	782a      	ldrb	r2, [r5, #0]
 800f310:	2a2a      	cmp	r2, #42	; 0x2a
 800f312:	d02a      	beq.n	800f36a <_vfiprintf_r+0x10e>
 800f314:	9a07      	ldr	r2, [sp, #28]
 800f316:	46a8      	mov	r8, r5
 800f318:	2000      	movs	r0, #0
 800f31a:	250a      	movs	r5, #10
 800f31c:	4641      	mov	r1, r8
 800f31e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f322:	3b30      	subs	r3, #48	; 0x30
 800f324:	2b09      	cmp	r3, #9
 800f326:	d969      	bls.n	800f3fc <_vfiprintf_r+0x1a0>
 800f328:	b360      	cbz	r0, 800f384 <_vfiprintf_r+0x128>
 800f32a:	e024      	b.n	800f376 <_vfiprintf_r+0x11a>
 800f32c:	4b50      	ldr	r3, [pc, #320]	; (800f470 <_vfiprintf_r+0x214>)
 800f32e:	429c      	cmp	r4, r3
 800f330:	d101      	bne.n	800f336 <_vfiprintf_r+0xda>
 800f332:	68b4      	ldr	r4, [r6, #8]
 800f334:	e7a2      	b.n	800f27c <_vfiprintf_r+0x20>
 800f336:	4b4f      	ldr	r3, [pc, #316]	; (800f474 <_vfiprintf_r+0x218>)
 800f338:	429c      	cmp	r4, r3
 800f33a:	bf08      	it	eq
 800f33c:	68f4      	ldreq	r4, [r6, #12]
 800f33e:	e79d      	b.n	800f27c <_vfiprintf_r+0x20>
 800f340:	4621      	mov	r1, r4
 800f342:	4630      	mov	r0, r6
 800f344:	f000 fae0 	bl	800f908 <__swsetup_r>
 800f348:	2800      	cmp	r0, #0
 800f34a:	d09d      	beq.n	800f288 <_vfiprintf_r+0x2c>
 800f34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f350:	b01d      	add	sp, #116	; 0x74
 800f352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f356:	46a8      	mov	r8, r5
 800f358:	e7a2      	b.n	800f2a0 <_vfiprintf_r+0x44>
 800f35a:	4a44      	ldr	r2, [pc, #272]	; (800f46c <_vfiprintf_r+0x210>)
 800f35c:	1a80      	subs	r0, r0, r2
 800f35e:	fa0b f000 	lsl.w	r0, fp, r0
 800f362:	4318      	orrs	r0, r3
 800f364:	9004      	str	r0, [sp, #16]
 800f366:	4645      	mov	r5, r8
 800f368:	e7be      	b.n	800f2e8 <_vfiprintf_r+0x8c>
 800f36a:	9a03      	ldr	r2, [sp, #12]
 800f36c:	1d11      	adds	r1, r2, #4
 800f36e:	6812      	ldr	r2, [r2, #0]
 800f370:	9103      	str	r1, [sp, #12]
 800f372:	2a00      	cmp	r2, #0
 800f374:	db01      	blt.n	800f37a <_vfiprintf_r+0x11e>
 800f376:	9207      	str	r2, [sp, #28]
 800f378:	e004      	b.n	800f384 <_vfiprintf_r+0x128>
 800f37a:	4252      	negs	r2, r2
 800f37c:	f043 0302 	orr.w	r3, r3, #2
 800f380:	9207      	str	r2, [sp, #28]
 800f382:	9304      	str	r3, [sp, #16]
 800f384:	f898 3000 	ldrb.w	r3, [r8]
 800f388:	2b2e      	cmp	r3, #46	; 0x2e
 800f38a:	d10e      	bne.n	800f3aa <_vfiprintf_r+0x14e>
 800f38c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f390:	2b2a      	cmp	r3, #42	; 0x2a
 800f392:	d138      	bne.n	800f406 <_vfiprintf_r+0x1aa>
 800f394:	9b03      	ldr	r3, [sp, #12]
 800f396:	1d1a      	adds	r2, r3, #4
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	9203      	str	r2, [sp, #12]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	bfb8      	it	lt
 800f3a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f3a4:	f108 0802 	add.w	r8, r8, #2
 800f3a8:	9305      	str	r3, [sp, #20]
 800f3aa:	4d33      	ldr	r5, [pc, #204]	; (800f478 <_vfiprintf_r+0x21c>)
 800f3ac:	f898 1000 	ldrb.w	r1, [r8]
 800f3b0:	2203      	movs	r2, #3
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f7f0 ff24 	bl	8000200 <memchr>
 800f3b8:	b140      	cbz	r0, 800f3cc <_vfiprintf_r+0x170>
 800f3ba:	2340      	movs	r3, #64	; 0x40
 800f3bc:	1b40      	subs	r0, r0, r5
 800f3be:	fa03 f000 	lsl.w	r0, r3, r0
 800f3c2:	9b04      	ldr	r3, [sp, #16]
 800f3c4:	4303      	orrs	r3, r0
 800f3c6:	f108 0801 	add.w	r8, r8, #1
 800f3ca:	9304      	str	r3, [sp, #16]
 800f3cc:	f898 1000 	ldrb.w	r1, [r8]
 800f3d0:	482a      	ldr	r0, [pc, #168]	; (800f47c <_vfiprintf_r+0x220>)
 800f3d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3d6:	2206      	movs	r2, #6
 800f3d8:	f108 0701 	add.w	r7, r8, #1
 800f3dc:	f7f0 ff10 	bl	8000200 <memchr>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d037      	beq.n	800f454 <_vfiprintf_r+0x1f8>
 800f3e4:	4b26      	ldr	r3, [pc, #152]	; (800f480 <_vfiprintf_r+0x224>)
 800f3e6:	bb1b      	cbnz	r3, 800f430 <_vfiprintf_r+0x1d4>
 800f3e8:	9b03      	ldr	r3, [sp, #12]
 800f3ea:	3307      	adds	r3, #7
 800f3ec:	f023 0307 	bic.w	r3, r3, #7
 800f3f0:	3308      	adds	r3, #8
 800f3f2:	9303      	str	r3, [sp, #12]
 800f3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f6:	444b      	add	r3, r9
 800f3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3fa:	e750      	b.n	800f29e <_vfiprintf_r+0x42>
 800f3fc:	fb05 3202 	mla	r2, r5, r2, r3
 800f400:	2001      	movs	r0, #1
 800f402:	4688      	mov	r8, r1
 800f404:	e78a      	b.n	800f31c <_vfiprintf_r+0xc0>
 800f406:	2300      	movs	r3, #0
 800f408:	f108 0801 	add.w	r8, r8, #1
 800f40c:	9305      	str	r3, [sp, #20]
 800f40e:	4619      	mov	r1, r3
 800f410:	250a      	movs	r5, #10
 800f412:	4640      	mov	r0, r8
 800f414:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f418:	3a30      	subs	r2, #48	; 0x30
 800f41a:	2a09      	cmp	r2, #9
 800f41c:	d903      	bls.n	800f426 <_vfiprintf_r+0x1ca>
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d0c3      	beq.n	800f3aa <_vfiprintf_r+0x14e>
 800f422:	9105      	str	r1, [sp, #20]
 800f424:	e7c1      	b.n	800f3aa <_vfiprintf_r+0x14e>
 800f426:	fb05 2101 	mla	r1, r5, r1, r2
 800f42a:	2301      	movs	r3, #1
 800f42c:	4680      	mov	r8, r0
 800f42e:	e7f0      	b.n	800f412 <_vfiprintf_r+0x1b6>
 800f430:	ab03      	add	r3, sp, #12
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	4622      	mov	r2, r4
 800f436:	4b13      	ldr	r3, [pc, #76]	; (800f484 <_vfiprintf_r+0x228>)
 800f438:	a904      	add	r1, sp, #16
 800f43a:	4630      	mov	r0, r6
 800f43c:	f3af 8000 	nop.w
 800f440:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f444:	4681      	mov	r9, r0
 800f446:	d1d5      	bne.n	800f3f4 <_vfiprintf_r+0x198>
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	065b      	lsls	r3, r3, #25
 800f44c:	f53f af7e 	bmi.w	800f34c <_vfiprintf_r+0xf0>
 800f450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f452:	e77d      	b.n	800f350 <_vfiprintf_r+0xf4>
 800f454:	ab03      	add	r3, sp, #12
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	4622      	mov	r2, r4
 800f45a:	4b0a      	ldr	r3, [pc, #40]	; (800f484 <_vfiprintf_r+0x228>)
 800f45c:	a904      	add	r1, sp, #16
 800f45e:	4630      	mov	r0, r6
 800f460:	f000 f888 	bl	800f574 <_printf_i>
 800f464:	e7ec      	b.n	800f440 <_vfiprintf_r+0x1e4>
 800f466:	bf00      	nop
 800f468:	08011928 	.word	0x08011928
 800f46c:	08011968 	.word	0x08011968
 800f470:	08011948 	.word	0x08011948
 800f474:	08011908 	.word	0x08011908
 800f478:	0801196e 	.word	0x0801196e
 800f47c:	08011972 	.word	0x08011972
 800f480:	00000000 	.word	0x00000000
 800f484:	0800f237 	.word	0x0800f237

0800f488 <_printf_common>:
 800f488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f48c:	4691      	mov	r9, r2
 800f48e:	461f      	mov	r7, r3
 800f490:	688a      	ldr	r2, [r1, #8]
 800f492:	690b      	ldr	r3, [r1, #16]
 800f494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f498:	4293      	cmp	r3, r2
 800f49a:	bfb8      	it	lt
 800f49c:	4613      	movlt	r3, r2
 800f49e:	f8c9 3000 	str.w	r3, [r9]
 800f4a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	460c      	mov	r4, r1
 800f4aa:	b112      	cbz	r2, 800f4b2 <_printf_common+0x2a>
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	f8c9 3000 	str.w	r3, [r9]
 800f4b2:	6823      	ldr	r3, [r4, #0]
 800f4b4:	0699      	lsls	r1, r3, #26
 800f4b6:	bf42      	ittt	mi
 800f4b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f4bc:	3302      	addmi	r3, #2
 800f4be:	f8c9 3000 	strmi.w	r3, [r9]
 800f4c2:	6825      	ldr	r5, [r4, #0]
 800f4c4:	f015 0506 	ands.w	r5, r5, #6
 800f4c8:	d107      	bne.n	800f4da <_printf_common+0x52>
 800f4ca:	f104 0a19 	add.w	sl, r4, #25
 800f4ce:	68e3      	ldr	r3, [r4, #12]
 800f4d0:	f8d9 2000 	ldr.w	r2, [r9]
 800f4d4:	1a9b      	subs	r3, r3, r2
 800f4d6:	42ab      	cmp	r3, r5
 800f4d8:	dc28      	bgt.n	800f52c <_printf_common+0xa4>
 800f4da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f4de:	6822      	ldr	r2, [r4, #0]
 800f4e0:	3300      	adds	r3, #0
 800f4e2:	bf18      	it	ne
 800f4e4:	2301      	movne	r3, #1
 800f4e6:	0692      	lsls	r2, r2, #26
 800f4e8:	d42d      	bmi.n	800f546 <_printf_common+0xbe>
 800f4ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4ee:	4639      	mov	r1, r7
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	47c0      	blx	r8
 800f4f4:	3001      	adds	r0, #1
 800f4f6:	d020      	beq.n	800f53a <_printf_common+0xb2>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	68e5      	ldr	r5, [r4, #12]
 800f4fc:	f8d9 2000 	ldr.w	r2, [r9]
 800f500:	f003 0306 	and.w	r3, r3, #6
 800f504:	2b04      	cmp	r3, #4
 800f506:	bf08      	it	eq
 800f508:	1aad      	subeq	r5, r5, r2
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	6922      	ldr	r2, [r4, #16]
 800f50e:	bf0c      	ite	eq
 800f510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f514:	2500      	movne	r5, #0
 800f516:	4293      	cmp	r3, r2
 800f518:	bfc4      	itt	gt
 800f51a:	1a9b      	subgt	r3, r3, r2
 800f51c:	18ed      	addgt	r5, r5, r3
 800f51e:	f04f 0900 	mov.w	r9, #0
 800f522:	341a      	adds	r4, #26
 800f524:	454d      	cmp	r5, r9
 800f526:	d11a      	bne.n	800f55e <_printf_common+0xd6>
 800f528:	2000      	movs	r0, #0
 800f52a:	e008      	b.n	800f53e <_printf_common+0xb6>
 800f52c:	2301      	movs	r3, #1
 800f52e:	4652      	mov	r2, sl
 800f530:	4639      	mov	r1, r7
 800f532:	4630      	mov	r0, r6
 800f534:	47c0      	blx	r8
 800f536:	3001      	adds	r0, #1
 800f538:	d103      	bne.n	800f542 <_printf_common+0xba>
 800f53a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f542:	3501      	adds	r5, #1
 800f544:	e7c3      	b.n	800f4ce <_printf_common+0x46>
 800f546:	18e1      	adds	r1, r4, r3
 800f548:	1c5a      	adds	r2, r3, #1
 800f54a:	2030      	movs	r0, #48	; 0x30
 800f54c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f550:	4422      	add	r2, r4
 800f552:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f55a:	3302      	adds	r3, #2
 800f55c:	e7c5      	b.n	800f4ea <_printf_common+0x62>
 800f55e:	2301      	movs	r3, #1
 800f560:	4622      	mov	r2, r4
 800f562:	4639      	mov	r1, r7
 800f564:	4630      	mov	r0, r6
 800f566:	47c0      	blx	r8
 800f568:	3001      	adds	r0, #1
 800f56a:	d0e6      	beq.n	800f53a <_printf_common+0xb2>
 800f56c:	f109 0901 	add.w	r9, r9, #1
 800f570:	e7d8      	b.n	800f524 <_printf_common+0x9c>
	...

0800f574 <_printf_i>:
 800f574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f578:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f57c:	460c      	mov	r4, r1
 800f57e:	7e09      	ldrb	r1, [r1, #24]
 800f580:	b085      	sub	sp, #20
 800f582:	296e      	cmp	r1, #110	; 0x6e
 800f584:	4617      	mov	r7, r2
 800f586:	4606      	mov	r6, r0
 800f588:	4698      	mov	r8, r3
 800f58a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f58c:	f000 80b3 	beq.w	800f6f6 <_printf_i+0x182>
 800f590:	d822      	bhi.n	800f5d8 <_printf_i+0x64>
 800f592:	2963      	cmp	r1, #99	; 0x63
 800f594:	d036      	beq.n	800f604 <_printf_i+0x90>
 800f596:	d80a      	bhi.n	800f5ae <_printf_i+0x3a>
 800f598:	2900      	cmp	r1, #0
 800f59a:	f000 80b9 	beq.w	800f710 <_printf_i+0x19c>
 800f59e:	2958      	cmp	r1, #88	; 0x58
 800f5a0:	f000 8083 	beq.w	800f6aa <_printf_i+0x136>
 800f5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f5ac:	e032      	b.n	800f614 <_printf_i+0xa0>
 800f5ae:	2964      	cmp	r1, #100	; 0x64
 800f5b0:	d001      	beq.n	800f5b6 <_printf_i+0x42>
 800f5b2:	2969      	cmp	r1, #105	; 0x69
 800f5b4:	d1f6      	bne.n	800f5a4 <_printf_i+0x30>
 800f5b6:	6820      	ldr	r0, [r4, #0]
 800f5b8:	6813      	ldr	r3, [r2, #0]
 800f5ba:	0605      	lsls	r5, r0, #24
 800f5bc:	f103 0104 	add.w	r1, r3, #4
 800f5c0:	d52a      	bpl.n	800f618 <_printf_i+0xa4>
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	6011      	str	r1, [r2, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	da03      	bge.n	800f5d2 <_printf_i+0x5e>
 800f5ca:	222d      	movs	r2, #45	; 0x2d
 800f5cc:	425b      	negs	r3, r3
 800f5ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f5d2:	486f      	ldr	r0, [pc, #444]	; (800f790 <_printf_i+0x21c>)
 800f5d4:	220a      	movs	r2, #10
 800f5d6:	e039      	b.n	800f64c <_printf_i+0xd8>
 800f5d8:	2973      	cmp	r1, #115	; 0x73
 800f5da:	f000 809d 	beq.w	800f718 <_printf_i+0x1a4>
 800f5de:	d808      	bhi.n	800f5f2 <_printf_i+0x7e>
 800f5e0:	296f      	cmp	r1, #111	; 0x6f
 800f5e2:	d020      	beq.n	800f626 <_printf_i+0xb2>
 800f5e4:	2970      	cmp	r1, #112	; 0x70
 800f5e6:	d1dd      	bne.n	800f5a4 <_printf_i+0x30>
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	f043 0320 	orr.w	r3, r3, #32
 800f5ee:	6023      	str	r3, [r4, #0]
 800f5f0:	e003      	b.n	800f5fa <_printf_i+0x86>
 800f5f2:	2975      	cmp	r1, #117	; 0x75
 800f5f4:	d017      	beq.n	800f626 <_printf_i+0xb2>
 800f5f6:	2978      	cmp	r1, #120	; 0x78
 800f5f8:	d1d4      	bne.n	800f5a4 <_printf_i+0x30>
 800f5fa:	2378      	movs	r3, #120	; 0x78
 800f5fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f600:	4864      	ldr	r0, [pc, #400]	; (800f794 <_printf_i+0x220>)
 800f602:	e055      	b.n	800f6b0 <_printf_i+0x13c>
 800f604:	6813      	ldr	r3, [r2, #0]
 800f606:	1d19      	adds	r1, r3, #4
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	6011      	str	r1, [r2, #0]
 800f60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f614:	2301      	movs	r3, #1
 800f616:	e08c      	b.n	800f732 <_printf_i+0x1be>
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	6011      	str	r1, [r2, #0]
 800f61c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f620:	bf18      	it	ne
 800f622:	b21b      	sxthne	r3, r3
 800f624:	e7cf      	b.n	800f5c6 <_printf_i+0x52>
 800f626:	6813      	ldr	r3, [r2, #0]
 800f628:	6825      	ldr	r5, [r4, #0]
 800f62a:	1d18      	adds	r0, r3, #4
 800f62c:	6010      	str	r0, [r2, #0]
 800f62e:	0628      	lsls	r0, r5, #24
 800f630:	d501      	bpl.n	800f636 <_printf_i+0xc2>
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	e002      	b.n	800f63c <_printf_i+0xc8>
 800f636:	0668      	lsls	r0, r5, #25
 800f638:	d5fb      	bpl.n	800f632 <_printf_i+0xbe>
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	4854      	ldr	r0, [pc, #336]	; (800f790 <_printf_i+0x21c>)
 800f63e:	296f      	cmp	r1, #111	; 0x6f
 800f640:	bf14      	ite	ne
 800f642:	220a      	movne	r2, #10
 800f644:	2208      	moveq	r2, #8
 800f646:	2100      	movs	r1, #0
 800f648:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f64c:	6865      	ldr	r5, [r4, #4]
 800f64e:	60a5      	str	r5, [r4, #8]
 800f650:	2d00      	cmp	r5, #0
 800f652:	f2c0 8095 	blt.w	800f780 <_printf_i+0x20c>
 800f656:	6821      	ldr	r1, [r4, #0]
 800f658:	f021 0104 	bic.w	r1, r1, #4
 800f65c:	6021      	str	r1, [r4, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d13d      	bne.n	800f6de <_printf_i+0x16a>
 800f662:	2d00      	cmp	r5, #0
 800f664:	f040 808e 	bne.w	800f784 <_printf_i+0x210>
 800f668:	4665      	mov	r5, ip
 800f66a:	2a08      	cmp	r2, #8
 800f66c:	d10b      	bne.n	800f686 <_printf_i+0x112>
 800f66e:	6823      	ldr	r3, [r4, #0]
 800f670:	07db      	lsls	r3, r3, #31
 800f672:	d508      	bpl.n	800f686 <_printf_i+0x112>
 800f674:	6923      	ldr	r3, [r4, #16]
 800f676:	6862      	ldr	r2, [r4, #4]
 800f678:	429a      	cmp	r2, r3
 800f67a:	bfde      	ittt	le
 800f67c:	2330      	movle	r3, #48	; 0x30
 800f67e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f682:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f686:	ebac 0305 	sub.w	r3, ip, r5
 800f68a:	6123      	str	r3, [r4, #16]
 800f68c:	f8cd 8000 	str.w	r8, [sp]
 800f690:	463b      	mov	r3, r7
 800f692:	aa03      	add	r2, sp, #12
 800f694:	4621      	mov	r1, r4
 800f696:	4630      	mov	r0, r6
 800f698:	f7ff fef6 	bl	800f488 <_printf_common>
 800f69c:	3001      	adds	r0, #1
 800f69e:	d14d      	bne.n	800f73c <_printf_i+0x1c8>
 800f6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6a4:	b005      	add	sp, #20
 800f6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6aa:	4839      	ldr	r0, [pc, #228]	; (800f790 <_printf_i+0x21c>)
 800f6ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f6b0:	6813      	ldr	r3, [r2, #0]
 800f6b2:	6821      	ldr	r1, [r4, #0]
 800f6b4:	1d1d      	adds	r5, r3, #4
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6015      	str	r5, [r2, #0]
 800f6ba:	060a      	lsls	r2, r1, #24
 800f6bc:	d50b      	bpl.n	800f6d6 <_printf_i+0x162>
 800f6be:	07ca      	lsls	r2, r1, #31
 800f6c0:	bf44      	itt	mi
 800f6c2:	f041 0120 	orrmi.w	r1, r1, #32
 800f6c6:	6021      	strmi	r1, [r4, #0]
 800f6c8:	b91b      	cbnz	r3, 800f6d2 <_printf_i+0x15e>
 800f6ca:	6822      	ldr	r2, [r4, #0]
 800f6cc:	f022 0220 	bic.w	r2, r2, #32
 800f6d0:	6022      	str	r2, [r4, #0]
 800f6d2:	2210      	movs	r2, #16
 800f6d4:	e7b7      	b.n	800f646 <_printf_i+0xd2>
 800f6d6:	064d      	lsls	r5, r1, #25
 800f6d8:	bf48      	it	mi
 800f6da:	b29b      	uxthmi	r3, r3
 800f6dc:	e7ef      	b.n	800f6be <_printf_i+0x14a>
 800f6de:	4665      	mov	r5, ip
 800f6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6e4:	fb02 3311 	mls	r3, r2, r1, r3
 800f6e8:	5cc3      	ldrb	r3, [r0, r3]
 800f6ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	2900      	cmp	r1, #0
 800f6f2:	d1f5      	bne.n	800f6e0 <_printf_i+0x16c>
 800f6f4:	e7b9      	b.n	800f66a <_printf_i+0xf6>
 800f6f6:	6813      	ldr	r3, [r2, #0]
 800f6f8:	6825      	ldr	r5, [r4, #0]
 800f6fa:	6961      	ldr	r1, [r4, #20]
 800f6fc:	1d18      	adds	r0, r3, #4
 800f6fe:	6010      	str	r0, [r2, #0]
 800f700:	0628      	lsls	r0, r5, #24
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	d501      	bpl.n	800f70a <_printf_i+0x196>
 800f706:	6019      	str	r1, [r3, #0]
 800f708:	e002      	b.n	800f710 <_printf_i+0x19c>
 800f70a:	066a      	lsls	r2, r5, #25
 800f70c:	d5fb      	bpl.n	800f706 <_printf_i+0x192>
 800f70e:	8019      	strh	r1, [r3, #0]
 800f710:	2300      	movs	r3, #0
 800f712:	6123      	str	r3, [r4, #16]
 800f714:	4665      	mov	r5, ip
 800f716:	e7b9      	b.n	800f68c <_printf_i+0x118>
 800f718:	6813      	ldr	r3, [r2, #0]
 800f71a:	1d19      	adds	r1, r3, #4
 800f71c:	6011      	str	r1, [r2, #0]
 800f71e:	681d      	ldr	r5, [r3, #0]
 800f720:	6862      	ldr	r2, [r4, #4]
 800f722:	2100      	movs	r1, #0
 800f724:	4628      	mov	r0, r5
 800f726:	f7f0 fd6b 	bl	8000200 <memchr>
 800f72a:	b108      	cbz	r0, 800f730 <_printf_i+0x1bc>
 800f72c:	1b40      	subs	r0, r0, r5
 800f72e:	6060      	str	r0, [r4, #4]
 800f730:	6863      	ldr	r3, [r4, #4]
 800f732:	6123      	str	r3, [r4, #16]
 800f734:	2300      	movs	r3, #0
 800f736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f73a:	e7a7      	b.n	800f68c <_printf_i+0x118>
 800f73c:	6923      	ldr	r3, [r4, #16]
 800f73e:	462a      	mov	r2, r5
 800f740:	4639      	mov	r1, r7
 800f742:	4630      	mov	r0, r6
 800f744:	47c0      	blx	r8
 800f746:	3001      	adds	r0, #1
 800f748:	d0aa      	beq.n	800f6a0 <_printf_i+0x12c>
 800f74a:	6823      	ldr	r3, [r4, #0]
 800f74c:	079b      	lsls	r3, r3, #30
 800f74e:	d413      	bmi.n	800f778 <_printf_i+0x204>
 800f750:	68e0      	ldr	r0, [r4, #12]
 800f752:	9b03      	ldr	r3, [sp, #12]
 800f754:	4298      	cmp	r0, r3
 800f756:	bfb8      	it	lt
 800f758:	4618      	movlt	r0, r3
 800f75a:	e7a3      	b.n	800f6a4 <_printf_i+0x130>
 800f75c:	2301      	movs	r3, #1
 800f75e:	464a      	mov	r2, r9
 800f760:	4639      	mov	r1, r7
 800f762:	4630      	mov	r0, r6
 800f764:	47c0      	blx	r8
 800f766:	3001      	adds	r0, #1
 800f768:	d09a      	beq.n	800f6a0 <_printf_i+0x12c>
 800f76a:	3501      	adds	r5, #1
 800f76c:	68e3      	ldr	r3, [r4, #12]
 800f76e:	9a03      	ldr	r2, [sp, #12]
 800f770:	1a9b      	subs	r3, r3, r2
 800f772:	42ab      	cmp	r3, r5
 800f774:	dcf2      	bgt.n	800f75c <_printf_i+0x1e8>
 800f776:	e7eb      	b.n	800f750 <_printf_i+0x1dc>
 800f778:	2500      	movs	r5, #0
 800f77a:	f104 0919 	add.w	r9, r4, #25
 800f77e:	e7f5      	b.n	800f76c <_printf_i+0x1f8>
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1ac      	bne.n	800f6de <_printf_i+0x16a>
 800f784:	7803      	ldrb	r3, [r0, #0]
 800f786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f78a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f78e:	e76c      	b.n	800f66a <_printf_i+0xf6>
 800f790:	08011979 	.word	0x08011979
 800f794:	0801198a 	.word	0x0801198a

0800f798 <_sbrk_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4c06      	ldr	r4, [pc, #24]	; (800f7b4 <_sbrk_r+0x1c>)
 800f79c:	2300      	movs	r3, #0
 800f79e:	4605      	mov	r5, r0
 800f7a0:	4608      	mov	r0, r1
 800f7a2:	6023      	str	r3, [r4, #0]
 800f7a4:	f7f3 ff8c 	bl	80036c0 <_sbrk>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d102      	bne.n	800f7b2 <_sbrk_r+0x1a>
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	b103      	cbz	r3, 800f7b2 <_sbrk_r+0x1a>
 800f7b0:	602b      	str	r3, [r5, #0]
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	20002438 	.word	0x20002438

0800f7b8 <__sread>:
 800f7b8:	b510      	push	{r4, lr}
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7c0:	f000 fa96 	bl	800fcf0 <_read_r>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	bfab      	itete	ge
 800f7c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f7cc:	181b      	addge	r3, r3, r0
 800f7ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7d2:	bfac      	ite	ge
 800f7d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7d6:	81a3      	strhlt	r3, [r4, #12]
 800f7d8:	bd10      	pop	{r4, pc}

0800f7da <__swrite>:
 800f7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7de:	461f      	mov	r7, r3
 800f7e0:	898b      	ldrh	r3, [r1, #12]
 800f7e2:	05db      	lsls	r3, r3, #23
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	460c      	mov	r4, r1
 800f7e8:	4616      	mov	r6, r2
 800f7ea:	d505      	bpl.n	800f7f8 <__swrite+0x1e>
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f4:	f000 f9b6 	bl	800fb64 <_lseek_r>
 800f7f8:	89a3      	ldrh	r3, [r4, #12]
 800f7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f802:	81a3      	strh	r3, [r4, #12]
 800f804:	4632      	mov	r2, r6
 800f806:	463b      	mov	r3, r7
 800f808:	4628      	mov	r0, r5
 800f80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f80e:	f000 b869 	b.w	800f8e4 <_write_r>

0800f812 <__sseek>:
 800f812:	b510      	push	{r4, lr}
 800f814:	460c      	mov	r4, r1
 800f816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81a:	f000 f9a3 	bl	800fb64 <_lseek_r>
 800f81e:	1c43      	adds	r3, r0, #1
 800f820:	89a3      	ldrh	r3, [r4, #12]
 800f822:	bf15      	itete	ne
 800f824:	6560      	strne	r0, [r4, #84]	; 0x54
 800f826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f82a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f82e:	81a3      	strheq	r3, [r4, #12]
 800f830:	bf18      	it	ne
 800f832:	81a3      	strhne	r3, [r4, #12]
 800f834:	bd10      	pop	{r4, pc}

0800f836 <__sclose>:
 800f836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f83a:	f000 b8d3 	b.w	800f9e4 <_close_r>
	...

0800f840 <__swbuf_r>:
 800f840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f842:	460e      	mov	r6, r1
 800f844:	4614      	mov	r4, r2
 800f846:	4605      	mov	r5, r0
 800f848:	b118      	cbz	r0, 800f852 <__swbuf_r+0x12>
 800f84a:	6983      	ldr	r3, [r0, #24]
 800f84c:	b90b      	cbnz	r3, 800f852 <__swbuf_r+0x12>
 800f84e:	f7ff fbf7 	bl	800f040 <__sinit>
 800f852:	4b21      	ldr	r3, [pc, #132]	; (800f8d8 <__swbuf_r+0x98>)
 800f854:	429c      	cmp	r4, r3
 800f856:	d12a      	bne.n	800f8ae <__swbuf_r+0x6e>
 800f858:	686c      	ldr	r4, [r5, #4]
 800f85a:	69a3      	ldr	r3, [r4, #24]
 800f85c:	60a3      	str	r3, [r4, #8]
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	071a      	lsls	r2, r3, #28
 800f862:	d52e      	bpl.n	800f8c2 <__swbuf_r+0x82>
 800f864:	6923      	ldr	r3, [r4, #16]
 800f866:	b363      	cbz	r3, 800f8c2 <__swbuf_r+0x82>
 800f868:	6923      	ldr	r3, [r4, #16]
 800f86a:	6820      	ldr	r0, [r4, #0]
 800f86c:	1ac0      	subs	r0, r0, r3
 800f86e:	6963      	ldr	r3, [r4, #20]
 800f870:	b2f6      	uxtb	r6, r6
 800f872:	4283      	cmp	r3, r0
 800f874:	4637      	mov	r7, r6
 800f876:	dc04      	bgt.n	800f882 <__swbuf_r+0x42>
 800f878:	4621      	mov	r1, r4
 800f87a:	4628      	mov	r0, r5
 800f87c:	f000 f948 	bl	800fb10 <_fflush_r>
 800f880:	bb28      	cbnz	r0, 800f8ce <__swbuf_r+0x8e>
 800f882:	68a3      	ldr	r3, [r4, #8]
 800f884:	3b01      	subs	r3, #1
 800f886:	60a3      	str	r3, [r4, #8]
 800f888:	6823      	ldr	r3, [r4, #0]
 800f88a:	1c5a      	adds	r2, r3, #1
 800f88c:	6022      	str	r2, [r4, #0]
 800f88e:	701e      	strb	r6, [r3, #0]
 800f890:	6963      	ldr	r3, [r4, #20]
 800f892:	3001      	adds	r0, #1
 800f894:	4283      	cmp	r3, r0
 800f896:	d004      	beq.n	800f8a2 <__swbuf_r+0x62>
 800f898:	89a3      	ldrh	r3, [r4, #12]
 800f89a:	07db      	lsls	r3, r3, #31
 800f89c:	d519      	bpl.n	800f8d2 <__swbuf_r+0x92>
 800f89e:	2e0a      	cmp	r6, #10
 800f8a0:	d117      	bne.n	800f8d2 <__swbuf_r+0x92>
 800f8a2:	4621      	mov	r1, r4
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	f000 f933 	bl	800fb10 <_fflush_r>
 800f8aa:	b190      	cbz	r0, 800f8d2 <__swbuf_r+0x92>
 800f8ac:	e00f      	b.n	800f8ce <__swbuf_r+0x8e>
 800f8ae:	4b0b      	ldr	r3, [pc, #44]	; (800f8dc <__swbuf_r+0x9c>)
 800f8b0:	429c      	cmp	r4, r3
 800f8b2:	d101      	bne.n	800f8b8 <__swbuf_r+0x78>
 800f8b4:	68ac      	ldr	r4, [r5, #8]
 800f8b6:	e7d0      	b.n	800f85a <__swbuf_r+0x1a>
 800f8b8:	4b09      	ldr	r3, [pc, #36]	; (800f8e0 <__swbuf_r+0xa0>)
 800f8ba:	429c      	cmp	r4, r3
 800f8bc:	bf08      	it	eq
 800f8be:	68ec      	ldreq	r4, [r5, #12]
 800f8c0:	e7cb      	b.n	800f85a <__swbuf_r+0x1a>
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f000 f81f 	bl	800f908 <__swsetup_r>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d0cc      	beq.n	800f868 <__swbuf_r+0x28>
 800f8ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	08011928 	.word	0x08011928
 800f8dc:	08011948 	.word	0x08011948
 800f8e0:	08011908 	.word	0x08011908

0800f8e4 <_write_r>:
 800f8e4:	b538      	push	{r3, r4, r5, lr}
 800f8e6:	4c07      	ldr	r4, [pc, #28]	; (800f904 <_write_r+0x20>)
 800f8e8:	4605      	mov	r5, r0
 800f8ea:	4608      	mov	r0, r1
 800f8ec:	4611      	mov	r1, r2
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	6022      	str	r2, [r4, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f7f2 f857 	bl	80019a6 <_write>
 800f8f8:	1c43      	adds	r3, r0, #1
 800f8fa:	d102      	bne.n	800f902 <_write_r+0x1e>
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	b103      	cbz	r3, 800f902 <_write_r+0x1e>
 800f900:	602b      	str	r3, [r5, #0]
 800f902:	bd38      	pop	{r3, r4, r5, pc}
 800f904:	20002438 	.word	0x20002438

0800f908 <__swsetup_r>:
 800f908:	4b32      	ldr	r3, [pc, #200]	; (800f9d4 <__swsetup_r+0xcc>)
 800f90a:	b570      	push	{r4, r5, r6, lr}
 800f90c:	681d      	ldr	r5, [r3, #0]
 800f90e:	4606      	mov	r6, r0
 800f910:	460c      	mov	r4, r1
 800f912:	b125      	cbz	r5, 800f91e <__swsetup_r+0x16>
 800f914:	69ab      	ldr	r3, [r5, #24]
 800f916:	b913      	cbnz	r3, 800f91e <__swsetup_r+0x16>
 800f918:	4628      	mov	r0, r5
 800f91a:	f7ff fb91 	bl	800f040 <__sinit>
 800f91e:	4b2e      	ldr	r3, [pc, #184]	; (800f9d8 <__swsetup_r+0xd0>)
 800f920:	429c      	cmp	r4, r3
 800f922:	d10f      	bne.n	800f944 <__swsetup_r+0x3c>
 800f924:	686c      	ldr	r4, [r5, #4]
 800f926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	0715      	lsls	r5, r2, #28
 800f92e:	d42c      	bmi.n	800f98a <__swsetup_r+0x82>
 800f930:	06d0      	lsls	r0, r2, #27
 800f932:	d411      	bmi.n	800f958 <__swsetup_r+0x50>
 800f934:	2209      	movs	r2, #9
 800f936:	6032      	str	r2, [r6, #0]
 800f938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f93c:	81a3      	strh	r3, [r4, #12]
 800f93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f942:	e03e      	b.n	800f9c2 <__swsetup_r+0xba>
 800f944:	4b25      	ldr	r3, [pc, #148]	; (800f9dc <__swsetup_r+0xd4>)
 800f946:	429c      	cmp	r4, r3
 800f948:	d101      	bne.n	800f94e <__swsetup_r+0x46>
 800f94a:	68ac      	ldr	r4, [r5, #8]
 800f94c:	e7eb      	b.n	800f926 <__swsetup_r+0x1e>
 800f94e:	4b24      	ldr	r3, [pc, #144]	; (800f9e0 <__swsetup_r+0xd8>)
 800f950:	429c      	cmp	r4, r3
 800f952:	bf08      	it	eq
 800f954:	68ec      	ldreq	r4, [r5, #12]
 800f956:	e7e6      	b.n	800f926 <__swsetup_r+0x1e>
 800f958:	0751      	lsls	r1, r2, #29
 800f95a:	d512      	bpl.n	800f982 <__swsetup_r+0x7a>
 800f95c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f95e:	b141      	cbz	r1, 800f972 <__swsetup_r+0x6a>
 800f960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f964:	4299      	cmp	r1, r3
 800f966:	d002      	beq.n	800f96e <__swsetup_r+0x66>
 800f968:	4630      	mov	r0, r6
 800f96a:	f000 f973 	bl	800fc54 <_free_r>
 800f96e:	2300      	movs	r3, #0
 800f970:	6363      	str	r3, [r4, #52]	; 0x34
 800f972:	89a3      	ldrh	r3, [r4, #12]
 800f974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f978:	81a3      	strh	r3, [r4, #12]
 800f97a:	2300      	movs	r3, #0
 800f97c:	6063      	str	r3, [r4, #4]
 800f97e:	6923      	ldr	r3, [r4, #16]
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	f043 0308 	orr.w	r3, r3, #8
 800f988:	81a3      	strh	r3, [r4, #12]
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	b94b      	cbnz	r3, 800f9a2 <__swsetup_r+0x9a>
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f998:	d003      	beq.n	800f9a2 <__swsetup_r+0x9a>
 800f99a:	4621      	mov	r1, r4
 800f99c:	4630      	mov	r0, r6
 800f99e:	f000 f917 	bl	800fbd0 <__smakebuf_r>
 800f9a2:	89a2      	ldrh	r2, [r4, #12]
 800f9a4:	f012 0301 	ands.w	r3, r2, #1
 800f9a8:	d00c      	beq.n	800f9c4 <__swsetup_r+0xbc>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60a3      	str	r3, [r4, #8]
 800f9ae:	6963      	ldr	r3, [r4, #20]
 800f9b0:	425b      	negs	r3, r3
 800f9b2:	61a3      	str	r3, [r4, #24]
 800f9b4:	6923      	ldr	r3, [r4, #16]
 800f9b6:	b953      	cbnz	r3, 800f9ce <__swsetup_r+0xc6>
 800f9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f9c0:	d1ba      	bne.n	800f938 <__swsetup_r+0x30>
 800f9c2:	bd70      	pop	{r4, r5, r6, pc}
 800f9c4:	0792      	lsls	r2, r2, #30
 800f9c6:	bf58      	it	pl
 800f9c8:	6963      	ldrpl	r3, [r4, #20]
 800f9ca:	60a3      	str	r3, [r4, #8]
 800f9cc:	e7f2      	b.n	800f9b4 <__swsetup_r+0xac>
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	e7f7      	b.n	800f9c2 <__swsetup_r+0xba>
 800f9d2:	bf00      	nop
 800f9d4:	2000018c 	.word	0x2000018c
 800f9d8:	08011928 	.word	0x08011928
 800f9dc:	08011948 	.word	0x08011948
 800f9e0:	08011908 	.word	0x08011908

0800f9e4 <_close_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4c06      	ldr	r4, [pc, #24]	; (800fa00 <_close_r+0x1c>)
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	6023      	str	r3, [r4, #0]
 800f9f0:	f7f3 fe31 	bl	8003656 <_close>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_close_r+0x1a>
 800f9f8:	6823      	ldr	r3, [r4, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_close_r+0x1a>
 800f9fc:	602b      	str	r3, [r5, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	20002438 	.word	0x20002438

0800fa04 <__sflush_r>:
 800fa04:	898a      	ldrh	r2, [r1, #12]
 800fa06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0a:	4605      	mov	r5, r0
 800fa0c:	0710      	lsls	r0, r2, #28
 800fa0e:	460c      	mov	r4, r1
 800fa10:	d458      	bmi.n	800fac4 <__sflush_r+0xc0>
 800fa12:	684b      	ldr	r3, [r1, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	dc05      	bgt.n	800fa24 <__sflush_r+0x20>
 800fa18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	dc02      	bgt.n	800fa24 <__sflush_r+0x20>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa26:	2e00      	cmp	r6, #0
 800fa28:	d0f9      	beq.n	800fa1e <__sflush_r+0x1a>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa30:	682f      	ldr	r7, [r5, #0]
 800fa32:	6a21      	ldr	r1, [r4, #32]
 800fa34:	602b      	str	r3, [r5, #0]
 800fa36:	d032      	beq.n	800fa9e <__sflush_r+0x9a>
 800fa38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	075a      	lsls	r2, r3, #29
 800fa3e:	d505      	bpl.n	800fa4c <__sflush_r+0x48>
 800fa40:	6863      	ldr	r3, [r4, #4]
 800fa42:	1ac0      	subs	r0, r0, r3
 800fa44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa46:	b10b      	cbz	r3, 800fa4c <__sflush_r+0x48>
 800fa48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa4a:	1ac0      	subs	r0, r0, r3
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	4602      	mov	r2, r0
 800fa50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa52:	6a21      	ldr	r1, [r4, #32]
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b0      	blx	r6
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	89a3      	ldrh	r3, [r4, #12]
 800fa5c:	d106      	bne.n	800fa6c <__sflush_r+0x68>
 800fa5e:	6829      	ldr	r1, [r5, #0]
 800fa60:	291d      	cmp	r1, #29
 800fa62:	d848      	bhi.n	800faf6 <__sflush_r+0xf2>
 800fa64:	4a29      	ldr	r2, [pc, #164]	; (800fb0c <__sflush_r+0x108>)
 800fa66:	40ca      	lsrs	r2, r1
 800fa68:	07d6      	lsls	r6, r2, #31
 800fa6a:	d544      	bpl.n	800faf6 <__sflush_r+0xf2>
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	6062      	str	r2, [r4, #4]
 800fa70:	04d9      	lsls	r1, r3, #19
 800fa72:	6922      	ldr	r2, [r4, #16]
 800fa74:	6022      	str	r2, [r4, #0]
 800fa76:	d504      	bpl.n	800fa82 <__sflush_r+0x7e>
 800fa78:	1c42      	adds	r2, r0, #1
 800fa7a:	d101      	bne.n	800fa80 <__sflush_r+0x7c>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	b903      	cbnz	r3, 800fa82 <__sflush_r+0x7e>
 800fa80:	6560      	str	r0, [r4, #84]	; 0x54
 800fa82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa84:	602f      	str	r7, [r5, #0]
 800fa86:	2900      	cmp	r1, #0
 800fa88:	d0c9      	beq.n	800fa1e <__sflush_r+0x1a>
 800fa8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa8e:	4299      	cmp	r1, r3
 800fa90:	d002      	beq.n	800fa98 <__sflush_r+0x94>
 800fa92:	4628      	mov	r0, r5
 800fa94:	f000 f8de 	bl	800fc54 <_free_r>
 800fa98:	2000      	movs	r0, #0
 800fa9a:	6360      	str	r0, [r4, #52]	; 0x34
 800fa9c:	e7c0      	b.n	800fa20 <__sflush_r+0x1c>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	4628      	mov	r0, r5
 800faa2:	47b0      	blx	r6
 800faa4:	1c41      	adds	r1, r0, #1
 800faa6:	d1c8      	bne.n	800fa3a <__sflush_r+0x36>
 800faa8:	682b      	ldr	r3, [r5, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d0c5      	beq.n	800fa3a <__sflush_r+0x36>
 800faae:	2b1d      	cmp	r3, #29
 800fab0:	d001      	beq.n	800fab6 <__sflush_r+0xb2>
 800fab2:	2b16      	cmp	r3, #22
 800fab4:	d101      	bne.n	800faba <__sflush_r+0xb6>
 800fab6:	602f      	str	r7, [r5, #0]
 800fab8:	e7b1      	b.n	800fa1e <__sflush_r+0x1a>
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac0:	81a3      	strh	r3, [r4, #12]
 800fac2:	e7ad      	b.n	800fa20 <__sflush_r+0x1c>
 800fac4:	690f      	ldr	r7, [r1, #16]
 800fac6:	2f00      	cmp	r7, #0
 800fac8:	d0a9      	beq.n	800fa1e <__sflush_r+0x1a>
 800faca:	0793      	lsls	r3, r2, #30
 800facc:	680e      	ldr	r6, [r1, #0]
 800face:	bf08      	it	eq
 800fad0:	694b      	ldreq	r3, [r1, #20]
 800fad2:	600f      	str	r7, [r1, #0]
 800fad4:	bf18      	it	ne
 800fad6:	2300      	movne	r3, #0
 800fad8:	eba6 0807 	sub.w	r8, r6, r7
 800fadc:	608b      	str	r3, [r1, #8]
 800fade:	f1b8 0f00 	cmp.w	r8, #0
 800fae2:	dd9c      	ble.n	800fa1e <__sflush_r+0x1a>
 800fae4:	4643      	mov	r3, r8
 800fae6:	463a      	mov	r2, r7
 800fae8:	6a21      	ldr	r1, [r4, #32]
 800faea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800faec:	4628      	mov	r0, r5
 800faee:	47b0      	blx	r6
 800faf0:	2800      	cmp	r0, #0
 800faf2:	dc06      	bgt.n	800fb02 <__sflush_r+0xfe>
 800faf4:	89a3      	ldrh	r3, [r4, #12]
 800faf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fafa:	81a3      	strh	r3, [r4, #12]
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb00:	e78e      	b.n	800fa20 <__sflush_r+0x1c>
 800fb02:	4407      	add	r7, r0
 800fb04:	eba8 0800 	sub.w	r8, r8, r0
 800fb08:	e7e9      	b.n	800fade <__sflush_r+0xda>
 800fb0a:	bf00      	nop
 800fb0c:	20400001 	.word	0x20400001

0800fb10 <_fflush_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	690b      	ldr	r3, [r1, #16]
 800fb14:	4605      	mov	r5, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	b1db      	cbz	r3, 800fb52 <_fflush_r+0x42>
 800fb1a:	b118      	cbz	r0, 800fb24 <_fflush_r+0x14>
 800fb1c:	6983      	ldr	r3, [r0, #24]
 800fb1e:	b90b      	cbnz	r3, 800fb24 <_fflush_r+0x14>
 800fb20:	f7ff fa8e 	bl	800f040 <__sinit>
 800fb24:	4b0c      	ldr	r3, [pc, #48]	; (800fb58 <_fflush_r+0x48>)
 800fb26:	429c      	cmp	r4, r3
 800fb28:	d109      	bne.n	800fb3e <_fflush_r+0x2e>
 800fb2a:	686c      	ldr	r4, [r5, #4]
 800fb2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb30:	b17b      	cbz	r3, 800fb52 <_fflush_r+0x42>
 800fb32:	4621      	mov	r1, r4
 800fb34:	4628      	mov	r0, r5
 800fb36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb3a:	f7ff bf63 	b.w	800fa04 <__sflush_r>
 800fb3e:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <_fflush_r+0x4c>)
 800fb40:	429c      	cmp	r4, r3
 800fb42:	d101      	bne.n	800fb48 <_fflush_r+0x38>
 800fb44:	68ac      	ldr	r4, [r5, #8]
 800fb46:	e7f1      	b.n	800fb2c <_fflush_r+0x1c>
 800fb48:	4b05      	ldr	r3, [pc, #20]	; (800fb60 <_fflush_r+0x50>)
 800fb4a:	429c      	cmp	r4, r3
 800fb4c:	bf08      	it	eq
 800fb4e:	68ec      	ldreq	r4, [r5, #12]
 800fb50:	e7ec      	b.n	800fb2c <_fflush_r+0x1c>
 800fb52:	2000      	movs	r0, #0
 800fb54:	bd38      	pop	{r3, r4, r5, pc}
 800fb56:	bf00      	nop
 800fb58:	08011928 	.word	0x08011928
 800fb5c:	08011948 	.word	0x08011948
 800fb60:	08011908 	.word	0x08011908

0800fb64 <_lseek_r>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4c07      	ldr	r4, [pc, #28]	; (800fb84 <_lseek_r+0x20>)
 800fb68:	4605      	mov	r5, r0
 800fb6a:	4608      	mov	r0, r1
 800fb6c:	4611      	mov	r1, r2
 800fb6e:	2200      	movs	r2, #0
 800fb70:	6022      	str	r2, [r4, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	f7f3 fd96 	bl	80036a4 <_lseek>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	d102      	bne.n	800fb82 <_lseek_r+0x1e>
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	b103      	cbz	r3, 800fb82 <_lseek_r+0x1e>
 800fb80:	602b      	str	r3, [r5, #0]
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
 800fb84:	20002438 	.word	0x20002438

0800fb88 <__swhatbuf_r>:
 800fb88:	b570      	push	{r4, r5, r6, lr}
 800fb8a:	460e      	mov	r6, r1
 800fb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb90:	2900      	cmp	r1, #0
 800fb92:	b096      	sub	sp, #88	; 0x58
 800fb94:	4614      	mov	r4, r2
 800fb96:	461d      	mov	r5, r3
 800fb98:	da07      	bge.n	800fbaa <__swhatbuf_r+0x22>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	602b      	str	r3, [r5, #0]
 800fb9e:	89b3      	ldrh	r3, [r6, #12]
 800fba0:	061a      	lsls	r2, r3, #24
 800fba2:	d410      	bmi.n	800fbc6 <__swhatbuf_r+0x3e>
 800fba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fba8:	e00e      	b.n	800fbc8 <__swhatbuf_r+0x40>
 800fbaa:	466a      	mov	r2, sp
 800fbac:	f000 f8b2 	bl	800fd14 <_fstat_r>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	dbf2      	blt.n	800fb9a <__swhatbuf_r+0x12>
 800fbb4:	9a01      	ldr	r2, [sp, #4]
 800fbb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbbe:	425a      	negs	r2, r3
 800fbc0:	415a      	adcs	r2, r3
 800fbc2:	602a      	str	r2, [r5, #0]
 800fbc4:	e7ee      	b.n	800fba4 <__swhatbuf_r+0x1c>
 800fbc6:	2340      	movs	r3, #64	; 0x40
 800fbc8:	2000      	movs	r0, #0
 800fbca:	6023      	str	r3, [r4, #0]
 800fbcc:	b016      	add	sp, #88	; 0x58
 800fbce:	bd70      	pop	{r4, r5, r6, pc}

0800fbd0 <__smakebuf_r>:
 800fbd0:	898b      	ldrh	r3, [r1, #12]
 800fbd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbd4:	079d      	lsls	r5, r3, #30
 800fbd6:	4606      	mov	r6, r0
 800fbd8:	460c      	mov	r4, r1
 800fbda:	d507      	bpl.n	800fbec <__smakebuf_r+0x1c>
 800fbdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fbe0:	6023      	str	r3, [r4, #0]
 800fbe2:	6123      	str	r3, [r4, #16]
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	6163      	str	r3, [r4, #20]
 800fbe8:	b002      	add	sp, #8
 800fbea:	bd70      	pop	{r4, r5, r6, pc}
 800fbec:	ab01      	add	r3, sp, #4
 800fbee:	466a      	mov	r2, sp
 800fbf0:	f7ff ffca 	bl	800fb88 <__swhatbuf_r>
 800fbf4:	9900      	ldr	r1, [sp, #0]
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7ff faab 	bl	800f154 <_malloc_r>
 800fbfe:	b948      	cbnz	r0, 800fc14 <__smakebuf_r+0x44>
 800fc00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc04:	059a      	lsls	r2, r3, #22
 800fc06:	d4ef      	bmi.n	800fbe8 <__smakebuf_r+0x18>
 800fc08:	f023 0303 	bic.w	r3, r3, #3
 800fc0c:	f043 0302 	orr.w	r3, r3, #2
 800fc10:	81a3      	strh	r3, [r4, #12]
 800fc12:	e7e3      	b.n	800fbdc <__smakebuf_r+0xc>
 800fc14:	4b0d      	ldr	r3, [pc, #52]	; (800fc4c <__smakebuf_r+0x7c>)
 800fc16:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc18:	89a3      	ldrh	r3, [r4, #12]
 800fc1a:	6020      	str	r0, [r4, #0]
 800fc1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc20:	81a3      	strh	r3, [r4, #12]
 800fc22:	9b00      	ldr	r3, [sp, #0]
 800fc24:	6163      	str	r3, [r4, #20]
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	6120      	str	r0, [r4, #16]
 800fc2a:	b15b      	cbz	r3, 800fc44 <__smakebuf_r+0x74>
 800fc2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc30:	4630      	mov	r0, r6
 800fc32:	f000 f881 	bl	800fd38 <_isatty_r>
 800fc36:	b128      	cbz	r0, 800fc44 <__smakebuf_r+0x74>
 800fc38:	89a3      	ldrh	r3, [r4, #12]
 800fc3a:	f023 0303 	bic.w	r3, r3, #3
 800fc3e:	f043 0301 	orr.w	r3, r3, #1
 800fc42:	81a3      	strh	r3, [r4, #12]
 800fc44:	89a3      	ldrh	r3, [r4, #12]
 800fc46:	431d      	orrs	r5, r3
 800fc48:	81a5      	strh	r5, [r4, #12]
 800fc4a:	e7cd      	b.n	800fbe8 <__smakebuf_r+0x18>
 800fc4c:	0800f009 	.word	0x0800f009

0800fc50 <__malloc_lock>:
 800fc50:	4770      	bx	lr

0800fc52 <__malloc_unlock>:
 800fc52:	4770      	bx	lr

0800fc54 <_free_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4605      	mov	r5, r0
 800fc58:	2900      	cmp	r1, #0
 800fc5a:	d045      	beq.n	800fce8 <_free_r+0x94>
 800fc5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc60:	1f0c      	subs	r4, r1, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	bfb8      	it	lt
 800fc66:	18e4      	addlt	r4, r4, r3
 800fc68:	f7ff fff2 	bl	800fc50 <__malloc_lock>
 800fc6c:	4a1f      	ldr	r2, [pc, #124]	; (800fcec <_free_r+0x98>)
 800fc6e:	6813      	ldr	r3, [r2, #0]
 800fc70:	4610      	mov	r0, r2
 800fc72:	b933      	cbnz	r3, 800fc82 <_free_r+0x2e>
 800fc74:	6063      	str	r3, [r4, #4]
 800fc76:	6014      	str	r4, [r2, #0]
 800fc78:	4628      	mov	r0, r5
 800fc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc7e:	f7ff bfe8 	b.w	800fc52 <__malloc_unlock>
 800fc82:	42a3      	cmp	r3, r4
 800fc84:	d90c      	bls.n	800fca0 <_free_r+0x4c>
 800fc86:	6821      	ldr	r1, [r4, #0]
 800fc88:	1862      	adds	r2, r4, r1
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	bf04      	itt	eq
 800fc8e:	681a      	ldreq	r2, [r3, #0]
 800fc90:	685b      	ldreq	r3, [r3, #4]
 800fc92:	6063      	str	r3, [r4, #4]
 800fc94:	bf04      	itt	eq
 800fc96:	1852      	addeq	r2, r2, r1
 800fc98:	6022      	streq	r2, [r4, #0]
 800fc9a:	6004      	str	r4, [r0, #0]
 800fc9c:	e7ec      	b.n	800fc78 <_free_r+0x24>
 800fc9e:	4613      	mov	r3, r2
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	b10a      	cbz	r2, 800fca8 <_free_r+0x54>
 800fca4:	42a2      	cmp	r2, r4
 800fca6:	d9fa      	bls.n	800fc9e <_free_r+0x4a>
 800fca8:	6819      	ldr	r1, [r3, #0]
 800fcaa:	1858      	adds	r0, r3, r1
 800fcac:	42a0      	cmp	r0, r4
 800fcae:	d10b      	bne.n	800fcc8 <_free_r+0x74>
 800fcb0:	6820      	ldr	r0, [r4, #0]
 800fcb2:	4401      	add	r1, r0
 800fcb4:	1858      	adds	r0, r3, r1
 800fcb6:	4282      	cmp	r2, r0
 800fcb8:	6019      	str	r1, [r3, #0]
 800fcba:	d1dd      	bne.n	800fc78 <_free_r+0x24>
 800fcbc:	6810      	ldr	r0, [r2, #0]
 800fcbe:	6852      	ldr	r2, [r2, #4]
 800fcc0:	605a      	str	r2, [r3, #4]
 800fcc2:	4401      	add	r1, r0
 800fcc4:	6019      	str	r1, [r3, #0]
 800fcc6:	e7d7      	b.n	800fc78 <_free_r+0x24>
 800fcc8:	d902      	bls.n	800fcd0 <_free_r+0x7c>
 800fcca:	230c      	movs	r3, #12
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	e7d3      	b.n	800fc78 <_free_r+0x24>
 800fcd0:	6820      	ldr	r0, [r4, #0]
 800fcd2:	1821      	adds	r1, r4, r0
 800fcd4:	428a      	cmp	r2, r1
 800fcd6:	bf04      	itt	eq
 800fcd8:	6811      	ldreq	r1, [r2, #0]
 800fcda:	6852      	ldreq	r2, [r2, #4]
 800fcdc:	6062      	str	r2, [r4, #4]
 800fcde:	bf04      	itt	eq
 800fce0:	1809      	addeq	r1, r1, r0
 800fce2:	6021      	streq	r1, [r4, #0]
 800fce4:	605c      	str	r4, [r3, #4]
 800fce6:	e7c7      	b.n	800fc78 <_free_r+0x24>
 800fce8:	bd38      	pop	{r3, r4, r5, pc}
 800fcea:	bf00      	nop
 800fcec:	2000046c 	.word	0x2000046c

0800fcf0 <_read_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4c07      	ldr	r4, [pc, #28]	; (800fd10 <_read_r+0x20>)
 800fcf4:	4605      	mov	r5, r0
 800fcf6:	4608      	mov	r0, r1
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	6022      	str	r2, [r4, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	f7f3 fc8c 	bl	800361c <_read>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_read_r+0x1e>
 800fd08:	6823      	ldr	r3, [r4, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_read_r+0x1e>
 800fd0c:	602b      	str	r3, [r5, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	20002438 	.word	0x20002438

0800fd14 <_fstat_r>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4c07      	ldr	r4, [pc, #28]	; (800fd34 <_fstat_r+0x20>)
 800fd18:	2300      	movs	r3, #0
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	4608      	mov	r0, r1
 800fd1e:	4611      	mov	r1, r2
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	f7f3 fca4 	bl	800366e <_fstat>
 800fd26:	1c43      	adds	r3, r0, #1
 800fd28:	d102      	bne.n	800fd30 <_fstat_r+0x1c>
 800fd2a:	6823      	ldr	r3, [r4, #0]
 800fd2c:	b103      	cbz	r3, 800fd30 <_fstat_r+0x1c>
 800fd2e:	602b      	str	r3, [r5, #0]
 800fd30:	bd38      	pop	{r3, r4, r5, pc}
 800fd32:	bf00      	nop
 800fd34:	20002438 	.word	0x20002438

0800fd38 <_isatty_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4c06      	ldr	r4, [pc, #24]	; (800fd54 <_isatty_r+0x1c>)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4605      	mov	r5, r0
 800fd40:	4608      	mov	r0, r1
 800fd42:	6023      	str	r3, [r4, #0]
 800fd44:	f7f3 fca3 	bl	800368e <_isatty>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d102      	bne.n	800fd52 <_isatty_r+0x1a>
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	b103      	cbz	r3, 800fd52 <_isatty_r+0x1a>
 800fd50:	602b      	str	r3, [r5, #0]
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	20002438 	.word	0x20002438

0800fd58 <pow>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	ed2d 8b04 	vpush	{d8-d9}
 800fd60:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010034 <pow+0x2dc>
 800fd64:	b08d      	sub	sp, #52	; 0x34
 800fd66:	ec57 6b10 	vmov	r6, r7, d0
 800fd6a:	ec55 4b11 	vmov	r4, r5, d1
 800fd6e:	f000 fac7 	bl	8010300 <__ieee754_pow>
 800fd72:	f999 3000 	ldrsb.w	r3, [r9]
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	eeb0 8a40 	vmov.f32	s16, s0
 800fd7e:	eef0 8a60 	vmov.f32	s17, s1
 800fd82:	46c8      	mov	r8, r9
 800fd84:	d05f      	beq.n	800fe46 <pow+0xee>
 800fd86:	4622      	mov	r2, r4
 800fd88:	462b      	mov	r3, r5
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	f7f0 fedd 	bl	8000b4c <__aeabi_dcmpun>
 800fd92:	4683      	mov	fp, r0
 800fd94:	2800      	cmp	r0, #0
 800fd96:	d156      	bne.n	800fe46 <pow+0xee>
 800fd98:	4632      	mov	r2, r6
 800fd9a:	463b      	mov	r3, r7
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	4639      	mov	r1, r7
 800fda0:	f7f0 fed4 	bl	8000b4c <__aeabi_dcmpun>
 800fda4:	9001      	str	r0, [sp, #4]
 800fda6:	b1e8      	cbz	r0, 800fde4 <pow+0x8c>
 800fda8:	2200      	movs	r2, #0
 800fdaa:	2300      	movs	r3, #0
 800fdac:	4620      	mov	r0, r4
 800fdae:	4629      	mov	r1, r5
 800fdb0:	f7f0 fe9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d046      	beq.n	800fe46 <pow+0xee>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	9302      	str	r3, [sp, #8]
 800fdbc:	4b96      	ldr	r3, [pc, #600]	; (8010018 <pow+0x2c0>)
 800fdbe:	9303      	str	r3, [sp, #12]
 800fdc0:	4b96      	ldr	r3, [pc, #600]	; (801001c <pow+0x2c4>)
 800fdc2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fdcc:	9b00      	ldr	r3, [sp, #0]
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fdd4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800fdd8:	d033      	beq.n	800fe42 <pow+0xea>
 800fdda:	a802      	add	r0, sp, #8
 800fddc:	f001 fb22 	bl	8011424 <matherr>
 800fde0:	bb48      	cbnz	r0, 800fe36 <pow+0xde>
 800fde2:	e05d      	b.n	800fea0 <pow+0x148>
 800fde4:	f04f 0a00 	mov.w	sl, #0
 800fde8:	f04f 0b00 	mov.w	fp, #0
 800fdec:	4652      	mov	r2, sl
 800fdee:	465b      	mov	r3, fp
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	4639      	mov	r1, r7
 800fdf4:	f7f0 fe78 	bl	8000ae8 <__aeabi_dcmpeq>
 800fdf8:	ec4b ab19 	vmov	d9, sl, fp
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d054      	beq.n	800feaa <pow+0x152>
 800fe00:	4652      	mov	r2, sl
 800fe02:	465b      	mov	r3, fp
 800fe04:	4620      	mov	r0, r4
 800fe06:	4629      	mov	r1, r5
 800fe08:	f7f0 fe6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe0c:	4680      	mov	r8, r0
 800fe0e:	b318      	cbz	r0, 800fe58 <pow+0x100>
 800fe10:	2301      	movs	r3, #1
 800fe12:	9302      	str	r3, [sp, #8]
 800fe14:	4b80      	ldr	r3, [pc, #512]	; (8010018 <pow+0x2c0>)
 800fe16:	9303      	str	r3, [sp, #12]
 800fe18:	9b01      	ldr	r3, [sp, #4]
 800fe1a:	930a      	str	r3, [sp, #40]	; 0x28
 800fe1c:	9b00      	ldr	r3, [sp, #0]
 800fe1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fe22:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800fe26:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0d5      	beq.n	800fdda <pow+0x82>
 800fe2e:	4b7b      	ldr	r3, [pc, #492]	; (801001c <pow+0x2c4>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fe36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe38:	b11b      	cbz	r3, 800fe42 <pow+0xea>
 800fe3a:	f7ff f86f 	bl	800ef1c <__errno>
 800fe3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe40:	6003      	str	r3, [r0, #0]
 800fe42:	ed9d 8b08 	vldr	d8, [sp, #32]
 800fe46:	eeb0 0a48 	vmov.f32	s0, s16
 800fe4a:	eef0 0a68 	vmov.f32	s1, s17
 800fe4e:	b00d      	add	sp, #52	; 0x34
 800fe50:	ecbd 8b04 	vpop	{d8-d9}
 800fe54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe58:	ec45 4b10 	vmov	d0, r4, r5
 800fe5c:	f001 fada 	bl	8011414 <finite>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d0f0      	beq.n	800fe46 <pow+0xee>
 800fe64:	4652      	mov	r2, sl
 800fe66:	465b      	mov	r3, fp
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f7f0 fe46 	bl	8000afc <__aeabi_dcmplt>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d0e8      	beq.n	800fe46 <pow+0xee>
 800fe74:	2301      	movs	r3, #1
 800fe76:	9302      	str	r3, [sp, #8]
 800fe78:	4b67      	ldr	r3, [pc, #412]	; (8010018 <pow+0x2c0>)
 800fe7a:	9303      	str	r3, [sp, #12]
 800fe7c:	f999 3000 	ldrsb.w	r3, [r9]
 800fe80:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800fe84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fe88:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800fe8c:	b913      	cbnz	r3, 800fe94 <pow+0x13c>
 800fe8e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800fe92:	e7a2      	b.n	800fdda <pow+0x82>
 800fe94:	4962      	ldr	r1, [pc, #392]	; (8010020 <pow+0x2c8>)
 800fe96:	2000      	movs	r0, #0
 800fe98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	d19c      	bne.n	800fdda <pow+0x82>
 800fea0:	f7ff f83c 	bl	800ef1c <__errno>
 800fea4:	2321      	movs	r3, #33	; 0x21
 800fea6:	6003      	str	r3, [r0, #0]
 800fea8:	e7c5      	b.n	800fe36 <pow+0xde>
 800feaa:	eeb0 0a48 	vmov.f32	s0, s16
 800feae:	eef0 0a68 	vmov.f32	s1, s17
 800feb2:	f001 faaf 	bl	8011414 <finite>
 800feb6:	9000      	str	r0, [sp, #0]
 800feb8:	2800      	cmp	r0, #0
 800feba:	f040 8081 	bne.w	800ffc0 <pow+0x268>
 800febe:	ec47 6b10 	vmov	d0, r6, r7
 800fec2:	f001 faa7 	bl	8011414 <finite>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d07a      	beq.n	800ffc0 <pow+0x268>
 800feca:	ec45 4b10 	vmov	d0, r4, r5
 800fece:	f001 faa1 	bl	8011414 <finite>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d074      	beq.n	800ffc0 <pow+0x268>
 800fed6:	ec53 2b18 	vmov	r2, r3, d8
 800feda:	ee18 0a10 	vmov	r0, s16
 800fede:	4619      	mov	r1, r3
 800fee0:	f7f0 fe34 	bl	8000b4c <__aeabi_dcmpun>
 800fee4:	f999 9000 	ldrsb.w	r9, [r9]
 800fee8:	4b4b      	ldr	r3, [pc, #300]	; (8010018 <pow+0x2c0>)
 800feea:	b1b0      	cbz	r0, 800ff1a <pow+0x1c2>
 800feec:	2201      	movs	r2, #1
 800feee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fef2:	9b00      	ldr	r3, [sp, #0]
 800fef4:	930a      	str	r3, [sp, #40]	; 0x28
 800fef6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fefa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800fefe:	f1b9 0f00 	cmp.w	r9, #0
 800ff02:	d0c4      	beq.n	800fe8e <pow+0x136>
 800ff04:	4652      	mov	r2, sl
 800ff06:	465b      	mov	r3, fp
 800ff08:	4650      	mov	r0, sl
 800ff0a:	4659      	mov	r1, fp
 800ff0c:	f7f0 fcae 	bl	800086c <__aeabi_ddiv>
 800ff10:	f1b9 0f02 	cmp.w	r9, #2
 800ff14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff18:	e7c1      	b.n	800fe9e <pow+0x146>
 800ff1a:	2203      	movs	r2, #3
 800ff1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff20:	900a      	str	r0, [sp, #40]	; 0x28
 800ff22:	4629      	mov	r1, r5
 800ff24:	4620      	mov	r0, r4
 800ff26:	2200      	movs	r2, #0
 800ff28:	4b3e      	ldr	r3, [pc, #248]	; (8010024 <pow+0x2cc>)
 800ff2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ff2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ff32:	f7f0 fb71 	bl	8000618 <__aeabi_dmul>
 800ff36:	4604      	mov	r4, r0
 800ff38:	460d      	mov	r5, r1
 800ff3a:	f1b9 0f00 	cmp.w	r9, #0
 800ff3e:	d124      	bne.n	800ff8a <pow+0x232>
 800ff40:	4b39      	ldr	r3, [pc, #228]	; (8010028 <pow+0x2d0>)
 800ff42:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ff46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	4652      	mov	r2, sl
 800ff4e:	465b      	mov	r3, fp
 800ff50:	4639      	mov	r1, r7
 800ff52:	f7f0 fdd3 	bl	8000afc <__aeabi_dcmplt>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d056      	beq.n	8010008 <pow+0x2b0>
 800ff5a:	ec45 4b10 	vmov	d0, r4, r5
 800ff5e:	f001 fa6b 	bl	8011438 <rint>
 800ff62:	4622      	mov	r2, r4
 800ff64:	462b      	mov	r3, r5
 800ff66:	ec51 0b10 	vmov	r0, r1, d0
 800ff6a:	f7f0 fdbd 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff6e:	b920      	cbnz	r0, 800ff7a <pow+0x222>
 800ff70:	4b2e      	ldr	r3, [pc, #184]	; (801002c <pow+0x2d4>)
 800ff72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ff76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff7a:	f998 3000 	ldrsb.w	r3, [r8]
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	d142      	bne.n	8010008 <pow+0x2b0>
 800ff82:	f7fe ffcb 	bl	800ef1c <__errno>
 800ff86:	2322      	movs	r3, #34	; 0x22
 800ff88:	e78d      	b.n	800fea6 <pow+0x14e>
 800ff8a:	4b29      	ldr	r3, [pc, #164]	; (8010030 <pow+0x2d8>)
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff92:	4630      	mov	r0, r6
 800ff94:	4652      	mov	r2, sl
 800ff96:	465b      	mov	r3, fp
 800ff98:	4639      	mov	r1, r7
 800ff9a:	f7f0 fdaf 	bl	8000afc <__aeabi_dcmplt>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d0eb      	beq.n	800ff7a <pow+0x222>
 800ffa2:	ec45 4b10 	vmov	d0, r4, r5
 800ffa6:	f001 fa47 	bl	8011438 <rint>
 800ffaa:	4622      	mov	r2, r4
 800ffac:	462b      	mov	r3, r5
 800ffae:	ec51 0b10 	vmov	r0, r1, d0
 800ffb2:	f7f0 fd99 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	d1df      	bne.n	800ff7a <pow+0x222>
 800ffba:	2200      	movs	r2, #0
 800ffbc:	4b18      	ldr	r3, [pc, #96]	; (8010020 <pow+0x2c8>)
 800ffbe:	e7da      	b.n	800ff76 <pow+0x21e>
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	ec51 0b18 	vmov	r0, r1, d8
 800ffc8:	f7f0 fd8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	f43f af3a 	beq.w	800fe46 <pow+0xee>
 800ffd2:	ec47 6b10 	vmov	d0, r6, r7
 800ffd6:	f001 fa1d 	bl	8011414 <finite>
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	f43f af33 	beq.w	800fe46 <pow+0xee>
 800ffe0:	ec45 4b10 	vmov	d0, r4, r5
 800ffe4:	f001 fa16 	bl	8011414 <finite>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	f43f af2c 	beq.w	800fe46 <pow+0xee>
 800ffee:	2304      	movs	r3, #4
 800fff0:	9302      	str	r3, [sp, #8]
 800fff2:	4b09      	ldr	r3, [pc, #36]	; (8010018 <pow+0x2c0>)
 800fff4:	9303      	str	r3, [sp, #12]
 800fff6:	2300      	movs	r3, #0
 800fff8:	930a      	str	r3, [sp, #40]	; 0x28
 800fffa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fffe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010002:	ed8d 9b08 	vstr	d9, [sp, #32]
 8010006:	e7b8      	b.n	800ff7a <pow+0x222>
 8010008:	a802      	add	r0, sp, #8
 801000a:	f001 fa0b 	bl	8011424 <matherr>
 801000e:	2800      	cmp	r0, #0
 8010010:	f47f af11 	bne.w	800fe36 <pow+0xde>
 8010014:	e7b5      	b.n	800ff82 <pow+0x22a>
 8010016:	bf00      	nop
 8010018:	0801199b 	.word	0x0801199b
 801001c:	3ff00000 	.word	0x3ff00000
 8010020:	fff00000 	.word	0xfff00000
 8010024:	3fe00000 	.word	0x3fe00000
 8010028:	47efffff 	.word	0x47efffff
 801002c:	c7efffff 	.word	0xc7efffff
 8010030:	7ff00000 	.word	0x7ff00000
 8010034:	200001f0 	.word	0x200001f0

08010038 <powf>:
 8010038:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801003c:	ed2d 8b04 	vpush	{d8-d9}
 8010040:	4ca7      	ldr	r4, [pc, #668]	; (80102e0 <powf+0x2a8>)
 8010042:	b08a      	sub	sp, #40	; 0x28
 8010044:	eef0 8a40 	vmov.f32	s17, s0
 8010048:	eeb0 8a60 	vmov.f32	s16, s1
 801004c:	f000 ff16 	bl	8010e7c <__ieee754_powf>
 8010050:	f994 5000 	ldrsb.w	r5, [r4]
 8010054:	1c6b      	adds	r3, r5, #1
 8010056:	eeb0 9a40 	vmov.f32	s18, s0
 801005a:	4626      	mov	r6, r4
 801005c:	d05f      	beq.n	801011e <powf+0xe6>
 801005e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010066:	d65a      	bvs.n	801011e <powf+0xe6>
 8010068:	eef4 8a68 	vcmp.f32	s17, s17
 801006c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010070:	d721      	bvc.n	80100b6 <powf+0x7e>
 8010072:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007a:	d150      	bne.n	801011e <powf+0xe6>
 801007c:	2301      	movs	r3, #1
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	4b98      	ldr	r3, [pc, #608]	; (80102e4 <powf+0x2ac>)
 8010082:	9301      	str	r3, [sp, #4]
 8010084:	ee18 0a90 	vmov	r0, s17
 8010088:	2300      	movs	r3, #0
 801008a:	9308      	str	r3, [sp, #32]
 801008c:	f7f0 fa6c 	bl	8000568 <__aeabi_f2d>
 8010090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010094:	ee18 0a10 	vmov	r0, s16
 8010098:	f7f0 fa66 	bl	8000568 <__aeabi_f2d>
 801009c:	4b92      	ldr	r3, [pc, #584]	; (80102e8 <powf+0x2b0>)
 801009e:	2200      	movs	r2, #0
 80100a0:	2d02      	cmp	r5, #2
 80100a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80100aa:	d032      	beq.n	8010112 <powf+0xda>
 80100ac:	4668      	mov	r0, sp
 80100ae:	f001 f9b9 	bl	8011424 <matherr>
 80100b2:	bb40      	cbnz	r0, 8010106 <powf+0xce>
 80100b4:	e065      	b.n	8010182 <powf+0x14a>
 80100b6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80102ec <powf+0x2b4>
 80100ba:	eef4 8a69 	vcmp.f32	s17, s19
 80100be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c2:	d163      	bne.n	801018c <powf+0x154>
 80100c4:	eeb4 8a69 	vcmp.f32	s16, s19
 80100c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100cc:	d12e      	bne.n	801012c <powf+0xf4>
 80100ce:	2301      	movs	r3, #1
 80100d0:	9300      	str	r3, [sp, #0]
 80100d2:	4b84      	ldr	r3, [pc, #528]	; (80102e4 <powf+0x2ac>)
 80100d4:	9301      	str	r3, [sp, #4]
 80100d6:	ee18 0a90 	vmov	r0, s17
 80100da:	2300      	movs	r3, #0
 80100dc:	9308      	str	r3, [sp, #32]
 80100de:	f7f0 fa43 	bl	8000568 <__aeabi_f2d>
 80100e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100e6:	ee18 0a10 	vmov	r0, s16
 80100ea:	f7f0 fa3d 	bl	8000568 <__aeabi_f2d>
 80100ee:	2200      	movs	r2, #0
 80100f0:	2300      	movs	r3, #0
 80100f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80100fa:	2d00      	cmp	r5, #0
 80100fc:	d0d6      	beq.n	80100ac <powf+0x74>
 80100fe:	4b7a      	ldr	r3, [pc, #488]	; (80102e8 <powf+0x2b0>)
 8010100:	2200      	movs	r2, #0
 8010102:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010106:	9b08      	ldr	r3, [sp, #32]
 8010108:	b11b      	cbz	r3, 8010112 <powf+0xda>
 801010a:	f7fe ff07 	bl	800ef1c <__errno>
 801010e:	9b08      	ldr	r3, [sp, #32]
 8010110:	6003      	str	r3, [r0, #0]
 8010112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010116:	f7f0 fd57 	bl	8000bc8 <__aeabi_d2f>
 801011a:	ee09 0a10 	vmov	s18, r0
 801011e:	eeb0 0a49 	vmov.f32	s0, s18
 8010122:	b00a      	add	sp, #40	; 0x28
 8010124:	ecbd 8b04 	vpop	{d8-d9}
 8010128:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801012c:	eeb0 0a48 	vmov.f32	s0, s16
 8010130:	f001 fa83 	bl	801163a <finitef>
 8010134:	2800      	cmp	r0, #0
 8010136:	d0f2      	beq.n	801011e <powf+0xe6>
 8010138:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801013c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010140:	d5ed      	bpl.n	801011e <powf+0xe6>
 8010142:	2301      	movs	r3, #1
 8010144:	9300      	str	r3, [sp, #0]
 8010146:	4b67      	ldr	r3, [pc, #412]	; (80102e4 <powf+0x2ac>)
 8010148:	9301      	str	r3, [sp, #4]
 801014a:	ee18 0a90 	vmov	r0, s17
 801014e:	2300      	movs	r3, #0
 8010150:	9308      	str	r3, [sp, #32]
 8010152:	f7f0 fa09 	bl	8000568 <__aeabi_f2d>
 8010156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801015a:	ee18 0a10 	vmov	r0, s16
 801015e:	f7f0 fa03 	bl	8000568 <__aeabi_f2d>
 8010162:	f994 3000 	ldrsb.w	r3, [r4]
 8010166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801016a:	b923      	cbnz	r3, 8010176 <powf+0x13e>
 801016c:	2200      	movs	r2, #0
 801016e:	2300      	movs	r3, #0
 8010170:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010174:	e79a      	b.n	80100ac <powf+0x74>
 8010176:	495e      	ldr	r1, [pc, #376]	; (80102f0 <powf+0x2b8>)
 8010178:	2000      	movs	r0, #0
 801017a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801017e:	2b02      	cmp	r3, #2
 8010180:	d194      	bne.n	80100ac <powf+0x74>
 8010182:	f7fe fecb 	bl	800ef1c <__errno>
 8010186:	2321      	movs	r3, #33	; 0x21
 8010188:	6003      	str	r3, [r0, #0]
 801018a:	e7bc      	b.n	8010106 <powf+0xce>
 801018c:	f001 fa55 	bl	801163a <finitef>
 8010190:	4605      	mov	r5, r0
 8010192:	2800      	cmp	r0, #0
 8010194:	d173      	bne.n	801027e <powf+0x246>
 8010196:	eeb0 0a68 	vmov.f32	s0, s17
 801019a:	f001 fa4e 	bl	801163a <finitef>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d06d      	beq.n	801027e <powf+0x246>
 80101a2:	eeb0 0a48 	vmov.f32	s0, s16
 80101a6:	f001 fa48 	bl	801163a <finitef>
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d067      	beq.n	801027e <powf+0x246>
 80101ae:	ee18 0a90 	vmov	r0, s17
 80101b2:	f7f0 f9d9 	bl	8000568 <__aeabi_f2d>
 80101b6:	4680      	mov	r8, r0
 80101b8:	ee18 0a10 	vmov	r0, s16
 80101bc:	4689      	mov	r9, r1
 80101be:	f7f0 f9d3 	bl	8000568 <__aeabi_f2d>
 80101c2:	eeb4 9a49 	vcmp.f32	s18, s18
 80101c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ca:	f994 4000 	ldrsb.w	r4, [r4]
 80101ce:	4b45      	ldr	r3, [pc, #276]	; (80102e4 <powf+0x2ac>)
 80101d0:	d713      	bvc.n	80101fa <powf+0x1c2>
 80101d2:	2201      	movs	r2, #1
 80101d4:	e9cd 2300 	strd	r2, r3, [sp]
 80101d8:	9508      	str	r5, [sp, #32]
 80101da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80101de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101e2:	2c00      	cmp	r4, #0
 80101e4:	d0c2      	beq.n	801016c <powf+0x134>
 80101e6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80101ea:	ee17 0a90 	vmov	r0, s15
 80101ee:	f7f0 f9bb 	bl	8000568 <__aeabi_f2d>
 80101f2:	2c02      	cmp	r4, #2
 80101f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80101f8:	e7c2      	b.n	8010180 <powf+0x148>
 80101fa:	2203      	movs	r2, #3
 80101fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010200:	e9cd 2300 	strd	r2, r3, [sp]
 8010204:	9508      	str	r5, [sp, #32]
 8010206:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801020a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801020e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010212:	b9fc      	cbnz	r4, 8010254 <powf+0x21c>
 8010214:	4b37      	ldr	r3, [pc, #220]	; (80102f4 <powf+0x2bc>)
 8010216:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801021a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801021e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010226:	d553      	bpl.n	80102d0 <powf+0x298>
 8010228:	eeb0 0a48 	vmov.f32	s0, s16
 801022c:	f001 fa16 	bl	801165c <rintf>
 8010230:	eeb4 0a48 	vcmp.f32	s0, s16
 8010234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010238:	d004      	beq.n	8010244 <powf+0x20c>
 801023a:	4b2f      	ldr	r3, [pc, #188]	; (80102f8 <powf+0x2c0>)
 801023c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010240:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010244:	f996 3000 	ldrsb.w	r3, [r6]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d141      	bne.n	80102d0 <powf+0x298>
 801024c:	f7fe fe66 	bl	800ef1c <__errno>
 8010250:	2322      	movs	r3, #34	; 0x22
 8010252:	e799      	b.n	8010188 <powf+0x150>
 8010254:	4b29      	ldr	r3, [pc, #164]	; (80102fc <powf+0x2c4>)
 8010256:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801025a:	2200      	movs	r2, #0
 801025c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010260:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010264:	d5ee      	bpl.n	8010244 <powf+0x20c>
 8010266:	eeb0 0a48 	vmov.f32	s0, s16
 801026a:	f001 f9f7 	bl	801165c <rintf>
 801026e:	eeb4 0a48 	vcmp.f32	s0, s16
 8010272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010276:	d0e5      	beq.n	8010244 <powf+0x20c>
 8010278:	2200      	movs	r2, #0
 801027a:	4b1d      	ldr	r3, [pc, #116]	; (80102f0 <powf+0x2b8>)
 801027c:	e7e0      	b.n	8010240 <powf+0x208>
 801027e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010286:	f47f af4a 	bne.w	801011e <powf+0xe6>
 801028a:	eeb0 0a68 	vmov.f32	s0, s17
 801028e:	f001 f9d4 	bl	801163a <finitef>
 8010292:	2800      	cmp	r0, #0
 8010294:	f43f af43 	beq.w	801011e <powf+0xe6>
 8010298:	eeb0 0a48 	vmov.f32	s0, s16
 801029c:	f001 f9cd 	bl	801163a <finitef>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	f43f af3c 	beq.w	801011e <powf+0xe6>
 80102a6:	2304      	movs	r3, #4
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	4b0e      	ldr	r3, [pc, #56]	; (80102e4 <powf+0x2ac>)
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	ee18 0a90 	vmov	r0, s17
 80102b2:	2300      	movs	r3, #0
 80102b4:	9308      	str	r3, [sp, #32]
 80102b6:	f7f0 f957 	bl	8000568 <__aeabi_f2d>
 80102ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102be:	ee18 0a10 	vmov	r0, s16
 80102c2:	f7f0 f951 	bl	8000568 <__aeabi_f2d>
 80102c6:	2200      	movs	r2, #0
 80102c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102cc:	2300      	movs	r3, #0
 80102ce:	e7b7      	b.n	8010240 <powf+0x208>
 80102d0:	4668      	mov	r0, sp
 80102d2:	f001 f8a7 	bl	8011424 <matherr>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	f47f af15 	bne.w	8010106 <powf+0xce>
 80102dc:	e7b6      	b.n	801024c <powf+0x214>
 80102de:	bf00      	nop
 80102e0:	200001f0 	.word	0x200001f0
 80102e4:	0801199f 	.word	0x0801199f
 80102e8:	3ff00000 	.word	0x3ff00000
 80102ec:	00000000 	.word	0x00000000
 80102f0:	fff00000 	.word	0xfff00000
 80102f4:	47efffff 	.word	0x47efffff
 80102f8:	c7efffff 	.word	0xc7efffff
 80102fc:	7ff00000 	.word	0x7ff00000

08010300 <__ieee754_pow>:
 8010300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010304:	b091      	sub	sp, #68	; 0x44
 8010306:	ed8d 1b00 	vstr	d1, [sp]
 801030a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801030e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010312:	ea58 0302 	orrs.w	r3, r8, r2
 8010316:	ec57 6b10 	vmov	r6, r7, d0
 801031a:	f000 84be 	beq.w	8010c9a <__ieee754_pow+0x99a>
 801031e:	4b7a      	ldr	r3, [pc, #488]	; (8010508 <__ieee754_pow+0x208>)
 8010320:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010324:	429c      	cmp	r4, r3
 8010326:	463d      	mov	r5, r7
 8010328:	ee10 aa10 	vmov	sl, s0
 801032c:	dc09      	bgt.n	8010342 <__ieee754_pow+0x42>
 801032e:	d103      	bne.n	8010338 <__ieee754_pow+0x38>
 8010330:	b93e      	cbnz	r6, 8010342 <__ieee754_pow+0x42>
 8010332:	45a0      	cmp	r8, r4
 8010334:	dc0d      	bgt.n	8010352 <__ieee754_pow+0x52>
 8010336:	e001      	b.n	801033c <__ieee754_pow+0x3c>
 8010338:	4598      	cmp	r8, r3
 801033a:	dc02      	bgt.n	8010342 <__ieee754_pow+0x42>
 801033c:	4598      	cmp	r8, r3
 801033e:	d10e      	bne.n	801035e <__ieee754_pow+0x5e>
 8010340:	b16a      	cbz	r2, 801035e <__ieee754_pow+0x5e>
 8010342:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010346:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801034a:	ea54 030a 	orrs.w	r3, r4, sl
 801034e:	f000 84a4 	beq.w	8010c9a <__ieee754_pow+0x99a>
 8010352:	486e      	ldr	r0, [pc, #440]	; (801050c <__ieee754_pow+0x20c>)
 8010354:	b011      	add	sp, #68	; 0x44
 8010356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035a:	f001 b865 	b.w	8011428 <nan>
 801035e:	2d00      	cmp	r5, #0
 8010360:	da53      	bge.n	801040a <__ieee754_pow+0x10a>
 8010362:	4b6b      	ldr	r3, [pc, #428]	; (8010510 <__ieee754_pow+0x210>)
 8010364:	4598      	cmp	r8, r3
 8010366:	dc4d      	bgt.n	8010404 <__ieee754_pow+0x104>
 8010368:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801036c:	4598      	cmp	r8, r3
 801036e:	dd4c      	ble.n	801040a <__ieee754_pow+0x10a>
 8010370:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010374:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010378:	2b14      	cmp	r3, #20
 801037a:	dd26      	ble.n	80103ca <__ieee754_pow+0xca>
 801037c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010380:	fa22 f103 	lsr.w	r1, r2, r3
 8010384:	fa01 f303 	lsl.w	r3, r1, r3
 8010388:	4293      	cmp	r3, r2
 801038a:	d13e      	bne.n	801040a <__ieee754_pow+0x10a>
 801038c:	f001 0101 	and.w	r1, r1, #1
 8010390:	f1c1 0b02 	rsb	fp, r1, #2
 8010394:	2a00      	cmp	r2, #0
 8010396:	d15b      	bne.n	8010450 <__ieee754_pow+0x150>
 8010398:	4b5b      	ldr	r3, [pc, #364]	; (8010508 <__ieee754_pow+0x208>)
 801039a:	4598      	cmp	r8, r3
 801039c:	d124      	bne.n	80103e8 <__ieee754_pow+0xe8>
 801039e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80103a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80103a6:	ea53 030a 	orrs.w	r3, r3, sl
 80103aa:	f000 8476 	beq.w	8010c9a <__ieee754_pow+0x99a>
 80103ae:	4b59      	ldr	r3, [pc, #356]	; (8010514 <__ieee754_pow+0x214>)
 80103b0:	429c      	cmp	r4, r3
 80103b2:	dd2d      	ble.n	8010410 <__ieee754_pow+0x110>
 80103b4:	f1b9 0f00 	cmp.w	r9, #0
 80103b8:	f280 8473 	bge.w	8010ca2 <__ieee754_pow+0x9a2>
 80103bc:	2000      	movs	r0, #0
 80103be:	2100      	movs	r1, #0
 80103c0:	ec41 0b10 	vmov	d0, r0, r1
 80103c4:	b011      	add	sp, #68	; 0x44
 80103c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ca:	2a00      	cmp	r2, #0
 80103cc:	d13e      	bne.n	801044c <__ieee754_pow+0x14c>
 80103ce:	f1c3 0314 	rsb	r3, r3, #20
 80103d2:	fa48 f103 	asr.w	r1, r8, r3
 80103d6:	fa01 f303 	lsl.w	r3, r1, r3
 80103da:	4543      	cmp	r3, r8
 80103dc:	f040 8469 	bne.w	8010cb2 <__ieee754_pow+0x9b2>
 80103e0:	f001 0101 	and.w	r1, r1, #1
 80103e4:	f1c1 0b02 	rsb	fp, r1, #2
 80103e8:	4b4b      	ldr	r3, [pc, #300]	; (8010518 <__ieee754_pow+0x218>)
 80103ea:	4598      	cmp	r8, r3
 80103ec:	d118      	bne.n	8010420 <__ieee754_pow+0x120>
 80103ee:	f1b9 0f00 	cmp.w	r9, #0
 80103f2:	f280 845a 	bge.w	8010caa <__ieee754_pow+0x9aa>
 80103f6:	4948      	ldr	r1, [pc, #288]	; (8010518 <__ieee754_pow+0x218>)
 80103f8:	4632      	mov	r2, r6
 80103fa:	463b      	mov	r3, r7
 80103fc:	2000      	movs	r0, #0
 80103fe:	f7f0 fa35 	bl	800086c <__aeabi_ddiv>
 8010402:	e7dd      	b.n	80103c0 <__ieee754_pow+0xc0>
 8010404:	f04f 0b02 	mov.w	fp, #2
 8010408:	e7c4      	b.n	8010394 <__ieee754_pow+0x94>
 801040a:	f04f 0b00 	mov.w	fp, #0
 801040e:	e7c1      	b.n	8010394 <__ieee754_pow+0x94>
 8010410:	f1b9 0f00 	cmp.w	r9, #0
 8010414:	dad2      	bge.n	80103bc <__ieee754_pow+0xbc>
 8010416:	e9dd 0300 	ldrd	r0, r3, [sp]
 801041a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801041e:	e7cf      	b.n	80103c0 <__ieee754_pow+0xc0>
 8010420:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010424:	d106      	bne.n	8010434 <__ieee754_pow+0x134>
 8010426:	4632      	mov	r2, r6
 8010428:	463b      	mov	r3, r7
 801042a:	4610      	mov	r0, r2
 801042c:	4619      	mov	r1, r3
 801042e:	f7f0 f8f3 	bl	8000618 <__aeabi_dmul>
 8010432:	e7c5      	b.n	80103c0 <__ieee754_pow+0xc0>
 8010434:	4b39      	ldr	r3, [pc, #228]	; (801051c <__ieee754_pow+0x21c>)
 8010436:	4599      	cmp	r9, r3
 8010438:	d10a      	bne.n	8010450 <__ieee754_pow+0x150>
 801043a:	2d00      	cmp	r5, #0
 801043c:	db08      	blt.n	8010450 <__ieee754_pow+0x150>
 801043e:	ec47 6b10 	vmov	d0, r6, r7
 8010442:	b011      	add	sp, #68	; 0x44
 8010444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	f000 bc68 	b.w	8010d1c <__ieee754_sqrt>
 801044c:	f04f 0b00 	mov.w	fp, #0
 8010450:	ec47 6b10 	vmov	d0, r6, r7
 8010454:	f000 ffd5 	bl	8011402 <fabs>
 8010458:	ec51 0b10 	vmov	r0, r1, d0
 801045c:	f1ba 0f00 	cmp.w	sl, #0
 8010460:	d127      	bne.n	80104b2 <__ieee754_pow+0x1b2>
 8010462:	b124      	cbz	r4, 801046e <__ieee754_pow+0x16e>
 8010464:	4b2c      	ldr	r3, [pc, #176]	; (8010518 <__ieee754_pow+0x218>)
 8010466:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801046a:	429a      	cmp	r2, r3
 801046c:	d121      	bne.n	80104b2 <__ieee754_pow+0x1b2>
 801046e:	f1b9 0f00 	cmp.w	r9, #0
 8010472:	da05      	bge.n	8010480 <__ieee754_pow+0x180>
 8010474:	4602      	mov	r2, r0
 8010476:	460b      	mov	r3, r1
 8010478:	2000      	movs	r0, #0
 801047a:	4927      	ldr	r1, [pc, #156]	; (8010518 <__ieee754_pow+0x218>)
 801047c:	f7f0 f9f6 	bl	800086c <__aeabi_ddiv>
 8010480:	2d00      	cmp	r5, #0
 8010482:	da9d      	bge.n	80103c0 <__ieee754_pow+0xc0>
 8010484:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010488:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801048c:	ea54 030b 	orrs.w	r3, r4, fp
 8010490:	d108      	bne.n	80104a4 <__ieee754_pow+0x1a4>
 8010492:	4602      	mov	r2, r0
 8010494:	460b      	mov	r3, r1
 8010496:	4610      	mov	r0, r2
 8010498:	4619      	mov	r1, r3
 801049a:	f7ef ff05 	bl	80002a8 <__aeabi_dsub>
 801049e:	4602      	mov	r2, r0
 80104a0:	460b      	mov	r3, r1
 80104a2:	e7ac      	b.n	80103fe <__ieee754_pow+0xfe>
 80104a4:	f1bb 0f01 	cmp.w	fp, #1
 80104a8:	d18a      	bne.n	80103c0 <__ieee754_pow+0xc0>
 80104aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104ae:	4619      	mov	r1, r3
 80104b0:	e786      	b.n	80103c0 <__ieee754_pow+0xc0>
 80104b2:	0fed      	lsrs	r5, r5, #31
 80104b4:	1e6b      	subs	r3, r5, #1
 80104b6:	930d      	str	r3, [sp, #52]	; 0x34
 80104b8:	ea5b 0303 	orrs.w	r3, fp, r3
 80104bc:	d102      	bne.n	80104c4 <__ieee754_pow+0x1c4>
 80104be:	4632      	mov	r2, r6
 80104c0:	463b      	mov	r3, r7
 80104c2:	e7e8      	b.n	8010496 <__ieee754_pow+0x196>
 80104c4:	4b16      	ldr	r3, [pc, #88]	; (8010520 <__ieee754_pow+0x220>)
 80104c6:	4598      	cmp	r8, r3
 80104c8:	f340 80fe 	ble.w	80106c8 <__ieee754_pow+0x3c8>
 80104cc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80104d0:	4598      	cmp	r8, r3
 80104d2:	dd0a      	ble.n	80104ea <__ieee754_pow+0x1ea>
 80104d4:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <__ieee754_pow+0x214>)
 80104d6:	429c      	cmp	r4, r3
 80104d8:	dc0d      	bgt.n	80104f6 <__ieee754_pow+0x1f6>
 80104da:	f1b9 0f00 	cmp.w	r9, #0
 80104de:	f6bf af6d 	bge.w	80103bc <__ieee754_pow+0xbc>
 80104e2:	a307      	add	r3, pc, #28	; (adr r3, 8010500 <__ieee754_pow+0x200>)
 80104e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e8:	e79f      	b.n	801042a <__ieee754_pow+0x12a>
 80104ea:	4b0e      	ldr	r3, [pc, #56]	; (8010524 <__ieee754_pow+0x224>)
 80104ec:	429c      	cmp	r4, r3
 80104ee:	ddf4      	ble.n	80104da <__ieee754_pow+0x1da>
 80104f0:	4b09      	ldr	r3, [pc, #36]	; (8010518 <__ieee754_pow+0x218>)
 80104f2:	429c      	cmp	r4, r3
 80104f4:	dd18      	ble.n	8010528 <__ieee754_pow+0x228>
 80104f6:	f1b9 0f00 	cmp.w	r9, #0
 80104fa:	dcf2      	bgt.n	80104e2 <__ieee754_pow+0x1e2>
 80104fc:	e75e      	b.n	80103bc <__ieee754_pow+0xbc>
 80104fe:	bf00      	nop
 8010500:	8800759c 	.word	0x8800759c
 8010504:	7e37e43c 	.word	0x7e37e43c
 8010508:	7ff00000 	.word	0x7ff00000
 801050c:	0801196d 	.word	0x0801196d
 8010510:	433fffff 	.word	0x433fffff
 8010514:	3fefffff 	.word	0x3fefffff
 8010518:	3ff00000 	.word	0x3ff00000
 801051c:	3fe00000 	.word	0x3fe00000
 8010520:	41e00000 	.word	0x41e00000
 8010524:	3feffffe 	.word	0x3feffffe
 8010528:	2200      	movs	r2, #0
 801052a:	4b63      	ldr	r3, [pc, #396]	; (80106b8 <__ieee754_pow+0x3b8>)
 801052c:	f7ef febc 	bl	80002a8 <__aeabi_dsub>
 8010530:	a355      	add	r3, pc, #340	; (adr r3, 8010688 <__ieee754_pow+0x388>)
 8010532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010536:	4604      	mov	r4, r0
 8010538:	460d      	mov	r5, r1
 801053a:	f7f0 f86d 	bl	8000618 <__aeabi_dmul>
 801053e:	a354      	add	r3, pc, #336	; (adr r3, 8010690 <__ieee754_pow+0x390>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	4606      	mov	r6, r0
 8010546:	460f      	mov	r7, r1
 8010548:	4620      	mov	r0, r4
 801054a:	4629      	mov	r1, r5
 801054c:	f7f0 f864 	bl	8000618 <__aeabi_dmul>
 8010550:	2200      	movs	r2, #0
 8010552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010556:	4b59      	ldr	r3, [pc, #356]	; (80106bc <__ieee754_pow+0x3bc>)
 8010558:	4620      	mov	r0, r4
 801055a:	4629      	mov	r1, r5
 801055c:	f7f0 f85c 	bl	8000618 <__aeabi_dmul>
 8010560:	4602      	mov	r2, r0
 8010562:	460b      	mov	r3, r1
 8010564:	a14c      	add	r1, pc, #304	; (adr r1, 8010698 <__ieee754_pow+0x398>)
 8010566:	e9d1 0100 	ldrd	r0, r1, [r1]
 801056a:	f7ef fe9d 	bl	80002a8 <__aeabi_dsub>
 801056e:	4622      	mov	r2, r4
 8010570:	462b      	mov	r3, r5
 8010572:	f7f0 f851 	bl	8000618 <__aeabi_dmul>
 8010576:	4602      	mov	r2, r0
 8010578:	460b      	mov	r3, r1
 801057a:	2000      	movs	r0, #0
 801057c:	4950      	ldr	r1, [pc, #320]	; (80106c0 <__ieee754_pow+0x3c0>)
 801057e:	f7ef fe93 	bl	80002a8 <__aeabi_dsub>
 8010582:	4622      	mov	r2, r4
 8010584:	462b      	mov	r3, r5
 8010586:	4680      	mov	r8, r0
 8010588:	4689      	mov	r9, r1
 801058a:	4620      	mov	r0, r4
 801058c:	4629      	mov	r1, r5
 801058e:	f7f0 f843 	bl	8000618 <__aeabi_dmul>
 8010592:	4602      	mov	r2, r0
 8010594:	460b      	mov	r3, r1
 8010596:	4640      	mov	r0, r8
 8010598:	4649      	mov	r1, r9
 801059a:	f7f0 f83d 	bl	8000618 <__aeabi_dmul>
 801059e:	a340      	add	r3, pc, #256	; (adr r3, 80106a0 <__ieee754_pow+0x3a0>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	f7f0 f838 	bl	8000618 <__aeabi_dmul>
 80105a8:	4602      	mov	r2, r0
 80105aa:	460b      	mov	r3, r1
 80105ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105b0:	f7ef fe7a 	bl	80002a8 <__aeabi_dsub>
 80105b4:	4602      	mov	r2, r0
 80105b6:	460b      	mov	r3, r1
 80105b8:	4604      	mov	r4, r0
 80105ba:	460d      	mov	r5, r1
 80105bc:	4630      	mov	r0, r6
 80105be:	4639      	mov	r1, r7
 80105c0:	f7ef fe74 	bl	80002ac <__adddf3>
 80105c4:	2000      	movs	r0, #0
 80105c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105ca:	4632      	mov	r2, r6
 80105cc:	463b      	mov	r3, r7
 80105ce:	f7ef fe6b 	bl	80002a8 <__aeabi_dsub>
 80105d2:	4602      	mov	r2, r0
 80105d4:	460b      	mov	r3, r1
 80105d6:	4620      	mov	r0, r4
 80105d8:	4629      	mov	r1, r5
 80105da:	f7ef fe65 	bl	80002a8 <__aeabi_dsub>
 80105de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105e0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80105e4:	4313      	orrs	r3, r2
 80105e6:	4606      	mov	r6, r0
 80105e8:	460f      	mov	r7, r1
 80105ea:	f040 81eb 	bne.w	80109c4 <__ieee754_pow+0x6c4>
 80105ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80106a8 <__ieee754_pow+0x3a8>
 80105f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80105f6:	2400      	movs	r4, #0
 80105f8:	4622      	mov	r2, r4
 80105fa:	462b      	mov	r3, r5
 80105fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010604:	f7ef fe50 	bl	80002a8 <__aeabi_dsub>
 8010608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801060c:	f7f0 f804 	bl	8000618 <__aeabi_dmul>
 8010610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010614:	4680      	mov	r8, r0
 8010616:	4689      	mov	r9, r1
 8010618:	4630      	mov	r0, r6
 801061a:	4639      	mov	r1, r7
 801061c:	f7ef fffc 	bl	8000618 <__aeabi_dmul>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	4640      	mov	r0, r8
 8010626:	4649      	mov	r1, r9
 8010628:	f7ef fe40 	bl	80002ac <__adddf3>
 801062c:	4622      	mov	r2, r4
 801062e:	462b      	mov	r3, r5
 8010630:	4680      	mov	r8, r0
 8010632:	4689      	mov	r9, r1
 8010634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010638:	f7ef ffee 	bl	8000618 <__aeabi_dmul>
 801063c:	460b      	mov	r3, r1
 801063e:	4604      	mov	r4, r0
 8010640:	460d      	mov	r5, r1
 8010642:	4602      	mov	r2, r0
 8010644:	4649      	mov	r1, r9
 8010646:	4640      	mov	r0, r8
 8010648:	e9cd 4500 	strd	r4, r5, [sp]
 801064c:	f7ef fe2e 	bl	80002ac <__adddf3>
 8010650:	4b1c      	ldr	r3, [pc, #112]	; (80106c4 <__ieee754_pow+0x3c4>)
 8010652:	4299      	cmp	r1, r3
 8010654:	4606      	mov	r6, r0
 8010656:	460f      	mov	r7, r1
 8010658:	468b      	mov	fp, r1
 801065a:	f340 82f7 	ble.w	8010c4c <__ieee754_pow+0x94c>
 801065e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010662:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010666:	4303      	orrs	r3, r0
 8010668:	f000 81ea 	beq.w	8010a40 <__ieee754_pow+0x740>
 801066c:	a310      	add	r3, pc, #64	; (adr r3, 80106b0 <__ieee754_pow+0x3b0>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010676:	f7ef ffcf 	bl	8000618 <__aeabi_dmul>
 801067a:	a30d      	add	r3, pc, #52	; (adr r3, 80106b0 <__ieee754_pow+0x3b0>)
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	e6d5      	b.n	801042e <__ieee754_pow+0x12e>
 8010682:	bf00      	nop
 8010684:	f3af 8000 	nop.w
 8010688:	60000000 	.word	0x60000000
 801068c:	3ff71547 	.word	0x3ff71547
 8010690:	f85ddf44 	.word	0xf85ddf44
 8010694:	3e54ae0b 	.word	0x3e54ae0b
 8010698:	55555555 	.word	0x55555555
 801069c:	3fd55555 	.word	0x3fd55555
 80106a0:	652b82fe 	.word	0x652b82fe
 80106a4:	3ff71547 	.word	0x3ff71547
 80106a8:	00000000 	.word	0x00000000
 80106ac:	bff00000 	.word	0xbff00000
 80106b0:	8800759c 	.word	0x8800759c
 80106b4:	7e37e43c 	.word	0x7e37e43c
 80106b8:	3ff00000 	.word	0x3ff00000
 80106bc:	3fd00000 	.word	0x3fd00000
 80106c0:	3fe00000 	.word	0x3fe00000
 80106c4:	408fffff 	.word	0x408fffff
 80106c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80106cc:	f04f 0200 	mov.w	r2, #0
 80106d0:	da05      	bge.n	80106de <__ieee754_pow+0x3de>
 80106d2:	4bd3      	ldr	r3, [pc, #844]	; (8010a20 <__ieee754_pow+0x720>)
 80106d4:	f7ef ffa0 	bl	8000618 <__aeabi_dmul>
 80106d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80106dc:	460c      	mov	r4, r1
 80106de:	1523      	asrs	r3, r4, #20
 80106e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80106e4:	4413      	add	r3, r2
 80106e6:	9309      	str	r3, [sp, #36]	; 0x24
 80106e8:	4bce      	ldr	r3, [pc, #824]	; (8010a24 <__ieee754_pow+0x724>)
 80106ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80106ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80106f2:	429c      	cmp	r4, r3
 80106f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80106f8:	dd08      	ble.n	801070c <__ieee754_pow+0x40c>
 80106fa:	4bcb      	ldr	r3, [pc, #812]	; (8010a28 <__ieee754_pow+0x728>)
 80106fc:	429c      	cmp	r4, r3
 80106fe:	f340 815e 	ble.w	80109be <__ieee754_pow+0x6be>
 8010702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010704:	3301      	adds	r3, #1
 8010706:	9309      	str	r3, [sp, #36]	; 0x24
 8010708:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801070c:	f04f 0a00 	mov.w	sl, #0
 8010710:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010714:	930c      	str	r3, [sp, #48]	; 0x30
 8010716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010718:	4bc4      	ldr	r3, [pc, #784]	; (8010a2c <__ieee754_pow+0x72c>)
 801071a:	4413      	add	r3, r2
 801071c:	ed93 7b00 	vldr	d7, [r3]
 8010720:	4629      	mov	r1, r5
 8010722:	ec53 2b17 	vmov	r2, r3, d7
 8010726:	ed8d 7b06 	vstr	d7, [sp, #24]
 801072a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801072e:	f7ef fdbb 	bl	80002a8 <__aeabi_dsub>
 8010732:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010736:	4606      	mov	r6, r0
 8010738:	460f      	mov	r7, r1
 801073a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801073e:	f7ef fdb5 	bl	80002ac <__adddf3>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	2000      	movs	r0, #0
 8010748:	49b9      	ldr	r1, [pc, #740]	; (8010a30 <__ieee754_pow+0x730>)
 801074a:	f7f0 f88f 	bl	800086c <__aeabi_ddiv>
 801074e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010752:	4602      	mov	r2, r0
 8010754:	460b      	mov	r3, r1
 8010756:	4630      	mov	r0, r6
 8010758:	4639      	mov	r1, r7
 801075a:	f7ef ff5d 	bl	8000618 <__aeabi_dmul>
 801075e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010762:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010766:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801076a:	2300      	movs	r3, #0
 801076c:	9302      	str	r3, [sp, #8]
 801076e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010772:	106d      	asrs	r5, r5, #1
 8010774:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010778:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801077c:	2200      	movs	r2, #0
 801077e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010782:	4640      	mov	r0, r8
 8010784:	4649      	mov	r1, r9
 8010786:	4614      	mov	r4, r2
 8010788:	461d      	mov	r5, r3
 801078a:	f7ef ff45 	bl	8000618 <__aeabi_dmul>
 801078e:	4602      	mov	r2, r0
 8010790:	460b      	mov	r3, r1
 8010792:	4630      	mov	r0, r6
 8010794:	4639      	mov	r1, r7
 8010796:	f7ef fd87 	bl	80002a8 <__aeabi_dsub>
 801079a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801079e:	4606      	mov	r6, r0
 80107a0:	460f      	mov	r7, r1
 80107a2:	4620      	mov	r0, r4
 80107a4:	4629      	mov	r1, r5
 80107a6:	f7ef fd7f 	bl	80002a8 <__aeabi_dsub>
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80107b2:	f7ef fd79 	bl	80002a8 <__aeabi_dsub>
 80107b6:	4642      	mov	r2, r8
 80107b8:	464b      	mov	r3, r9
 80107ba:	f7ef ff2d 	bl	8000618 <__aeabi_dmul>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	4630      	mov	r0, r6
 80107c4:	4639      	mov	r1, r7
 80107c6:	f7ef fd6f 	bl	80002a8 <__aeabi_dsub>
 80107ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80107ce:	f7ef ff23 	bl	8000618 <__aeabi_dmul>
 80107d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80107da:	4610      	mov	r0, r2
 80107dc:	4619      	mov	r1, r3
 80107de:	f7ef ff1b 	bl	8000618 <__aeabi_dmul>
 80107e2:	a37b      	add	r3, pc, #492	; (adr r3, 80109d0 <__ieee754_pow+0x6d0>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	4604      	mov	r4, r0
 80107ea:	460d      	mov	r5, r1
 80107ec:	f7ef ff14 	bl	8000618 <__aeabi_dmul>
 80107f0:	a379      	add	r3, pc, #484	; (adr r3, 80109d8 <__ieee754_pow+0x6d8>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	f7ef fd59 	bl	80002ac <__adddf3>
 80107fa:	4622      	mov	r2, r4
 80107fc:	462b      	mov	r3, r5
 80107fe:	f7ef ff0b 	bl	8000618 <__aeabi_dmul>
 8010802:	a377      	add	r3, pc, #476	; (adr r3, 80109e0 <__ieee754_pow+0x6e0>)
 8010804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010808:	f7ef fd50 	bl	80002ac <__adddf3>
 801080c:	4622      	mov	r2, r4
 801080e:	462b      	mov	r3, r5
 8010810:	f7ef ff02 	bl	8000618 <__aeabi_dmul>
 8010814:	a374      	add	r3, pc, #464	; (adr r3, 80109e8 <__ieee754_pow+0x6e8>)
 8010816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801081a:	f7ef fd47 	bl	80002ac <__adddf3>
 801081e:	4622      	mov	r2, r4
 8010820:	462b      	mov	r3, r5
 8010822:	f7ef fef9 	bl	8000618 <__aeabi_dmul>
 8010826:	a372      	add	r3, pc, #456	; (adr r3, 80109f0 <__ieee754_pow+0x6f0>)
 8010828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082c:	f7ef fd3e 	bl	80002ac <__adddf3>
 8010830:	4622      	mov	r2, r4
 8010832:	462b      	mov	r3, r5
 8010834:	f7ef fef0 	bl	8000618 <__aeabi_dmul>
 8010838:	a36f      	add	r3, pc, #444	; (adr r3, 80109f8 <__ieee754_pow+0x6f8>)
 801083a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083e:	f7ef fd35 	bl	80002ac <__adddf3>
 8010842:	4622      	mov	r2, r4
 8010844:	4606      	mov	r6, r0
 8010846:	460f      	mov	r7, r1
 8010848:	462b      	mov	r3, r5
 801084a:	4620      	mov	r0, r4
 801084c:	4629      	mov	r1, r5
 801084e:	f7ef fee3 	bl	8000618 <__aeabi_dmul>
 8010852:	4602      	mov	r2, r0
 8010854:	460b      	mov	r3, r1
 8010856:	4630      	mov	r0, r6
 8010858:	4639      	mov	r1, r7
 801085a:	f7ef fedd 	bl	8000618 <__aeabi_dmul>
 801085e:	4642      	mov	r2, r8
 8010860:	4604      	mov	r4, r0
 8010862:	460d      	mov	r5, r1
 8010864:	464b      	mov	r3, r9
 8010866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801086a:	f7ef fd1f 	bl	80002ac <__adddf3>
 801086e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010872:	f7ef fed1 	bl	8000618 <__aeabi_dmul>
 8010876:	4622      	mov	r2, r4
 8010878:	462b      	mov	r3, r5
 801087a:	f7ef fd17 	bl	80002ac <__adddf3>
 801087e:	4642      	mov	r2, r8
 8010880:	4606      	mov	r6, r0
 8010882:	460f      	mov	r7, r1
 8010884:	464b      	mov	r3, r9
 8010886:	4640      	mov	r0, r8
 8010888:	4649      	mov	r1, r9
 801088a:	f7ef fec5 	bl	8000618 <__aeabi_dmul>
 801088e:	2200      	movs	r2, #0
 8010890:	4b68      	ldr	r3, [pc, #416]	; (8010a34 <__ieee754_pow+0x734>)
 8010892:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010896:	f7ef fd09 	bl	80002ac <__adddf3>
 801089a:	4632      	mov	r2, r6
 801089c:	463b      	mov	r3, r7
 801089e:	f7ef fd05 	bl	80002ac <__adddf3>
 80108a2:	9802      	ldr	r0, [sp, #8]
 80108a4:	460d      	mov	r5, r1
 80108a6:	4604      	mov	r4, r0
 80108a8:	4602      	mov	r2, r0
 80108aa:	460b      	mov	r3, r1
 80108ac:	4640      	mov	r0, r8
 80108ae:	4649      	mov	r1, r9
 80108b0:	f7ef feb2 	bl	8000618 <__aeabi_dmul>
 80108b4:	2200      	movs	r2, #0
 80108b6:	4680      	mov	r8, r0
 80108b8:	4689      	mov	r9, r1
 80108ba:	4b5e      	ldr	r3, [pc, #376]	; (8010a34 <__ieee754_pow+0x734>)
 80108bc:	4620      	mov	r0, r4
 80108be:	4629      	mov	r1, r5
 80108c0:	f7ef fcf2 	bl	80002a8 <__aeabi_dsub>
 80108c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80108c8:	f7ef fcee 	bl	80002a8 <__aeabi_dsub>
 80108cc:	4602      	mov	r2, r0
 80108ce:	460b      	mov	r3, r1
 80108d0:	4630      	mov	r0, r6
 80108d2:	4639      	mov	r1, r7
 80108d4:	f7ef fce8 	bl	80002a8 <__aeabi_dsub>
 80108d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108dc:	f7ef fe9c 	bl	8000618 <__aeabi_dmul>
 80108e0:	4622      	mov	r2, r4
 80108e2:	4606      	mov	r6, r0
 80108e4:	460f      	mov	r7, r1
 80108e6:	462b      	mov	r3, r5
 80108e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80108ec:	f7ef fe94 	bl	8000618 <__aeabi_dmul>
 80108f0:	4602      	mov	r2, r0
 80108f2:	460b      	mov	r3, r1
 80108f4:	4630      	mov	r0, r6
 80108f6:	4639      	mov	r1, r7
 80108f8:	f7ef fcd8 	bl	80002ac <__adddf3>
 80108fc:	4606      	mov	r6, r0
 80108fe:	460f      	mov	r7, r1
 8010900:	4602      	mov	r2, r0
 8010902:	460b      	mov	r3, r1
 8010904:	4640      	mov	r0, r8
 8010906:	4649      	mov	r1, r9
 8010908:	f7ef fcd0 	bl	80002ac <__adddf3>
 801090c:	9802      	ldr	r0, [sp, #8]
 801090e:	a33c      	add	r3, pc, #240	; (adr r3, 8010a00 <__ieee754_pow+0x700>)
 8010910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010914:	4604      	mov	r4, r0
 8010916:	460d      	mov	r5, r1
 8010918:	f7ef fe7e 	bl	8000618 <__aeabi_dmul>
 801091c:	4642      	mov	r2, r8
 801091e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010922:	464b      	mov	r3, r9
 8010924:	4620      	mov	r0, r4
 8010926:	4629      	mov	r1, r5
 8010928:	f7ef fcbe 	bl	80002a8 <__aeabi_dsub>
 801092c:	4602      	mov	r2, r0
 801092e:	460b      	mov	r3, r1
 8010930:	4630      	mov	r0, r6
 8010932:	4639      	mov	r1, r7
 8010934:	f7ef fcb8 	bl	80002a8 <__aeabi_dsub>
 8010938:	a333      	add	r3, pc, #204	; (adr r3, 8010a08 <__ieee754_pow+0x708>)
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	f7ef fe6b 	bl	8000618 <__aeabi_dmul>
 8010942:	a333      	add	r3, pc, #204	; (adr r3, 8010a10 <__ieee754_pow+0x710>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	4606      	mov	r6, r0
 801094a:	460f      	mov	r7, r1
 801094c:	4620      	mov	r0, r4
 801094e:	4629      	mov	r1, r5
 8010950:	f7ef fe62 	bl	8000618 <__aeabi_dmul>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	4630      	mov	r0, r6
 801095a:	4639      	mov	r1, r7
 801095c:	f7ef fca6 	bl	80002ac <__adddf3>
 8010960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010962:	4b35      	ldr	r3, [pc, #212]	; (8010a38 <__ieee754_pow+0x738>)
 8010964:	4413      	add	r3, r2
 8010966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096a:	f7ef fc9f 	bl	80002ac <__adddf3>
 801096e:	4604      	mov	r4, r0
 8010970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010972:	460d      	mov	r5, r1
 8010974:	f7ef fde6 	bl	8000544 <__aeabi_i2d>
 8010978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801097a:	4b30      	ldr	r3, [pc, #192]	; (8010a3c <__ieee754_pow+0x73c>)
 801097c:	4413      	add	r3, r2
 801097e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010982:	4606      	mov	r6, r0
 8010984:	460f      	mov	r7, r1
 8010986:	4622      	mov	r2, r4
 8010988:	462b      	mov	r3, r5
 801098a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801098e:	f7ef fc8d 	bl	80002ac <__adddf3>
 8010992:	4642      	mov	r2, r8
 8010994:	464b      	mov	r3, r9
 8010996:	f7ef fc89 	bl	80002ac <__adddf3>
 801099a:	4632      	mov	r2, r6
 801099c:	463b      	mov	r3, r7
 801099e:	f7ef fc85 	bl	80002ac <__adddf3>
 80109a2:	9802      	ldr	r0, [sp, #8]
 80109a4:	4632      	mov	r2, r6
 80109a6:	463b      	mov	r3, r7
 80109a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109ac:	f7ef fc7c 	bl	80002a8 <__aeabi_dsub>
 80109b0:	4642      	mov	r2, r8
 80109b2:	464b      	mov	r3, r9
 80109b4:	f7ef fc78 	bl	80002a8 <__aeabi_dsub>
 80109b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109bc:	e607      	b.n	80105ce <__ieee754_pow+0x2ce>
 80109be:	f04f 0a01 	mov.w	sl, #1
 80109c2:	e6a5      	b.n	8010710 <__ieee754_pow+0x410>
 80109c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010a18 <__ieee754_pow+0x718>
 80109c8:	e613      	b.n	80105f2 <__ieee754_pow+0x2f2>
 80109ca:	bf00      	nop
 80109cc:	f3af 8000 	nop.w
 80109d0:	4a454eef 	.word	0x4a454eef
 80109d4:	3fca7e28 	.word	0x3fca7e28
 80109d8:	93c9db65 	.word	0x93c9db65
 80109dc:	3fcd864a 	.word	0x3fcd864a
 80109e0:	a91d4101 	.word	0xa91d4101
 80109e4:	3fd17460 	.word	0x3fd17460
 80109e8:	518f264d 	.word	0x518f264d
 80109ec:	3fd55555 	.word	0x3fd55555
 80109f0:	db6fabff 	.word	0xdb6fabff
 80109f4:	3fdb6db6 	.word	0x3fdb6db6
 80109f8:	33333303 	.word	0x33333303
 80109fc:	3fe33333 	.word	0x3fe33333
 8010a00:	e0000000 	.word	0xe0000000
 8010a04:	3feec709 	.word	0x3feec709
 8010a08:	dc3a03fd 	.word	0xdc3a03fd
 8010a0c:	3feec709 	.word	0x3feec709
 8010a10:	145b01f5 	.word	0x145b01f5
 8010a14:	be3e2fe0 	.word	0xbe3e2fe0
 8010a18:	00000000 	.word	0x00000000
 8010a1c:	3ff00000 	.word	0x3ff00000
 8010a20:	43400000 	.word	0x43400000
 8010a24:	0003988e 	.word	0x0003988e
 8010a28:	000bb679 	.word	0x000bb679
 8010a2c:	080119a8 	.word	0x080119a8
 8010a30:	3ff00000 	.word	0x3ff00000
 8010a34:	40080000 	.word	0x40080000
 8010a38:	080119c8 	.word	0x080119c8
 8010a3c:	080119b8 	.word	0x080119b8
 8010a40:	a3b4      	add	r3, pc, #720	; (adr r3, 8010d14 <__ieee754_pow+0xa14>)
 8010a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a46:	4640      	mov	r0, r8
 8010a48:	4649      	mov	r1, r9
 8010a4a:	f7ef fc2f 	bl	80002ac <__adddf3>
 8010a4e:	4622      	mov	r2, r4
 8010a50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a54:	462b      	mov	r3, r5
 8010a56:	4630      	mov	r0, r6
 8010a58:	4639      	mov	r1, r7
 8010a5a:	f7ef fc25 	bl	80002a8 <__aeabi_dsub>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	460b      	mov	r3, r1
 8010a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a66:	f7f0 f867 	bl	8000b38 <__aeabi_dcmpgt>
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	f47f adfe 	bne.w	801066c <__ieee754_pow+0x36c>
 8010a70:	4aa3      	ldr	r2, [pc, #652]	; (8010d00 <__ieee754_pow+0xa00>)
 8010a72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a76:	4293      	cmp	r3, r2
 8010a78:	f340 810a 	ble.w	8010c90 <__ieee754_pow+0x990>
 8010a7c:	151b      	asrs	r3, r3, #20
 8010a7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010a82:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010a86:	fa4a f303 	asr.w	r3, sl, r3
 8010a8a:	445b      	add	r3, fp
 8010a8c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010a90:	4e9c      	ldr	r6, [pc, #624]	; (8010d04 <__ieee754_pow+0xa04>)
 8010a92:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010a96:	4116      	asrs	r6, r2
 8010a98:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010a9c:	2000      	movs	r0, #0
 8010a9e:	ea23 0106 	bic.w	r1, r3, r6
 8010aa2:	f1c2 0214 	rsb	r2, r2, #20
 8010aa6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010aaa:	fa4a fa02 	asr.w	sl, sl, r2
 8010aae:	f1bb 0f00 	cmp.w	fp, #0
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	4629      	mov	r1, r5
 8010aba:	bfb8      	it	lt
 8010abc:	f1ca 0a00 	rsblt	sl, sl, #0
 8010ac0:	f7ef fbf2 	bl	80002a8 <__aeabi_dsub>
 8010ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8010ac8:	4642      	mov	r2, r8
 8010aca:	464b      	mov	r3, r9
 8010acc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ad0:	f7ef fbec 	bl	80002ac <__adddf3>
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	a378      	add	r3, pc, #480	; (adr r3, 8010cb8 <__ieee754_pow+0x9b8>)
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	4604      	mov	r4, r0
 8010ade:	460d      	mov	r5, r1
 8010ae0:	f7ef fd9a 	bl	8000618 <__aeabi_dmul>
 8010ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ae8:	4606      	mov	r6, r0
 8010aea:	460f      	mov	r7, r1
 8010aec:	4620      	mov	r0, r4
 8010aee:	4629      	mov	r1, r5
 8010af0:	f7ef fbda 	bl	80002a8 <__aeabi_dsub>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	4640      	mov	r0, r8
 8010afa:	4649      	mov	r1, r9
 8010afc:	f7ef fbd4 	bl	80002a8 <__aeabi_dsub>
 8010b00:	a36f      	add	r3, pc, #444	; (adr r3, 8010cc0 <__ieee754_pow+0x9c0>)
 8010b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b06:	f7ef fd87 	bl	8000618 <__aeabi_dmul>
 8010b0a:	a36f      	add	r3, pc, #444	; (adr r3, 8010cc8 <__ieee754_pow+0x9c8>)
 8010b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b10:	4680      	mov	r8, r0
 8010b12:	4689      	mov	r9, r1
 8010b14:	4620      	mov	r0, r4
 8010b16:	4629      	mov	r1, r5
 8010b18:	f7ef fd7e 	bl	8000618 <__aeabi_dmul>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	4640      	mov	r0, r8
 8010b22:	4649      	mov	r1, r9
 8010b24:	f7ef fbc2 	bl	80002ac <__adddf3>
 8010b28:	4604      	mov	r4, r0
 8010b2a:	460d      	mov	r5, r1
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	4630      	mov	r0, r6
 8010b32:	4639      	mov	r1, r7
 8010b34:	f7ef fbba 	bl	80002ac <__adddf3>
 8010b38:	4632      	mov	r2, r6
 8010b3a:	463b      	mov	r3, r7
 8010b3c:	4680      	mov	r8, r0
 8010b3e:	4689      	mov	r9, r1
 8010b40:	f7ef fbb2 	bl	80002a8 <__aeabi_dsub>
 8010b44:	4602      	mov	r2, r0
 8010b46:	460b      	mov	r3, r1
 8010b48:	4620      	mov	r0, r4
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	f7ef fbac 	bl	80002a8 <__aeabi_dsub>
 8010b50:	4642      	mov	r2, r8
 8010b52:	4606      	mov	r6, r0
 8010b54:	460f      	mov	r7, r1
 8010b56:	464b      	mov	r3, r9
 8010b58:	4640      	mov	r0, r8
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	f7ef fd5c 	bl	8000618 <__aeabi_dmul>
 8010b60:	a35b      	add	r3, pc, #364	; (adr r3, 8010cd0 <__ieee754_pow+0x9d0>)
 8010b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b66:	4604      	mov	r4, r0
 8010b68:	460d      	mov	r5, r1
 8010b6a:	f7ef fd55 	bl	8000618 <__aeabi_dmul>
 8010b6e:	a35a      	add	r3, pc, #360	; (adr r3, 8010cd8 <__ieee754_pow+0x9d8>)
 8010b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b74:	f7ef fb98 	bl	80002a8 <__aeabi_dsub>
 8010b78:	4622      	mov	r2, r4
 8010b7a:	462b      	mov	r3, r5
 8010b7c:	f7ef fd4c 	bl	8000618 <__aeabi_dmul>
 8010b80:	a357      	add	r3, pc, #348	; (adr r3, 8010ce0 <__ieee754_pow+0x9e0>)
 8010b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b86:	f7ef fb91 	bl	80002ac <__adddf3>
 8010b8a:	4622      	mov	r2, r4
 8010b8c:	462b      	mov	r3, r5
 8010b8e:	f7ef fd43 	bl	8000618 <__aeabi_dmul>
 8010b92:	a355      	add	r3, pc, #340	; (adr r3, 8010ce8 <__ieee754_pow+0x9e8>)
 8010b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b98:	f7ef fb86 	bl	80002a8 <__aeabi_dsub>
 8010b9c:	4622      	mov	r2, r4
 8010b9e:	462b      	mov	r3, r5
 8010ba0:	f7ef fd3a 	bl	8000618 <__aeabi_dmul>
 8010ba4:	a352      	add	r3, pc, #328	; (adr r3, 8010cf0 <__ieee754_pow+0x9f0>)
 8010ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010baa:	f7ef fb7f 	bl	80002ac <__adddf3>
 8010bae:	4622      	mov	r2, r4
 8010bb0:	462b      	mov	r3, r5
 8010bb2:	f7ef fd31 	bl	8000618 <__aeabi_dmul>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	460b      	mov	r3, r1
 8010bba:	4640      	mov	r0, r8
 8010bbc:	4649      	mov	r1, r9
 8010bbe:	f7ef fb73 	bl	80002a8 <__aeabi_dsub>
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	460d      	mov	r5, r1
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4640      	mov	r0, r8
 8010bcc:	4649      	mov	r1, r9
 8010bce:	f7ef fd23 	bl	8000618 <__aeabi_dmul>
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	e9cd 0100 	strd	r0, r1, [sp]
 8010bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010bdc:	4620      	mov	r0, r4
 8010bde:	4629      	mov	r1, r5
 8010be0:	f7ef fb62 	bl	80002a8 <__aeabi_dsub>
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bec:	f7ef fe3e 	bl	800086c <__aeabi_ddiv>
 8010bf0:	4632      	mov	r2, r6
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	460d      	mov	r5, r1
 8010bf6:	463b      	mov	r3, r7
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	4649      	mov	r1, r9
 8010bfc:	f7ef fd0c 	bl	8000618 <__aeabi_dmul>
 8010c00:	4632      	mov	r2, r6
 8010c02:	463b      	mov	r3, r7
 8010c04:	f7ef fb52 	bl	80002ac <__adddf3>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	4629      	mov	r1, r5
 8010c10:	f7ef fb4a 	bl	80002a8 <__aeabi_dsub>
 8010c14:	4642      	mov	r2, r8
 8010c16:	464b      	mov	r3, r9
 8010c18:	f7ef fb46 	bl	80002a8 <__aeabi_dsub>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	2000      	movs	r0, #0
 8010c22:	4939      	ldr	r1, [pc, #228]	; (8010d08 <__ieee754_pow+0xa08>)
 8010c24:	f7ef fb40 	bl	80002a8 <__aeabi_dsub>
 8010c28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010c2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	da2f      	bge.n	8010c96 <__ieee754_pow+0x996>
 8010c36:	4650      	mov	r0, sl
 8010c38:	ec43 2b10 	vmov	d0, r2, r3
 8010c3c:	f000 fc80 	bl	8011540 <scalbn>
 8010c40:	ec51 0b10 	vmov	r0, r1, d0
 8010c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c48:	f7ff bbf1 	b.w	801042e <__ieee754_pow+0x12e>
 8010c4c:	4b2f      	ldr	r3, [pc, #188]	; (8010d0c <__ieee754_pow+0xa0c>)
 8010c4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010c52:	429e      	cmp	r6, r3
 8010c54:	f77f af0c 	ble.w	8010a70 <__ieee754_pow+0x770>
 8010c58:	4b2d      	ldr	r3, [pc, #180]	; (8010d10 <__ieee754_pow+0xa10>)
 8010c5a:	440b      	add	r3, r1
 8010c5c:	4303      	orrs	r3, r0
 8010c5e:	d00b      	beq.n	8010c78 <__ieee754_pow+0x978>
 8010c60:	a325      	add	r3, pc, #148	; (adr r3, 8010cf8 <__ieee754_pow+0x9f8>)
 8010c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c6a:	f7ef fcd5 	bl	8000618 <__aeabi_dmul>
 8010c6e:	a322      	add	r3, pc, #136	; (adr r3, 8010cf8 <__ieee754_pow+0x9f8>)
 8010c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c74:	f7ff bbdb 	b.w	801042e <__ieee754_pow+0x12e>
 8010c78:	4622      	mov	r2, r4
 8010c7a:	462b      	mov	r3, r5
 8010c7c:	f7ef fb14 	bl	80002a8 <__aeabi_dsub>
 8010c80:	4642      	mov	r2, r8
 8010c82:	464b      	mov	r3, r9
 8010c84:	f7ef ff4e 	bl	8000b24 <__aeabi_dcmpge>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	f43f aef1 	beq.w	8010a70 <__ieee754_pow+0x770>
 8010c8e:	e7e7      	b.n	8010c60 <__ieee754_pow+0x960>
 8010c90:	f04f 0a00 	mov.w	sl, #0
 8010c94:	e718      	b.n	8010ac8 <__ieee754_pow+0x7c8>
 8010c96:	4621      	mov	r1, r4
 8010c98:	e7d4      	b.n	8010c44 <__ieee754_pow+0x944>
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	491a      	ldr	r1, [pc, #104]	; (8010d08 <__ieee754_pow+0xa08>)
 8010c9e:	f7ff bb8f 	b.w	80103c0 <__ieee754_pow+0xc0>
 8010ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ca6:	f7ff bb8b 	b.w	80103c0 <__ieee754_pow+0xc0>
 8010caa:	4630      	mov	r0, r6
 8010cac:	4639      	mov	r1, r7
 8010cae:	f7ff bb87 	b.w	80103c0 <__ieee754_pow+0xc0>
 8010cb2:	4693      	mov	fp, r2
 8010cb4:	f7ff bb98 	b.w	80103e8 <__ieee754_pow+0xe8>
 8010cb8:	00000000 	.word	0x00000000
 8010cbc:	3fe62e43 	.word	0x3fe62e43
 8010cc0:	fefa39ef 	.word	0xfefa39ef
 8010cc4:	3fe62e42 	.word	0x3fe62e42
 8010cc8:	0ca86c39 	.word	0x0ca86c39
 8010ccc:	be205c61 	.word	0xbe205c61
 8010cd0:	72bea4d0 	.word	0x72bea4d0
 8010cd4:	3e663769 	.word	0x3e663769
 8010cd8:	c5d26bf1 	.word	0xc5d26bf1
 8010cdc:	3ebbbd41 	.word	0x3ebbbd41
 8010ce0:	af25de2c 	.word	0xaf25de2c
 8010ce4:	3f11566a 	.word	0x3f11566a
 8010ce8:	16bebd93 	.word	0x16bebd93
 8010cec:	3f66c16c 	.word	0x3f66c16c
 8010cf0:	5555553e 	.word	0x5555553e
 8010cf4:	3fc55555 	.word	0x3fc55555
 8010cf8:	c2f8f359 	.word	0xc2f8f359
 8010cfc:	01a56e1f 	.word	0x01a56e1f
 8010d00:	3fe00000 	.word	0x3fe00000
 8010d04:	000fffff 	.word	0x000fffff
 8010d08:	3ff00000 	.word	0x3ff00000
 8010d0c:	4090cbff 	.word	0x4090cbff
 8010d10:	3f6f3400 	.word	0x3f6f3400
 8010d14:	652b82fe 	.word	0x652b82fe
 8010d18:	3c971547 	.word	0x3c971547

08010d1c <__ieee754_sqrt>:
 8010d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d20:	4955      	ldr	r1, [pc, #340]	; (8010e78 <__ieee754_sqrt+0x15c>)
 8010d22:	ec55 4b10 	vmov	r4, r5, d0
 8010d26:	43a9      	bics	r1, r5
 8010d28:	462b      	mov	r3, r5
 8010d2a:	462a      	mov	r2, r5
 8010d2c:	d112      	bne.n	8010d54 <__ieee754_sqrt+0x38>
 8010d2e:	ee10 2a10 	vmov	r2, s0
 8010d32:	ee10 0a10 	vmov	r0, s0
 8010d36:	4629      	mov	r1, r5
 8010d38:	f7ef fc6e 	bl	8000618 <__aeabi_dmul>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	460b      	mov	r3, r1
 8010d40:	4620      	mov	r0, r4
 8010d42:	4629      	mov	r1, r5
 8010d44:	f7ef fab2 	bl	80002ac <__adddf3>
 8010d48:	4604      	mov	r4, r0
 8010d4a:	460d      	mov	r5, r1
 8010d4c:	ec45 4b10 	vmov	d0, r4, r5
 8010d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d54:	2d00      	cmp	r5, #0
 8010d56:	ee10 0a10 	vmov	r0, s0
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	dc0f      	bgt.n	8010d7e <__ieee754_sqrt+0x62>
 8010d5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010d62:	4330      	orrs	r0, r6
 8010d64:	d0f2      	beq.n	8010d4c <__ieee754_sqrt+0x30>
 8010d66:	b155      	cbz	r5, 8010d7e <__ieee754_sqrt+0x62>
 8010d68:	ee10 2a10 	vmov	r2, s0
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	4629      	mov	r1, r5
 8010d70:	f7ef fa9a 	bl	80002a8 <__aeabi_dsub>
 8010d74:	4602      	mov	r2, r0
 8010d76:	460b      	mov	r3, r1
 8010d78:	f7ef fd78 	bl	800086c <__aeabi_ddiv>
 8010d7c:	e7e4      	b.n	8010d48 <__ieee754_sqrt+0x2c>
 8010d7e:	151b      	asrs	r3, r3, #20
 8010d80:	d073      	beq.n	8010e6a <__ieee754_sqrt+0x14e>
 8010d82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d86:	07dd      	lsls	r5, r3, #31
 8010d88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010d8c:	bf48      	it	mi
 8010d8e:	0fc8      	lsrmi	r0, r1, #31
 8010d90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010d94:	bf44      	itt	mi
 8010d96:	0049      	lslmi	r1, r1, #1
 8010d98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8010d9c:	2500      	movs	r5, #0
 8010d9e:	1058      	asrs	r0, r3, #1
 8010da0:	0fcb      	lsrs	r3, r1, #31
 8010da2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010da6:	0049      	lsls	r1, r1, #1
 8010da8:	2316      	movs	r3, #22
 8010daa:	462c      	mov	r4, r5
 8010dac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8010db0:	19a7      	adds	r7, r4, r6
 8010db2:	4297      	cmp	r7, r2
 8010db4:	bfde      	ittt	le
 8010db6:	19bc      	addle	r4, r7, r6
 8010db8:	1bd2      	suble	r2, r2, r7
 8010dba:	19ad      	addle	r5, r5, r6
 8010dbc:	0fcf      	lsrs	r7, r1, #31
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010dc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010dc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010dcc:	d1f0      	bne.n	8010db0 <__ieee754_sqrt+0x94>
 8010dce:	f04f 0c20 	mov.w	ip, #32
 8010dd2:	469e      	mov	lr, r3
 8010dd4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010dd8:	42a2      	cmp	r2, r4
 8010dda:	eb06 070e 	add.w	r7, r6, lr
 8010dde:	dc02      	bgt.n	8010de6 <__ieee754_sqrt+0xca>
 8010de0:	d112      	bne.n	8010e08 <__ieee754_sqrt+0xec>
 8010de2:	428f      	cmp	r7, r1
 8010de4:	d810      	bhi.n	8010e08 <__ieee754_sqrt+0xec>
 8010de6:	2f00      	cmp	r7, #0
 8010de8:	eb07 0e06 	add.w	lr, r7, r6
 8010dec:	da42      	bge.n	8010e74 <__ieee754_sqrt+0x158>
 8010dee:	f1be 0f00 	cmp.w	lr, #0
 8010df2:	db3f      	blt.n	8010e74 <__ieee754_sqrt+0x158>
 8010df4:	f104 0801 	add.w	r8, r4, #1
 8010df8:	1b12      	subs	r2, r2, r4
 8010dfa:	428f      	cmp	r7, r1
 8010dfc:	bf88      	it	hi
 8010dfe:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8010e02:	1bc9      	subs	r1, r1, r7
 8010e04:	4433      	add	r3, r6
 8010e06:	4644      	mov	r4, r8
 8010e08:	0052      	lsls	r2, r2, #1
 8010e0a:	f1bc 0c01 	subs.w	ip, ip, #1
 8010e0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8010e12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010e16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010e1a:	d1dd      	bne.n	8010dd8 <__ieee754_sqrt+0xbc>
 8010e1c:	430a      	orrs	r2, r1
 8010e1e:	d006      	beq.n	8010e2e <__ieee754_sqrt+0x112>
 8010e20:	1c5c      	adds	r4, r3, #1
 8010e22:	bf13      	iteet	ne
 8010e24:	3301      	addne	r3, #1
 8010e26:	3501      	addeq	r5, #1
 8010e28:	4663      	moveq	r3, ip
 8010e2a:	f023 0301 	bicne.w	r3, r3, #1
 8010e2e:	106a      	asrs	r2, r5, #1
 8010e30:	085b      	lsrs	r3, r3, #1
 8010e32:	07e9      	lsls	r1, r5, #31
 8010e34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010e38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010e3c:	bf48      	it	mi
 8010e3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010e42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8010e46:	461c      	mov	r4, r3
 8010e48:	e780      	b.n	8010d4c <__ieee754_sqrt+0x30>
 8010e4a:	0aca      	lsrs	r2, r1, #11
 8010e4c:	3815      	subs	r0, #21
 8010e4e:	0549      	lsls	r1, r1, #21
 8010e50:	2a00      	cmp	r2, #0
 8010e52:	d0fa      	beq.n	8010e4a <__ieee754_sqrt+0x12e>
 8010e54:	02d6      	lsls	r6, r2, #11
 8010e56:	d50a      	bpl.n	8010e6e <__ieee754_sqrt+0x152>
 8010e58:	f1c3 0420 	rsb	r4, r3, #32
 8010e5c:	fa21 f404 	lsr.w	r4, r1, r4
 8010e60:	1e5d      	subs	r5, r3, #1
 8010e62:	4099      	lsls	r1, r3
 8010e64:	4322      	orrs	r2, r4
 8010e66:	1b43      	subs	r3, r0, r5
 8010e68:	e78b      	b.n	8010d82 <__ieee754_sqrt+0x66>
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	e7f0      	b.n	8010e50 <__ieee754_sqrt+0x134>
 8010e6e:	0052      	lsls	r2, r2, #1
 8010e70:	3301      	adds	r3, #1
 8010e72:	e7ef      	b.n	8010e54 <__ieee754_sqrt+0x138>
 8010e74:	46a0      	mov	r8, r4
 8010e76:	e7bf      	b.n	8010df8 <__ieee754_sqrt+0xdc>
 8010e78:	7ff00000 	.word	0x7ff00000

08010e7c <__ieee754_powf>:
 8010e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e80:	ee10 5a90 	vmov	r5, s1
 8010e84:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8010e88:	ed2d 8b02 	vpush	{d8}
 8010e8c:	eeb0 8a40 	vmov.f32	s16, s0
 8010e90:	eef0 8a60 	vmov.f32	s17, s1
 8010e94:	f000 8293 	beq.w	80113be <__ieee754_powf+0x542>
 8010e98:	ee10 8a10 	vmov	r8, s0
 8010e9c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8010ea0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010ea4:	dc06      	bgt.n	8010eb4 <__ieee754_powf+0x38>
 8010ea6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010eaa:	dd0a      	ble.n	8010ec2 <__ieee754_powf+0x46>
 8010eac:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8010eb0:	f000 8285 	beq.w	80113be <__ieee754_powf+0x542>
 8010eb4:	ecbd 8b02 	vpop	{d8}
 8010eb8:	48d9      	ldr	r0, [pc, #868]	; (8011220 <__ieee754_powf+0x3a4>)
 8010eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebe:	f000 bbc7 	b.w	8011650 <nanf>
 8010ec2:	f1b8 0f00 	cmp.w	r8, #0
 8010ec6:	da1d      	bge.n	8010f04 <__ieee754_powf+0x88>
 8010ec8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8010ecc:	da2c      	bge.n	8010f28 <__ieee754_powf+0xac>
 8010ece:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010ed2:	db30      	blt.n	8010f36 <__ieee754_powf+0xba>
 8010ed4:	15fb      	asrs	r3, r7, #23
 8010ed6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010eda:	fa47 f603 	asr.w	r6, r7, r3
 8010ede:	fa06 f303 	lsl.w	r3, r6, r3
 8010ee2:	42bb      	cmp	r3, r7
 8010ee4:	d127      	bne.n	8010f36 <__ieee754_powf+0xba>
 8010ee6:	f006 0601 	and.w	r6, r6, #1
 8010eea:	f1c6 0602 	rsb	r6, r6, #2
 8010eee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010ef2:	d122      	bne.n	8010f3a <__ieee754_powf+0xbe>
 8010ef4:	2d00      	cmp	r5, #0
 8010ef6:	f280 8268 	bge.w	80113ca <__ieee754_powf+0x54e>
 8010efa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010efe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010f02:	e00d      	b.n	8010f20 <__ieee754_powf+0xa4>
 8010f04:	2600      	movs	r6, #0
 8010f06:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010f0a:	d1f0      	bne.n	8010eee <__ieee754_powf+0x72>
 8010f0c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8010f10:	f000 8255 	beq.w	80113be <__ieee754_powf+0x542>
 8010f14:	dd0a      	ble.n	8010f2c <__ieee754_powf+0xb0>
 8010f16:	2d00      	cmp	r5, #0
 8010f18:	f280 8254 	bge.w	80113c4 <__ieee754_powf+0x548>
 8010f1c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8011224 <__ieee754_powf+0x3a8>
 8010f20:	ecbd 8b02 	vpop	{d8}
 8010f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f28:	2602      	movs	r6, #2
 8010f2a:	e7ec      	b.n	8010f06 <__ieee754_powf+0x8a>
 8010f2c:	2d00      	cmp	r5, #0
 8010f2e:	daf5      	bge.n	8010f1c <__ieee754_powf+0xa0>
 8010f30:	eeb1 0a68 	vneg.f32	s0, s17
 8010f34:	e7f4      	b.n	8010f20 <__ieee754_powf+0xa4>
 8010f36:	2600      	movs	r6, #0
 8010f38:	e7d9      	b.n	8010eee <__ieee754_powf+0x72>
 8010f3a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8010f3e:	d102      	bne.n	8010f46 <__ieee754_powf+0xca>
 8010f40:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010f44:	e7ec      	b.n	8010f20 <__ieee754_powf+0xa4>
 8010f46:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8010f4a:	eeb0 0a48 	vmov.f32	s0, s16
 8010f4e:	d108      	bne.n	8010f62 <__ieee754_powf+0xe6>
 8010f50:	f1b8 0f00 	cmp.w	r8, #0
 8010f54:	db05      	blt.n	8010f62 <__ieee754_powf+0xe6>
 8010f56:	ecbd 8b02 	vpop	{d8}
 8010f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f5e:	f000 ba4d 	b.w	80113fc <__ieee754_sqrtf>
 8010f62:	f000 fb63 	bl	801162c <fabsf>
 8010f66:	b124      	cbz	r4, 8010f72 <__ieee754_powf+0xf6>
 8010f68:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8010f6c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010f70:	d117      	bne.n	8010fa2 <__ieee754_powf+0x126>
 8010f72:	2d00      	cmp	r5, #0
 8010f74:	bfbc      	itt	lt
 8010f76:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8010f7a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010f7e:	f1b8 0f00 	cmp.w	r8, #0
 8010f82:	dacd      	bge.n	8010f20 <__ieee754_powf+0xa4>
 8010f84:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8010f88:	ea54 0306 	orrs.w	r3, r4, r6
 8010f8c:	d104      	bne.n	8010f98 <__ieee754_powf+0x11c>
 8010f8e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010f92:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010f96:	e7c3      	b.n	8010f20 <__ieee754_powf+0xa4>
 8010f98:	2e01      	cmp	r6, #1
 8010f9a:	d1c1      	bne.n	8010f20 <__ieee754_powf+0xa4>
 8010f9c:	eeb1 0a40 	vneg.f32	s0, s0
 8010fa0:	e7be      	b.n	8010f20 <__ieee754_powf+0xa4>
 8010fa2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8010fa6:	3801      	subs	r0, #1
 8010fa8:	ea56 0300 	orrs.w	r3, r6, r0
 8010fac:	d104      	bne.n	8010fb8 <__ieee754_powf+0x13c>
 8010fae:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010fb2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010fb6:	e7b3      	b.n	8010f20 <__ieee754_powf+0xa4>
 8010fb8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8010fbc:	dd6d      	ble.n	801109a <__ieee754_powf+0x21e>
 8010fbe:	4b9a      	ldr	r3, [pc, #616]	; (8011228 <__ieee754_powf+0x3ac>)
 8010fc0:	429c      	cmp	r4, r3
 8010fc2:	dc06      	bgt.n	8010fd2 <__ieee754_powf+0x156>
 8010fc4:	2d00      	cmp	r5, #0
 8010fc6:	daa9      	bge.n	8010f1c <__ieee754_powf+0xa0>
 8010fc8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801122c <__ieee754_powf+0x3b0>
 8010fcc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010fd0:	e7a6      	b.n	8010f20 <__ieee754_powf+0xa4>
 8010fd2:	4b97      	ldr	r3, [pc, #604]	; (8011230 <__ieee754_powf+0x3b4>)
 8010fd4:	429c      	cmp	r4, r3
 8010fd6:	dd02      	ble.n	8010fde <__ieee754_powf+0x162>
 8010fd8:	2d00      	cmp	r5, #0
 8010fda:	dcf5      	bgt.n	8010fc8 <__ieee754_powf+0x14c>
 8010fdc:	e79e      	b.n	8010f1c <__ieee754_powf+0xa0>
 8010fde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010fe2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010fe6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011234 <__ieee754_powf+0x3b8>
 8010fea:	eef1 6a40 	vneg.f32	s13, s0
 8010fee:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010ff2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ff6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010ffa:	eee7 7a40 	vfms.f32	s15, s14, s0
 8010ffe:	ee60 0a00 	vmul.f32	s1, s0, s0
 8011002:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8011238 <__ieee754_powf+0x3bc>
 8011006:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801100a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801123c <__ieee754_powf+0x3c0>
 801100e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8011012:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011016:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8011240 <__ieee754_powf+0x3c4>
 801101a:	eeb0 6a67 	vmov.f32	s12, s15
 801101e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8011022:	ee16 3a10 	vmov	r3, s12
 8011026:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801102a:	f023 030f 	bic.w	r3, r3, #15
 801102e:	ee00 3a90 	vmov	s1, r3
 8011032:	eee6 0a87 	vfma.f32	s1, s13, s14
 8011036:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801103a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801103e:	f025 050f 	bic.w	r5, r5, #15
 8011042:	ee07 5a10 	vmov	s14, r5
 8011046:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801104a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801104e:	ee07 3a90 	vmov	s15, r3
 8011052:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011056:	3e01      	subs	r6, #1
 8011058:	ea56 0200 	orrs.w	r2, r6, r0
 801105c:	ee07 5a10 	vmov	s14, r5
 8011060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011064:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011068:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801106c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011070:	ee17 4a10 	vmov	r4, s14
 8011074:	bf08      	it	eq
 8011076:	eeb0 8a40 	vmoveq.f32	s16, s0
 801107a:	2c00      	cmp	r4, #0
 801107c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011080:	f340 8184 	ble.w	801138c <__ieee754_powf+0x510>
 8011084:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011088:	f340 80fc 	ble.w	8011284 <__ieee754_powf+0x408>
 801108c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801122c <__ieee754_powf+0x3b0>
 8011090:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011094:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011098:	e742      	b.n	8010f20 <__ieee754_powf+0xa4>
 801109a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801109e:	bfbf      	itttt	lt
 80110a0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8011244 <__ieee754_powf+0x3c8>
 80110a4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80110a8:	f06f 0217 	mvnlt.w	r2, #23
 80110ac:	ee17 4a90 	vmovlt	r4, s15
 80110b0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80110b4:	bfa8      	it	ge
 80110b6:	2200      	movge	r2, #0
 80110b8:	3b7f      	subs	r3, #127	; 0x7f
 80110ba:	4413      	add	r3, r2
 80110bc:	4a62      	ldr	r2, [pc, #392]	; (8011248 <__ieee754_powf+0x3cc>)
 80110be:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80110c2:	4294      	cmp	r4, r2
 80110c4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80110c8:	dd06      	ble.n	80110d8 <__ieee754_powf+0x25c>
 80110ca:	4a60      	ldr	r2, [pc, #384]	; (801124c <__ieee754_powf+0x3d0>)
 80110cc:	4294      	cmp	r4, r2
 80110ce:	f340 80a5 	ble.w	801121c <__ieee754_powf+0x3a0>
 80110d2:	3301      	adds	r3, #1
 80110d4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80110d8:	2400      	movs	r4, #0
 80110da:	4a5d      	ldr	r2, [pc, #372]	; (8011250 <__ieee754_powf+0x3d4>)
 80110dc:	00a7      	lsls	r7, r4, #2
 80110de:	443a      	add	r2, r7
 80110e0:	ee07 1a90 	vmov	s15, r1
 80110e4:	ed92 7a00 	vldr	s14, [r2]
 80110e8:	4a5a      	ldr	r2, [pc, #360]	; (8011254 <__ieee754_powf+0x3d8>)
 80110ea:	ee37 6a27 	vadd.f32	s12, s14, s15
 80110ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80110f2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80110f6:	1049      	asrs	r1, r1, #1
 80110f8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80110fc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011100:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8011104:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011108:	ee06 1a10 	vmov	s12, r1
 801110c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8011110:	ee14 ca90 	vmov	ip, s9
 8011114:	ea02 0c0c 	and.w	ip, r2, ip
 8011118:	ee05 ca10 	vmov	s10, ip
 801111c:	eeb1 4a45 	vneg.f32	s8, s10
 8011120:	eee4 5a06 	vfma.f32	s11, s8, s12
 8011124:	ee36 6a47 	vsub.f32	s12, s12, s14
 8011128:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8011258 <__ieee754_powf+0x3dc>
 801112c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8011130:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8011134:	eee4 5a06 	vfma.f32	s11, s8, s12
 8011138:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801113c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8011140:	eddf 5a46 	vldr	s11, [pc, #280]	; 801125c <__ieee754_powf+0x3e0>
 8011144:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011148:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011260 <__ieee754_powf+0x3e4>
 801114c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011150:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011234 <__ieee754_powf+0x3b8>
 8011154:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011158:	eddf 5a42 	vldr	s11, [pc, #264]	; 8011264 <__ieee754_powf+0x3e8>
 801115c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011160:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8011268 <__ieee754_powf+0x3ec>
 8011164:	ee75 6a24 	vadd.f32	s13, s10, s9
 8011168:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801116c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011170:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8011174:	eef0 7a65 	vmov.f32	s15, s11
 8011178:	eee3 6a87 	vfma.f32	s13, s7, s14
 801117c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8011180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011184:	ee17 1a90 	vmov	r1, s15
 8011188:	4011      	ands	r1, r2
 801118a:	ee07 1a90 	vmov	s15, r1
 801118e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8011192:	eddf 5a36 	vldr	s11, [pc, #216]	; 801126c <__ieee754_powf+0x3f0>
 8011196:	eea4 7a05 	vfma.f32	s14, s8, s10
 801119a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801119e:	ee27 7a24 	vmul.f32	s14, s14, s9
 80111a2:	eea7 7a86 	vfma.f32	s14, s15, s12
 80111a6:	eeb0 6a47 	vmov.f32	s12, s14
 80111aa:	eea5 6a27 	vfma.f32	s12, s10, s15
 80111ae:	ee16 1a10 	vmov	r1, s12
 80111b2:	4011      	ands	r1, r2
 80111b4:	ee06 1a90 	vmov	s13, r1
 80111b8:	eee4 6a27 	vfma.f32	s13, s8, s15
 80111bc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8011270 <__ieee754_powf+0x3f4>
 80111c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80111c4:	ee06 1a10 	vmov	s12, r1
 80111c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111cc:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011274 <__ieee754_powf+0x3f8>
 80111d0:	4929      	ldr	r1, [pc, #164]	; (8011278 <__ieee754_powf+0x3fc>)
 80111d2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80111d6:	4439      	add	r1, r7
 80111d8:	edd1 7a00 	vldr	s15, [r1]
 80111dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111e0:	ee07 3a90 	vmov	s15, r3
 80111e4:	eef0 0a47 	vmov.f32	s1, s14
 80111e8:	4b24      	ldr	r3, [pc, #144]	; (801127c <__ieee754_powf+0x400>)
 80111ea:	eee6 0a25 	vfma.f32	s1, s12, s11
 80111ee:	443b      	add	r3, r7
 80111f0:	ed93 5a00 	vldr	s10, [r3]
 80111f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80111f8:	ee70 0a85 	vadd.f32	s1, s1, s10
 80111fc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8011200:	ee17 3a90 	vmov	r3, s15
 8011204:	4013      	ands	r3, r2
 8011206:	ee07 3a90 	vmov	s15, r3
 801120a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801120e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011212:	eee6 7a65 	vfms.f32	s15, s12, s11
 8011216:	ee77 7a67 	vsub.f32	s15, s14, s15
 801121a:	e70e      	b.n	801103a <__ieee754_powf+0x1be>
 801121c:	2401      	movs	r4, #1
 801121e:	e75c      	b.n	80110da <__ieee754_powf+0x25e>
 8011220:	0801196d 	.word	0x0801196d
 8011224:	00000000 	.word	0x00000000
 8011228:	3f7ffff7 	.word	0x3f7ffff7
 801122c:	7149f2ca 	.word	0x7149f2ca
 8011230:	3f800007 	.word	0x3f800007
 8011234:	3eaaaaab 	.word	0x3eaaaaab
 8011238:	36eca570 	.word	0x36eca570
 801123c:	3fb8aa3b 	.word	0x3fb8aa3b
 8011240:	3fb8aa00 	.word	0x3fb8aa00
 8011244:	4b800000 	.word	0x4b800000
 8011248:	001cc471 	.word	0x001cc471
 801124c:	005db3d6 	.word	0x005db3d6
 8011250:	080119d8 	.word	0x080119d8
 8011254:	fffff000 	.word	0xfffff000
 8011258:	3e6c3255 	.word	0x3e6c3255
 801125c:	3e53f142 	.word	0x3e53f142
 8011260:	3e8ba305 	.word	0x3e8ba305
 8011264:	3edb6db7 	.word	0x3edb6db7
 8011268:	3f19999a 	.word	0x3f19999a
 801126c:	3f763800 	.word	0x3f763800
 8011270:	3f76384f 	.word	0x3f76384f
 8011274:	369dc3a0 	.word	0x369dc3a0
 8011278:	080119e8 	.word	0x080119e8
 801127c:	080119e0 	.word	0x080119e0
 8011280:	3338aa3c 	.word	0x3338aa3c
 8011284:	f040 8092 	bne.w	80113ac <__ieee754_powf+0x530>
 8011288:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8011280 <__ieee754_powf+0x404>
 801128c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011290:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011294:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801129c:	f73f aef6 	bgt.w	801108c <__ieee754_powf+0x210>
 80112a0:	15db      	asrs	r3, r3, #23
 80112a2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80112a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80112aa:	4103      	asrs	r3, r0
 80112ac:	4423      	add	r3, r4
 80112ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80112b2:	4947      	ldr	r1, [pc, #284]	; (80113d0 <__ieee754_powf+0x554>)
 80112b4:	3a7f      	subs	r2, #127	; 0x7f
 80112b6:	4111      	asrs	r1, r2
 80112b8:	ea23 0101 	bic.w	r1, r3, r1
 80112bc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80112c0:	ee07 1a10 	vmov	s14, r1
 80112c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80112c8:	f1c2 0217 	rsb	r2, r2, #23
 80112cc:	4110      	asrs	r0, r2
 80112ce:	2c00      	cmp	r4, #0
 80112d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112d4:	bfb8      	it	lt
 80112d6:	4240      	neglt	r0, r0
 80112d8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80112dc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80113d4 <__ieee754_powf+0x558>
 80112e0:	ee17 3a10 	vmov	r3, s14
 80112e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80112e8:	f023 030f 	bic.w	r3, r3, #15
 80112ec:	ee07 3a10 	vmov	s14, r3
 80112f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112f4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80112f8:	eddf 7a37 	vldr	s15, [pc, #220]	; 80113d8 <__ieee754_powf+0x55c>
 80112fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011300:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8011304:	eddf 6a35 	vldr	s13, [pc, #212]	; 80113dc <__ieee754_powf+0x560>
 8011308:	eeb0 0a67 	vmov.f32	s0, s15
 801130c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8011310:	eeb0 6a40 	vmov.f32	s12, s0
 8011314:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011318:	ee20 7a00 	vmul.f32	s14, s0, s0
 801131c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011320:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80113e0 <__ieee754_powf+0x564>
 8011324:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80113e4 <__ieee754_powf+0x568>
 8011328:	eea7 6a26 	vfma.f32	s12, s14, s13
 801132c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80113e8 <__ieee754_powf+0x56c>
 8011330:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011334:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80113ec <__ieee754_powf+0x570>
 8011338:	eea6 6a87 	vfma.f32	s12, s13, s14
 801133c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80113f0 <__ieee754_powf+0x574>
 8011340:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011344:	eeb0 6a40 	vmov.f32	s12, s0
 8011348:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801134c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011350:	eeb0 7a46 	vmov.f32	s14, s12
 8011354:	ee77 6a66 	vsub.f32	s13, s14, s13
 8011358:	ee20 6a06 	vmul.f32	s12, s0, s12
 801135c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8011360:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011368:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801136c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011370:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011374:	ee10 3a10 	vmov	r3, s0
 8011378:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801137c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011380:	da1a      	bge.n	80113b8 <__ieee754_powf+0x53c>
 8011382:	f000 f9c5 	bl	8011710 <scalbnf>
 8011386:	ee20 0a08 	vmul.f32	s0, s0, s16
 801138a:	e5c9      	b.n	8010f20 <__ieee754_powf+0xa4>
 801138c:	4a19      	ldr	r2, [pc, #100]	; (80113f4 <__ieee754_powf+0x578>)
 801138e:	4293      	cmp	r3, r2
 8011390:	dd02      	ble.n	8011398 <__ieee754_powf+0x51c>
 8011392:	eddf 7a19 	vldr	s15, [pc, #100]	; 80113f8 <__ieee754_powf+0x57c>
 8011396:	e67b      	b.n	8011090 <__ieee754_powf+0x214>
 8011398:	d108      	bne.n	80113ac <__ieee754_powf+0x530>
 801139a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801139e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80113a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a6:	f6ff af7b 	blt.w	80112a0 <__ieee754_powf+0x424>
 80113aa:	e7f2      	b.n	8011392 <__ieee754_powf+0x516>
 80113ac:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80113b0:	f73f af76 	bgt.w	80112a0 <__ieee754_powf+0x424>
 80113b4:	2000      	movs	r0, #0
 80113b6:	e78f      	b.n	80112d8 <__ieee754_powf+0x45c>
 80113b8:	ee00 3a10 	vmov	s0, r3
 80113bc:	e7e3      	b.n	8011386 <__ieee754_powf+0x50a>
 80113be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80113c2:	e5ad      	b.n	8010f20 <__ieee754_powf+0xa4>
 80113c4:	eeb0 0a68 	vmov.f32	s0, s17
 80113c8:	e5aa      	b.n	8010f20 <__ieee754_powf+0xa4>
 80113ca:	eeb0 0a48 	vmov.f32	s0, s16
 80113ce:	e5a7      	b.n	8010f20 <__ieee754_powf+0xa4>
 80113d0:	007fffff 	.word	0x007fffff
 80113d4:	3f317218 	.word	0x3f317218
 80113d8:	35bfbe8c 	.word	0x35bfbe8c
 80113dc:	3f317200 	.word	0x3f317200
 80113e0:	3331bb4c 	.word	0x3331bb4c
 80113e4:	b5ddea0e 	.word	0xb5ddea0e
 80113e8:	388ab355 	.word	0x388ab355
 80113ec:	bb360b61 	.word	0xbb360b61
 80113f0:	3e2aaaab 	.word	0x3e2aaaab
 80113f4:	43160000 	.word	0x43160000
 80113f8:	0da24260 	.word	0x0da24260

080113fc <__ieee754_sqrtf>:
 80113fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011400:	4770      	bx	lr

08011402 <fabs>:
 8011402:	ec51 0b10 	vmov	r0, r1, d0
 8011406:	ee10 2a10 	vmov	r2, s0
 801140a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801140e:	ec43 2b10 	vmov	d0, r2, r3
 8011412:	4770      	bx	lr

08011414 <finite>:
 8011414:	ee10 3a90 	vmov	r3, s1
 8011418:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801141c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011420:	0fc0      	lsrs	r0, r0, #31
 8011422:	4770      	bx	lr

08011424 <matherr>:
 8011424:	2000      	movs	r0, #0
 8011426:	4770      	bx	lr

08011428 <nan>:
 8011428:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011430 <nan+0x8>
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	00000000 	.word	0x00000000
 8011434:	7ff80000 	.word	0x7ff80000

08011438 <rint>:
 8011438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801143a:	ec51 0b10 	vmov	r0, r1, d0
 801143e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011442:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011446:	2e13      	cmp	r6, #19
 8011448:	460b      	mov	r3, r1
 801144a:	ee10 4a10 	vmov	r4, s0
 801144e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011452:	dc56      	bgt.n	8011502 <rint+0xca>
 8011454:	2e00      	cmp	r6, #0
 8011456:	da2b      	bge.n	80114b0 <rint+0x78>
 8011458:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801145c:	4302      	orrs	r2, r0
 801145e:	d023      	beq.n	80114a8 <rint+0x70>
 8011460:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011464:	4302      	orrs	r2, r0
 8011466:	4254      	negs	r4, r2
 8011468:	4314      	orrs	r4, r2
 801146a:	0c4b      	lsrs	r3, r1, #17
 801146c:	0b24      	lsrs	r4, r4, #12
 801146e:	045b      	lsls	r3, r3, #17
 8011470:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011474:	ea44 0103 	orr.w	r1, r4, r3
 8011478:	460b      	mov	r3, r1
 801147a:	492f      	ldr	r1, [pc, #188]	; (8011538 <rint+0x100>)
 801147c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011480:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011484:	4602      	mov	r2, r0
 8011486:	4639      	mov	r1, r7
 8011488:	4630      	mov	r0, r6
 801148a:	f7ee ff0f 	bl	80002ac <__adddf3>
 801148e:	e9cd 0100 	strd	r0, r1, [sp]
 8011492:	463b      	mov	r3, r7
 8011494:	4632      	mov	r2, r6
 8011496:	e9dd 0100 	ldrd	r0, r1, [sp]
 801149a:	f7ee ff05 	bl	80002a8 <__aeabi_dsub>
 801149e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80114a6:	4639      	mov	r1, r7
 80114a8:	ec41 0b10 	vmov	d0, r0, r1
 80114ac:	b003      	add	sp, #12
 80114ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114b0:	4a22      	ldr	r2, [pc, #136]	; (801153c <rint+0x104>)
 80114b2:	4132      	asrs	r2, r6
 80114b4:	ea01 0702 	and.w	r7, r1, r2
 80114b8:	4307      	orrs	r7, r0
 80114ba:	d0f5      	beq.n	80114a8 <rint+0x70>
 80114bc:	0852      	lsrs	r2, r2, #1
 80114be:	4011      	ands	r1, r2
 80114c0:	430c      	orrs	r4, r1
 80114c2:	d00b      	beq.n	80114dc <rint+0xa4>
 80114c4:	ea23 0202 	bic.w	r2, r3, r2
 80114c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80114cc:	2e13      	cmp	r6, #19
 80114ce:	fa43 f306 	asr.w	r3, r3, r6
 80114d2:	bf0c      	ite	eq
 80114d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80114d8:	2400      	movne	r4, #0
 80114da:	4313      	orrs	r3, r2
 80114dc:	4916      	ldr	r1, [pc, #88]	; (8011538 <rint+0x100>)
 80114de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80114e2:	4622      	mov	r2, r4
 80114e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80114e8:	4620      	mov	r0, r4
 80114ea:	4629      	mov	r1, r5
 80114ec:	f7ee fede 	bl	80002ac <__adddf3>
 80114f0:	e9cd 0100 	strd	r0, r1, [sp]
 80114f4:	4622      	mov	r2, r4
 80114f6:	462b      	mov	r3, r5
 80114f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114fc:	f7ee fed4 	bl	80002a8 <__aeabi_dsub>
 8011500:	e7d2      	b.n	80114a8 <rint+0x70>
 8011502:	2e33      	cmp	r6, #51	; 0x33
 8011504:	dd07      	ble.n	8011516 <rint+0xde>
 8011506:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801150a:	d1cd      	bne.n	80114a8 <rint+0x70>
 801150c:	ee10 2a10 	vmov	r2, s0
 8011510:	f7ee fecc 	bl	80002ac <__adddf3>
 8011514:	e7c8      	b.n	80114a8 <rint+0x70>
 8011516:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801151a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801151e:	40f2      	lsrs	r2, r6
 8011520:	4210      	tst	r0, r2
 8011522:	d0c1      	beq.n	80114a8 <rint+0x70>
 8011524:	0852      	lsrs	r2, r2, #1
 8011526:	4210      	tst	r0, r2
 8011528:	bf1f      	itttt	ne
 801152a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801152e:	ea20 0202 	bicne.w	r2, r0, r2
 8011532:	4134      	asrne	r4, r6
 8011534:	4314      	orrne	r4, r2
 8011536:	e7d1      	b.n	80114dc <rint+0xa4>
 8011538:	080119f0 	.word	0x080119f0
 801153c:	000fffff 	.word	0x000fffff

08011540 <scalbn>:
 8011540:	b570      	push	{r4, r5, r6, lr}
 8011542:	ec55 4b10 	vmov	r4, r5, d0
 8011546:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801154a:	4606      	mov	r6, r0
 801154c:	462b      	mov	r3, r5
 801154e:	b9aa      	cbnz	r2, 801157c <scalbn+0x3c>
 8011550:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011554:	4323      	orrs	r3, r4
 8011556:	d03b      	beq.n	80115d0 <scalbn+0x90>
 8011558:	4b31      	ldr	r3, [pc, #196]	; (8011620 <scalbn+0xe0>)
 801155a:	4629      	mov	r1, r5
 801155c:	2200      	movs	r2, #0
 801155e:	ee10 0a10 	vmov	r0, s0
 8011562:	f7ef f859 	bl	8000618 <__aeabi_dmul>
 8011566:	4b2f      	ldr	r3, [pc, #188]	; (8011624 <scalbn+0xe4>)
 8011568:	429e      	cmp	r6, r3
 801156a:	4604      	mov	r4, r0
 801156c:	460d      	mov	r5, r1
 801156e:	da12      	bge.n	8011596 <scalbn+0x56>
 8011570:	a327      	add	r3, pc, #156	; (adr r3, 8011610 <scalbn+0xd0>)
 8011572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011576:	f7ef f84f 	bl	8000618 <__aeabi_dmul>
 801157a:	e009      	b.n	8011590 <scalbn+0x50>
 801157c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011580:	428a      	cmp	r2, r1
 8011582:	d10c      	bne.n	801159e <scalbn+0x5e>
 8011584:	ee10 2a10 	vmov	r2, s0
 8011588:	4620      	mov	r0, r4
 801158a:	4629      	mov	r1, r5
 801158c:	f7ee fe8e 	bl	80002ac <__adddf3>
 8011590:	4604      	mov	r4, r0
 8011592:	460d      	mov	r5, r1
 8011594:	e01c      	b.n	80115d0 <scalbn+0x90>
 8011596:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801159a:	460b      	mov	r3, r1
 801159c:	3a36      	subs	r2, #54	; 0x36
 801159e:	4432      	add	r2, r6
 80115a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80115a4:	428a      	cmp	r2, r1
 80115a6:	dd0b      	ble.n	80115c0 <scalbn+0x80>
 80115a8:	ec45 4b11 	vmov	d1, r4, r5
 80115ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011618 <scalbn+0xd8>
 80115b0:	f000 f90e 	bl	80117d0 <copysign>
 80115b4:	a318      	add	r3, pc, #96	; (adr r3, 8011618 <scalbn+0xd8>)
 80115b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ba:	ec51 0b10 	vmov	r0, r1, d0
 80115be:	e7da      	b.n	8011576 <scalbn+0x36>
 80115c0:	2a00      	cmp	r2, #0
 80115c2:	dd08      	ble.n	80115d6 <scalbn+0x96>
 80115c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80115c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80115cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80115d0:	ec45 4b10 	vmov	d0, r4, r5
 80115d4:	bd70      	pop	{r4, r5, r6, pc}
 80115d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80115da:	da0d      	bge.n	80115f8 <scalbn+0xb8>
 80115dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80115e0:	429e      	cmp	r6, r3
 80115e2:	ec45 4b11 	vmov	d1, r4, r5
 80115e6:	dce1      	bgt.n	80115ac <scalbn+0x6c>
 80115e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011610 <scalbn+0xd0>
 80115ec:	f000 f8f0 	bl	80117d0 <copysign>
 80115f0:	a307      	add	r3, pc, #28	; (adr r3, 8011610 <scalbn+0xd0>)
 80115f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f6:	e7e0      	b.n	80115ba <scalbn+0x7a>
 80115f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80115fc:	3236      	adds	r2, #54	; 0x36
 80115fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011602:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011606:	4620      	mov	r0, r4
 8011608:	4629      	mov	r1, r5
 801160a:	2200      	movs	r2, #0
 801160c:	4b06      	ldr	r3, [pc, #24]	; (8011628 <scalbn+0xe8>)
 801160e:	e7b2      	b.n	8011576 <scalbn+0x36>
 8011610:	c2f8f359 	.word	0xc2f8f359
 8011614:	01a56e1f 	.word	0x01a56e1f
 8011618:	8800759c 	.word	0x8800759c
 801161c:	7e37e43c 	.word	0x7e37e43c
 8011620:	43500000 	.word	0x43500000
 8011624:	ffff3cb0 	.word	0xffff3cb0
 8011628:	3c900000 	.word	0x3c900000

0801162c <fabsf>:
 801162c:	ee10 3a10 	vmov	r3, s0
 8011630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011634:	ee00 3a10 	vmov	s0, r3
 8011638:	4770      	bx	lr

0801163a <finitef>:
 801163a:	ee10 3a10 	vmov	r3, s0
 801163e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8011642:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011646:	bfac      	ite	ge
 8011648:	2000      	movge	r0, #0
 801164a:	2001      	movlt	r0, #1
 801164c:	4770      	bx	lr
	...

08011650 <nanf>:
 8011650:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011658 <nanf+0x8>
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	7fc00000 	.word	0x7fc00000

0801165c <rintf>:
 801165c:	b513      	push	{r0, r1, r4, lr}
 801165e:	ee10 1a10 	vmov	r1, s0
 8011662:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011666:	0ddc      	lsrs	r4, r3, #23
 8011668:	3c7f      	subs	r4, #127	; 0x7f
 801166a:	2c16      	cmp	r4, #22
 801166c:	dc46      	bgt.n	80116fc <rintf+0xa0>
 801166e:	b32b      	cbz	r3, 80116bc <rintf+0x60>
 8011670:	2c00      	cmp	r4, #0
 8011672:	ee10 2a10 	vmov	r2, s0
 8011676:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801167a:	da21      	bge.n	80116c0 <rintf+0x64>
 801167c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8011680:	425b      	negs	r3, r3
 8011682:	4a21      	ldr	r2, [pc, #132]	; (8011708 <rintf+0xac>)
 8011684:	0a5b      	lsrs	r3, r3, #9
 8011686:	0d09      	lsrs	r1, r1, #20
 8011688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801168c:	0509      	lsls	r1, r1, #20
 801168e:	430b      	orrs	r3, r1
 8011690:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8011694:	ee07 3a90 	vmov	s15, r3
 8011698:	edd2 6a00 	vldr	s13, [r2]
 801169c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80116a0:	ed8d 7a01 	vstr	s14, [sp, #4]
 80116a4:	eddd 7a01 	vldr	s15, [sp, #4]
 80116a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80116ac:	ee17 3a90 	vmov	r3, s15
 80116b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80116b4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80116b8:	ee00 3a10 	vmov	s0, r3
 80116bc:	b002      	add	sp, #8
 80116be:	bd10      	pop	{r4, pc}
 80116c0:	4b12      	ldr	r3, [pc, #72]	; (801170c <rintf+0xb0>)
 80116c2:	4123      	asrs	r3, r4
 80116c4:	4219      	tst	r1, r3
 80116c6:	d0f9      	beq.n	80116bc <rintf+0x60>
 80116c8:	085b      	lsrs	r3, r3, #1
 80116ca:	4219      	tst	r1, r3
 80116cc:	d006      	beq.n	80116dc <rintf+0x80>
 80116ce:	ea21 0203 	bic.w	r2, r1, r3
 80116d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80116d6:	fa43 f404 	asr.w	r4, r3, r4
 80116da:	4322      	orrs	r2, r4
 80116dc:	4b0a      	ldr	r3, [pc, #40]	; (8011708 <rintf+0xac>)
 80116de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80116e2:	ed90 7a00 	vldr	s14, [r0]
 80116e6:	ee07 2a90 	vmov	s15, r2
 80116ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116ee:	edcd 7a01 	vstr	s15, [sp, #4]
 80116f2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80116f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80116fa:	e7df      	b.n	80116bc <rintf+0x60>
 80116fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011700:	d3dc      	bcc.n	80116bc <rintf+0x60>
 8011702:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011706:	e7d9      	b.n	80116bc <rintf+0x60>
 8011708:	08011a00 	.word	0x08011a00
 801170c:	007fffff 	.word	0x007fffff

08011710 <scalbnf>:
 8011710:	b508      	push	{r3, lr}
 8011712:	ee10 2a10 	vmov	r2, s0
 8011716:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801171a:	ed2d 8b02 	vpush	{d8}
 801171e:	eef0 0a40 	vmov.f32	s1, s0
 8011722:	d004      	beq.n	801172e <scalbnf+0x1e>
 8011724:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011728:	d306      	bcc.n	8011738 <scalbnf+0x28>
 801172a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801172e:	ecbd 8b02 	vpop	{d8}
 8011732:	eeb0 0a60 	vmov.f32	s0, s1
 8011736:	bd08      	pop	{r3, pc}
 8011738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801173c:	d21c      	bcs.n	8011778 <scalbnf+0x68>
 801173e:	4b1f      	ldr	r3, [pc, #124]	; (80117bc <scalbnf+0xac>)
 8011740:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80117c0 <scalbnf+0xb0>
 8011744:	4298      	cmp	r0, r3
 8011746:	ee60 0a27 	vmul.f32	s1, s0, s15
 801174a:	db10      	blt.n	801176e <scalbnf+0x5e>
 801174c:	ee10 2a90 	vmov	r2, s1
 8011750:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8011754:	3b19      	subs	r3, #25
 8011756:	4403      	add	r3, r0
 8011758:	2bfe      	cmp	r3, #254	; 0xfe
 801175a:	dd0f      	ble.n	801177c <scalbnf+0x6c>
 801175c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80117c4 <scalbnf+0xb4>
 8011760:	eeb0 0a48 	vmov.f32	s0, s16
 8011764:	f000 f843 	bl	80117ee <copysignf>
 8011768:	ee60 0a08 	vmul.f32	s1, s0, s16
 801176c:	e7df      	b.n	801172e <scalbnf+0x1e>
 801176e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80117c8 <scalbnf+0xb8>
 8011772:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011776:	e7da      	b.n	801172e <scalbnf+0x1e>
 8011778:	0ddb      	lsrs	r3, r3, #23
 801177a:	e7ec      	b.n	8011756 <scalbnf+0x46>
 801177c:	2b00      	cmp	r3, #0
 801177e:	dd06      	ble.n	801178e <scalbnf+0x7e>
 8011780:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8011784:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8011788:	ee00 3a90 	vmov	s1, r3
 801178c:	e7cf      	b.n	801172e <scalbnf+0x1e>
 801178e:	f113 0f16 	cmn.w	r3, #22
 8011792:	da06      	bge.n	80117a2 <scalbnf+0x92>
 8011794:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011798:	4298      	cmp	r0, r3
 801179a:	dcdf      	bgt.n	801175c <scalbnf+0x4c>
 801179c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80117c8 <scalbnf+0xb8>
 80117a0:	e7de      	b.n	8011760 <scalbnf+0x50>
 80117a2:	3319      	adds	r3, #25
 80117a4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80117a8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80117ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 80117cc <scalbnf+0xbc>
 80117b0:	ee07 3a10 	vmov	s14, r3
 80117b4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80117b8:	e7b9      	b.n	801172e <scalbnf+0x1e>
 80117ba:	bf00      	nop
 80117bc:	ffff3cb0 	.word	0xffff3cb0
 80117c0:	4c000000 	.word	0x4c000000
 80117c4:	7149f2ca 	.word	0x7149f2ca
 80117c8:	0da24260 	.word	0x0da24260
 80117cc:	33000000 	.word	0x33000000

080117d0 <copysign>:
 80117d0:	ec51 0b10 	vmov	r0, r1, d0
 80117d4:	ee11 0a90 	vmov	r0, s3
 80117d8:	ee10 2a10 	vmov	r2, s0
 80117dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80117e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80117e4:	ea41 0300 	orr.w	r3, r1, r0
 80117e8:	ec43 2b10 	vmov	d0, r2, r3
 80117ec:	4770      	bx	lr

080117ee <copysignf>:
 80117ee:	ee10 3a10 	vmov	r3, s0
 80117f2:	ee10 2a90 	vmov	r2, s1
 80117f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80117fe:	4313      	orrs	r3, r2
 8011800:	ee00 3a10 	vmov	s0, r3
 8011804:	4770      	bx	lr
	...

08011808 <_init>:
 8011808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801180a:	bf00      	nop
 801180c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801180e:	bc08      	pop	{r3}
 8011810:	469e      	mov	lr, r3
 8011812:	4770      	bx	lr

08011814 <_fini>:
 8011814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011816:	bf00      	nop
 8011818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801181a:	bc08      	pop	{r3}
 801181c:	469e      	mov	lr, r3
 801181e:	4770      	bx	lr
